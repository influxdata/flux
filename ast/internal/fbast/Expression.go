// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbast

type Expression = byte

const (
	ExpressionNONE                   Expression = 0
	ExpressionStringExpression       Expression = 1
	ExpressionParenExpression        Expression = 2
	ExpressionArrayExpression        Expression = 3
	ExpressionFunctionExpression     Expression = 4
	ExpressionBinaryExpression       Expression = 5
	ExpressionBooleanLiteral         Expression = 6
	ExpressionCallExpression         Expression = 7
	ExpressionConditionalExpression  Expression = 8
	ExpressionDateTimeLiteral        Expression = 9
	ExpressionDurationLiteral        Expression = 10
	ExpressionFloatLiteral           Expression = 11
	ExpressionIdentifier             Expression = 12
	ExpressionIntegerLiteral         Expression = 13
	ExpressionLogicalExpression      Expression = 14
	ExpressionMemberExpression       Expression = 15
	ExpressionIndexExpression        Expression = 16
	ExpressionObjectExpression       Expression = 17
	ExpressionPipeExpression         Expression = 18
	ExpressionPipeLiteral            Expression = 19
	ExpressionRegexpLiteral          Expression = 20
	ExpressionStringLiteral          Expression = 21
	ExpressionUnaryExpression        Expression = 22
	ExpressionUnsignedIntegerLiteral Expression = 23
	ExpressionBadExpression          Expression = 24
)

var EnumNamesExpression = map[Expression]string{
	ExpressionNONE:                   "NONE",
	ExpressionStringExpression:       "StringExpression",
	ExpressionParenExpression:        "ParenExpression",
	ExpressionArrayExpression:        "ArrayExpression",
	ExpressionFunctionExpression:     "FunctionExpression",
	ExpressionBinaryExpression:       "BinaryExpression",
	ExpressionBooleanLiteral:         "BooleanLiteral",
	ExpressionCallExpression:         "CallExpression",
	ExpressionConditionalExpression:  "ConditionalExpression",
	ExpressionDateTimeLiteral:        "DateTimeLiteral",
	ExpressionDurationLiteral:        "DurationLiteral",
	ExpressionFloatLiteral:           "FloatLiteral",
	ExpressionIdentifier:             "Identifier",
	ExpressionIntegerLiteral:         "IntegerLiteral",
	ExpressionLogicalExpression:      "LogicalExpression",
	ExpressionMemberExpression:       "MemberExpression",
	ExpressionIndexExpression:        "IndexExpression",
	ExpressionObjectExpression:       "ObjectExpression",
	ExpressionPipeExpression:         "PipeExpression",
	ExpressionPipeLiteral:            "PipeLiteral",
	ExpressionRegexpLiteral:          "RegexpLiteral",
	ExpressionStringLiteral:          "StringLiteral",
	ExpressionUnaryExpression:        "UnaryExpression",
	ExpressionUnsignedIntegerLiteral: "UnsignedIntegerLiteral",
	ExpressionBadExpression:          "BadExpression",
}
