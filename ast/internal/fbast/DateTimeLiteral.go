// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbast

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DateTimeLiteral struct {
	_tab flatbuffers.Table
}

func GetRootAsDateTimeLiteral(buf []byte, offset flatbuffers.UOffsetT) *DateTimeLiteral {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DateTimeLiteral{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *DateTimeLiteral) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DateTimeLiteral) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DateTimeLiteral) BaseNode(obj *BaseNode) *BaseNode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(BaseNode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DateTimeLiteral) Secs() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DateTimeLiteral) MutateSecs(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *DateTimeLiteral) Nsecs() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DateTimeLiteral) MutateNsecs(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *DateTimeLiteral) Offset() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DateTimeLiteral) MutateOffset(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func DateTimeLiteralStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func DateTimeLiteralAddBaseNode(builder *flatbuffers.Builder, baseNode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(baseNode), 0)
}
func DateTimeLiteralAddSecs(builder *flatbuffers.Builder, secs int64) {
	builder.PrependInt64Slot(1, secs, 0)
}
func DateTimeLiteralAddNsecs(builder *flatbuffers.Builder, nsecs uint32) {
	builder.PrependUint32Slot(2, nsecs, 0)
}
func DateTimeLiteralAddOffset(builder *flatbuffers.Builder, offset int32) {
	builder.PrependInt32Slot(3, offset, 0)
}
func DateTimeLiteralEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
