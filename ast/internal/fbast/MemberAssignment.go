// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbast

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MemberAssignment struct {
	_tab flatbuffers.Table
}

func GetRootAsMemberAssignment(buf []byte, offset flatbuffers.UOffsetT) *MemberAssignment {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MemberAssignment{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MemberAssignment) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MemberAssignment) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MemberAssignment) BaseNode(obj *BaseNode) *BaseNode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(BaseNode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MemberAssignment) Member(obj *MemberExpression) *MemberExpression {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MemberExpression)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MemberAssignment) Init_type() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MemberAssignment) MutateInit_type(n byte) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *MemberAssignment) Init_(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func MemberAssignmentStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func MemberAssignmentAddBaseNode(builder *flatbuffers.Builder, baseNode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(baseNode), 0)
}
func MemberAssignmentAddMember(builder *flatbuffers.Builder, member flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(member), 0)
}
func MemberAssignmentAddInit_type(builder *flatbuffers.Builder, init_type byte) {
	builder.PrependByteSlot(2, init_type, 0)
}
func MemberAssignmentAddInit_(builder *flatbuffers.Builder, init_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(init_), 0)
}
func MemberAssignmentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
