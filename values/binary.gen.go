// Generated by tmpl
// https://github.com/benbjohnson/tmpl
//
// DO NOT EDIT!
// Source: binary.gen.go.tmpl

package values

import (
	"github.com/apache/arrow/go/v7/arrow/memory"
	fluxarray "github.com/influxdata/flux/array"
	"github.com/influxdata/flux/codes"
	"github.com/influxdata/flux/internal/errors"
	"github.com/influxdata/flux/semantic"
)

func vectorAdd(l, r Vector, mem memory.Allocator) (Value, error) {
	var lvr, rvr *Value
	if vr, ok := l.(*VectorRepeatValue); ok {
		lvr = &vr.val
	}
	if vr, ok := r.(*VectorRepeatValue); ok {
		rvr = &vr.val
	}

	if lvr != nil && rvr != nil {
		// XXX: we can handle this case here if we are willing to plumb the
		// OperatorKind through here so we can do the lookup for the row-based version of this op.
		panic("got 2 VectorRepeatValue; 'const folding' should be done earlier, in the function lookup")
	}

	switch l.ElementType().Nature() {

	case semantic.Int:

		var (
			x *fluxarray.Int

			err error
		)
		if lvr != nil {
			x, err = fluxarray.IntAddLConst((*lvr).Int(), r.Arr().(*fluxarray.Int), mem)
		} else if rvr != nil {
			x, err = fluxarray.IntAddRConst(l.Arr().(*fluxarray.Int), (*rvr).Int(), mem)
		} else {
			x, err = fluxarray.IntAdd(l.Arr().(*fluxarray.Int), r.Arr().(*fluxarray.Int), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicInt), nil

	case semantic.UInt:

		var (
			x *fluxarray.Uint

			err error
		)
		if lvr != nil {
			x, err = fluxarray.UintAddLConst((*lvr).UInt(), r.Arr().(*fluxarray.Uint), mem)
		} else if rvr != nil {
			x, err = fluxarray.UintAddRConst(l.Arr().(*fluxarray.Uint), (*rvr).UInt(), mem)
		} else {
			x, err = fluxarray.UintAdd(l.Arr().(*fluxarray.Uint), r.Arr().(*fluxarray.Uint), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicUint), nil

	case semantic.Float:

		var (
			x *fluxarray.Float

			err error
		)
		if lvr != nil {
			x, err = fluxarray.FloatAddLConst((*lvr).Float(), r.Arr().(*fluxarray.Float), mem)
		} else if rvr != nil {
			x, err = fluxarray.FloatAddRConst(l.Arr().(*fluxarray.Float), (*rvr).Float(), mem)
		} else {
			x, err = fluxarray.FloatAdd(l.Arr().(*fluxarray.Float), r.Arr().(*fluxarray.Float), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicFloat), nil

	case semantic.String:

		var (
			x *fluxarray.String

			err error
		)
		if lvr != nil {
			x, err = fluxarray.StringAddLConst((*lvr).Str(), r.Arr().(*fluxarray.String), mem)
		} else if rvr != nil {
			x, err = fluxarray.StringAddRConst(l.Arr().(*fluxarray.String), (*rvr).Str(), mem)
		} else {
			x, err = fluxarray.StringAdd(l.Arr().(*fluxarray.String), r.Arr().(*fluxarray.String), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicString), nil

	default:
		return nil, errors.Newf(codes.Invalid, "unsupported type for vector Add: %v", l.ElementType())
	}
}

func vectorSub(l, r Vector, mem memory.Allocator) (Value, error) {
	var lvr, rvr *Value
	if vr, ok := l.(*VectorRepeatValue); ok {
		lvr = &vr.val
	}
	if vr, ok := r.(*VectorRepeatValue); ok {
		rvr = &vr.val
	}

	if lvr != nil && rvr != nil {
		// XXX: we can handle this case here if we are willing to plumb the
		// OperatorKind through here so we can do the lookup for the row-based version of this op.
		panic("got 2 VectorRepeatValue; 'const folding' should be done earlier, in the function lookup")
	}

	switch l.ElementType().Nature() {

	case semantic.Int:

		var (
			x *fluxarray.Int

			err error
		)
		if lvr != nil {
			x, err = fluxarray.IntSubLConst((*lvr).Int(), r.Arr().(*fluxarray.Int), mem)
		} else if rvr != nil {
			x, err = fluxarray.IntSubRConst(l.Arr().(*fluxarray.Int), (*rvr).Int(), mem)
		} else {
			x, err = fluxarray.IntSub(l.Arr().(*fluxarray.Int), r.Arr().(*fluxarray.Int), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicInt), nil

	case semantic.UInt:

		var (
			x *fluxarray.Uint

			err error
		)
		if lvr != nil {
			x, err = fluxarray.UintSubLConst((*lvr).UInt(), r.Arr().(*fluxarray.Uint), mem)
		} else if rvr != nil {
			x, err = fluxarray.UintSubRConst(l.Arr().(*fluxarray.Uint), (*rvr).UInt(), mem)
		} else {
			x, err = fluxarray.UintSub(l.Arr().(*fluxarray.Uint), r.Arr().(*fluxarray.Uint), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicUint), nil

	case semantic.Float:

		var (
			x *fluxarray.Float

			err error
		)
		if lvr != nil {
			x, err = fluxarray.FloatSubLConst((*lvr).Float(), r.Arr().(*fluxarray.Float), mem)
		} else if rvr != nil {
			x, err = fluxarray.FloatSubRConst(l.Arr().(*fluxarray.Float), (*rvr).Float(), mem)
		} else {
			x, err = fluxarray.FloatSub(l.Arr().(*fluxarray.Float), r.Arr().(*fluxarray.Float), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicFloat), nil

	default:
		return nil, errors.Newf(codes.Invalid, "unsupported type for vector Sub: %v", l.ElementType())
	}
}

func vectorMul(l, r Vector, mem memory.Allocator) (Value, error) {
	var lvr, rvr *Value
	if vr, ok := l.(*VectorRepeatValue); ok {
		lvr = &vr.val
	}
	if vr, ok := r.(*VectorRepeatValue); ok {
		rvr = &vr.val
	}

	if lvr != nil && rvr != nil {
		// XXX: we can handle this case here if we are willing to plumb the
		// OperatorKind through here so we can do the lookup for the row-based version of this op.
		panic("got 2 VectorRepeatValue; 'const folding' should be done earlier, in the function lookup")
	}

	switch l.ElementType().Nature() {

	case semantic.Int:

		var (
			x *fluxarray.Int

			err error
		)
		if lvr != nil {
			x, err = fluxarray.IntMulLConst((*lvr).Int(), r.Arr().(*fluxarray.Int), mem)
		} else if rvr != nil {
			x, err = fluxarray.IntMulRConst(l.Arr().(*fluxarray.Int), (*rvr).Int(), mem)
		} else {
			x, err = fluxarray.IntMul(l.Arr().(*fluxarray.Int), r.Arr().(*fluxarray.Int), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicInt), nil

	case semantic.UInt:

		var (
			x *fluxarray.Uint

			err error
		)
		if lvr != nil {
			x, err = fluxarray.UintMulLConst((*lvr).UInt(), r.Arr().(*fluxarray.Uint), mem)
		} else if rvr != nil {
			x, err = fluxarray.UintMulRConst(l.Arr().(*fluxarray.Uint), (*rvr).UInt(), mem)
		} else {
			x, err = fluxarray.UintMul(l.Arr().(*fluxarray.Uint), r.Arr().(*fluxarray.Uint), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicUint), nil

	case semantic.Float:

		var (
			x *fluxarray.Float

			err error
		)
		if lvr != nil {
			x, err = fluxarray.FloatMulLConst((*lvr).Float(), r.Arr().(*fluxarray.Float), mem)
		} else if rvr != nil {
			x, err = fluxarray.FloatMulRConst(l.Arr().(*fluxarray.Float), (*rvr).Float(), mem)
		} else {
			x, err = fluxarray.FloatMul(l.Arr().(*fluxarray.Float), r.Arr().(*fluxarray.Float), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicFloat), nil

	default:
		return nil, errors.Newf(codes.Invalid, "unsupported type for vector Mul: %v", l.ElementType())
	}
}

func vectorDiv(l, r Vector, mem memory.Allocator) (Value, error) {
	var lvr, rvr *Value
	if vr, ok := l.(*VectorRepeatValue); ok {
		lvr = &vr.val
	}
	if vr, ok := r.(*VectorRepeatValue); ok {
		rvr = &vr.val
	}

	if lvr != nil && rvr != nil {
		// XXX: we can handle this case here if we are willing to plumb the
		// OperatorKind through here so we can do the lookup for the row-based version of this op.
		panic("got 2 VectorRepeatValue; 'const folding' should be done earlier, in the function lookup")
	}

	switch l.ElementType().Nature() {

	case semantic.Int:

		var (
			x *fluxarray.Int

			err error
		)
		if lvr != nil {
			x, err = fluxarray.IntDivLConst((*lvr).Int(), r.Arr().(*fluxarray.Int), mem)
		} else if rvr != nil {
			x, err = fluxarray.IntDivRConst(l.Arr().(*fluxarray.Int), (*rvr).Int(), mem)
		} else {
			x, err = fluxarray.IntDiv(l.Arr().(*fluxarray.Int), r.Arr().(*fluxarray.Int), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicInt), nil

	case semantic.UInt:

		var (
			x *fluxarray.Uint

			err error
		)
		if lvr != nil {
			x, err = fluxarray.UintDivLConst((*lvr).UInt(), r.Arr().(*fluxarray.Uint), mem)
		} else if rvr != nil {
			x, err = fluxarray.UintDivRConst(l.Arr().(*fluxarray.Uint), (*rvr).UInt(), mem)
		} else {
			x, err = fluxarray.UintDiv(l.Arr().(*fluxarray.Uint), r.Arr().(*fluxarray.Uint), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicUint), nil

	case semantic.Float:

		var (
			x *fluxarray.Float

			err error
		)
		if lvr != nil {
			x, err = fluxarray.FloatDivLConst((*lvr).Float(), r.Arr().(*fluxarray.Float), mem)
		} else if rvr != nil {
			x, err = fluxarray.FloatDivRConst(l.Arr().(*fluxarray.Float), (*rvr).Float(), mem)
		} else {
			x, err = fluxarray.FloatDiv(l.Arr().(*fluxarray.Float), r.Arr().(*fluxarray.Float), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicFloat), nil

	default:
		return nil, errors.Newf(codes.Invalid, "unsupported type for vector Div: %v", l.ElementType())
	}
}

func vectorMod(l, r Vector, mem memory.Allocator) (Value, error) {
	var lvr, rvr *Value
	if vr, ok := l.(*VectorRepeatValue); ok {
		lvr = &vr.val
	}
	if vr, ok := r.(*VectorRepeatValue); ok {
		rvr = &vr.val
	}

	if lvr != nil && rvr != nil {
		// XXX: we can handle this case here if we are willing to plumb the
		// OperatorKind through here so we can do the lookup for the row-based version of this op.
		panic("got 2 VectorRepeatValue; 'const folding' should be done earlier, in the function lookup")
	}

	switch l.ElementType().Nature() {

	case semantic.Int:

		var (
			x *fluxarray.Int

			err error
		)
		if lvr != nil {
			x, err = fluxarray.IntModLConst((*lvr).Int(), r.Arr().(*fluxarray.Int), mem)
		} else if rvr != nil {
			x, err = fluxarray.IntModRConst(l.Arr().(*fluxarray.Int), (*rvr).Int(), mem)
		} else {
			x, err = fluxarray.IntMod(l.Arr().(*fluxarray.Int), r.Arr().(*fluxarray.Int), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicInt), nil

	case semantic.UInt:

		var (
			x *fluxarray.Uint

			err error
		)
		if lvr != nil {
			x, err = fluxarray.UintModLConst((*lvr).UInt(), r.Arr().(*fluxarray.Uint), mem)
		} else if rvr != nil {
			x, err = fluxarray.UintModRConst(l.Arr().(*fluxarray.Uint), (*rvr).UInt(), mem)
		} else {
			x, err = fluxarray.UintMod(l.Arr().(*fluxarray.Uint), r.Arr().(*fluxarray.Uint), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicUint), nil

	case semantic.Float:

		var (
			x *fluxarray.Float

			err error
		)
		if lvr != nil {
			x, err = fluxarray.FloatModLConst((*lvr).Float(), r.Arr().(*fluxarray.Float), mem)
		} else if rvr != nil {
			x, err = fluxarray.FloatModRConst(l.Arr().(*fluxarray.Float), (*rvr).Float(), mem)
		} else {
			x, err = fluxarray.FloatMod(l.Arr().(*fluxarray.Float), r.Arr().(*fluxarray.Float), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicFloat), nil

	default:
		return nil, errors.Newf(codes.Invalid, "unsupported type for vector Mod: %v", l.ElementType())
	}
}

func vectorPow(l, r Vector, mem memory.Allocator) (Value, error) {
	var lvr, rvr *Value
	if vr, ok := l.(*VectorRepeatValue); ok {
		lvr = &vr.val
	}
	if vr, ok := r.(*VectorRepeatValue); ok {
		rvr = &vr.val
	}

	if lvr != nil && rvr != nil {
		// XXX: we can handle this case here if we are willing to plumb the
		// OperatorKind through here so we can do the lookup for the row-based version of this op.
		panic("got 2 VectorRepeatValue; 'const folding' should be done earlier, in the function lookup")
	}

	switch l.ElementType().Nature() {

	case semantic.Int:

		var (
			x *fluxarray.Float

			err error
		)
		if lvr != nil {
			x, err = fluxarray.IntPowLConst((*lvr).Int(), r.Arr().(*fluxarray.Int), mem)
		} else if rvr != nil {
			x, err = fluxarray.IntPowRConst(l.Arr().(*fluxarray.Int), (*rvr).Int(), mem)
		} else {
			x, err = fluxarray.IntPow(l.Arr().(*fluxarray.Int), r.Arr().(*fluxarray.Int), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicFloat), nil

	case semantic.UInt:

		var (
			x *fluxarray.Float

			err error
		)
		if lvr != nil {
			x, err = fluxarray.UintPowLConst((*lvr).UInt(), r.Arr().(*fluxarray.Uint), mem)
		} else if rvr != nil {
			x, err = fluxarray.UintPowRConst(l.Arr().(*fluxarray.Uint), (*rvr).UInt(), mem)
		} else {
			x, err = fluxarray.UintPow(l.Arr().(*fluxarray.Uint), r.Arr().(*fluxarray.Uint), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicFloat), nil

	case semantic.Float:

		var (
			x *fluxarray.Float

			err error
		)
		if lvr != nil {
			x, err = fluxarray.FloatPowLConst((*lvr).Float(), r.Arr().(*fluxarray.Float), mem)
		} else if rvr != nil {
			x, err = fluxarray.FloatPowRConst(l.Arr().(*fluxarray.Float), (*rvr).Float(), mem)
		} else {
			x, err = fluxarray.FloatPow(l.Arr().(*fluxarray.Float), r.Arr().(*fluxarray.Float), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicFloat), nil

	default:
		return nil, errors.Newf(codes.Invalid, "unsupported type for vector Pow: %v", l.ElementType())
	}
}

func vectorEq(l, r Vector, mem memory.Allocator) (Value, error) {
	var lvr, rvr *Value
	if vr, ok := l.(*VectorRepeatValue); ok {
		lvr = &vr.val
	}
	if vr, ok := r.(*VectorRepeatValue); ok {
		rvr = &vr.val
	}

	if lvr != nil && rvr != nil {
		// XXX: we can handle this case here if we are willing to plumb the
		// OperatorKind through here so we can do the lookup for the row-based version of this op.
		panic("got 2 VectorRepeatValue; 'const folding' should be done earlier, in the function lookup")
	}

	switch l.ElementType().Nature() {

	case semantic.Bool:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.BooleanEqLConst((*lvr).Bool(), r.Arr().(*fluxarray.Boolean), mem)
		} else if rvr != nil {
			x, err = fluxarray.BooleanEqRConst(l.Arr().(*fluxarray.Boolean), (*rvr).Bool(), mem)
		} else {
			x, err = fluxarray.BooleanEq(l.Arr().(*fluxarray.Boolean), r.Arr().(*fluxarray.Boolean), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.Int:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.IntEqLConst((*lvr).Int(), r.Arr().(*fluxarray.Int), mem)
		} else if rvr != nil {
			x, err = fluxarray.IntEqRConst(l.Arr().(*fluxarray.Int), (*rvr).Int(), mem)
		} else {
			x, err = fluxarray.IntEq(l.Arr().(*fluxarray.Int), r.Arr().(*fluxarray.Int), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.UInt:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.UintEqLConst((*lvr).UInt(), r.Arr().(*fluxarray.Uint), mem)
		} else if rvr != nil {
			x, err = fluxarray.UintEqRConst(l.Arr().(*fluxarray.Uint), (*rvr).UInt(), mem)
		} else {
			x, err = fluxarray.UintEq(l.Arr().(*fluxarray.Uint), r.Arr().(*fluxarray.Uint), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.Float:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.FloatEqLConst((*lvr).Float(), r.Arr().(*fluxarray.Float), mem)
		} else if rvr != nil {
			x, err = fluxarray.FloatEqRConst(l.Arr().(*fluxarray.Float), (*rvr).Float(), mem)
		} else {
			x, err = fluxarray.FloatEq(l.Arr().(*fluxarray.Float), r.Arr().(*fluxarray.Float), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.String:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.StringEqLConst((*lvr).Str(), r.Arr().(*fluxarray.String), mem)
		} else if rvr != nil {
			x, err = fluxarray.StringEqRConst(l.Arr().(*fluxarray.String), (*rvr).Str(), mem)
		} else {
			x, err = fluxarray.StringEq(l.Arr().(*fluxarray.String), r.Arr().(*fluxarray.String), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	default:
		return nil, errors.Newf(codes.Invalid, "unsupported type for vector Eq: %v", l.ElementType())
	}
}

func vectorNeq(l, r Vector, mem memory.Allocator) (Value, error) {
	var lvr, rvr *Value
	if vr, ok := l.(*VectorRepeatValue); ok {
		lvr = &vr.val
	}
	if vr, ok := r.(*VectorRepeatValue); ok {
		rvr = &vr.val
	}

	if lvr != nil && rvr != nil {
		// XXX: we can handle this case here if we are willing to plumb the
		// OperatorKind through here so we can do the lookup for the row-based version of this op.
		panic("got 2 VectorRepeatValue; 'const folding' should be done earlier, in the function lookup")
	}

	switch l.ElementType().Nature() {

	case semantic.Bool:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.BooleanNeqLConst((*lvr).Bool(), r.Arr().(*fluxarray.Boolean), mem)
		} else if rvr != nil {
			x, err = fluxarray.BooleanNeqRConst(l.Arr().(*fluxarray.Boolean), (*rvr).Bool(), mem)
		} else {
			x, err = fluxarray.BooleanNeq(l.Arr().(*fluxarray.Boolean), r.Arr().(*fluxarray.Boolean), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.Int:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.IntNeqLConst((*lvr).Int(), r.Arr().(*fluxarray.Int), mem)
		} else if rvr != nil {
			x, err = fluxarray.IntNeqRConst(l.Arr().(*fluxarray.Int), (*rvr).Int(), mem)
		} else {
			x, err = fluxarray.IntNeq(l.Arr().(*fluxarray.Int), r.Arr().(*fluxarray.Int), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.UInt:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.UintNeqLConst((*lvr).UInt(), r.Arr().(*fluxarray.Uint), mem)
		} else if rvr != nil {
			x, err = fluxarray.UintNeqRConst(l.Arr().(*fluxarray.Uint), (*rvr).UInt(), mem)
		} else {
			x, err = fluxarray.UintNeq(l.Arr().(*fluxarray.Uint), r.Arr().(*fluxarray.Uint), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.Float:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.FloatNeqLConst((*lvr).Float(), r.Arr().(*fluxarray.Float), mem)
		} else if rvr != nil {
			x, err = fluxarray.FloatNeqRConst(l.Arr().(*fluxarray.Float), (*rvr).Float(), mem)
		} else {
			x, err = fluxarray.FloatNeq(l.Arr().(*fluxarray.Float), r.Arr().(*fluxarray.Float), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.String:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.StringNeqLConst((*lvr).Str(), r.Arr().(*fluxarray.String), mem)
		} else if rvr != nil {
			x, err = fluxarray.StringNeqRConst(l.Arr().(*fluxarray.String), (*rvr).Str(), mem)
		} else {
			x, err = fluxarray.StringNeq(l.Arr().(*fluxarray.String), r.Arr().(*fluxarray.String), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	default:
		return nil, errors.Newf(codes.Invalid, "unsupported type for vector Neq: %v", l.ElementType())
	}
}

func vectorLt(l, r Vector, mem memory.Allocator) (Value, error) {
	var lvr, rvr *Value
	if vr, ok := l.(*VectorRepeatValue); ok {
		lvr = &vr.val
	}
	if vr, ok := r.(*VectorRepeatValue); ok {
		rvr = &vr.val
	}

	if lvr != nil && rvr != nil {
		// XXX: we can handle this case here if we are willing to plumb the
		// OperatorKind through here so we can do the lookup for the row-based version of this op.
		panic("got 2 VectorRepeatValue; 'const folding' should be done earlier, in the function lookup")
	}

	switch l.ElementType().Nature() {

	case semantic.Int:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.IntLtLConst((*lvr).Int(), r.Arr().(*fluxarray.Int), mem)
		} else if rvr != nil {
			x, err = fluxarray.IntLtRConst(l.Arr().(*fluxarray.Int), (*rvr).Int(), mem)
		} else {
			x, err = fluxarray.IntLt(l.Arr().(*fluxarray.Int), r.Arr().(*fluxarray.Int), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.UInt:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.UintLtLConst((*lvr).UInt(), r.Arr().(*fluxarray.Uint), mem)
		} else if rvr != nil {
			x, err = fluxarray.UintLtRConst(l.Arr().(*fluxarray.Uint), (*rvr).UInt(), mem)
		} else {
			x, err = fluxarray.UintLt(l.Arr().(*fluxarray.Uint), r.Arr().(*fluxarray.Uint), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.Float:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.FloatLtLConst((*lvr).Float(), r.Arr().(*fluxarray.Float), mem)
		} else if rvr != nil {
			x, err = fluxarray.FloatLtRConst(l.Arr().(*fluxarray.Float), (*rvr).Float(), mem)
		} else {
			x, err = fluxarray.FloatLt(l.Arr().(*fluxarray.Float), r.Arr().(*fluxarray.Float), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.String:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.StringLtLConst((*lvr).Str(), r.Arr().(*fluxarray.String), mem)
		} else if rvr != nil {
			x, err = fluxarray.StringLtRConst(l.Arr().(*fluxarray.String), (*rvr).Str(), mem)
		} else {
			x, err = fluxarray.StringLt(l.Arr().(*fluxarray.String), r.Arr().(*fluxarray.String), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	default:
		return nil, errors.Newf(codes.Invalid, "unsupported type for vector Lt: %v", l.ElementType())
	}
}

func vectorLte(l, r Vector, mem memory.Allocator) (Value, error) {
	var lvr, rvr *Value
	if vr, ok := l.(*VectorRepeatValue); ok {
		lvr = &vr.val
	}
	if vr, ok := r.(*VectorRepeatValue); ok {
		rvr = &vr.val
	}

	if lvr != nil && rvr != nil {
		// XXX: we can handle this case here if we are willing to plumb the
		// OperatorKind through here so we can do the lookup for the row-based version of this op.
		panic("got 2 VectorRepeatValue; 'const folding' should be done earlier, in the function lookup")
	}

	switch l.ElementType().Nature() {

	case semantic.Int:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.IntLteLConst((*lvr).Int(), r.Arr().(*fluxarray.Int), mem)
		} else if rvr != nil {
			x, err = fluxarray.IntLteRConst(l.Arr().(*fluxarray.Int), (*rvr).Int(), mem)
		} else {
			x, err = fluxarray.IntLte(l.Arr().(*fluxarray.Int), r.Arr().(*fluxarray.Int), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.UInt:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.UintLteLConst((*lvr).UInt(), r.Arr().(*fluxarray.Uint), mem)
		} else if rvr != nil {
			x, err = fluxarray.UintLteRConst(l.Arr().(*fluxarray.Uint), (*rvr).UInt(), mem)
		} else {
			x, err = fluxarray.UintLte(l.Arr().(*fluxarray.Uint), r.Arr().(*fluxarray.Uint), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.Float:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.FloatLteLConst((*lvr).Float(), r.Arr().(*fluxarray.Float), mem)
		} else if rvr != nil {
			x, err = fluxarray.FloatLteRConst(l.Arr().(*fluxarray.Float), (*rvr).Float(), mem)
		} else {
			x, err = fluxarray.FloatLte(l.Arr().(*fluxarray.Float), r.Arr().(*fluxarray.Float), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.String:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.StringLteLConst((*lvr).Str(), r.Arr().(*fluxarray.String), mem)
		} else if rvr != nil {
			x, err = fluxarray.StringLteRConst(l.Arr().(*fluxarray.String), (*rvr).Str(), mem)
		} else {
			x, err = fluxarray.StringLte(l.Arr().(*fluxarray.String), r.Arr().(*fluxarray.String), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	default:
		return nil, errors.Newf(codes.Invalid, "unsupported type for vector Lte: %v", l.ElementType())
	}
}

func vectorGt(l, r Vector, mem memory.Allocator) (Value, error) {
	var lvr, rvr *Value
	if vr, ok := l.(*VectorRepeatValue); ok {
		lvr = &vr.val
	}
	if vr, ok := r.(*VectorRepeatValue); ok {
		rvr = &vr.val
	}

	if lvr != nil && rvr != nil {
		// XXX: we can handle this case here if we are willing to plumb the
		// OperatorKind through here so we can do the lookup for the row-based version of this op.
		panic("got 2 VectorRepeatValue; 'const folding' should be done earlier, in the function lookup")
	}

	switch l.ElementType().Nature() {

	case semantic.Int:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.IntGtLConst((*lvr).Int(), r.Arr().(*fluxarray.Int), mem)
		} else if rvr != nil {
			x, err = fluxarray.IntGtRConst(l.Arr().(*fluxarray.Int), (*rvr).Int(), mem)
		} else {
			x, err = fluxarray.IntGt(l.Arr().(*fluxarray.Int), r.Arr().(*fluxarray.Int), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.UInt:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.UintGtLConst((*lvr).UInt(), r.Arr().(*fluxarray.Uint), mem)
		} else if rvr != nil {
			x, err = fluxarray.UintGtRConst(l.Arr().(*fluxarray.Uint), (*rvr).UInt(), mem)
		} else {
			x, err = fluxarray.UintGt(l.Arr().(*fluxarray.Uint), r.Arr().(*fluxarray.Uint), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.Float:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.FloatGtLConst((*lvr).Float(), r.Arr().(*fluxarray.Float), mem)
		} else if rvr != nil {
			x, err = fluxarray.FloatGtRConst(l.Arr().(*fluxarray.Float), (*rvr).Float(), mem)
		} else {
			x, err = fluxarray.FloatGt(l.Arr().(*fluxarray.Float), r.Arr().(*fluxarray.Float), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.String:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.StringGtLConst((*lvr).Str(), r.Arr().(*fluxarray.String), mem)
		} else if rvr != nil {
			x, err = fluxarray.StringGtRConst(l.Arr().(*fluxarray.String), (*rvr).Str(), mem)
		} else {
			x, err = fluxarray.StringGt(l.Arr().(*fluxarray.String), r.Arr().(*fluxarray.String), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	default:
		return nil, errors.Newf(codes.Invalid, "unsupported type for vector Gt: %v", l.ElementType())
	}
}

func vectorGte(l, r Vector, mem memory.Allocator) (Value, error) {
	var lvr, rvr *Value
	if vr, ok := l.(*VectorRepeatValue); ok {
		lvr = &vr.val
	}
	if vr, ok := r.(*VectorRepeatValue); ok {
		rvr = &vr.val
	}

	if lvr != nil && rvr != nil {
		// XXX: we can handle this case here if we are willing to plumb the
		// OperatorKind through here so we can do the lookup for the row-based version of this op.
		panic("got 2 VectorRepeatValue; 'const folding' should be done earlier, in the function lookup")
	}

	switch l.ElementType().Nature() {

	case semantic.Int:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.IntGteLConst((*lvr).Int(), r.Arr().(*fluxarray.Int), mem)
		} else if rvr != nil {
			x, err = fluxarray.IntGteRConst(l.Arr().(*fluxarray.Int), (*rvr).Int(), mem)
		} else {
			x, err = fluxarray.IntGte(l.Arr().(*fluxarray.Int), r.Arr().(*fluxarray.Int), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.UInt:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.UintGteLConst((*lvr).UInt(), r.Arr().(*fluxarray.Uint), mem)
		} else if rvr != nil {
			x, err = fluxarray.UintGteRConst(l.Arr().(*fluxarray.Uint), (*rvr).UInt(), mem)
		} else {
			x, err = fluxarray.UintGte(l.Arr().(*fluxarray.Uint), r.Arr().(*fluxarray.Uint), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.Float:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.FloatGteLConst((*lvr).Float(), r.Arr().(*fluxarray.Float), mem)
		} else if rvr != nil {
			x, err = fluxarray.FloatGteRConst(l.Arr().(*fluxarray.Float), (*rvr).Float(), mem)
		} else {
			x, err = fluxarray.FloatGte(l.Arr().(*fluxarray.Float), r.Arr().(*fluxarray.Float), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	case semantic.String:

		var (
			x *fluxarray.Boolean

			err error
		)
		if lvr != nil {
			x, err = fluxarray.StringGteLConst((*lvr).Str(), r.Arr().(*fluxarray.String), mem)
		} else if rvr != nil {
			x, err = fluxarray.StringGteRConst(l.Arr().(*fluxarray.String), (*rvr).Str(), mem)
		} else {
			x, err = fluxarray.StringGte(l.Arr().(*fluxarray.String), r.Arr().(*fluxarray.String), mem)
		}

		if err != nil {
			return nil, err
		}

		return NewVectorValue(x, semantic.BasicBool), nil

	default:
		return nil, errors.Newf(codes.Invalid, "unsupported type for vector Gte: %v", l.ElementType())
	}
}
