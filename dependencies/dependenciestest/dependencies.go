package dependenciestest

import (
	"io/ioutil"
	"net/http"

	"github.com/influxdata/flux/codes"
	"github.com/influxdata/flux/dependencies"
	"github.com/influxdata/flux/internal/errors"
)

type RoundTripFunc func(req *http.Request) *http.Response

func (f RoundTripFunc) RoundTrip(req *http.Request) (*http.Response, error) {
	return f(req), nil
}

var StatusOK int = 200

func defaultTestFunction(req *http.Request) *http.Response {
	body := (*req).Body
	// Test request parameters
	return &http.Response{
		StatusCode: StatusOK,
		Status:     "Body generated by test client",

		// Send response to be tested
		Body: ioutil.NopCloser(body),

		// Must be set to non-nil value or it panics
		Header: make(http.Header),
	}
}

var _ dependencies.Interface = (*Interface)(nil)

type Interface struct {
	Services struct {
		HTTPClient    *http.Client
		SecretService dependencies.SecretService
	}
}

func (d *Interface) HTTPClient() (*http.Client, error) {
	if d.Services.HTTPClient != nil {
		return d.Services.HTTPClient, nil
	}
	return nil, errors.New(codes.Unimplemented, "http client is not set")
}

func (d *Interface) SecretService() (dependencies.SecretService, error) {
	if d.Services.SecretService != nil {
		return d.Services.SecretService, nil
	}
	return nil, errors.New(codes.Unimplemented, "secret service is not set")
}

func Default() *Interface {
	var deps Interface
	deps.Services.HTTPClient = &http.Client{
		Transport: RoundTripFunc(defaultTestFunction),
	}
	return &deps
}
