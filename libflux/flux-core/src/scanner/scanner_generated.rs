#![allow(clippy::never_loop, clippy::double_parens, clippy::duplicate_underscore_argument, clippy::single_match, clippy::comparison_chain, clippy::too_many_arguments, clippy::assign_op_pattern, clippy::needless_return)]
use std::vec::Vec;

use crate::scanner::*;

static _flux_actions: [i8 ; 198] = [ 0, 1, 0, 1, 1, 1, 3, 1, 4, 1, 7, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 34, 1, 35, 1, 36, 1, 37, 1, 38, 1, 39, 1, 40, 1, 41, 1, 42, 1, 43, 1, 44, 1, 45, 1, 46, 1, 47, 1, 48, 1, 49, 1, 50, 1, 51, 1, 52, 1, 53, 1, 54, 1, 55, 1, 56, 1, 57, 1, 58, 1, 60, 1, 61, 1, 62, 1, 63, 1, 64, 1, 65, 1, 66, 1, 67, 1, 68, 1, 69, 1, 70, 1, 71, 1, 72, 1, 73, 1, 74, 1, 75, 1, 77, 1, 78, 1, 79, 1, 80, 1, 81, 1, 82, 2, 0, 8, 2, 0, 33, 2, 0, 59, 2, 1, 2, 2, 4, 5, 2, 4, 6, 2, 4, 15, 2, 4, 16, 2, 4, 17, 2, 4, 18, 2, 4, 19, 2, 4, 20, 2, 4, 21, 2, 4, 22, 2, 4, 23, 2, 4, 24, 2, 4, 25, 2, 4, 26, 2, 4, 27, 2, 4, 28, 2, 4, 29, 2, 4, 30, 2, 4, 31, 2, 4, 32, 2, 4, 76, 3, 4, 0, 76, 0 , 0 ];
static _flux_key_offsets: [i16 ; 302] = [ 0, 0, 2, 6, 9, 16, 17, 23, 29, 31, 33, 34, 36, 38, 40, 42, 43, 45, 47, 48, 50, 52, 54, 56, 57, 59, 61, 72, 73, 74, 77, 83, 83, 85, 87, 96, 103, 111, 112, 114, 116, 120, 125, 134, 138, 144, 155, 157, 159, 161, 166, 193, 197, 207, 222, 236, 254, 267, 283, 291, 307, 320, 341, 349, 363, 372, 386, 397, 409, 419, 428, 437, 439, 442, 463, 469, 470, 476, 484, 533, 538, 544, 548, 553, 555, 557, 559, 566, 574, 581, 584, 588, 592, 594, 596, 600, 604, 608, 614, 622, 626, 632, 634, 636, 638, 644, 648, 652, 654, 656, 660, 663, 667, 669, 673, 677, 687, 692, 706, 722, 724, 726, 742, 747, 749, 751, 753, 757, 761, 763, 767, 771, 781, 791, 792, 803, 811, 814, 817, 821, 825, 827, 830, 832, 832, 835, 837, 862, 864, 870, 875, 877, 881, 885, 887, 892, 894, 898, 900, 902, 904, 907, 909, 930, 932, 934, 936, 947, 953, 955, 957, 959, 961, 965, 969, 971, 973, 977, 979, 987, 995, 1012, 1022, 1026, 1028, 1030, 1034, 1036, 1040, 1042, 1046, 1051, 1053, 1062, 1066, 1076, 1082, 1084, 1086, 1100, 1101, 1111, 1112, 1120, 1127, 1129, 1132, 1134, 1136, 1138, 1141, 1144, 1147, 1149, 1153, 1154, 1157, 1160, 1164, 1173, 1182, 1185, 1188, 1195, 1196, 1202, 1208, 1211, 1289, 1293, 1297, 1299, 1300, 1301, 1313, 1325, 1337, 1350, 1351, 1355, 1360, 1372, 1374, 1378, 1380, 1383, 1384, 1427, 1471, 1515, 1559, 1603, 1647, 1691, 1735, 1779, 1824, 1868, 1912, 1956, 2000, 2044, 2088, 2133, 2177, 2221, 2265, 2309, 2353, 2397, 2442, 2486, 2530, 2574, 2618, 2662, 2706, 2750, 2794, 2838, 2882, 2926, 2970, 3014, 3058, 3102, 3147, 3191, 3235, 3279, 3323, 3367, 3411, 3455, 3499, 3504, 3508, 3511, 3514, 3518, 0 , 0 ];
static _flux_trans_keys: [u8 ; 3524] = [ 61, 126, 10, 34, 36, 92, 10, 34, 123, 34, 36, 92, 110, 114, 116, 120, 123, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 48, 57, 48, 57, 45, 48, 57, 48, 57, 48, 57, 48, 57, 58, 48, 57, 48, 57, 58, 48, 57, 48, 57, 48, 57, 48, 57, 58, 48, 57, 48, 57, 100, 104, 109, 110, 115, 117, 119, 121, 194, 48, 57, 115, 181, 170, 181, 186, 128, 150, 152, 182, 184, 255, 192, 255, 0, 127, 173, 130, 133, 146, 159, 165, 171, 175, 255, 133, 176, 180, 182, 183, 186, 189, 134, 140, 136, 138, 142, 161, 163, 255, 182, 130, 137, 164, 176, 151, 152, 154, 160, 190, 136, 175, 192, 255, 135, 129, 130, 132, 133, 144, 170, 176, 178, 144, 154, 161, 191, 128, 151, 153, 158, 174, 255, 148, 157, 160, 169, 172, 176, 185, 189, 190, 192, 255, 144, 191, 141, 255, 178, 255, 186, 138, 170, 180, 181, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 129, 185, 189, 255, 141, 143, 145, 151, 164, 176, 179, 186, 192, 255, 178, 129, 131, 133, 140, 143, 144, 147, 168, 170, 176, 182, 185, 189, 255, 141, 158, 133, 134, 137, 138, 143, 150, 152, 155, 164, 175, 178, 255, 129, 131, 133, 138, 143, 144, 147, 168, 170, 176, 178, 179, 181, 182, 184, 185, 190, 255, 157, 131, 134, 137, 138, 141, 144, 146, 152, 159, 175, 182, 255, 129, 131, 133, 141, 143, 145, 147, 168, 170, 176, 178, 179, 181, 185, 189, 255, 134, 138, 141, 143, 145, 159, 164, 255, 129, 131, 133, 140, 143, 144, 147, 168, 170, 176, 178, 179, 181, 185, 189, 191, 177, 128, 132, 135, 136, 139, 140, 150, 151, 156, 157, 159, 163, 156, 130, 131, 133, 138, 142, 144, 146, 149, 153, 154, 158, 159, 163, 164, 168, 170, 174, 185, 190, 191, 144, 151, 128, 130, 134, 136, 138, 140, 129, 131, 133, 140, 142, 144, 146, 168, 170, 179, 181, 185, 189, 255, 133, 137, 151, 141, 148, 154, 159, 164, 255, 130, 131, 133, 140, 142, 144, 146, 168, 170, 179, 181, 185, 189, 191, 158, 128, 132, 134, 136, 138, 140, 149, 150, 160, 163, 130, 131, 133, 140, 142, 144, 146, 168, 170, 185, 189, 255, 133, 137, 141, 150, 152, 159, 164, 185, 192, 255, 189, 130, 131, 133, 150, 154, 177, 179, 187, 150, 128, 134, 143, 148, 152, 159, 178, 179, 129, 186, 141, 128, 134, 132, 138, 141, 165, 167, 129, 130, 135, 136, 148, 151, 153, 159, 161, 163, 170, 171, 173, 185, 187, 189, 134, 141, 128, 132, 156, 157, 128, 128, 135, 137, 172, 177, 191, 128, 129, 136, 139, 144, 151, 153, 188, 128, 129, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 172, 173, 174, 176, 177, 180, 181, 182, 184, 188, 189, 190, 191, 132, 136, 145, 152, 185, 187, 184, 128, 182, 187, 191, 144, 162, 165, 168, 174, 255, 135, 141, 143, 159, 187, 134, 143, 189, 255, 154, 158, 163, 167, 186, 255, 137, 151, 153, 142, 143, 158, 159, 137, 177, 142, 143, 182, 183, 191, 255, 128, 130, 133, 136, 150, 152, 255, 145, 150, 151, 155, 158, 160, 255, 128, 143, 160, 255, 181, 255, 129, 255, 173, 174, 183, 255, 129, 154, 160, 255, 171, 173, 177, 255, 128, 140, 142, 147, 160, 179, 128, 147, 160, 172, 174, 176, 178, 179, 128, 179, 182, 255, 137, 150, 152, 155, 157, 255, 160, 255, 184, 255, 128, 170, 128, 156, 160, 171, 176, 184, 144, 173, 176, 180, 128, 169, 176, 255, 138, 255, 128, 155, 128, 179, 181, 255, 132, 140, 255, 128, 169, 174, 175, 128, 181, 141, 143, 154, 189, 150, 151, 158, 159, 152, 154, 156, 158, 134, 135, 142, 143, 190, 255, 190, 128, 180, 182, 188, 130, 132, 134, 140, 144, 147, 150, 155, 160, 172, 178, 180, 182, 188, 129, 130, 132, 133, 134, 146, 147, 176, 177, 178, 179, 180, 181, 182, 183, 184, 177, 191, 144, 148, 130, 135, 149, 164, 166, 168, 138, 147, 153, 157, 170, 173, 175, 185, 188, 191, 142, 133, 137, 160, 255, 137, 255, 182, 255, 170, 255, 128, 174, 176, 255, 159, 176, 190, 255, 165, 255, 128, 165, 176, 255, 166, 174, 176, 255, 128, 150, 160, 166, 168, 174, 176, 182, 184, 190, 128, 134, 136, 142, 144, 150, 152, 158, 160, 191, 175, 128, 129, 130, 131, 132, 133, 134, 135, 144, 145, 255, 133, 135, 161, 169, 177, 181, 184, 188, 160, 151, 156, 187, 192, 255, 133, 173, 177, 255, 143, 159, 184, 255, 176, 191, 182, 183, 184, 182, 255, 191, 192, 255, 132, 255, 128, 146, 148, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 176, 129, 145, 149, 151, 177, 255, 141, 255, 141, 143, 160, 169, 172, 255, 191, 128, 159, 162, 174, 128, 151, 151, 159, 162, 255, 137, 138, 141, 255, 187, 255, 130, 134, 139, 168, 255, 128, 179, 138, 170, 176, 255, 147, 255, 128, 182, 128, 141, 158, 159, 255, 164, 255, 164, 168, 169, 171, 172, 173, 174, 175, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 165, 179, 174, 175, 171, 175, 154, 255, 190, 128, 134, 147, 151, 157, 168, 170, 182, 184, 188, 128, 129, 131, 132, 134, 255, 147, 255, 190, 255, 144, 255, 144, 145, 136, 175, 188, 255, 176, 180, 182, 255, 189, 255, 161, 186, 129, 154, 166, 255, 191, 255, 130, 135, 138, 143, 146, 151, 154, 156, 144, 146, 157, 160, 170, 175, 161, 169, 128, 129, 130, 131, 133, 138, 139, 140, 141, 142, 143, 144, 145, 146, 160, 164, 168, 128, 139, 141, 166, 168, 186, 188, 189, 191, 255, 142, 143, 158, 255, 187, 255, 128, 180, 128, 156, 160, 255, 145, 255, 128, 158, 176, 255, 139, 255, 128, 157, 160, 255, 144, 132, 135, 150, 255, 158, 255, 136, 188, 191, 128, 133, 138, 181, 183, 184, 128, 149, 160, 185, 128, 131, 133, 134, 140, 147, 149, 151, 153, 179, 128, 141, 144, 145, 129, 140, 175, 255, 163, 255, 144, 145, 146, 147, 148, 149, 154, 155, 156, 157, 158, 159, 150, 153, 149, 157, 173, 186, 188, 160, 161, 163, 164, 167, 168, 132, 134, 149, 157, 186, 139, 140, 191, 255, 134, 128, 132, 138, 144, 146, 255, 166, 167, 129, 155, 187, 149, 181, 143, 175, 137, 169, 131, 140, 255, 128, 129, 255, 155, 156, 255, 151, 255, 160, 168, 161, 167, 62, 10, 47, 92, 10, 47, 92, 10, 47, 92, 120, 10, 47, 92, 48, 57, 65, 70, 97, 102, 10, 47, 92, 48, 57, 65, 70, 97, 102, 10, 47, 92, 10, 34, 123, 34, 36, 92, 110, 114, 116, 120, 123, 48, 57, 65, 70, 97, 102, 48, 57, 65, 70, 97, 102, 10, 34, 123, 10, 32, 33, 34, 37, 40, 41, 42, 43, 44, 45, 46, 47, 58, 60, 61, 62, 63, 91, 93, 94, 95, 97, 98, 101, 105, 110, 111, 112, 114, 116, 123, 124, 125, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 9, 13, 48, 57, 65, 90, 99, 122, 196, 202, 208, 218, 229, 236, 9, 32, 11, 13, 10, 34, 36, 92, 48, 57, 47, 10, 46, 100, 104, 109, 110, 115, 117, 119, 121, 194, 48, 57, 46, 100, 104, 109, 110, 115, 117, 119, 121, 194, 48, 57, 46, 100, 104, 109, 110, 115, 117, 119, 121, 194, 48, 57, 45, 46, 100, 104, 109, 110, 115, 117, 119, 121, 194, 48, 57, 84, 43, 45, 46, 90, 43, 45, 90, 48, 57, 46, 100, 104, 109, 110, 115, 117, 119, 121, 194, 48, 57, 48, 57, 111, 115, 48, 57, 45, 61, 61, 62, 126, 61, 95, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 110, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 100, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 117, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 105, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 108, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 116, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 105, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 110, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 108, 120, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 115, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 101, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 105, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 115, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 116, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 115, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 102, 109, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 112, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 111, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 114, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 116, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 111, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 116, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 112, 114, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 116, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 105, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 111, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 110, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 97, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 98, 122, 196, 202, 208, 218, 229, 236, 95, 99, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 107, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 97, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 98, 122, 196, 202, 208, 218, 229, 236, 95, 103, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 101, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 101, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 116, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 117, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 114, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 110, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 101, 104, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 115, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 116, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 99, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 97, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 98, 122, 196, 202, 208, 218, 229, 236, 95, 115, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 101, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 101, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 95, 110, 194, 195, 198, 199, 203, 205, 206, 207, 210, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 233, 234, 237, 239, 240, 48, 57, 65, 90, 97, 122, 196, 202, 208, 218, 229, 236, 10, 32, 47, 9, 13, 9, 32, 11, 13, 10, 47, 92, 10, 47, 92, 10, 34, 36, 92, 10, 34, 36, 92, 0, 0 ];
static _flux_single_lengths: [i8 ; 302] = [ 0, 2, 4, 3, 7, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 9, 1, 1, 3, 0, 0, 0, 0, 1, 1, 2, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 27, 0, 0, 1, 2, 0, 1, 0, 2, 0, 1, 1, 2, 0, 3, 0, 1, 0, 2, 1, 1, 0, 1, 5, 2, 1, 0, 0, 43, 1, 0, 0, 1, 0, 0, 0, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 4, 1, 0, 16, 2, 0, 6, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 9, 0, 1, 1, 0, 0, 0, 3, 0, 0, 1, 0, 19, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0, 19, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, 0, 4, 0, 0, 12, 1, 4, 1, 4, 1, 0, 3, 2, 2, 2, 1, 1, 1, 0, 2, 1, 3, 3, 4, 3, 3, 3, 3, 7, 1, 0, 0, 3, 64, 2, 4, 0, 1, 1, 10, 10, 10, 11, 1, 4, 3, 10, 0, 2, 2, 3, 1, 31, 32, 32, 32, 32, 32, 32, 32, 32, 33, 32, 32, 32, 32, 32, 32, 33, 32, 32, 32, 32, 32, 32, 33, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 32, 32, 32, 32, 32, 32, 32, 32, 3, 2, 3, 3, 4, 4, 0 , 0 ];
static _flux_range_lengths: [i8 ; 302] = [ 0, 0, 0, 0, 0, 0, 3, 3, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 3, 0, 1, 1, 4, 3, 3, 0, 1, 1, 2, 2, 4, 2, 3, 5, 1, 1, 1, 2, 0, 2, 5, 7, 6, 9, 6, 8, 3, 8, 6, 10, 3, 7, 3, 7, 5, 6, 4, 4, 4, 1, 1, 8, 2, 0, 3, 4, 3, 2, 3, 2, 2, 1, 1, 1, 2, 3, 3, 1, 2, 2, 1, 1, 2, 2, 2, 3, 4, 2, 3, 1, 1, 1, 3, 2, 2, 1, 1, 2, 1, 2, 1, 2, 2, 3, 2, 7, 0, 0, 1, 5, 2, 1, 1, 1, 2, 1, 1, 2, 2, 5, 5, 0, 1, 4, 1, 1, 2, 2, 1, 0, 1, 0, 1, 1, 3, 1, 3, 2, 1, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 3, 1, 1, 1, 1, 2, 2, 1, 1, 2, 1, 4, 1, 0, 5, 2, 1, 1, 2, 1, 2, 1, 2, 2, 1, 3, 2, 5, 1, 1, 1, 1, 0, 3, 0, 2, 3, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 3, 3, 0, 0, 0, 0, 3, 3, 0, 7, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 1, 0, 0, 0, 0, 0 , 0 ];
static _flux_index_offsets: [i16 ; 302] = [ 0, 0, 3, 8, 12, 20, 22, 26, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 77, 79, 81, 85, 89, 90, 92, 94, 100, 105, 111, 113, 115, 117, 120, 124, 130, 133, 137, 144, 146, 148, 150, 154, 182, 185, 191, 200, 209, 219, 227, 236, 242, 251, 259, 271, 277, 285, 292, 300, 307, 314, 321, 327, 333, 335, 338, 352, 357, 359, 363, 368, 415, 419, 423, 426, 430, 432, 434, 436, 442, 448, 453, 456, 459, 462, 464, 466, 469, 472, 475, 479, 484, 487, 491, 493, 495, 497, 501, 504, 507, 509, 511, 514, 517, 520, 522, 525, 528, 536, 540, 548, 565, 568, 570, 582, 586, 588, 590, 592, 595, 599, 601, 604, 607, 613, 619, 621, 632, 637, 640, 643, 646, 649, 651, 655, 657, 658, 661, 663, 686, 688, 692, 696, 698, 701, 704, 706, 711, 713, 716, 718, 720, 722, 725, 727, 748, 750, 752, 754, 761, 765, 767, 769, 771, 773, 776, 779, 781, 783, 786, 788, 793, 801, 819, 825, 828, 830, 832, 835, 837, 840, 842, 845, 849, 851, 858, 861, 867, 873, 875, 877, 891, 893, 901, 903, 910, 915, 917, 921, 924, 927, 930, 933, 936, 939, 941, 945, 947, 951, 955, 960, 967, 974, 978, 982, 990, 992, 996, 1000, 1004, 1076, 1080, 1085, 1087, 1089, 1091, 1103, 1115, 1127, 1140, 1142, 1147, 1152, 1164, 1166, 1170, 1173, 1177, 1179, 1217, 1256, 1295, 1334, 1373, 1412, 1451, 1490, 1529, 1569, 1608, 1647, 1686, 1725, 1764, 1803, 1843, 1882, 1921, 1960, 1999, 2038, 2077, 2117, 2156, 2195, 2234, 2273, 2312, 2351, 2390, 2429, 2468, 2507, 2546, 2585, 2624, 2663, 2702, 2742, 2781, 2820, 2859, 2898, 2937, 2976, 3015, 3054, 3059, 3063, 3067, 3071, 3076, 0 , 0 ];
static _flux_cond_targs: [i16 ; 3383] = [ 227, 227, 0, 2, 227, 3, 4, 2, 2, 227, 227, 2, 2, 5, 2, 2, 2, 2, 6, 227, 2, 227, 7, 7, 7, 227, 2, 2, 2, 227, 9, 227, 10, 227, 11, 227, 12, 227, 237, 227, 14, 227, 15, 227, 16, 227, 17, 227, 18, 227, 19, 227, 20, 227, 238, 227, 22, 227, 23, 227, 24, 227, 25, 227, 227, 227, 241, 241, 242, 27, 241, 27, 241, 241, 28, 26, 227, 241, 227, 27, 227, 246, 246, 246, 227, 246, 246, 246, 227, 246, 227, 246, 227, 246, 227, 227, 227, 227, 227, 246, 246, 246, 246, 246, 227, 246, 246, 246, 246, 246, 227, 227, 246, 227, 246, 227, 246, 227, 227, 246, 227, 227, 227, 246, 246, 246, 246, 246, 246, 227, 246, 246, 227, 246, 246, 246, 227, 227, 227, 227, 227, 227, 227, 246, 246, 227, 246, 227, 227, 246, 246, 246, 246, 227, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 227, 246, 246, 227, 227, 227, 227, 227, 227, 246, 246, 246, 246, 246, 246, 246, 246, 246, 227, 227, 227, 227, 227, 227, 227, 227, 227, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 227, 227, 227, 227, 227, 227, 227, 227, 246, 246, 246, 246, 246, 246, 246, 246, 246, 227, 227, 227, 227, 227, 227, 246, 246, 246, 246, 246, 246, 246, 246, 246, 227, 246, 246, 246, 246, 246, 246, 246, 227, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 227, 246, 246, 246, 246, 246, 227, 246, 246, 246, 246, 246, 246, 246, 227, 227, 227, 227, 227, 227, 227, 246, 246, 246, 246, 246, 246, 246, 246, 227, 246, 246, 246, 246, 246, 246, 227, 246, 246, 246, 246, 246, 246, 227, 227, 227, 227, 227, 227, 227, 246, 246, 246, 246, 246, 246, 227, 246, 246, 246, 246, 246, 227, 246, 227, 246, 246, 227, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 227, 246, 246, 246, 246, 227, 246, 227, 246, 246, 246, 227, 246, 246, 246, 246, 227, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 33, 31, 32, 33, 114, 115, 116, 117, 33, 31, 31, 227, 246, 246, 246, 227, 246, 246, 246, 227, 227, 227, 246, 227, 227, 227, 246, 227, 246, 227, 246, 227, 246, 227, 227, 227, 227, 227, 246, 227, 227, 227, 227, 227, 246, 246, 246, 246, 246, 227, 227, 227, 246, 227, 227, 246, 246, 246, 227, 227, 246, 246, 227, 227, 227, 246, 246, 246, 227, 227, 227, 246, 246, 246, 246, 227, 246, 246, 246, 246, 227, 246, 246, 227, 227, 227, 227, 246, 246, 227, 227, 246, 246, 227, 246, 246, 246, 227, 246, 246, 227, 246, 246, 227, 227, 246, 246, 227, 246, 246, 227, 227, 227, 246, 246, 246, 227, 246, 227, 246, 246, 227, 227, 227, 246, 227, 227, 227, 227, 227, 227, 227, 246, 246, 246, 246, 227, 246, 246, 246, 246, 246, 246, 246, 227, 119, 120, 121, 122, 123, 124, 125, 126, 127, 33, 128, 129, 130, 131, 132, 133, 227, 246, 246, 227, 246, 227, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 227, 246, 246, 246, 227, 227, 246, 246, 227, 227, 246, 246, 246, 227, 227, 227, 227, 246, 227, 246, 246, 246, 227, 227, 227, 246, 246, 246, 246, 246, 246, 227, 246, 246, 246, 246, 246, 227, 246, 227, 135, 93, 136, 137, 138, 31, 139, 140, 33, 31, 227, 246, 246, 246, 246, 227, 227, 227, 246, 227, 227, 246, 246, 246, 227, 227, 227, 246, 246, 227, 142, 227, 33, 31, 227, 246, 31, 145, 227, 31, 227, 246, 33, 147, 33, 148, 149, 150, 151, 31, 152, 153, 154, 155, 33, 145, 156, 157, 158, 159, 33, 31, 31, 31, 227, 227, 246, 227, 227, 227, 246, 246, 246, 246, 227, 246, 227, 246, 246, 227, 227, 227, 246, 246, 227, 227, 227, 227, 227, 246, 246, 227, 246, 246, 227, 227, 246, 246, 227, 246, 227, 161, 227, 31, 227, 246, 33, 163, 164, 165, 166, 167, 48, 168, 169, 170, 171, 172, 173, 31, 174, 175, 176, 177, 178, 31, 227, 227, 246, 227, 246, 227, 246, 246, 246, 246, 246, 246, 246, 227, 246, 246, 246, 227, 246, 227, 227, 246, 246, 227, 227, 246, 227, 227, 246, 246, 246, 227, 227, 246, 246, 227, 246, 246, 227, 227, 246, 246, 246, 246, 246, 227, 180, 195, 198, 210, 211, 213, 143, 227, 181, 182, 33, 183, 184, 185, 186, 187, 188, 189, 190, 33, 31, 191, 192, 193, 194, 227, 246, 246, 246, 246, 246, 227, 227, 227, 246, 227, 246, 246, 227, 246, 246, 227, 227, 246, 246, 246, 227, 227, 246, 246, 246, 227, 227, 227, 227, 246, 227, 246, 246, 246, 246, 246, 246, 246, 227, 246, 246, 227, 246, 246, 246, 246, 246, 227, 33, 196, 33, 197, 31, 227, 227, 246, 227, 246, 33, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 31, 227, 227, 246, 227, 227, 227, 227, 227, 227, 227, 246, 227, 246, 227, 227, 227, 227, 227, 227, 246, 246, 246, 246, 246, 227, 227, 246, 227, 227, 227, 246, 227, 227, 246, 227, 227, 246, 227, 227, 246, 227, 227, 246, 33, 31, 227, 212, 227, 31, 227, 246, 33, 191, 31, 227, 227, 0, 215, 294, 216, 215, 215, 297, 216, 215, 215, 297, 216, 218, 215, 215, 294, 216, 219, 219, 219, 215, 215, 294, 216, 220, 220, 220, 215, 215, 294, 216, 215, 299, 298, 298, 299, 299, 223, 299, 299, 299, 299, 224, 298, 299, 298, 225, 225, 225, 298, 299, 299, 299, 298, 299, 298, 298, 299, 227, 228, 1, 229, 227, 227, 227, 227, 227, 227, 227, 230, 231, 227, 243, 244, 245, 227, 227, 227, 227, 246, 247, 249, 255, 262, 267, 269, 274, 280, 285, 227, 214, 227, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 228, 233, 246, 246, 31, 31, 143, 0, 228, 228, 228, 227, 2, 227, 3, 4, 2, 230, 227, 232, 227, 227, 232, 230, 241, 241, 242, 27, 241, 27, 241, 241, 28, 234, 227, 230, 241, 241, 242, 27, 241, 27, 241, 241, 28, 235, 227, 230, 241, 241, 242, 27, 241, 27, 241, 241, 28, 236, 227, 8, 230, 241, 241, 242, 27, 241, 27, 241, 241, 28, 240, 227, 13, 227, 21, 21, 239, 227, 227, 21, 21, 227, 239, 227, 230, 241, 241, 242, 27, 241, 27, 241, 241, 28, 240, 227, 26, 227, 241, 241, 26, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 246, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 248, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 246, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 250, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 251, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 252, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 253, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 254, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 246, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 256, 258, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 257, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 246, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 259, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 260, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 261, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 246, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 246, 263, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 264, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 265, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 266, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 246, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 268, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 246, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 270, 246, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 271, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 272, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 273, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 246, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 275, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 276, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 277, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 278, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 279, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 246, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 281, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 282, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 283, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 284, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 246, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 286, 292, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 287, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 288, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 289, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 290, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 291, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 246, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 293, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 246, 246, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 78, 118, 134, 141, 144, 146, 160, 162, 179, 246, 246, 246, 31, 31, 143, 227, 294, 295, 296, 295, 294, 295, 295, 295, 294, 215, 294, 217, 215, 215, 294, 216, 215, 299, 298, 226, 222, 299, 299, 298, 221, 222, 299, 0, 1, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 214, 294, 294, 294, 294, 294, 294, 298, 298, 298, 298, 298, 226, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 294, 294, 294, 294, 298, 298, 0 , 0 ];
static _flux_cond_actions: [i16 ; 3383] = [ 43, 47, 0, 1, 25, 0, 0, 0, 1, 25, 101, 0, 0, 0, 0, 0, 0, 0, 0, 101, 0, 101, 0, 0, 0, 101, 0, 0, 0, 101, 0, 95, 0, 95, 0, 95, 0, 95, 7, 95, 0, 99, 0, 99, 0, 99, 0, 99, 0, 99, 0, 99, 0, 99, 7, 99, 0, 99, 0, 99, 0, 99, 0, 99, 23, 99, 183, 183, 183, 0, 183, 0, 183, 183, 0, 0, 97, 183, 103, 0, 103, 174, 174, 174, 103, 174, 174, 174, 103, 174, 103, 174, 103, 174, 103, 103, 103, 103, 103, 174, 174, 174, 174, 174, 103, 174, 174, 174, 174, 174, 103, 103, 174, 103, 174, 103, 174, 103, 103, 174, 103, 103, 103, 174, 174, 174, 174, 174, 174, 103, 174, 174, 103, 174, 174, 174, 103, 103, 103, 103, 103, 103, 103, 174, 174, 103, 174, 103, 103, 174, 174, 174, 174, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 174, 174, 103, 103, 103, 103, 103, 103, 174, 174, 174, 174, 174, 174, 174, 174, 174, 103, 103, 103, 103, 103, 103, 103, 103, 103, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 103, 103, 103, 103, 103, 103, 103, 103, 174, 174, 174, 174, 174, 174, 174, 174, 174, 103, 103, 103, 103, 103, 103, 174, 174, 174, 174, 174, 174, 174, 174, 174, 103, 174, 174, 174, 174, 174, 174, 174, 103, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 103, 174, 174, 174, 174, 174, 103, 174, 174, 174, 174, 174, 174, 174, 103, 103, 103, 103, 103, 103, 103, 174, 174, 174, 174, 174, 174, 174, 174, 103, 174, 174, 174, 174, 174, 174, 103, 174, 174, 174, 174, 174, 174, 103, 103, 103, 103, 103, 103, 103, 174, 174, 174, 174, 174, 174, 103, 174, 174, 174, 174, 174, 103, 174, 103, 174, 174, 103, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 103, 174, 174, 174, 174, 103, 174, 103, 174, 174, 174, 103, 174, 174, 174, 174, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 174, 174, 174, 103, 174, 174, 174, 103, 103, 103, 174, 103, 103, 103, 174, 103, 174, 103, 174, 103, 174, 103, 103, 103, 103, 103, 174, 103, 103, 103, 103, 103, 174, 174, 174, 174, 174, 103, 103, 103, 174, 103, 103, 174, 174, 174, 103, 103, 174, 174, 103, 103, 103, 174, 174, 174, 103, 103, 103, 174, 174, 174, 174, 103, 174, 174, 174, 174, 103, 174, 174, 103, 103, 103, 103, 174, 174, 103, 103, 174, 174, 103, 174, 174, 174, 103, 174, 174, 103, 174, 174, 103, 103, 174, 174, 103, 174, 174, 103, 103, 103, 174, 174, 174, 103, 174, 103, 174, 174, 103, 103, 103, 174, 103, 103, 103, 103, 103, 103, 103, 174, 174, 174, 174, 103, 174, 174, 174, 174, 174, 174, 174, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 174, 174, 103, 174, 103, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 103, 174, 174, 174, 103, 103, 174, 174, 103, 103, 174, 174, 174, 103, 103, 103, 103, 174, 103, 174, 174, 174, 103, 103, 103, 174, 174, 174, 174, 174, 174, 103, 174, 174, 174, 174, 174, 103, 174, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 174, 174, 174, 174, 103, 103, 103, 174, 103, 103, 174, 174, 174, 103, 103, 103, 174, 174, 103, 0, 103, 0, 0, 103, 174, 0, 0, 103, 0, 103, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 103, 174, 103, 103, 103, 174, 174, 174, 174, 103, 174, 103, 174, 174, 103, 103, 103, 174, 174, 103, 103, 103, 103, 103, 174, 174, 103, 174, 174, 103, 103, 174, 174, 103, 174, 103, 0, 103, 0, 103, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 103, 174, 103, 174, 103, 174, 174, 174, 174, 174, 174, 174, 103, 174, 174, 174, 103, 174, 103, 103, 174, 174, 103, 103, 174, 103, 103, 174, 174, 174, 103, 103, 174, 174, 103, 174, 174, 103, 103, 174, 174, 174, 174, 174, 103, 0, 0, 0, 0, 0, 0, 0, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 174, 174, 174, 174, 174, 103, 103, 103, 174, 103, 174, 174, 103, 174, 174, 103, 103, 174, 174, 174, 103, 103, 174, 174, 174, 103, 103, 103, 103, 174, 103, 174, 174, 174, 174, 174, 174, 174, 103, 174, 174, 103, 174, 174, 174, 174, 174, 103, 0, 0, 0, 0, 0, 103, 103, 174, 103, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 103, 103, 174, 103, 103, 103, 103, 103, 103, 103, 174, 103, 174, 103, 103, 103, 103, 103, 103, 174, 174, 174, 174, 174, 103, 103, 174, 103, 103, 103, 174, 103, 103, 174, 103, 103, 174, 103, 103, 174, 103, 103, 174, 0, 0, 103, 0, 103, 0, 103, 174, 0, 0, 0, 103, 67, 0, 1, 9, 0, 0, 1, 129, 0, 0, 1, 129, 0, 0, 0, 1, 9, 0, 0, 0, 0, 0, 1, 9, 0, 0, 0, 0, 0, 1, 9, 0, 0, 192, 113, 113, 189, 189, 0, 189, 189, 189, 189, 0, 115, 189, 115, 0, 0, 0, 115, 189, 189, 189, 115, 192, 107, 105, 189, 123, 0, 0, 7, 33, 53, 55, 31, 27, 69, 29, 186, 0, 65, 0, 0, 0, 71, 57, 59, 35, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 61, 0, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 177, 174, 174, 0, 0, 0, 0, 0, 0, 0, 93, 1, 25, 0, 0, 0, 180, 103, 0, 83, 120, 0, 180, 183, 183, 183, 0, 183, 0, 183, 183, 0, 177, 77, 180, 183, 183, 183, 0, 183, 0, 183, 183, 0, 177, 77, 180, 183, 183, 183, 0, 183, 0, 183, 183, 0, 177, 77, 0, 180, 183, 183, 183, 0, 183, 0, 183, 183, 0, 177, 77, 0, 81, 0, 0, 7, 23, 81, 0, 0, 23, 7, 81, 180, 183, 183, 183, 0, 183, 0, 183, 183, 0, 177, 77, 0, 79, 183, 183, 0, 79, 51, 39, 85, 37, 49, 45, 89, 41, 87, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 103, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 135, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 168, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 162, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 144, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 141, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 147, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 174, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 174, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 174, 174, 174, 0, 0, 0, 75, 117, 0, 132, 0, 11, 0, 0, 0, 15, 1, 17, 0, 0, 1, 9, 0, 0, 192, 109, 0, 0, 189, 192, 111, 0, 0, 189, 0, 0, 101, 101, 101, 101, 101, 101, 95, 95, 95, 95, 95, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 97, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 0, 21, 21, 19, 19, 19, 19, 113, 115, 115, 115, 115, 0, 0, 93, 91, 103, 83, 73, 77, 77, 77, 77, 81, 81, 81, 77, 79, 79, 85, 89, 87, 103, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 0, 15, 17, 13, 0, 111, 0 , 0 ];
static _flux_to_state_actions: [i8 ; 302] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 126, 0, 0 , 0 ];
static _flux_from_state_actions: [i8 ; 302] = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0 , 0 ];
static _flux_eof_trans: [i16 ; 302] = [ 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3106, 3107, 3108, 3109, 3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119, 3120, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3152, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207, 3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217, 3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3237, 3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3276, 3277, 3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287, 3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297, 3298, 3299, 3300, 3301, 3302, 3303, 3304, 3305, 3306, 3307, 3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350, 3351, 3352, 3353, 3354, 3355, 3356, 3357, 3358, 3359, 3360, 3361, 3362, 3363, 3364, 3365, 3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3374, 3375, 3376, 3377, 3378, 3379, 3380, 3381, 0 , 0 ];
static flux_start : i32 = 227;
static flux_error : i32 = 0;
static flux_en_main_with_regex : i32 = 294;
static flux_en_main : i32 = 227;
static flux_en_string_expr : i32 = 298;
pub fn scan(
data: &[u8],
mode: i32,
pp: &mut i32,
_data: i32,
pe: i32,
eof: i32,
last_newline: &mut i32,
cur_line: &mut i32,
token: &mut TokenType,
token_start: &mut i32,
token_start_line: &mut i32,
token_start_col: &mut i32,
token_end: &mut i32,
token_end_line: &mut i32,
token_end_col: &mut i32 ) -> u32
{
	let mut cs = flux_start;
	match mode {
		0 => { cs = flux_en_main },
		1 => { cs = flux_en_main_with_regex },
		2 => { cs = flux_en_string_expr },
		_ => {},
	}
	let mut p: i32 = *pp;
	
	let mut act: i32 = 0;
	let mut ts: i32 = 0;
	let mut te: i32 = 0;
	let mut tok: TokenType = TokenType::Illegal;
	
	let mut last_newline_before_token: i32 = *last_newline;
	let mut cur_line_token_start: i32 = *cur_line;
	
	// alskdfj
	
	{
		ts = 0;
		te = 0;
		act = 0;
	}
	
	{
		let mut _klen = 0;
		let mut _trans  = 0;
		let mut _keys :i32= 0;
		let mut _acts :i32= 0;
		let mut _nacts = 0;
		let mut __have = 0;
		'_resume: while ( p != pe || p == eof  ) {
			'_again: while ( true  ) {
				_acts = ( _flux_from_state_actions[(cs) as usize] ) as i32;
				_nacts = ( _flux_actions[(_acts ) as usize]
				) as u32;
				_acts += 1;
				while ( _nacts > 0  ) {
					match ( _flux_actions[(_acts ) as usize]
					) {
						3  => {
							{{ts = p;
								}}
							
						}
						
						_ => {}
					}
					_nacts -= 1;
					_acts += 1;
					
				}
				if ( p == eof  ) {
					{
						if ( _flux_eof_trans[(cs) as usize]> 0  ) {
							{
								_trans = ( _flux_eof_trans[(cs) as usize] ) as u32- 1;
							}
							
						}
					}
					
				}
				else {
					{
						_keys = ( _flux_key_offsets[(cs) as usize] ) as i32;
						_trans = ( _flux_index_offsets[(cs) as usize] ) as u32;
						_klen = ( _flux_single_lengths[(cs) as usize] ) as i32;
						__have = 0;
						if ( _klen > 0  ) {
							{
								let mut _lower  :i32= _keys;
								let mut _upper  :i32= _keys + _klen - 1;
								let mut _mid :i32= 0;
								while ( true  ) {
									if ( _upper < _lower  ) {
										{
											_keys += _klen;
											_trans += ( _klen ) as u32;
											break;
										}
										
										
									}
									_mid = _lower + ((_upper-_lower) >> 1);
									if ( ( data[(p ) as usize]
									) < _flux_trans_keys[(_mid ) as usize]
									) {
										_upper = _mid - 1;
										
									}
									else if ( ( data[(p ) as usize]
									) > _flux_trans_keys[(_mid ) as usize]
									) {
										_lower = _mid + 1;
										
									}
									else {
										{
											__have = 1;
											_trans += ( (_mid - _keys) ) as u32;
											break;
										}
										
									}
									
								}
							}
							
							
						}
						_klen = ( _flux_range_lengths[(cs) as usize] ) as i32;
						if ( __have == 0 && _klen > 0  ) {
							{
								let mut _lower  :i32= _keys;
								let mut _upper  :i32= _keys + (_klen<<1) - 2;
								let mut _mid :i32= 0;
								while ( true  ) {
									if ( _upper < _lower  ) {
										{
											_trans += ( _klen ) as u32;
											break;
										}
										
										
									}
									_mid = _lower + (((_upper-_lower) >> 1) & !1
									);
									if ( ( data[(p ) as usize]
									) < _flux_trans_keys[(_mid ) as usize]
									) {
										_upper = _mid - 2;
										
									}
									else if ( ( data[(p ) as usize]
									) > _flux_trans_keys[(_mid + 1 ) as usize]
									) {
										_lower = _mid + 2;
										
									}
									else {
										{
											_trans += ( ((_mid - _keys)>>1) ) as u32;
											break;
										}
										
									}
									
								}
							}
							
							
						}
					}
					
				}
				cs = ( _flux_cond_targs[(_trans) as usize] ) as i32;
				if ( _flux_cond_actions[(_trans) as usize]!= 0  ) {
					{
					
						_acts = ( _flux_cond_actions[(_trans) as usize] ) as i32;
						_nacts = ( _flux_actions[(_acts ) as usize]
						) as u32;
						_acts += 1;
						while ( _nacts > 0  ) {
							match ( _flux_actions[(_acts ) as usize]
							) {
								0  => {
									{*cur_line += 1;
										*last_newline = p + 1;
									}
									
								}
								4  => {
									{{te = p+1;
										}}
									
								}
								5  => {
									{{act = 1;
										}}
									
								}
								6  => {
									{{act = 4;
										}}
									
								}
								7  => {
									{{te = p+1;
											{tok = TokenType::Regex; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								8  => {
									{{te = p+1;
											{last_newline_before_token = *last_newline;
												cur_line_token_start = *cur_line;
											}
										}}
									
								}
								9  => {
									{{te = p+1;
											{{p = p - 1;
												} {cs = 227;
													if ( true  ) {
														break '_again;
														
													}
												}}
										}}
									
								}
								10  => {
									{{te = p;
											p = p - 1;
											{tok = TokenType::Regex; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								11  => {
									{{te = p;
											p = p - 1;
										}}
									
								}
								12  => {
									{{te = p;
											p = p - 1;
											{{p = p - 1;
												} {cs = 227;
													if ( true  ) {
														break '_again;
														
													}
												}}
										}}
									
								}
								13  => {
									{{p = ((te))-1;
											{{p = p - 1;
												} {cs = 227;
													if ( true  ) {
														break '_again;
														
													}
												}}
										}}
									
								}
								14  => {
									{{match ( act  ) {
												1  => {
													p = ((te))-1;
													{tok = TokenType::Regex; {p += 1;
															break '_resume;
														} }
													
												}
												4  => {
													p = ((te))-1;
													{{p = p - 1;
														} {cs = 227;
															if ( true  ) {
																break '_again;
																
															}
														}}
													
												}
												
												_ => {}
											}
										}
									}
									
								}
								15  => {
									{{act = 6;
										}}
									
								}
								16  => {
									{{act = 7;
										}}
									
								}
								17  => {
									{{act = 8;
										}}
									
								}
								18  => {
									{{act = 9;
										}}
									
								}
								19  => {
									{{act = 10;
										}}
									
								}
								20  => {
									{{act = 11;
										}}
									
								}
								21  => {
									{{act = 12;
										}}
									
								}
								22  => {
									{{act = 13;
										}}
									
								}
								23  => {
									{{act = 14;
										}}
									
								}
								24  => {
									{{act = 15;
										}}
									
								}
								25  => {
									{{act = 16;
										}}
									
								}
								26  => {
									{{act = 17;
										}}
									
								}
								27  => {
									{{act = 18;
										}}
									
								}
								28  => {
									{{act = 19;
										}}
									
								}
								29  => {
									{{act = 20;
										}}
									
								}
								30  => {
									{{act = 21;
										}}
									
								}
								31  => {
									{{act = 22;
										}}
									
								}
								32  => {
									{{act = 51;
										}}
									
								}
								33  => {
									{{te = p+1;
											{tok = TokenType::Comment; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								34  => {
									{{te = p+1;
											{tok = TokenType::Time; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								35  => {
									{{te = p+1;
											{tok = TokenType::String; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								36  => {
									{{te = p+1;
											{tok = TokenType::Add; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								37  => {
									{{te = p+1;
											{tok = TokenType::Sub; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								38  => {
									{{te = p+1;
											{tok = TokenType::Mul; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								39  => {
									{{te = p+1;
											{tok = TokenType::Mod; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								40  => {
									{{te = p+1;
											{tok = TokenType::Pow; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								41  => {
									{{te = p+1;
											{tok = TokenType::Eq; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								42  => {
									{{te = p+1;
											{tok = TokenType::Lte; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								43  => {
									{{te = p+1;
											{tok = TokenType::Gte; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								44  => {
									{{te = p+1;
											{tok = TokenType::Neq; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								45  => {
									{{te = p+1;
											{tok = TokenType::RegexEq; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								46  => {
									{{te = p+1;
											{tok = TokenType::RegexNeq; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								47  => {
									{{te = p+1;
											{tok = TokenType::Arrow; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								48  => {
									{{te = p+1;
											{tok = TokenType::PipeReceive; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								49  => {
									{{te = p+1;
											{tok = TokenType::LParen; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								50  => {
									{{te = p+1;
											{tok = TokenType::RParen; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								51  => {
									{{te = p+1;
											{tok = TokenType::LBrack; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								52  => {
									{{te = p+1;
											{tok = TokenType::RBrack; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								53  => {
									{{te = p+1;
											{tok = TokenType::LBrace; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								54  => {
									{{te = p+1;
											{tok = TokenType::RBrace; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								55  => {
									{{te = p+1;
											{tok = TokenType::Colon; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								56  => {
									{{te = p+1;
											{tok = TokenType::PipeForward; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								57  => {
									{{te = p+1;
											{tok = TokenType::Comma; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								58  => {
									{{te = p+1;
											{tok = TokenType::QuestionMark; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								59  => {
									{{te = p+1;
											{last_newline_before_token = *last_newline;
												cur_line_token_start = *cur_line;
											}
										}}
									
								}
								60  => {
									{{te = p;
											p = p - 1;
											{tok = TokenType::Comment; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								61  => {
									{{te = p;
											p = p - 1;
											{tok = TokenType::Ident; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								62  => {
									{{te = p;
											p = p - 1;
											{tok = TokenType::Int; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								63  => {
									{{te = p;
											p = p - 1;
											{tok = TokenType::Duration; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								64  => {
									{{te = p;
											p = p - 1;
											{tok = TokenType::Time; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								65  => {
									{{te = p;
											p = p - 1;
											{tok = TokenType::Div; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								66  => {
									{{te = p;
											p = p - 1;
											{tok = TokenType::Lt; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								67  => {
									{{te = p;
											p = p - 1;
											{tok = TokenType::Gt; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								68  => {
									{{te = p;
											p = p - 1;
											{tok = TokenType::Assign; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								69  => {
									{{te = p;
											p = p - 1;
											{tok = TokenType::Quote; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								70  => {
									{{te = p;
											p = p - 1;
										}}
									
								}
								71  => {
									{{p = ((te))-1;
											{tok = TokenType::Int; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								72  => {
									{{p = ((te))-1;
											{tok = TokenType::Duration; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								73  => {
									{{p = ((te))-1;
											{tok = TokenType::Time; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								74  => {
									{{p = ((te))-1;
											{tok = TokenType::Quote; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								75  => {
									{{match ( act  ) {
												0  => {
													{{cs = 0;
															if ( true  ) {
																break '_again;
																
															}
														}}
													
												}
												6  => {
													p = ((te))-1;
													{tok = TokenType::And; {p += 1;
															break '_resume;
														} }
													
												}
												7  => {
													p = ((te))-1;
													{tok = TokenType::Or; {p += 1;
															break '_resume;
														} }
													
												}
												8  => {
													p = ((te))-1;
													{tok = TokenType::Not; {p += 1;
															break '_resume;
														} }
													
												}
												9  => {
													p = ((te))-1;
													{tok = TokenType::Import; {p += 1;
															break '_resume;
														} }
													
												}
												10  => {
													p = ((te))-1;
													{tok = TokenType::Package; {p += 1;
															break '_resume;
														} }
													
												}
												11  => {
													p = ((te))-1;
													{tok = TokenType::Return; {p += 1;
															break '_resume;
														} }
													
												}
												12  => {
													p = ((te))-1;
													{tok = TokenType::Option; {p += 1;
															break '_resume;
														} }
													
												}
												13  => {
													p = ((te))-1;
													{tok = TokenType::Builtin; {p += 1;
															break '_resume;
														} }
													
												}
												14  => {
													p = ((te))-1;
													{tok = TokenType::TestCase; {p += 1;
															break '_resume;
														} }
													
												}
												15  => {
													p = ((te))-1;
													{tok = TokenType::If; {p += 1;
															break '_resume;
														} }
													
												}
												16  => {
													p = ((te))-1;
													{tok = TokenType::Then; {p += 1;
															break '_resume;
														} }
													
												}
												17  => {
													p = ((te))-1;
													{tok = TokenType::Else; {p += 1;
															break '_resume;
														} }
													
												}
												18  => {
													p = ((te))-1;
													{tok = TokenType::Exists; {p += 1;
															break '_resume;
														} }
													
												}
												19  => {
													p = ((te))-1;
													{tok = TokenType::Ident; {p += 1;
															break '_resume;
														} }
													
												}
												20  => {
													p = ((te))-1;
													{tok = TokenType::Int; {p += 1;
															break '_resume;
														} }
													
												}
												21  => {
													p = ((te))-1;
													{tok = TokenType::Float; {p += 1;
															break '_resume;
														} }
													
												}
												22  => {
													p = ((te))-1;
													{tok = TokenType::Duration; {p += 1;
															break '_resume;
														} }
													
												}
												51  => {
													p = ((te))-1;
													{tok = TokenType::Dot; {p += 1;
															break '_resume;
														} }
													
												}
												
												_ => {}
											}
										}
									}
									
								}
								76  => {
									{{act = 59;
										}}
									
								}
								77  => {
									{{te = p+1;
											{tok = TokenType::StringExpr; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								78  => {
									{{te = p+1;
											{{p = p - 1;
												} te -= 1; tok = TokenType::Text; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								79  => {
									{{te = p+1;
											{tok = TokenType::Quote; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								80  => {
									{{te = p;
											p = p - 1;
											{tok = TokenType::Text; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								81  => {
									{{p = ((te))-1;
											{tok = TokenType::Text; {p += 1;
													break '_resume;
												} }
										}}
									
								}
								82  => {
									{{match ( act  ) {
												0  => {
													{{cs = 0;
															if ( true  ) {
																break '_again;
																
															}
														}}
													
												}
												59  => {
													p = ((te))-1;
													{tok = TokenType::Text; {p += 1;
															break '_resume;
														} }
													
												}
												
												_ => {}
											}
										}
									}
									
								}
								
								_ => {}
							}
							_nacts -= 1;
							_acts += 1;
							
						}
					}
					
				}
				break '_again;
				
			}
			if ( p == eof  ) {
				{
					if ( cs >= 227  ) {
						break '_resume;
						
					}
				}
				
			}
			else {
				{
					_acts = ( _flux_to_state_actions[(cs) as usize] ) as i32;
					_nacts = ( _flux_actions[(_acts ) as usize]
					) as u32;
					_acts += 1;
					while ( _nacts > 0  ) {
						match ( _flux_actions[(_acts ) as usize]
						) {
							1  => {
								{{ts = 0;
									}}
								
							}
							2  => {
								{{act = 0;
									}}
								
							}
							
							_ => {}
						}
						_nacts -= 1;
						_acts += 1;
						
					}
					if ( cs != 0  ) {
						{
							p += 1;
							continue '_resume;
						}
						
					}
				}
				
			}
			break '_resume;
			
		}
	}
	*token = tok;
	
	*token_start = ts - _data;
	*token_start_line = cur_line_token_start;
	*token_start_col = ts - last_newline_before_token + 1;
	
	*token_end = te - _data;
	
	if (*last_newline > te) {
		// te (the token end pointer) will only be less than last_newline
		// (pointer to the last newline the scanner saw) if we are trying
		// to find a multi-line token (either string or regex literal)
		// but don't find the closing `/` or `"`.
		// In that case we need to reset last_newline and cur_line.
		*cur_line = cur_line_token_start;
		*last_newline = last_newline_before_token;
	}
	
	*token_end_line = *cur_line;
	*token_end_col = te - *last_newline + 1;
	
	*pp = p;
	if cs == flux_error {
		return 1
	} else {
		return 0;
	}
}
