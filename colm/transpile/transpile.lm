namespace flux
	include '../flux.lm'
end

include '../influxql.lm'

if argv->length < 1 {
	send stderr "usage: ./transpile bucket-name
	exit(1)
}

parse P: influxql [stdin] 
if ( !P ) {
	send stderr "error parsing influxql query: [error]
	exit( 1 )
}

bool time_constraint( Any: any )
{
	for UE: unary_expr in Any {
		if match UE "time"
			return true
	}
	return false
}

def time_range
	Start: flux::expression
	Stop: flux::expression
[]

void unquote_times( AE: ref<additive_expression> )
{
	for QI: quoted_identifier in AE {
		Time: str = $QI
		Time = prefix( suffix( Time, 1 ), Time.length - 2 )
		QI.data = Time
	}
}

bool check_time( Range: ref<time_range>, CE: comparison_expression )
{
	if match CE "time [Op: comparison_operator Rhs: additive_expression ]"
			&& ( match Op "<" || match Op "<=" )
	{
		unquote_times( Rhs )
		Range.Stop = parse flux::expression [Rhs]
		return true
	}

	if match CE "time [Op: comparison_operator Rhs: additive_expression ]"
			&& ( match Op ">" || match Op ">=" )
	{
		unquote_times( Rhs )
		Range.Start = parse flux::expression [Rhs]
		return true
	}

	return false
}

# Find time constraints and verify we can handle them.
void yank_time( Range: ref<time_range>, Expr: ref<expr> )
{
	Error: bool = false
	for CE: comparison_expression in Expr {
		if ( time_constraint( CE ) ) {
			if !match CE "( [expr] )" {
				if !check_time( Range, CE ) {
					send stderr "ERROR: wonky time constraint: [CE]
					Error = true
				}

				CE = cons comparison_expression " __ERASE_ME__ "
			}
		}
	}

	if ( Error )
		exit(1)
}

# Remove the expression components left behind by the time yanking.
void clean_expr( Expr: ref<expr> )
{
	Modified: bool = true
	while ( Modified ) {
		Modified = false
		for DE: disjunction_expression in Expr {
			if match DE
				"[ Left: disjunction_expression ] OR __ERASE_ME__"
			{
				DE = Left
				Modified = true
			}
			else if match DE
				"__ERASE_ME__ OR [ Right: conjunction_expression ]"
			{
				DE = cons disjunction_expression [Right]
				Modified = true
			}
		}

		for CE: conjunction_expression in Expr {
			if match CE
				"[ Left: conjunction_expression ] AND __ERASE_ME__"
			{
				CE = Left
				Modified = true
			}
			else if match CE
				"__ERASE_ME__ AND [ Right: comparison_expression ]"
			{
				CE = cons conjunction_expression [Right]
				Modified = true
			}
		}

		for CmpE: comparison_expression in Expr {
			if match CmpE "( __ERASE_ME__ )" {
				CmpE = cons comparison_expression "__ERASE_ME__"
				Modified = true
			}
		}
	}
}

void add_time_range( Output: output, Range: time_range )
{
	# Range stop.
	cons Stop: flux::comma_property* []
	if Range.Stop
		Stop = parse flux::comma_property* ", stop: [$Range.Stop] "

	send Output
		"	|> range( start: [Range.Start] [Stop] )
}

void add_measurement_filter( Output: output, SS: select_stmt )
{
	# Add measurement as a filter.
	for Measurement: measurement in SS.from_clause {
		M: str = $Measurement
		if match Measurement [unquoted_identifier]
			M = "\"[M]\""
		send Output
			"	|> filter( fn: (r) => ( r._measurement == [M] ) )
	}
}

void add_where_filter( Output: output, WC: where_clause )
{
	# We are hacking the influxql query so that it will parse as a flux query.
	for Op: AND in WC.expr {
		match Op [And: `AND]
		And.data = 'and'
		Op = cons AND [And]
	}

	for Op: OR in WC.expr {
		match Op [Or: `OR]
		Or.data = 'or'
		Op = cons OR [Or]
	}

	for CE: comparison_operator in WC.expr {
		if match CE [Eq: `=] {
			Eq.data = "=="
			CE = cons comparison_operator [ Eq ]
		}
	}

	for SL: string_lit in WC.expr {
		Str: str = $SL
		Str = prefix( suffix( Str, 1 ), Str.length - 2 )
		SL.data = "\"[Str]\""
	}

	# Reparsing the expression as a flux query. This sends the InfluxQL tree,
	# as text, to a flux expession parser.
	parse Expr: flux::expression [WC.expr]
	if !Expr {
		send stderr
			"ERROR: failed to reparse remaining parts of where clause as flux expression: [error]
			"ERROR: [WC.expr]
		exit(1)
	}
	
	# After reparsing as flux we do some rewriting to add r. qualifications.
	for UE: flux::unary_expression in Expr {
		if match UE [ID: flux::identifier] {
			UE = cons flux::unary_expression " r.[ID] "
		}
	}

	# Generate.
	send Output
		"	|> filter( fn: (r) => ( [Expr ] ) )
}

void add_select_filter( Output: output, SS: select_stmt )
{
	# Add select expression as a filter. Note that this just works on simple
	# select expression that name a value. It does not evaluate expressions.
	for Field: field in SS.fields {
		if match Field [Id: identifier] {
			FieldName: str = $Id
			if match Id [unquoted_identifier]
				FieldName = "\"[FieldName]\""

			send Output
				"	|> filter( fn: (r) => ( r._field == [FieldName] ) )
		}
	}
}

# (not an exhaustive list)
# 1. Extract time constraints from the where clause.
# 2. Build range from extracted time constraints.
# 3. Add measurement filter.
# 4. Build filter from remaining where clause.
# 5. Apply group by (not implemented)
# 6. Apply simple select expressions.

alias output parser<flux::flux>

for SS: select_stmt in P {
	# send stderr "select statement: [^SS]
	cons Range: time_range []

	# Extracting time range from the whre clause. Leaves WC.expr altered.
	WC: where_clause = SS.opt_where_clause.where_clause
	if WC {
		yank_time( Range, WC.expr )
		clean_expr( WC.expr )
	}

	# If there is no start range, add one. 
	if !Range.Start
		Range.Start = parse flux::expression "-1m"

	# Writing output. Note that this output stream is a parser, so it is
	# parsing what is sent to it, as we go along. At the end we will extract
	# the tree and there is opportunity for further rewriting on that. Although
	# we are not doing that in this version.
	new Output: output()
	send Output
		"from( bucket: \"[argv->head_el->value]\")

	add_time_range( Output, Range )
	add_measurement_filter( Output, SS )
	add_where_filter( Output, WC )
	add_select_filter( Output, SS )

	send Output [] eos

	Flux: flux::flux = Output->tree
	if !Flux {
		send stderr "ERROR: failed to parse output text: [Output->error]
		exit(1)
	}
	else {
		print [Flux]
	}
}
