// Generated by tmpl
// https://github.com/benbjohnson/tmpl
//
// DO NOT EDIT!
// Source: repeat.gen.go.tmpl

package array

import (
	"github.com/apache/arrow/go/arrow/memory"
	"github.com/influxdata/flux/codes"
	"github.com/influxdata/flux/internal/errors"
)

func Repeat(v interface{}, n int, mem memory.Allocator) Interface {
	switch v := v.(type) {

	case int64:
		return IntRepeat(v, n, mem)

	case uint64:
		return UintRepeat(v, n, mem)

	case float64:
		return FloatRepeat(v, n, mem)

	case string:
		return StringRepeat(v, n, mem)

	case bool:
		return BooleanRepeat(v, n, mem)

	default:
		panic(errors.Newf(codes.Internal, "invalid arrow primitive type: %T", v))
	}
}

func IntRepeat(v int64, n int, mem memory.Allocator) *Int {
	b := NewIntBuilder(mem)
	b.Resize(n)
	for i := 0; i < n; i++ {
		b.Append(v)
	}
	return b.NewIntArray()
}

func UintRepeat(v uint64, n int, mem memory.Allocator) *Uint {
	b := NewUintBuilder(mem)
	b.Resize(n)
	for i := 0; i < n; i++ {
		b.Append(v)
	}
	return b.NewUintArray()
}

func FloatRepeat(v float64, n int, mem memory.Allocator) *Float {
	b := NewFloatBuilder(mem)
	b.Resize(n)
	for i := 0; i < n; i++ {
		b.Append(v)
	}
	return b.NewFloatArray()
}

func BooleanRepeat(v bool, n int, mem memory.Allocator) *Boolean {
	b := NewBooleanBuilder(mem)
	b.Resize(n)
	for i := 0; i < n; i++ {
		b.Append(v)
	}
	return b.NewBooleanArray()
}
