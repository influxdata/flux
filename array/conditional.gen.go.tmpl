package array

import (
	"github.com/apache/arrow/go/v7/arrow/memory"
	"github.com/influxdata/flux/codes"
	"github.com/influxdata/flux/internal/errors"
)

{{range .}}
func {{.Name}}Conditional(t *Boolean, c, a *{{.Name}}, mem memory.Allocator) (*{{.Name}}, error) {
		n := t.Len()
		b := New{{.Name}}Builder(mem)
		b.Resize(n)

		if !(c.Len() == n && a.Len() == n) {
			return nil, errors.Newf(codes.Invalid, "vectors must be equal length")
		}

		for i := 0; i < n; i++ {
			// nulls are considered as false
			truthy := t.IsValid(i) && t.Value(i)
			if truthy && c.IsValid(i) {
				b.Append(c.Value(i))
			} else if !truthy && a.IsValid(i) {
				b.Append(a.Value(i))
			} else {
				b.AppendNull()
			}
		}
		arr := b.New{{.Name}}Array()
		b.Release()
	return arr, nil
}

func {{.Name}}ConditionalCConst(t *Boolean, c *{{.PrimitiveType}}, a *{{.Name}}, mem memory.Allocator) (*{{.Name}}, error) {
		n := t.Len()
		b := New{{.Name}}Builder(mem)
		b.Resize(n)

		if !(a.Len() == n) {
			return nil, errors.Newf(codes.Invalid, "vectors must be equal length")
		}

		for i := 0; i < n; i++ {
			// nulls are considered as false
			truthy := t.IsValid(i) && t.Value(i)
			if truthy && c != nil {
				b.Append(*c)
			} else if !truthy && a.IsValid(i) {
				b.Append(a.Value(i))
			} else {
				b.AppendNull()
			}
		}
		arr := b.New{{.Name}}Array()
		b.Release()
	return arr, nil
}

func {{.Name}}ConditionalAConst(t *Boolean, c *{{.Name}}, a *{{.PrimitiveType}}, mem memory.Allocator) (*{{.Name}}, error) {
		n := t.Len()
		b := New{{.Name}}Builder(mem)
		b.Resize(n)

		if !(c.Len() == n) {
			return nil, errors.Newf(codes.Invalid, "vectors must be equal length")
		}

		for i := 0; i < n; i++ {
			// nulls are considered as false
			truthy := t.IsValid(i) && t.Value(i)
			if truthy && c.IsValid(i) {
				b.Append(c.Value(i))
			} else if !truthy && a != nil {
				b.Append(*a)
			} else {
				b.AppendNull()
			}
		}
		arr := b.New{{.Name}}Array()
		b.Release()
	return arr, nil
}

func {{.Name}}ConditionalCConstAConst(t *Boolean, c, a *{{.PrimitiveType}}, mem memory.Allocator) (*{{.Name}}, error) {
		// n.b. if both c and a are null, we probably don't know the output type
		// so we can't produce a typed array. If we end up calling this function
		// in this situation, it's probably a programmer error.
		if a == nil && c == nil {
			return nil, errors.Newf(
				codes.Invalid,
				"consequent and alternate are both nil; caller should handle this case by returning `values.Null`",
			)
		}

		n := t.Len()
		b := New{{.Name}}Builder(mem)
		b.Resize(n)

		for i := 0; i < n; i++ {
			// nulls are considered as false
			truthy := t.IsValid(i) && t.Value(i)
			if truthy && c != nil {
				b.Append(*c)
			} else if !truthy && a != nil {
				b.Append(*a)
			} else {
				b.AppendNull()
			}
		}
		arr := b.New{{.Name}}Array()
		b.Release()
	return arr, nil
}
{{end}}
