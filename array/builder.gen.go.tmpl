package array

import (
    "fmt"

    "github.com/apache/arrow/go/v7/arrow/array"
    "github.com/apache/arrow/go/v7/arrow/memory"
)

type (
	{{range .}}{{if .ArrowType}}
	{{.Name}} = array.{{.ArrowType}}{{end}}{{end}}
)

{{range .}}{{if .ArrowType}}
type {{.Name}}Builder struct {
    b *array.{{.ArrowType}}Builder
}

func New{{.Name}}Builder(mem memory.Allocator) *{{.Name}}Builder {
    return &{{.Name}}Builder{
        b: array.New{{.ArrowType}}Builder(mem),
    }
}
func (b *{{.Name}}Builder) Retain() {
    b.b.Retain()
}
func (b *{{.Name}}Builder) Release() {
    b.b.Release()
}
func (b *{{.Name}}Builder) Len() int {
    return b.b.Len()
}
func (b *{{.Name}}Builder) Cap() int {
    return b.b.Cap()
}
func (b *{{.Name}}Builder) Append(v {{.PrimitiveType}}) {
    b.b.Append(v)
}
func (b *{{.Name}}Builder) AppendValues(v []{{.PrimitiveType}}, valid []bool) {
    b.b.AppendValues(v, valid)
}
func (b *{{.Name}}Builder) UnsafeAppend(v {{.PrimitiveType}}) {
    b.b.UnsafeAppend(v)
}
func (b *{{.Name}}Builder) NullN() int {
    return b.b.NullN()
}
func (b *{{.Name}}Builder) AppendNull() {
    b.b.AppendNull()
}
func (b *{{.Name}}Builder) UnsafeAppendBoolToBitmap(isValid bool) {
    b.b.UnsafeAppendBoolToBitmap(isValid)
}
func (b *{{.Name}}Builder) Reserve(n int) {
    b.b.Reserve(n)
}
func (b *{{.Name}}Builder) Resize(n int) {
    b.b.Resize(n)
}
func (b *{{.Name}}Builder) NewArray() Array {
    return b.New{{.Name}}Array()
}
func (b *{{.Name}}Builder) New{{.Name}}Array() *{{.Name}} {
    return b.b.New{{.ArrowType}}Array()
}
func (b *{{.Name}}Builder) CopyValidValues(values *{{.Name}}, nullCheckArray Array) {
    if values.Len() != nullCheckArray.Len() {
        panic("Length mismatch between the value array and the null check array")
    }
    b.Reserve(values.Len() - nullCheckArray.NullN())

	nullBitMapBytes := nullCheckArray.NullBitmapBytes()
	nullOffset := nullCheckArray.Data().Offset()
	for i := 0; i < values.Len(); i++ {
		if isValid(nullBitMapBytes, nullOffset, i) {
            if values.IsValid(i) {
			    b.Append(values.Value(i))
            } else {
			    b.AppendNull()
            }
		}
	}
}
{{end}}{{end}}

// Copies all valid (non-null) values from `values` using the bitmap of nullCheckArray.
// If the entire array is valid a new reference to `values` is returned (as an optimization)
func CopyValidValues(mem memory.Allocator, values Array, nullCheckArray Array) Array {
    if nullCheckArray.NullN() == 0 {
        values.Retain()
        return values
    }

	switch values := values.(type) {
{{range .}}
	case *{{.Name}}:
        b := New{{.Name}}Builder(mem)
        b.CopyValidValues(values, nullCheckArray)
        return b.NewArray()
{{end}}
        default:
            panic(fmt.Sprintf("Unexpected array type: %T", values))
    }

}
