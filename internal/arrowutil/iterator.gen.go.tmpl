package arrowutil

import "github.com/apache/arrow/go/arrow/array"

{{range .}}
type {{.Name}}Iterator struct {
	Values []*{{.Type}}
	i      int
	init   bool
}

func Iterate{{.Name}}s(arrs []array.Interface) {{.Name}}Iterator {
	if len(arrs) == 0 {
		return {{.Name}}Iterator{}
	}
	values := make([]*{{.Type}}, 0, len(arrs))
	for _, arr := range arrs {
		values = append(values, arr.(*{{.Type}}))
	}
	return {{.Name}}Iterator{Values: values}
}

// {{.Value}} returns the current value in the iterator.
func (i *{{.Name}}Iterator) {{.Value}}() {{.PrimitiveType}} {
	vs := i.Values[0]
	return vs.{{.Value}}(i.i)
}

// IsValid returns if the current value is valid.
func (i *{{.Name}}Iterator) IsValid() bool {
	vs := i.Values[0]
	return vs.IsValid(i.i)
}

// IsNull returns if the current value is null.
func (i *{{.Name}}Iterator) IsNull() bool {
	vs := i.Values[0]
	return vs.IsNull(i.i)
}

// Next will move to the next value. It will return false
// if there are no more values to be read. This will
// initialize the iterator if this is the first time it
// is called and return true if there is at least one element.
func (i *{{.Name}}Iterator) Next() bool {
	if !i.init {
		i.init = true
		return i.peek()
	}
	i.i++
	return i.peek()
}

// IsEmpty returns true if the iterator has no values to read.
func (i *{{.Name}}Iterator) IsEmpty() bool {
	return i.peek()
}

// peek will return whether another value is available.
// It will iterate through the iterators until it finds a valid one.
func (i *{{.Name}}Iterator) peek() bool {
	for len(i.Values) > 0 {
		if i.i < i.Values[0].Len() {
			return true
		}
		i.i = 0
		i.Values = i.Values[1:]
	}
	return false
}
{{end}}
