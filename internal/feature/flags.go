// Code generated by the feature package; DO NOT EDIT.

package feature

import (
	"context"

	"github.com/influxdata/flux/internal/pkg/feature"
)

type (
	Flag       = feature.Flag
	Flagger    = feature.Flagger
	StringFlag = feature.StringFlag
	FloatFlag  = feature.FloatFlag
	IntFlag    = feature.IntFlag
	BoolFlag   = feature.BoolFlag
)

var narrowTransformationFilter = feature.MakeBoolFlag(
	"Narrow Transformation Filter",
	"narrowTransformationFilter",
	"Jonathan Sternberg",
	false,
)

// NarrowTransformationFilter - Enable the NarrowTransformation implementation of filter
func NarrowTransformationFilter() BoolFlag {
	return narrowTransformationFilter
}

var aggregateTransformationTransport = feature.MakeBoolFlag(
	"Aggregate Transformation Transport",
	"aggregateTransformationTransport",
	"Jonathan Sternberg",
	false,
)

// AggregateTransformationTransport - Enable Transport interface for AggregateTransformation
func AggregateTransformationTransport() BoolFlag {
	return aggregateTransformationTransport
}

// Inject will inject the Flagger into the context.
func Inject(ctx context.Context, flagger Flagger) context.Context {
	return feature.Inject(ctx, flagger)
}

var all = []Flag{
	narrowTransformationFilter,
	aggregateTransformationTransport,
}

var byKey = map[string]Flag{
	"narrowTransformationFilter":       narrowTransformationFilter,
	"aggregateTransformationTransport": aggregateTransformationTransport,
}

// Flags returns all feature flags.
func Flags() []Flag {
	return all
}

// ByKey returns the Flag corresponding to the given key.
func ByKey(k string) (Flag, bool) {
	v, found := byKey[k]
	return v, found
}
