// DO NOT EDIT: This file is autogenerated via the builtin command.

package universe

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 89,
					Line:   326,
				},
				File:   "universe.flux",
				Source: "package universe\n\nimport \"system\"\nimport \"date\"\nimport \"math\"\nimport \"strings\"\nimport \"regexp\"\n\n// now is a function option whose default behaviour is to return the current system time\noption now = system.time\n\n// Booleans\nbuiltin true : bool\nbuiltin false : bool\n\n// Transformation functions\nbuiltin chandeMomentumOscillator : (<-tables: [A],  n: int, ?columns: [string]) => [B] where A: Record, B: Record\nbuiltin columns : (<-tables: [A], ?column: string) => [B] where A: Record, B: Record\nbuiltin count : (<-tables: [A], ?column: string) => [B] where A: Record, B: Record\nbuiltin covariance : (<-tables: [A], ?pearsonr: bool, ?valueDst: string, columns: [string]) => [B] where A: Record, B: Record\nbuiltin cumulativeSum : (<-tables: [A], ?columns: [string]) => [B] where A: Record, B: Record\nbuiltin derivative : (<-tables: [A], ?unit: duration, ?nonNegative: bool, ?columns: [string], ?timeColumn: string) => [B] where A: Record, B: Record\nbuiltin die : (msg: string) => A\nbuiltin difference : (<-tables: [T], ?nonNegative: bool, ?columns: [string], ?keepFirst: bool) => [R] where T: Record, R: Record\nbuiltin distinct : (<-tables: [A], ?column: string) => [B] where A: Record, B: Record\nbuiltin drop : (<-tables: [A], ?fn: (column: string) => bool, ?columns: [string]) => [B] where A: Record, B: Record\nbuiltin duplicate : (<-tables: [A], column: string, as: string) => [B] where A: Record, B: Record\nbuiltin elapsed : (<-tables: [A], ?unit: duration, ?timeColumn: string, ?columnName: string) => [B] where A: Record, B: Record\nbuiltin exponentialMovingAverage : (<-tables: [{ B with _value: A}], n: int) => [{ B with _value: A }] where A: Numeric\nbuiltin fill : (<-tables: [A], ?column: string, ?value: B, ?usePrevious: bool) => [C] where A: Record, C: Record\nbuiltin filter : (<-tables: [A], fn: (r: A) => bool, ?onEmpty: string) => [A] where A: Record\nbuiltin first : ( <-tables: [A], ?column: string) => [A] where A: Record\nbuiltin group : (<-tables: [A], ?mode: string, ?columns: [string]) => [A] where A: Record\nbuiltin histogram : (<-tables: [A], ?column: string, ?upperBoundColumn: string, ?countColumn: string, bins: [float], ?normalize: bool) => [B] where A: Record, B: Record\nbuiltin histogramQuantile : (<-tables: [A], ?quantile: float, ?countColumn: string, ?upperBoundColumn: string, ?valueColumn: string, ?minValue: float) => [B] where A: Record, B: Record\nbuiltin holtWinters : (<-tables: [A], n: int, interval: duration, ?withFit: bool, ?column: string, ?timeColumn: string, ?seasonality: int) => [B] where A: Record, B: Record\nbuiltin hourSelection : (<-tables: [A], start: int, stop: int, ?timeColumn: string) => [A] where A: Record\nbuiltin integral : (<-tables: [A], ?unit: duration, ?timeColumn: string, ?column: string, ?interpolate: string) => [B] where A: Record, B: Record\nbuiltin join : (<-tables: A, ?method: string, ?on: [string]) => [B] where A: Record, B: Record\nbuiltin kaufmansAMA : (<-tables: [A], n: int, ?column: string) => [B] where A: Record, B: Record\nbuiltin keep : (<-tables: [A], ?columns: [string], ?fn: (column: string) => bool) => [B] where A: Record, B: Record\nbuiltin keyValues : (<-tables: [A], ?keyColumns: [string]) => [{C with _key: string , _value: B}] where A: Record, C: Record\nbuiltin keys : (<-tables: [A], ?column: string) => [B] where A: Record, B: Record\nbuiltin last : (<-tables: [A], ?column: string) => [A] where A: Record\nbuiltin limit : (<-tables: [A], n: int, ?offset: int) => [A]\nbuiltin map : (<-tables: [A], fn: (r: A) => B, ?mergeKey: bool) => [B]\nbuiltin max : (<-tables: [A], ?column: string) => [A] where A: Record\nbuiltin mean : (<-tables: [A], ?column: string) => [B] where A: Record, B: Record\nbuiltin min : (<-tables: [A], ?column: string) => [A] where A: Record\nbuiltin mode : (<-tables: [A], ?column: string) => [{C with _value: B}] where A: Record, C: Record\nbuiltin movingAverage : (<-tables: [{B with _value: A}], n: int) => [{B with _value: float}] where A: Numeric\nbuiltin quantile : (<-tables: [A], ?column: string, q: float, ?compression: float, ?method: string) => [A] where A: Record\nbuiltin pivot : (<-tables: [A], rowKey: [string], columnKey: [string], valueColumn: string) => [B] where A: Record, B: Record\nbuiltin range : (<-tables: [A], start: B, ?stop: C, ?timeColumn: string, ?startColumn: string, ?stopColumn: string) => [D] where A: Record, D: Record\nbuiltin reduce : (<-tables: [A], fn: (r: A, accumulator: B) => B, identity: B) => [C] where A: Record, B: Record, C: Record\nbuiltin relativeStrengthIndex : (<-tables: [A], n: int, ?columns: [string]) => [B] where A: Record, B: Record\nbuiltin rename : (<-tables: [A], ?fn: (column: string) => string, ?columns: B) => [C] where A: Record, B: Record, C: Record\nbuiltin sample : (<-tables: [A], n: int, ?pos: int, ?column: string) => [A] where A: Record\nbuiltin set : (<-tables: [A], key: string, value: string) => [A] where A: Record\nbuiltin tail : (<-tables: [A], n: int, ?offset: int) => [A]\nbuiltin timeShift : (<-tables: [A], duration: duration, ?columns: [string]) => [A]\nbuiltin skew : (<-tables: [A], ?column: string) => [B] where A: Record, B: Record\nbuiltin spread : (<-tables: [A], ?column: string) => [B] where A: Record, B: Record\nbuiltin sort : (<-tables: [A], ?columns: [string], ?desc: bool) => [A] where A: Record\nbuiltin stateTracking : (<-tables: [A], fn: (r: A) => bool, ?countColumn: string, ?durationColumn: string, ?durationUnit: duration, ?timeColumn: string) => [B] where A: Record, B: Record\nbuiltin stddev : (<-tables: [A], ?column: string, ?mode: string) => [B] where A: Record, B: Record\nbuiltin sum : (<-tables: [A], ?column: string) => [B] where A: Record, B: Record\nbuiltin tripleExponentialDerivative : (<-tables: [{B with _value: A}], n: int) => [{B with _value: float}] where A: Numeric, B: Record\nbuiltin union : (tables: [[A]]) => [A] where A: Record\nbuiltin unique : (<-tables: [A], ?column: string) => [A] where A: Record\nbuiltin window : (<-tables: [A], ?every: duration, ?period: duration, ?offset: duration, ?timeColumn: string, ?startColumn: string, ?stopColumn: string, ?createEmpty: bool) => [B] where A: Record, B: Record\nbuiltin yield : (<-tables: [A], ?name: string) => [A] where A: Record\n\n// stream/table index functions\nbuiltin tableFind : (<-tables: [A], fn: (key: B) => bool) => [A] where A: Record, B: Record\nbuiltin getColumn : (<-table: [A], column: string) => [B] where A: Record\nbuiltin getRecord : (<-table: [A], idx: int) => A where A: Record\nbuiltin findColumn : (<-tables: [A], fn: (key: B) => bool, column: string) => [C] where A: Record, B: Record\nbuiltin findRecord : (<-tables: [A], fn: (key: B) => bool, idx: int) => A where A: Record, B: Record\n\n// type conversion functions\nbuiltin bool : (v: A) => bool\nbuiltin bytes : (v: A) => bool\nbuiltin duration : (v: A) => duration\nbuiltin float : (v: A) => float\nbuiltin int : (v: A) => int\nbuiltin string : (v: A) => string\nbuiltin time : (v: A) => time\nbuiltin uint : (v: A) => uint\n\n// contains function\nbuiltin contains : (value: A, set: [A]) => bool where A: Nullable\n\n// other builtins\nbuiltin inf : duration\nbuiltin length : (arr: [A]) => int\nbuiltin linearBins : (start: float, width: float, count: int, ?infinity: bool) => [float]\nbuiltin logarithmicBins : (start: float, factor: float, count: int, ?infinity: bool) => [float]\n\n// sleep is the identity function with the side effect of delaying execution by a specified duration\nbuiltin sleep : (<-v: A, duration: duration) => A\n// die returns a fatal error from within a flux script\nbuiltin die : (msg: string) => A\n\n// Time weighted average where values at the beginning and end of the range are linearly interpolated.\ntimeWeightedAvg = (tables=<-, unit) => tables\n    |> integral(unit: unit, interpolate: \"linear\")\n    |> map(fn: (r) => ({ r with _value: (r._value * float(v: uint(v: unit))) / float(v: int(v: r._stop) - int(v: r._start)) }))\n\n// covariance function with automatic join\ncov = (x,y,on,pearsonr=false) =>\n    join(\n        tables:{x:x, y:y},\n        on:on,\n    )\n    |> covariance(pearsonr:pearsonr, columns:[\"_value_x\",\"_value_y\"])\n\npearsonr = (x,y,on) => cov(x:x, y:y, on:on, pearsonr:true)\n\n// AggregateWindow applies an aggregate function to fixed windows of time.\n// The procedure is to window the data, perform an aggregate operation,\n// and then undo the windowing to produce an output table for every input table.\naggregateWindow = (every, fn, column=\"_value\", timeSrc=\"_stop\",timeDst=\"_time\", createEmpty=true, tables=<-) =>\n    tables\n        |> window(every:every, createEmpty: createEmpty)\n        |> fn(column:column)\n        |> duplicate(column:timeSrc,as:timeDst)\n        |> window(every:inf, timeColumn:timeDst)\n\n// Increase returns the total non-negative difference between values in a table.\n// A main usage case is tracking changes in counter values which may wrap over time when they hit\n// a threshold or are reset. In the case of a wrap/reset,\n// we can assume that the absolute delta between two points will be at least their non-negative difference.\nincrease = (tables=<-, columns=[\"_value\"]) =>\n    tables\n        |> difference(nonNegative: true, columns:columns)\n        |> cumulativeSum(columns: columns)\n\n// median returns the 50th percentile.\nmedian = (method=\"estimate_tdigest\", compression=0.0, column=\"_value\", tables=<-) =>\n    tables\n        |> quantile(q:0.5, method: method, compression: compression, column: column)\n\n// stateCount computes the number of consecutive records in a given state.\n// The state is defined via the function fn. For each consecutive point for\n// which the expression evaluates as true, the state count will be incremented\n// When a point evaluates as false, the state count is reset.\n//\n// The state count will be added as an additional column to each record. If the\n// expression evaluates as false, the value will be -1. If the expression\n// generates an error during evaluation, the point is discarded, and does not\n// affect the state count.\nstateCount = (fn, column=\"stateCount\", tables=<-) =>\n    tables\n        |> stateTracking(countColumn:column, fn:fn)\n\n// stateDuration computes the duration of a given state.\n// The state is defined via the function fn. For each consecutive point for\n// which the expression evaluates as true, the state duration will be\n// incremented by the duration between points. When a point evaluates as false,\n// the state duration is reset.\n//\n// The state duration will be added as an additional column to each record. If the\n// expression evaluates as false, the value will be -1. If the expression\n// generates an error during evaluation, the point is discarded, and does not\n// affect the state duration.\n//\n// Note that as the first point in the given state has no previous point, its\n// state duration will be 0.\n//\n// The duration is represented as an integer in the units specified.\nstateDuration = (fn, column=\"stateDuration\", timeColumn=\"_time\", unit=1s, tables=<-) =>\n    tables\n        |> stateTracking(durationColumn:column, timeColumn:timeColumn, fn:fn, durationUnit:unit)\n\n// _sortLimit is a helper function, which sorts and limits a table.\n_sortLimit = (n, desc, columns=[\"_value\"], tables=<-) =>\n    tables\n        |> sort(columns:columns, desc:desc)\n        |> limit(n:n)\n\n// top sorts a table by columns and keeps only the top n records.\ntop = (n, columns=[\"_value\"], tables=<-) =>\n    tables\n        |> _sortLimit(n:n, columns:columns, desc:true)\n\n// top sorts a table by columns and keeps only the bottom n records.\nbottom = (n, columns=[\"_value\"], tables=<-) =>\n    tables\n        |> _sortLimit(n:n, columns:columns, desc:false)\n\n// _highestOrLowest is a helper function, which reduces all groups into a single group by specific tags and a reducer function,\n// then it selects the highest or lowest records based on the column and the _sortLimit function.\n// The default reducer assumes no reducing needs to be performed.\n_highestOrLowest = (n, _sortLimit, reducer, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> group(columns:groupColumns)\n        |> reducer()\n        |> group(columns:[])\n        |> _sortLimit(n:n, columns:[column])\n\n// highestMax returns the top N records from all groups using the maximum of each group.\nhighestMax = (n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                // TODO(nathanielc): Once max/min support selecting based on multiple columns change this to pass all columns.\n                reducer: (tables=<-) => tables |> max(column:column),\n                _sortLimit: top,\n            )\n\n// highestAverage returns the top N records from all groups using the average of each group.\nhighestAverage = (n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> mean(column:column),\n                _sortLimit: top,\n            )\n\n// highestCurrent returns the top N records from all groups using the last value of each group.\nhighestCurrent = (n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> last(column:column),\n                _sortLimit: top,\n            )\n\n// lowestMin returns the bottom N records from all groups using the minimum of each group.\nlowestMin = (n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                // TODO(nathanielc): Once max/min support selecting based on multiple columns change this to pass all columns.\n                reducer: (tables=<-) => tables |> min(column:column),\n                _sortLimit: bottom,\n            )\n\n// lowestAverage returns the bottom N records from all groups using the average of each group.\nlowestAverage = (n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> mean(column:column),\n                _sortLimit: bottom,\n            )\n\n// lowestCurrent returns the bottom N records from all groups using the last value of each group.\nlowestCurrent = (n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> last(column:column),\n                _sortLimit: bottom,\n            )\n\n// timedMovingAverage constructs a simple moving average over windows of 'period' duration\n// eg: A 5 year moving average would be called as such:\n//    movingAverage(1y, 5y)\ntimedMovingAverage = (every, period, column=\"_value\", tables=<-) =>\n    tables\n        |> window(every: every, period: period)\n        |> mean(column:column)\n        |> duplicate(column: \"_stop\", as: \"_time\")\n        |> window(every: inf)\n\n// Double Exponential Moving Average computes the double exponential moving averages of the `_value` column.\n// eg: A 5 point double exponential moving average would be called as such:\n// from(bucket: \"telegraf/autogen\"):\n//    |> range(start: -7d)\n//    |> doubleEMA(n: 5)\ndoubleEMA = (n, tables=<-) =>\n    tables\n          |> exponentialMovingAverage(n:n)\n          |> duplicate(column:\"_value\", as:\"__ema\")\n          |> exponentialMovingAverage(n:n)\n          |> map(fn: (r) => ({r with _value: 2.0*r.__ema - r._value}))\n          |> drop(columns: [\"__ema\"])\n\n\n// Triple Exponential Moving Average computes the triple exponential moving averages of the `_value` column.\n// eg: A 5 point triple exponential moving average would be called as such:\n// from(bucket: \"telegraf/autogen\"):\n//    |> range(start: -7d)\n//    |> tripleEMA(n: 5)\ntripleEMA = (n, tables=<-) =>\n\ttables\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema1\")\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema2\")\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> map(fn: (r) => ({r with _value: 3.0*r.__ema1 - 3.0*r.__ema2 + r._value}))\n\t\t|> drop(columns: [\"__ema1\", \"__ema2\"])\n\n// truncateTimeColumn takes in a time column t and a Duration unit and truncates each value of t to the given unit via map\n// Change from _time to timeColumn once Flux Issue 1122 is resolved\ntruncateTimeColumn = (timeColumn=\"_time\", unit, tables=<-) =>\n    tables\n        |> map(fn:(r) => ({r with _time: date.truncate(t: r._time, unit: unit)}))\n\n// kaufmansER computes Kaufman's Efficiency Ratios of the `_value` column\nkaufmansER = (n, tables=<-) =>\n    tables\n        |> chandeMomentumOscillator(n: n)\n        |> map(fn:(r) => ({r with _value: (math.abs(x: r._value)/100.0)}))\n\ntoString   = (tables=<-) => tables |> map(fn:(r) => ({r with _value: string(v:r._value)}))\ntoInt      = (tables=<-) => tables |> map(fn:(r) => ({r with _value: int(v:r._value)}))\ntoUInt     = (tables=<-) => tables |> map(fn:(r) => ({r with _value: uint(v:r._value)}))\ntoFloat    = (tables=<-) => tables |> map(fn:(r) => ({r with _value: float(v:r._value)}))\ntoBool     = (tables=<-) => tables |> map(fn:(r) => ({r with _value: bool(v:r._value)}))\ntoTime     = (tables=<-) => tables |> map(fn:(r) => ({r with _value: time(v:r._value)}))",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   10,
						},
						File:   "universe.flux",
						Source: "now = system.time",
						Start: ast.Position{
							Column: 8,
							Line:   10,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   10,
							},
							File:   "universe.flux",
							Source: "now",
							Start: ast.Position{
								Column: 8,
								Line:   10,
							},
						},
					},
					Name: "now",
				},
				Init: &ast.MemberExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   10,
							},
							File:   "universe.flux",
							Source: "system.time",
							Start: ast.Position{
								Column: 14,
								Line:   10,
							},
						},
					},
					Object: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   10,
								},
								File:   "universe.flux",
								Source: "system",
								Start: ast.Position{
									Column: 14,
									Line:   10,
								},
							},
						},
						Name: "system",
					},
					Property: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   10,
								},
								File:   "universe.flux",
								Source: "time",
								Start: ast.Position{
									Column: 21,
									Line:   10,
								},
							},
						},
						Name: "time",
					},
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 25,
						Line:   10,
					},
					File:   "universe.flux",
					Source: "option now = system.time",
					Start: ast.Position{
						Column: 1,
						Line:   10,
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   13,
					},
					File:   "universe.flux",
					Source: "builtin true",
					Start: ast.Position{
						Column: 1,
						Line:   13,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   13,
						},
						File:   "universe.flux",
						Source: "true",
						Start: ast.Position{
							Column: 9,
							Line:   13,
						},
					},
				},
				Name: "true",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   13,
						},
						File:   "universe.flux",
						Source: "bool",
						Start: ast.Position{
							Column: 16,
							Line:   13,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.NamedType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   13,
							},
							File:   "universe.flux",
							Source: "bool",
							Start: ast.Position{
								Column: 16,
								Line:   13,
							},
						},
					},
					ID: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   13,
								},
								File:   "universe.flux",
								Source: "bool",
								Start: ast.Position{
									Column: 16,
									Line:   13,
								},
							},
						},
						Name: "bool",
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   14,
					},
					File:   "universe.flux",
					Source: "builtin false",
					Start: ast.Position{
						Column: 1,
						Line:   14,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   14,
						},
						File:   "universe.flux",
						Source: "false",
						Start: ast.Position{
							Column: 9,
							Line:   14,
						},
					},
				},
				Name: "false",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   14,
						},
						File:   "universe.flux",
						Source: "bool",
						Start: ast.Position{
							Column: 17,
							Line:   14,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.NamedType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   14,
							},
							File:   "universe.flux",
							Source: "bool",
							Start: ast.Position{
								Column: 17,
								Line:   14,
							},
						},
					},
					ID: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   14,
								},
								File:   "universe.flux",
								Source: "bool",
								Start: ast.Position{
									Column: 17,
									Line:   14,
								},
							},
						},
						Name: "bool",
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 33,
						Line:   17,
					},
					File:   "universe.flux",
					Source: "builtin chandeMomentumOscillator",
					Start: ast.Position{
						Column: 1,
						Line:   17,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 33,
							Line:   17,
						},
						File:   "universe.flux",
						Source: "chandeMomentumOscillator",
						Start: ast.Position{
							Column: 9,
							Line:   17,
						},
					},
				},
				Name: "chandeMomentumOscillator",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 114,
							Line:   17,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A],  n: int, ?columns: [string]) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 36,
							Line:   17,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 103,
								Line:   17,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 94,
								Line:   17,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 103,
									Line:   17,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 97,
									Line:   17,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 95,
									Line:   17,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 94,
									Line:   17,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 114,
								Line:   17,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 105,
								Line:   17,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 114,
									Line:   17,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 108,
									Line:   17,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 106,
									Line:   17,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 105,
									Line:   17,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 87,
								Line:   17,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A],  n: int, ?columns: [string]) => [B]",
							Start: ast.Position{
								Column: 36,
								Line:   17,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   17,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 37,
									Line:   17,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   17,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 39,
										Line:   17,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   17,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 47,
										Line:   17,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   17,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 48,
											Line:   17,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   17,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 48,
												Line:   17,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   17,
								},
								File:   "universe.flux",
								Source: "n: int",
								Start: ast.Position{
									Column: 53,
									Line:   17,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   17,
									},
									File:   "universe.flux",
									Source: "n",
									Start: ast.Position{
										Column: 53,
										Line:   17,
									},
								},
							},
							Name: "n",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   17,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 56,
										Line:   17,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   17,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 56,
											Line:   17,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 79,
									Line:   17,
								},
								File:   "universe.flux",
								Source: "?columns: [string]",
								Start: ast.Position{
									Column: 61,
									Line:   17,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 69,
										Line:   17,
									},
									File:   "universe.flux",
									Source: "columns",
									Start: ast.Position{
										Column: 62,
										Line:   17,
									},
								},
							},
							Name: "columns",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   17,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 71,
										Line:   17,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 78,
											Line:   17,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 72,
											Line:   17,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 78,
												Line:   17,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 72,
												Line:   17,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 87,
									Line:   17,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 84,
									Line:   17,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 86,
										Line:   17,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 85,
										Line:   17,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 86,
											Line:   17,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 85,
											Line:   17,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   18,
					},
					File:   "universe.flux",
					Source: "builtin columns",
					Start: ast.Position{
						Column: 1,
						Line:   18,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   18,
						},
						File:   "universe.flux",
						Source: "columns",
						Start: ast.Position{
							Column: 9,
							Line:   18,
						},
					},
				},
				Name: "columns",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 85,
							Line:   18,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 19,
							Line:   18,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 74,
								Line:   18,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 65,
								Line:   18,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 74,
									Line:   18,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 68,
									Line:   18,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   18,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 65,
									Line:   18,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 85,
								Line:   18,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 76,
								Line:   18,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 85,
									Line:   18,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 79,
									Line:   18,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 77,
									Line:   18,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 76,
									Line:   18,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 58,
								Line:   18,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string) => [B]",
							Start: ast.Position{
								Column: 19,
								Line:   18,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   18,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 20,
									Line:   18,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   18,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 22,
										Line:   18,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   18,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 30,
										Line:   18,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   18,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 31,
											Line:   18,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   18,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 31,
												Line:   18,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   18,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 35,
									Line:   18,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   18,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 36,
										Line:   18,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   18,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 44,
										Line:   18,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   18,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 44,
											Line:   18,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   18,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 55,
									Line:   18,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   18,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 56,
										Line:   18,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   18,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 56,
											Line:   18,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   19,
					},
					File:   "universe.flux",
					Source: "builtin count",
					Start: ast.Position{
						Column: 1,
						Line:   19,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   19,
						},
						File:   "universe.flux",
						Source: "count",
						Start: ast.Position{
							Column: 9,
							Line:   19,
						},
					},
				},
				Name: "count",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 83,
							Line:   19,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 17,
							Line:   19,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   19,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 63,
								Line:   19,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   19,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 66,
									Line:   19,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   19,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 63,
									Line:   19,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 83,
								Line:   19,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 74,
								Line:   19,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 83,
									Line:   19,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 77,
									Line:   19,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   19,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 74,
									Line:   19,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 56,
								Line:   19,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string) => [B]",
							Start: ast.Position{
								Column: 17,
								Line:   19,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   19,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 18,
									Line:   19,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   19,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 20,
										Line:   19,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   19,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 28,
										Line:   19,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   19,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 29,
											Line:   19,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   19,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 29,
												Line:   19,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   19,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 33,
									Line:   19,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   19,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 34,
										Line:   19,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   19,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 42,
										Line:   19,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   19,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 42,
											Line:   19,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   19,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 53,
									Line:   19,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   19,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 54,
										Line:   19,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   19,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 54,
											Line:   19,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   20,
					},
					File:   "universe.flux",
					Source: "builtin covariance",
					Start: ast.Position{
						Column: 1,
						Line:   20,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   20,
						},
						File:   "universe.flux",
						Source: "covariance",
						Start: ast.Position{
							Column: 9,
							Line:   20,
						},
					},
				},
				Name: "covariance",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 126,
							Line:   20,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?pearsonr: bool, ?valueDst: string, columns: [string]) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 22,
							Line:   20,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 115,
								Line:   20,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 106,
								Line:   20,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 115,
									Line:   20,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 109,
									Line:   20,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 107,
									Line:   20,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 106,
									Line:   20,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 126,
								Line:   20,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 117,
								Line:   20,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 126,
									Line:   20,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 120,
									Line:   20,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 118,
									Line:   20,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 117,
									Line:   20,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 99,
								Line:   20,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?pearsonr: bool, ?valueDst: string, columns: [string]) => [B]",
							Start: ast.Position{
								Column: 22,
								Line:   20,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   20,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 23,
									Line:   20,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   20,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 25,
										Line:   20,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   20,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 33,
										Line:   20,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   20,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 34,
											Line:   20,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   20,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 34,
												Line:   20,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   20,
								},
								File:   "universe.flux",
								Source: "?pearsonr: bool",
								Start: ast.Position{
									Column: 38,
									Line:   20,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   20,
									},
									File:   "universe.flux",
									Source: "pearsonr",
									Start: ast.Position{
										Column: 39,
										Line:   20,
									},
								},
							},
							Name: "pearsonr",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   20,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 49,
										Line:   20,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   20,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 49,
											Line:   20,
										},
									},
								},
								Name: "bool",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   20,
								},
								File:   "universe.flux",
								Source: "?valueDst: string",
								Start: ast.Position{
									Column: 55,
									Line:   20,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   20,
									},
									File:   "universe.flux",
									Source: "valueDst",
									Start: ast.Position{
										Column: 56,
										Line:   20,
									},
								},
							},
							Name: "valueDst",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   20,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 66,
										Line:   20,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 72,
											Line:   20,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 66,
											Line:   20,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 91,
									Line:   20,
								},
								File:   "universe.flux",
								Source: "columns: [string]",
								Start: ast.Position{
									Column: 74,
									Line:   20,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   20,
									},
									File:   "universe.flux",
									Source: "columns",
									Start: ast.Position{
										Column: 74,
										Line:   20,
									},
								},
							},
							Name: "columns",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 91,
										Line:   20,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 83,
										Line:   20,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 90,
											Line:   20,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 84,
											Line:   20,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 90,
												Line:   20,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 84,
												Line:   20,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   20,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 96,
									Line:   20,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 98,
										Line:   20,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 97,
										Line:   20,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 98,
											Line:   20,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 97,
											Line:   20,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   21,
					},
					File:   "universe.flux",
					Source: "builtin cumulativeSum",
					Start: ast.Position{
						Column: 1,
						Line:   21,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   21,
						},
						File:   "universe.flux",
						Source: "cumulativeSum",
						Start: ast.Position{
							Column: 9,
							Line:   21,
						},
					},
				},
				Name: "cumulativeSum",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 94,
							Line:   21,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?columns: [string]) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 25,
							Line:   21,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 83,
								Line:   21,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 74,
								Line:   21,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 83,
									Line:   21,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 77,
									Line:   21,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   21,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 74,
									Line:   21,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 94,
								Line:   21,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 85,
								Line:   21,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 94,
									Line:   21,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 88,
									Line:   21,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   21,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 85,
									Line:   21,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 67,
								Line:   21,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?columns: [string]) => [B]",
							Start: ast.Position{
								Column: 25,
								Line:   21,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   21,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 26,
									Line:   21,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   21,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 28,
										Line:   21,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   21,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 36,
										Line:   21,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   21,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 37,
											Line:   21,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   21,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 37,
												Line:   21,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   21,
								},
								File:   "universe.flux",
								Source: "?columns: [string]",
								Start: ast.Position{
									Column: 41,
									Line:   21,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   21,
									},
									File:   "universe.flux",
									Source: "columns",
									Start: ast.Position{
										Column: 42,
										Line:   21,
									},
								},
							},
							Name: "columns",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   21,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 51,
										Line:   21,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   21,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 52,
											Line:   21,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   21,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 52,
												Line:   21,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 67,
									Line:   21,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 64,
									Line:   21,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   21,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 65,
										Line:   21,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 66,
											Line:   21,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 65,
											Line:   21,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   22,
					},
					File:   "universe.flux",
					Source: "builtin derivative",
					Start: ast.Position{
						Column: 1,
						Line:   22,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   22,
						},
						File:   "universe.flux",
						Source: "derivative",
						Start: ast.Position{
							Column: 9,
							Line:   22,
						},
					},
				},
				Name: "derivative",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 149,
							Line:   22,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?unit: duration, ?nonNegative: bool, ?columns: [string], ?timeColumn: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 22,
							Line:   22,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 138,
								Line:   22,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 129,
								Line:   22,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 138,
									Line:   22,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 132,
									Line:   22,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 130,
									Line:   22,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 129,
									Line:   22,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 149,
								Line:   22,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 140,
								Line:   22,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 149,
									Line:   22,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 143,
									Line:   22,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 141,
									Line:   22,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 140,
									Line:   22,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 122,
								Line:   22,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?unit: duration, ?nonNegative: bool, ?columns: [string], ?timeColumn: string) => [B]",
							Start: ast.Position{
								Column: 22,
								Line:   22,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   22,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 23,
									Line:   22,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   22,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 25,
										Line:   22,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   22,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 33,
										Line:   22,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   22,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 34,
											Line:   22,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   22,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 34,
												Line:   22,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   22,
								},
								File:   "universe.flux",
								Source: "?unit: duration",
								Start: ast.Position{
									Column: 38,
									Line:   22,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   22,
									},
									File:   "universe.flux",
									Source: "unit",
									Start: ast.Position{
										Column: 39,
										Line:   22,
									},
								},
							},
							Name: "unit",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   22,
									},
									File:   "universe.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 45,
										Line:   22,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   22,
										},
										File:   "universe.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 45,
											Line:   22,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 73,
									Line:   22,
								},
								File:   "universe.flux",
								Source: "?nonNegative: bool",
								Start: ast.Position{
									Column: 55,
									Line:   22,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   22,
									},
									File:   "universe.flux",
									Source: "nonNegative",
									Start: ast.Position{
										Column: 56,
										Line:   22,
									},
								},
							},
							Name: "nonNegative",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 73,
										Line:   22,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 69,
										Line:   22,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 73,
											Line:   22,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 69,
											Line:   22,
										},
									},
								},
								Name: "bool",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 93,
									Line:   22,
								},
								File:   "universe.flux",
								Source: "?columns: [string]",
								Start: ast.Position{
									Column: 75,
									Line:   22,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 83,
										Line:   22,
									},
									File:   "universe.flux",
									Source: "columns",
									Start: ast.Position{
										Column: 76,
										Line:   22,
									},
								},
							},
							Name: "columns",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 93,
										Line:   22,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 85,
										Line:   22,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 92,
											Line:   22,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 86,
											Line:   22,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 92,
												Line:   22,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 86,
												Line:   22,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 114,
									Line:   22,
								},
								File:   "universe.flux",
								Source: "?timeColumn: string",
								Start: ast.Position{
									Column: 95,
									Line:   22,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 106,
										Line:   22,
									},
									File:   "universe.flux",
									Source: "timeColumn",
									Start: ast.Position{
										Column: 96,
										Line:   22,
									},
								},
							},
							Name: "timeColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 114,
										Line:   22,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 108,
										Line:   22,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 114,
											Line:   22,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 108,
											Line:   22,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 122,
									Line:   22,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 119,
									Line:   22,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 121,
										Line:   22,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 120,
										Line:   22,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 121,
											Line:   22,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 120,
											Line:   22,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   23,
					},
					File:   "universe.flux",
					Source: "builtin die",
					Start: ast.Position{
						Column: 1,
						Line:   23,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   23,
						},
						File:   "universe.flux",
						Source: "die",
						Start: ast.Position{
							Column: 9,
							Line:   23,
						},
					},
				},
				Name: "die",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 33,
							Line:   23,
						},
						File:   "universe.flux",
						Source: "(msg: string) => A",
						Start: ast.Position{
							Column: 15,
							Line:   23,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   23,
							},
							File:   "universe.flux",
							Source: "(msg: string) => A",
							Start: ast.Position{
								Column: 15,
								Line:   23,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   23,
								},
								File:   "universe.flux",
								Source: "msg: string",
								Start: ast.Position{
									Column: 16,
									Line:   23,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   23,
									},
									File:   "universe.flux",
									Source: "msg",
									Start: ast.Position{
										Column: 16,
										Line:   23,
									},
								},
							},
							Name: "msg",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   23,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 21,
										Line:   23,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   23,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 21,
											Line:   23,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.TvarType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   23,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 32,
									Line:   23,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   23,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 32,
										Line:   23,
									},
								},
							},
							Name: "A",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   24,
					},
					File:   "universe.flux",
					Source: "builtin difference",
					Start: ast.Position{
						Column: 1,
						Line:   24,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   24,
						},
						File:   "universe.flux",
						Source: "difference",
						Start: ast.Position{
							Column: 9,
							Line:   24,
						},
					},
				},
				Name: "difference",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 129,
							Line:   24,
						},
						File:   "universe.flux",
						Source: "(<-tables: [T], ?nonNegative: bool, ?columns: [string], ?keepFirst: bool) => [R] where T: Record, R: Record",
						Start: ast.Position{
							Column: 22,
							Line:   24,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 118,
								Line:   24,
							},
							File:   "universe.flux",
							Source: "T: Record",
							Start: ast.Position{
								Column: 109,
								Line:   24,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 118,
									Line:   24,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 112,
									Line:   24,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 110,
									Line:   24,
								},
								File:   "universe.flux",
								Source: "T",
								Start: ast.Position{
									Column: 109,
									Line:   24,
								},
							},
						},
						Name: "T",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 129,
								Line:   24,
							},
							File:   "universe.flux",
							Source: "R: Record",
							Start: ast.Position{
								Column: 120,
								Line:   24,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 129,
									Line:   24,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 123,
									Line:   24,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 121,
									Line:   24,
								},
								File:   "universe.flux",
								Source: "R",
								Start: ast.Position{
									Column: 120,
									Line:   24,
								},
							},
						},
						Name: "R",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 102,
								Line:   24,
							},
							File:   "universe.flux",
							Source: "(<-tables: [T], ?nonNegative: bool, ?columns: [string], ?keepFirst: bool) => [R]",
							Start: ast.Position{
								Column: 22,
								Line:   24,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   24,
								},
								File:   "universe.flux",
								Source: "<-tables: [T]",
								Start: ast.Position{
									Column: 23,
									Line:   24,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   24,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 25,
										Line:   24,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   24,
									},
									File:   "universe.flux",
									Source: "[T]",
									Start: ast.Position{
										Column: 33,
										Line:   24,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   24,
										},
										File:   "universe.flux",
										Source: "T",
										Start: ast.Position{
											Column: 34,
											Line:   24,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   24,
											},
											File:   "universe.flux",
											Source: "T",
											Start: ast.Position{
												Column: 34,
												Line:   24,
											},
										},
									},
									Name: "T",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   24,
								},
								File:   "universe.flux",
								Source: "?nonNegative: bool",
								Start: ast.Position{
									Column: 38,
									Line:   24,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   24,
									},
									File:   "universe.flux",
									Source: "nonNegative",
									Start: ast.Position{
										Column: 39,
										Line:   24,
									},
								},
							},
							Name: "nonNegative",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   24,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 52,
										Line:   24,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   24,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 52,
											Line:   24,
										},
									},
								},
								Name: "bool",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 76,
									Line:   24,
								},
								File:   "universe.flux",
								Source: "?columns: [string]",
								Start: ast.Position{
									Column: 58,
									Line:   24,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   24,
									},
									File:   "universe.flux",
									Source: "columns",
									Start: ast.Position{
										Column: 59,
										Line:   24,
									},
								},
							},
							Name: "columns",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 76,
										Line:   24,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 68,
										Line:   24,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 75,
											Line:   24,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 69,
											Line:   24,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 75,
												Line:   24,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 69,
												Line:   24,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 94,
									Line:   24,
								},
								File:   "universe.flux",
								Source: "?keepFirst: bool",
								Start: ast.Position{
									Column: 78,
									Line:   24,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   24,
									},
									File:   "universe.flux",
									Source: "keepFirst",
									Start: ast.Position{
										Column: 79,
										Line:   24,
									},
								},
							},
							Name: "keepFirst",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 94,
										Line:   24,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 90,
										Line:   24,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 94,
											Line:   24,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 90,
											Line:   24,
										},
									},
								},
								Name: "bool",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 102,
									Line:   24,
								},
								File:   "universe.flux",
								Source: "[R]",
								Start: ast.Position{
									Column: 99,
									Line:   24,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 101,
										Line:   24,
									},
									File:   "universe.flux",
									Source: "R",
									Start: ast.Position{
										Column: 100,
										Line:   24,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 101,
											Line:   24,
										},
										File:   "universe.flux",
										Source: "R",
										Start: ast.Position{
											Column: 100,
											Line:   24,
										},
									},
								},
								Name: "R",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   25,
					},
					File:   "universe.flux",
					Source: "builtin distinct",
					Start: ast.Position{
						Column: 1,
						Line:   25,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   25,
						},
						File:   "universe.flux",
						Source: "distinct",
						Start: ast.Position{
							Column: 9,
							Line:   25,
						},
					},
				},
				Name: "distinct",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 86,
							Line:   25,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 20,
							Line:   25,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 75,
								Line:   25,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 66,
								Line:   25,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   25,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 69,
									Line:   25,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 67,
									Line:   25,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 66,
									Line:   25,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 86,
								Line:   25,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 77,
								Line:   25,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   25,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 80,
									Line:   25,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   25,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 77,
									Line:   25,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 59,
								Line:   25,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string) => [B]",
							Start: ast.Position{
								Column: 20,
								Line:   25,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   25,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 21,
									Line:   25,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   25,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 23,
										Line:   25,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   25,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 31,
										Line:   25,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   25,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 32,
											Line:   25,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   25,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 32,
												Line:   25,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   25,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 36,
									Line:   25,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   25,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 37,
										Line:   25,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   25,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 45,
										Line:   25,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   25,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 45,
											Line:   25,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   25,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 56,
									Line:   25,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   25,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 57,
										Line:   25,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   25,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 57,
											Line:   25,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   26,
					},
					File:   "universe.flux",
					Source: "builtin drop",
					Start: ast.Position{
						Column: 1,
						Line:   26,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   26,
						},
						File:   "universe.flux",
						Source: "drop",
						Start: ast.Position{
							Column: 9,
							Line:   26,
						},
					},
				},
				Name: "drop",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 116,
							Line:   26,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?fn: (column: string) => bool, ?columns: [string]) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 16,
							Line:   26,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 105,
								Line:   26,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 96,
								Line:   26,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 105,
									Line:   26,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 99,
									Line:   26,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 97,
									Line:   26,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 96,
									Line:   26,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 116,
								Line:   26,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 107,
								Line:   26,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 116,
									Line:   26,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 110,
									Line:   26,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 108,
									Line:   26,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 107,
									Line:   26,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 89,
								Line:   26,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?fn: (column: string) => bool, ?columns: [string]) => [B]",
							Start: ast.Position{
								Column: 16,
								Line:   26,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   26,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 17,
									Line:   26,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   26,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   26,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   26,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 27,
										Line:   26,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   26,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 28,
											Line:   26,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   26,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 28,
												Line:   26,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   26,
								},
								File:   "universe.flux",
								Source: "?fn: (column: string) => bool",
								Start: ast.Position{
									Column: 32,
									Line:   26,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   26,
									},
									File:   "universe.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 33,
										Line:   26,
									},
								},
							},
							Name: "fn",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   26,
									},
									File:   "universe.flux",
									Source: "(column: string) => bool",
									Start: ast.Position{
										Column: 37,
										Line:   26,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   26,
										},
										File:   "universe.flux",
										Source: "column: string",
										Start: ast.Position{
											Column: 38,
											Line:   26,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   26,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 38,
												Line:   26,
											},
										},
									},
									Name: "column",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 52,
												Line:   26,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 46,
												Line:   26,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 52,
													Line:   26,
												},
												File:   "universe.flux",
												Source: "string",
												Start: ast.Position{
													Column: 46,
													Line:   26,
												},
											},
										},
										Name: "string",
									},
								},
							}},
							Return: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   26,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 57,
											Line:   26,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 61,
												Line:   26,
											},
											File:   "universe.flux",
											Source: "bool",
											Start: ast.Position{
												Column: 57,
												Line:   26,
											},
										},
									},
									Name: "bool",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   26,
								},
								File:   "universe.flux",
								Source: "?columns: [string]",
								Start: ast.Position{
									Column: 63,
									Line:   26,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   26,
									},
									File:   "universe.flux",
									Source: "columns",
									Start: ast.Position{
										Column: 64,
										Line:   26,
									},
								},
							},
							Name: "columns",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   26,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 73,
										Line:   26,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 80,
											Line:   26,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 74,
											Line:   26,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 80,
												Line:   26,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 74,
												Line:   26,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 89,
									Line:   26,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 86,
									Line:   26,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   26,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 87,
										Line:   26,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 88,
											Line:   26,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 87,
											Line:   26,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   27,
					},
					File:   "universe.flux",
					Source: "builtin duplicate",
					Start: ast.Position{
						Column: 1,
						Line:   27,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   27,
						},
						File:   "universe.flux",
						Source: "duplicate",
						Start: ast.Position{
							Column: 9,
							Line:   27,
						},
					},
				},
				Name: "duplicate",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 98,
							Line:   27,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], column: string, as: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 21,
							Line:   27,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 87,
								Line:   27,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 78,
								Line:   27,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 87,
									Line:   27,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 81,
									Line:   27,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 79,
									Line:   27,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 78,
									Line:   27,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 98,
								Line:   27,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 89,
								Line:   27,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 98,
									Line:   27,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 92,
									Line:   27,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   27,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 89,
									Line:   27,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 71,
								Line:   27,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], column: string, as: string) => [B]",
							Start: ast.Position{
								Column: 21,
								Line:   27,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   27,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 22,
									Line:   27,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   27,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 24,
										Line:   27,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   27,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 32,
										Line:   27,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   27,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 33,
											Line:   27,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   27,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 33,
												Line:   27,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   27,
								},
								File:   "universe.flux",
								Source: "column: string",
								Start: ast.Position{
									Column: 37,
									Line:   27,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   27,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 37,
										Line:   27,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   27,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 45,
										Line:   27,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   27,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 45,
											Line:   27,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   27,
								},
								File:   "universe.flux",
								Source: "as: string",
								Start: ast.Position{
									Column: 53,
									Line:   27,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   27,
									},
									File:   "universe.flux",
									Source: "as",
									Start: ast.Position{
										Column: 53,
										Line:   27,
									},
								},
							},
							Name: "as",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   27,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 57,
										Line:   27,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 63,
											Line:   27,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 57,
											Line:   27,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   27,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 68,
									Line:   27,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   27,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 69,
										Line:   27,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   27,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 69,
											Line:   27,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   28,
					},
					File:   "universe.flux",
					Source: "builtin elapsed",
					Start: ast.Position{
						Column: 1,
						Line:   28,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   28,
						},
						File:   "universe.flux",
						Source: "elapsed",
						Start: ast.Position{
							Column: 9,
							Line:   28,
						},
					},
				},
				Name: "elapsed",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 127,
							Line:   28,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?unit: duration, ?timeColumn: string, ?columnName: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 19,
							Line:   28,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 116,
								Line:   28,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 107,
								Line:   28,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 116,
									Line:   28,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 110,
									Line:   28,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 108,
									Line:   28,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 107,
									Line:   28,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 127,
								Line:   28,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 118,
								Line:   28,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 127,
									Line:   28,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 121,
									Line:   28,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 119,
									Line:   28,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 118,
									Line:   28,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 100,
								Line:   28,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?unit: duration, ?timeColumn: string, ?columnName: string) => [B]",
							Start: ast.Position{
								Column: 19,
								Line:   28,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   28,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 20,
									Line:   28,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   28,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 22,
										Line:   28,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   28,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 30,
										Line:   28,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   28,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 31,
											Line:   28,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   28,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 31,
												Line:   28,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   28,
								},
								File:   "universe.flux",
								Source: "?unit: duration",
								Start: ast.Position{
									Column: 35,
									Line:   28,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   28,
									},
									File:   "universe.flux",
									Source: "unit",
									Start: ast.Position{
										Column: 36,
										Line:   28,
									},
								},
							},
							Name: "unit",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   28,
									},
									File:   "universe.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 42,
										Line:   28,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   28,
										},
										File:   "universe.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 42,
											Line:   28,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   28,
								},
								File:   "universe.flux",
								Source: "?timeColumn: string",
								Start: ast.Position{
									Column: 52,
									Line:   28,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   28,
									},
									File:   "universe.flux",
									Source: "timeColumn",
									Start: ast.Position{
										Column: 53,
										Line:   28,
									},
								},
							},
							Name: "timeColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   28,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 65,
										Line:   28,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 71,
											Line:   28,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 65,
											Line:   28,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 92,
									Line:   28,
								},
								File:   "universe.flux",
								Source: "?columnName: string",
								Start: ast.Position{
									Column: 73,
									Line:   28,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 84,
										Line:   28,
									},
									File:   "universe.flux",
									Source: "columnName",
									Start: ast.Position{
										Column: 74,
										Line:   28,
									},
								},
							},
							Name: "columnName",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 92,
										Line:   28,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 86,
										Line:   28,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 92,
											Line:   28,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 86,
											Line:   28,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 100,
									Line:   28,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 97,
									Line:   28,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   28,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 98,
										Line:   28,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 99,
											Line:   28,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 98,
											Line:   28,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 33,
						Line:   29,
					},
					File:   "universe.flux",
					Source: "builtin exponentialMovingAverage",
					Start: ast.Position{
						Column: 1,
						Line:   29,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 33,
							Line:   29,
						},
						File:   "universe.flux",
						Source: "exponentialMovingAverage",
						Start: ast.Position{
							Column: 9,
							Line:   29,
						},
					},
				},
				Name: "exponentialMovingAverage",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 120,
							Line:   29,
						},
						File:   "universe.flux",
						Source: "(<-tables: [{ B with _value: A}], n: int) => [{ B with _value: A }] where A: Numeric",
						Start: ast.Position{
							Column: 36,
							Line:   29,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 120,
								Line:   29,
							},
							File:   "universe.flux",
							Source: "A: Numeric",
							Start: ast.Position{
								Column: 110,
								Line:   29,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 120,
									Line:   29,
								},
								File:   "universe.flux",
								Source: "Numeric",
								Start: ast.Position{
									Column: 113,
									Line:   29,
								},
							},
						},
						Name: "Numeric",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   29,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 110,
									Line:   29,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 103,
								Line:   29,
							},
							File:   "universe.flux",
							Source: "(<-tables: [{ B with _value: A}], n: int) => [{ B with _value: A }]",
							Start: ast.Position{
								Column: 36,
								Line:   29,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   29,
								},
								File:   "universe.flux",
								Source: "<-tables: [{ B with _value: A}]",
								Start: ast.Position{
									Column: 37,
									Line:   29,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   29,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 39,
										Line:   29,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   29,
									},
									File:   "universe.flux",
									Source: "[{ B with _value: A}]",
									Start: ast.Position{
										Column: 47,
										Line:   29,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   29,
										},
										File:   "universe.flux",
										Source: "{ B with _value: A}",
										Start: ast.Position{
											Column: 48,
											Line:   29,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   29,
											},
											File:   "universe.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 57,
												Line:   29,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 63,
													Line:   29,
												},
												File:   "universe.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 57,
													Line:   29,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   29,
												},
												File:   "universe.flux",
												Source: "A",
												Start: ast.Position{
													Column: 65,
													Line:   29,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 66,
														Line:   29,
													},
													File:   "universe.flux",
													Source: "A",
													Start: ast.Position{
														Column: 65,
														Line:   29,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   29,
											},
											File:   "universe.flux",
											Source: "B",
											Start: ast.Position{
												Column: 50,
												Line:   29,
											},
										},
									},
									Name: "B",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 76,
									Line:   29,
								},
								File:   "universe.flux",
								Source: "n: int",
								Start: ast.Position{
									Column: 70,
									Line:   29,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   29,
									},
									File:   "universe.flux",
									Source: "n",
									Start: ast.Position{
										Column: 70,
										Line:   29,
									},
								},
							},
							Name: "n",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 76,
										Line:   29,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 73,
										Line:   29,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 76,
											Line:   29,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 73,
											Line:   29,
										},
									},
								},
								Name: "int",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 103,
									Line:   29,
								},
								File:   "universe.flux",
								Source: "[{ B with _value: A }]",
								Start: ast.Position{
									Column: 81,
									Line:   29,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 102,
										Line:   29,
									},
									File:   "universe.flux",
									Source: "{ B with _value: A }",
									Start: ast.Position{
										Column: 82,
										Line:   29,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 100,
											Line:   29,
										},
										File:   "universe.flux",
										Source: "_value: A",
										Start: ast.Position{
											Column: 91,
											Line:   29,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 97,
												Line:   29,
											},
											File:   "universe.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 91,
												Line:   29,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 100,
												Line:   29,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 99,
												Line:   29,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 100,
													Line:   29,
												},
												File:   "universe.flux",
												Source: "A",
												Start: ast.Position{
													Column: 99,
													Line:   29,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 85,
											Line:   29,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 84,
											Line:   29,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   30,
					},
					File:   "universe.flux",
					Source: "builtin fill",
					Start: ast.Position{
						Column: 1,
						Line:   30,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   30,
						},
						File:   "universe.flux",
						Source: "fill",
						Start: ast.Position{
							Column: 9,
							Line:   30,
						},
					},
				},
				Name: "fill",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 113,
							Line:   30,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string, ?value: B, ?usePrevious: bool) => [C] where A: Record, C: Record",
						Start: ast.Position{
							Column: 16,
							Line:   30,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 102,
								Line:   30,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 93,
								Line:   30,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 102,
									Line:   30,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 96,
									Line:   30,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 94,
									Line:   30,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 93,
									Line:   30,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 113,
								Line:   30,
							},
							File:   "universe.flux",
							Source: "C: Record",
							Start: ast.Position{
								Column: 104,
								Line:   30,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 113,
									Line:   30,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 107,
									Line:   30,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 105,
									Line:   30,
								},
								File:   "universe.flux",
								Source: "C",
								Start: ast.Position{
									Column: 104,
									Line:   30,
								},
							},
						},
						Name: "C",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 86,
								Line:   30,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string, ?value: B, ?usePrevious: bool) => [C]",
							Start: ast.Position{
								Column: 16,
								Line:   30,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   30,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 17,
									Line:   30,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   30,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   30,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   30,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 27,
										Line:   30,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   30,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 28,
											Line:   30,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   30,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 28,
												Line:   30,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   30,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 32,
									Line:   30,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   30,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 33,
										Line:   30,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   30,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 41,
										Line:   30,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   30,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 41,
											Line:   30,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   30,
								},
								File:   "universe.flux",
								Source: "?value: B",
								Start: ast.Position{
									Column: 49,
									Line:   30,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   30,
									},
									File:   "universe.flux",
									Source: "value",
									Start: ast.Position{
										Column: 50,
										Line:   30,
									},
								},
							},
							Name: "value",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   30,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 57,
										Line:   30,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   30,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 57,
											Line:   30,
										},
									},
								},
								Name: "B",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   30,
								},
								File:   "universe.flux",
								Source: "?usePrevious: bool",
								Start: ast.Position{
									Column: 60,
									Line:   30,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   30,
									},
									File:   "universe.flux",
									Source: "usePrevious",
									Start: ast.Position{
										Column: 61,
										Line:   30,
									},
								},
							},
							Name: "usePrevious",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 78,
										Line:   30,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 74,
										Line:   30,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 78,
											Line:   30,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 74,
											Line:   30,
										},
									},
								},
								Name: "bool",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   30,
								},
								File:   "universe.flux",
								Source: "[C]",
								Start: ast.Position{
									Column: 83,
									Line:   30,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 85,
										Line:   30,
									},
									File:   "universe.flux",
									Source: "C",
									Start: ast.Position{
										Column: 84,
										Line:   30,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 85,
											Line:   30,
										},
										File:   "universe.flux",
										Source: "C",
										Start: ast.Position{
											Column: 84,
											Line:   30,
										},
									},
								},
								Name: "C",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   31,
					},
					File:   "universe.flux",
					Source: "builtin filter",
					Start: ast.Position{
						Column: 1,
						Line:   31,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   31,
						},
						File:   "universe.flux",
						Source: "filter",
						Start: ast.Position{
							Column: 9,
							Line:   31,
						},
					},
				},
				Name: "filter",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 94,
							Line:   31,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], fn: (r: A) => bool, ?onEmpty: string) => [A] where A: Record",
						Start: ast.Position{
							Column: 18,
							Line:   31,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 94,
								Line:   31,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 85,
								Line:   31,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 94,
									Line:   31,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 88,
									Line:   31,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   31,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 85,
									Line:   31,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 78,
								Line:   31,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], fn: (r: A) => bool, ?onEmpty: string) => [A]",
							Start: ast.Position{
								Column: 18,
								Line:   31,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   31,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 19,
									Line:   31,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   31,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 21,
										Line:   31,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   31,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 29,
										Line:   31,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   31,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 30,
											Line:   31,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   31,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 30,
												Line:   31,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   31,
								},
								File:   "universe.flux",
								Source: "fn: (r: A) => bool",
								Start: ast.Position{
									Column: 34,
									Line:   31,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   31,
									},
									File:   "universe.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 34,
										Line:   31,
									},
								},
							},
							Name: "fn",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 52,
										Line:   31,
									},
									File:   "universe.flux",
									Source: "(r: A) => bool",
									Start: ast.Position{
										Column: 38,
										Line:   31,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   31,
										},
										File:   "universe.flux",
										Source: "r: A",
										Start: ast.Position{
											Column: 39,
											Line:   31,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   31,
											},
											File:   "universe.flux",
											Source: "r",
											Start: ast.Position{
												Column: 39,
												Line:   31,
											},
										},
									},
									Name: "r",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   31,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 42,
												Line:   31,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   31,
												},
												File:   "universe.flux",
												Source: "A",
												Start: ast.Position{
													Column: 42,
													Line:   31,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Return: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   31,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 48,
											Line:   31,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 52,
												Line:   31,
											},
											File:   "universe.flux",
											Source: "bool",
											Start: ast.Position{
												Column: 48,
												Line:   31,
											},
										},
									},
									Name: "bool",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   31,
								},
								File:   "universe.flux",
								Source: "?onEmpty: string",
								Start: ast.Position{
									Column: 54,
									Line:   31,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   31,
									},
									File:   "universe.flux",
									Source: "onEmpty",
									Start: ast.Position{
										Column: 55,
										Line:   31,
									},
								},
							},
							Name: "onEmpty",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   31,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 64,
										Line:   31,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   31,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 64,
											Line:   31,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   31,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 75,
									Line:   31,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 77,
										Line:   31,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 76,
										Line:   31,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 77,
											Line:   31,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 76,
											Line:   31,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   32,
					},
					File:   "universe.flux",
					Source: "builtin first",
					Start: ast.Position{
						Column: 1,
						Line:   32,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   32,
						},
						File:   "universe.flux",
						Source: "first",
						Start: ast.Position{
							Column: 9,
							Line:   32,
						},
					},
				},
				Name: "first",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 73,
							Line:   32,
						},
						File:   "universe.flux",
						Source: "( <-tables: [A], ?column: string) => [A] where A: Record",
						Start: ast.Position{
							Column: 17,
							Line:   32,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 73,
								Line:   32,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 64,
								Line:   32,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 73,
									Line:   32,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 67,
									Line:   32,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 65,
									Line:   32,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 64,
									Line:   32,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 57,
								Line:   32,
							},
							File:   "universe.flux",
							Source: "( <-tables: [A], ?column: string) => [A]",
							Start: ast.Position{
								Column: 17,
								Line:   32,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   32,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 19,
									Line:   32,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   32,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 21,
										Line:   32,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   32,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 29,
										Line:   32,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   32,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 30,
											Line:   32,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   32,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 30,
												Line:   32,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   32,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 34,
									Line:   32,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   32,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 35,
										Line:   32,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   32,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 43,
										Line:   32,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   32,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 43,
											Line:   32,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   32,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 54,
									Line:   32,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   32,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 55,
										Line:   32,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   32,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 55,
											Line:   32,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   33,
					},
					File:   "universe.flux",
					Source: "builtin group",
					Start: ast.Position{
						Column: 1,
						Line:   33,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   33,
						},
						File:   "universe.flux",
						Source: "group",
						Start: ast.Position{
							Column: 9,
							Line:   33,
						},
					},
				},
				Name: "group",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 90,
							Line:   33,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?mode: string, ?columns: [string]) => [A] where A: Record",
						Start: ast.Position{
							Column: 17,
							Line:   33,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 90,
								Line:   33,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 81,
								Line:   33,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   33,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 84,
									Line:   33,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   33,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 81,
									Line:   33,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 74,
								Line:   33,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?mode: string, ?columns: [string]) => [A]",
							Start: ast.Position{
								Column: 17,
								Line:   33,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   33,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 18,
									Line:   33,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   33,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 20,
										Line:   33,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   33,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 28,
										Line:   33,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   33,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 29,
											Line:   33,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   33,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 29,
												Line:   33,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   33,
								},
								File:   "universe.flux",
								Source: "?mode: string",
								Start: ast.Position{
									Column: 33,
									Line:   33,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   33,
									},
									File:   "universe.flux",
									Source: "mode",
									Start: ast.Position{
										Column: 34,
										Line:   33,
									},
								},
							},
							Name: "mode",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   33,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 40,
										Line:   33,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   33,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 40,
											Line:   33,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   33,
								},
								File:   "universe.flux",
								Source: "?columns: [string]",
								Start: ast.Position{
									Column: 48,
									Line:   33,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   33,
									},
									File:   "universe.flux",
									Source: "columns",
									Start: ast.Position{
										Column: 49,
										Line:   33,
									},
								},
							},
							Name: "columns",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   33,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 58,
										Line:   33,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   33,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 59,
											Line:   33,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   33,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 59,
												Line:   33,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 74,
									Line:   33,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 71,
									Line:   33,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 73,
										Line:   33,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 72,
										Line:   33,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 73,
											Line:   33,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 72,
											Line:   33,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   34,
					},
					File:   "universe.flux",
					Source: "builtin histogram",
					Start: ast.Position{
						Column: 1,
						Line:   34,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   34,
						},
						File:   "universe.flux",
						Source: "histogram",
						Start: ast.Position{
							Column: 9,
							Line:   34,
						},
					},
				},
				Name: "histogram",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 169,
							Line:   34,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string, ?upperBoundColumn: string, ?countColumn: string, bins: [float], ?normalize: bool) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 21,
							Line:   34,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 158,
								Line:   34,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 149,
								Line:   34,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 158,
									Line:   34,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 152,
									Line:   34,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 150,
									Line:   34,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 149,
									Line:   34,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 169,
								Line:   34,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 160,
								Line:   34,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 169,
									Line:   34,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 163,
									Line:   34,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 161,
									Line:   34,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 160,
									Line:   34,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 142,
								Line:   34,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string, ?upperBoundColumn: string, ?countColumn: string, bins: [float], ?normalize: bool) => [B]",
							Start: ast.Position{
								Column: 21,
								Line:   34,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   34,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 22,
									Line:   34,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   34,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 24,
										Line:   34,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   34,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 32,
										Line:   34,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   34,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 33,
											Line:   34,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   34,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 33,
												Line:   34,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   34,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 37,
									Line:   34,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   34,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 38,
										Line:   34,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 52,
										Line:   34,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 46,
										Line:   34,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   34,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 46,
											Line:   34,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 79,
									Line:   34,
								},
								File:   "universe.flux",
								Source: "?upperBoundColumn: string",
								Start: ast.Position{
									Column: 54,
									Line:   34,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   34,
									},
									File:   "universe.flux",
									Source: "upperBoundColumn",
									Start: ast.Position{
										Column: 55,
										Line:   34,
									},
								},
							},
							Name: "upperBoundColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   34,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 73,
										Line:   34,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 79,
											Line:   34,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 73,
											Line:   34,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 101,
									Line:   34,
								},
								File:   "universe.flux",
								Source: "?countColumn: string",
								Start: ast.Position{
									Column: 81,
									Line:   34,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 93,
										Line:   34,
									},
									File:   "universe.flux",
									Source: "countColumn",
									Start: ast.Position{
										Column: 82,
										Line:   34,
									},
								},
							},
							Name: "countColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 101,
										Line:   34,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 95,
										Line:   34,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 101,
											Line:   34,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 95,
											Line:   34,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 116,
									Line:   34,
								},
								File:   "universe.flux",
								Source: "bins: [float]",
								Start: ast.Position{
									Column: 103,
									Line:   34,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 107,
										Line:   34,
									},
									File:   "universe.flux",
									Source: "bins",
									Start: ast.Position{
										Column: 103,
										Line:   34,
									},
								},
							},
							Name: "bins",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 116,
										Line:   34,
									},
									File:   "universe.flux",
									Source: "[float]",
									Start: ast.Position{
										Column: 109,
										Line:   34,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 115,
											Line:   34,
										},
										File:   "universe.flux",
										Source: "float",
										Start: ast.Position{
											Column: 110,
											Line:   34,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 115,
												Line:   34,
											},
											File:   "universe.flux",
											Source: "float",
											Start: ast.Position{
												Column: 110,
												Line:   34,
											},
										},
									},
									Name: "float",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 134,
									Line:   34,
								},
								File:   "universe.flux",
								Source: "?normalize: bool",
								Start: ast.Position{
									Column: 118,
									Line:   34,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 128,
										Line:   34,
									},
									File:   "universe.flux",
									Source: "normalize",
									Start: ast.Position{
										Column: 119,
										Line:   34,
									},
								},
							},
							Name: "normalize",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 134,
										Line:   34,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 130,
										Line:   34,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 134,
											Line:   34,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 130,
											Line:   34,
										},
									},
								},
								Name: "bool",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 142,
									Line:   34,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 139,
									Line:   34,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 141,
										Line:   34,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 140,
										Line:   34,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 141,
											Line:   34,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 140,
											Line:   34,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 26,
						Line:   35,
					},
					File:   "universe.flux",
					Source: "builtin histogramQuantile",
					Start: ast.Position{
						Column: 1,
						Line:   35,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 26,
							Line:   35,
						},
						File:   "universe.flux",
						Source: "histogramQuantile",
						Start: ast.Position{
							Column: 9,
							Line:   35,
						},
					},
				},
				Name: "histogramQuantile",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 185,
							Line:   35,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?quantile: float, ?countColumn: string, ?upperBoundColumn: string, ?valueColumn: string, ?minValue: float) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 29,
							Line:   35,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 174,
								Line:   35,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 165,
								Line:   35,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 174,
									Line:   35,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 168,
									Line:   35,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 166,
									Line:   35,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 165,
									Line:   35,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 185,
								Line:   35,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 176,
								Line:   35,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 185,
									Line:   35,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 179,
									Line:   35,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 177,
									Line:   35,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 176,
									Line:   35,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 158,
								Line:   35,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?quantile: float, ?countColumn: string, ?upperBoundColumn: string, ?valueColumn: string, ?minValue: float) => [B]",
							Start: ast.Position{
								Column: 29,
								Line:   35,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   35,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 30,
									Line:   35,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   35,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 32,
										Line:   35,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   35,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 40,
										Line:   35,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   35,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 41,
											Line:   35,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   35,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 41,
												Line:   35,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   35,
								},
								File:   "universe.flux",
								Source: "?quantile: float",
								Start: ast.Position{
									Column: 45,
									Line:   35,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   35,
									},
									File:   "universe.flux",
									Source: "quantile",
									Start: ast.Position{
										Column: 46,
										Line:   35,
									},
								},
							},
							Name: "quantile",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   35,
									},
									File:   "universe.flux",
									Source: "float",
									Start: ast.Position{
										Column: 56,
										Line:   35,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   35,
										},
										File:   "universe.flux",
										Source: "float",
										Start: ast.Position{
											Column: 56,
											Line:   35,
										},
									},
								},
								Name: "float",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 83,
									Line:   35,
								},
								File:   "universe.flux",
								Source: "?countColumn: string",
								Start: ast.Position{
									Column: 63,
									Line:   35,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   35,
									},
									File:   "universe.flux",
									Source: "countColumn",
									Start: ast.Position{
										Column: 64,
										Line:   35,
									},
								},
							},
							Name: "countColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 83,
										Line:   35,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 77,
										Line:   35,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 83,
											Line:   35,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 77,
											Line:   35,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 110,
									Line:   35,
								},
								File:   "universe.flux",
								Source: "?upperBoundColumn: string",
								Start: ast.Position{
									Column: 85,
									Line:   35,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 102,
										Line:   35,
									},
									File:   "universe.flux",
									Source: "upperBoundColumn",
									Start: ast.Position{
										Column: 86,
										Line:   35,
									},
								},
							},
							Name: "upperBoundColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 110,
										Line:   35,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 104,
										Line:   35,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 110,
											Line:   35,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 104,
											Line:   35,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 132,
									Line:   35,
								},
								File:   "universe.flux",
								Source: "?valueColumn: string",
								Start: ast.Position{
									Column: 112,
									Line:   35,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 124,
										Line:   35,
									},
									File:   "universe.flux",
									Source: "valueColumn",
									Start: ast.Position{
										Column: 113,
										Line:   35,
									},
								},
							},
							Name: "valueColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 132,
										Line:   35,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 126,
										Line:   35,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 132,
											Line:   35,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 126,
											Line:   35,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 150,
									Line:   35,
								},
								File:   "universe.flux",
								Source: "?minValue: float",
								Start: ast.Position{
									Column: 134,
									Line:   35,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 143,
										Line:   35,
									},
									File:   "universe.flux",
									Source: "minValue",
									Start: ast.Position{
										Column: 135,
										Line:   35,
									},
								},
							},
							Name: "minValue",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 150,
										Line:   35,
									},
									File:   "universe.flux",
									Source: "float",
									Start: ast.Position{
										Column: 145,
										Line:   35,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 150,
											Line:   35,
										},
										File:   "universe.flux",
										Source: "float",
										Start: ast.Position{
											Column: 145,
											Line:   35,
										},
									},
								},
								Name: "float",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 158,
									Line:   35,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 155,
									Line:   35,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 157,
										Line:   35,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 156,
										Line:   35,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 157,
											Line:   35,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 156,
											Line:   35,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   36,
					},
					File:   "universe.flux",
					Source: "builtin holtWinters",
					Start: ast.Position{
						Column: 1,
						Line:   36,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   36,
						},
						File:   "universe.flux",
						Source: "holtWinters",
						Start: ast.Position{
							Column: 9,
							Line:   36,
						},
					},
				},
				Name: "holtWinters",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 173,
							Line:   36,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], n: int, interval: duration, ?withFit: bool, ?column: string, ?timeColumn: string, ?seasonality: int) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 23,
							Line:   36,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 162,
								Line:   36,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 153,
								Line:   36,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 162,
									Line:   36,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 156,
									Line:   36,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 154,
									Line:   36,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 153,
									Line:   36,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 173,
								Line:   36,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 164,
								Line:   36,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 173,
									Line:   36,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 167,
									Line:   36,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 165,
									Line:   36,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 164,
									Line:   36,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 146,
								Line:   36,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], n: int, interval: duration, ?withFit: bool, ?column: string, ?timeColumn: string, ?seasonality: int) => [B]",
							Start: ast.Position{
								Column: 23,
								Line:   36,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   36,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 24,
									Line:   36,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 26,
										Line:   36,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 34,
										Line:   36,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   36,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 35,
											Line:   36,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   36,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 35,
												Line:   36,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   36,
								},
								File:   "universe.flux",
								Source: "n: int",
								Start: ast.Position{
									Column: 39,
									Line:   36,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "n",
									Start: ast.Position{
										Column: 39,
										Line:   36,
									},
								},
							},
							Name: "n",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 42,
										Line:   36,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   36,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 42,
											Line:   36,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 65,
									Line:   36,
								},
								File:   "universe.flux",
								Source: "interval: duration",
								Start: ast.Position{
									Column: 47,
									Line:   36,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "interval",
									Start: ast.Position{
										Column: 47,
										Line:   36,
									},
								},
							},
							Name: "interval",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 57,
										Line:   36,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   36,
										},
										File:   "universe.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 57,
											Line:   36,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   36,
								},
								File:   "universe.flux",
								Source: "?withFit: bool",
								Start: ast.Position{
									Column: 67,
									Line:   36,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "withFit",
									Start: ast.Position{
										Column: 68,
										Line:   36,
									},
								},
							},
							Name: "withFit",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 77,
										Line:   36,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 81,
											Line:   36,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 77,
											Line:   36,
										},
									},
								},
								Name: "bool",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 98,
									Line:   36,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 83,
									Line:   36,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 84,
										Line:   36,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 98,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 92,
										Line:   36,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 98,
											Line:   36,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 92,
											Line:   36,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 119,
									Line:   36,
								},
								File:   "universe.flux",
								Source: "?timeColumn: string",
								Start: ast.Position{
									Column: 100,
									Line:   36,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "timeColumn",
									Start: ast.Position{
										Column: 101,
										Line:   36,
									},
								},
							},
							Name: "timeColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 119,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 113,
										Line:   36,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 119,
											Line:   36,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 113,
											Line:   36,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 138,
									Line:   36,
								},
								File:   "universe.flux",
								Source: "?seasonality: int",
								Start: ast.Position{
									Column: 121,
									Line:   36,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 133,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "seasonality",
									Start: ast.Position{
										Column: 122,
										Line:   36,
									},
								},
							},
							Name: "seasonality",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 138,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 135,
										Line:   36,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 138,
											Line:   36,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 135,
											Line:   36,
										},
									},
								},
								Name: "int",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 146,
									Line:   36,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 143,
									Line:   36,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 145,
										Line:   36,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 144,
										Line:   36,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 145,
											Line:   36,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 144,
											Line:   36,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   37,
					},
					File:   "universe.flux",
					Source: "builtin hourSelection",
					Start: ast.Position{
						Column: 1,
						Line:   37,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   37,
						},
						File:   "universe.flux",
						Source: "hourSelection",
						Start: ast.Position{
							Column: 9,
							Line:   37,
						},
					},
				},
				Name: "hourSelection",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 107,
							Line:   37,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], start: int, stop: int, ?timeColumn: string) => [A] where A: Record",
						Start: ast.Position{
							Column: 25,
							Line:   37,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 107,
								Line:   37,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 98,
								Line:   37,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 107,
									Line:   37,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 101,
									Line:   37,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   37,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 98,
									Line:   37,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 91,
								Line:   37,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], start: int, stop: int, ?timeColumn: string) => [A]",
							Start: ast.Position{
								Column: 25,
								Line:   37,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   37,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 26,
									Line:   37,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   37,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 28,
										Line:   37,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   37,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 36,
										Line:   37,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   37,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 37,
											Line:   37,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   37,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 37,
												Line:   37,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   37,
								},
								File:   "universe.flux",
								Source: "start: int",
								Start: ast.Position{
									Column: 41,
									Line:   37,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   37,
									},
									File:   "universe.flux",
									Source: "start",
									Start: ast.Position{
										Column: 41,
										Line:   37,
									},
								},
							},
							Name: "start",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   37,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 48,
										Line:   37,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   37,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 48,
											Line:   37,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   37,
								},
								File:   "universe.flux",
								Source: "stop: int",
								Start: ast.Position{
									Column: 53,
									Line:   37,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   37,
									},
									File:   "universe.flux",
									Source: "stop",
									Start: ast.Position{
										Column: 53,
										Line:   37,
									},
								},
							},
							Name: "stop",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   37,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 59,
										Line:   37,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   37,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 59,
											Line:   37,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 83,
									Line:   37,
								},
								File:   "universe.flux",
								Source: "?timeColumn: string",
								Start: ast.Position{
									Column: 64,
									Line:   37,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   37,
									},
									File:   "universe.flux",
									Source: "timeColumn",
									Start: ast.Position{
										Column: 65,
										Line:   37,
									},
								},
							},
							Name: "timeColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 83,
										Line:   37,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 77,
										Line:   37,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 83,
											Line:   37,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 77,
											Line:   37,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 91,
									Line:   37,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 88,
									Line:   37,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   37,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 89,
										Line:   37,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 90,
											Line:   37,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 89,
											Line:   37,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   38,
					},
					File:   "universe.flux",
					Source: "builtin integral",
					Start: ast.Position{
						Column: 1,
						Line:   38,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   38,
						},
						File:   "universe.flux",
						Source: "integral",
						Start: ast.Position{
							Column: 9,
							Line:   38,
						},
					},
				},
				Name: "integral",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 146,
							Line:   38,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?unit: duration, ?timeColumn: string, ?column: string, ?interpolate: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 20,
							Line:   38,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 135,
								Line:   38,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 126,
								Line:   38,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 135,
									Line:   38,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 129,
									Line:   38,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 127,
									Line:   38,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 126,
									Line:   38,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 146,
								Line:   38,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 137,
								Line:   38,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 146,
									Line:   38,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 140,
									Line:   38,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 138,
									Line:   38,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 137,
									Line:   38,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 119,
								Line:   38,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?unit: duration, ?timeColumn: string, ?column: string, ?interpolate: string) => [B]",
							Start: ast.Position{
								Column: 20,
								Line:   38,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   38,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 21,
									Line:   38,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   38,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 23,
										Line:   38,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   38,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 31,
										Line:   38,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   38,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 32,
											Line:   38,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   38,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 32,
												Line:   38,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   38,
								},
								File:   "universe.flux",
								Source: "?unit: duration",
								Start: ast.Position{
									Column: 36,
									Line:   38,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   38,
									},
									File:   "universe.flux",
									Source: "unit",
									Start: ast.Position{
										Column: 37,
										Line:   38,
									},
								},
							},
							Name: "unit",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   38,
									},
									File:   "universe.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 43,
										Line:   38,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   38,
										},
										File:   "universe.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 43,
											Line:   38,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   38,
								},
								File:   "universe.flux",
								Source: "?timeColumn: string",
								Start: ast.Position{
									Column: 53,
									Line:   38,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   38,
									},
									File:   "universe.flux",
									Source: "timeColumn",
									Start: ast.Position{
										Column: 54,
										Line:   38,
									},
								},
							},
							Name: "timeColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   38,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 66,
										Line:   38,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 72,
											Line:   38,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 66,
											Line:   38,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 89,
									Line:   38,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 74,
									Line:   38,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   38,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 75,
										Line:   38,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 89,
										Line:   38,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 83,
										Line:   38,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 89,
											Line:   38,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 83,
											Line:   38,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 111,
									Line:   38,
								},
								File:   "universe.flux",
								Source: "?interpolate: string",
								Start: ast.Position{
									Column: 91,
									Line:   38,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 103,
										Line:   38,
									},
									File:   "universe.flux",
									Source: "interpolate",
									Start: ast.Position{
										Column: 92,
										Line:   38,
									},
								},
							},
							Name: "interpolate",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 111,
										Line:   38,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 105,
										Line:   38,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 111,
											Line:   38,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 105,
											Line:   38,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 119,
									Line:   38,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 116,
									Line:   38,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 118,
										Line:   38,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 117,
										Line:   38,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 118,
											Line:   38,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 117,
											Line:   38,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   39,
					},
					File:   "universe.flux",
					Source: "builtin join",
					Start: ast.Position{
						Column: 1,
						Line:   39,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   39,
						},
						File:   "universe.flux",
						Source: "join",
						Start: ast.Position{
							Column: 9,
							Line:   39,
						},
					},
				},
				Name: "join",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 95,
							Line:   39,
						},
						File:   "universe.flux",
						Source: "(<-tables: A, ?method: string, ?on: [string]) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 16,
							Line:   39,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 84,
								Line:   39,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 75,
								Line:   39,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 84,
									Line:   39,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 78,
									Line:   39,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 76,
									Line:   39,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 75,
									Line:   39,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 95,
								Line:   39,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 86,
								Line:   39,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 95,
									Line:   39,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 89,
									Line:   39,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 87,
									Line:   39,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 86,
									Line:   39,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   39,
							},
							File:   "universe.flux",
							Source: "(<-tables: A, ?method: string, ?on: [string]) => [B]",
							Start: ast.Position{
								Column: 16,
								Line:   39,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   39,
								},
								File:   "universe.flux",
								Source: "<-tables: A",
								Start: ast.Position{
									Column: 17,
									Line:   39,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   39,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   39,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   39,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 27,
										Line:   39,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   39,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 27,
											Line:   39,
										},
									},
								},
								Name: "A",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   39,
								},
								File:   "universe.flux",
								Source: "?method: string",
								Start: ast.Position{
									Column: 30,
									Line:   39,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   39,
									},
									File:   "universe.flux",
									Source: "method",
									Start: ast.Position{
										Column: 31,
										Line:   39,
									},
								},
							},
							Name: "method",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   39,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 39,
										Line:   39,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   39,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 39,
											Line:   39,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 60,
									Line:   39,
								},
								File:   "universe.flux",
								Source: "?on: [string]",
								Start: ast.Position{
									Column: 47,
									Line:   39,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   39,
									},
									File:   "universe.flux",
									Source: "on",
									Start: ast.Position{
										Column: 48,
										Line:   39,
									},
								},
							},
							Name: "on",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   39,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 52,
										Line:   39,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   39,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 53,
											Line:   39,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   39,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 53,
												Line:   39,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   39,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 65,
									Line:   39,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   39,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 66,
										Line:   39,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   39,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 66,
											Line:   39,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   40,
					},
					File:   "universe.flux",
					Source: "builtin kaufmansAMA",
					Start: ast.Position{
						Column: 1,
						Line:   40,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   40,
						},
						File:   "universe.flux",
						Source: "kaufmansAMA",
						Start: ast.Position{
							Column: 9,
							Line:   40,
						},
					},
				},
				Name: "kaufmansAMA",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 97,
							Line:   40,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], n: int, ?column: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 23,
							Line:   40,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 86,
								Line:   40,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 77,
								Line:   40,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   40,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 80,
									Line:   40,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   40,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 77,
									Line:   40,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 97,
								Line:   40,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 88,
								Line:   40,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 97,
									Line:   40,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 91,
									Line:   40,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 89,
									Line:   40,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 88,
									Line:   40,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 70,
								Line:   40,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], n: int, ?column: string) => [B]",
							Start: ast.Position{
								Column: 23,
								Line:   40,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   40,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 24,
									Line:   40,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   40,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 26,
										Line:   40,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   40,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 34,
										Line:   40,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   40,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 35,
											Line:   40,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   40,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 35,
												Line:   40,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   40,
								},
								File:   "universe.flux",
								Source: "n: int",
								Start: ast.Position{
									Column: 39,
									Line:   40,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   40,
									},
									File:   "universe.flux",
									Source: "n",
									Start: ast.Position{
										Column: 39,
										Line:   40,
									},
								},
							},
							Name: "n",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   40,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 42,
										Line:   40,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   40,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 42,
											Line:   40,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   40,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 47,
									Line:   40,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   40,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 48,
										Line:   40,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   40,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 56,
										Line:   40,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   40,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 56,
											Line:   40,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   40,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 67,
									Line:   40,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 69,
										Line:   40,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 68,
										Line:   40,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   40,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 68,
											Line:   40,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   41,
					},
					File:   "universe.flux",
					Source: "builtin keep",
					Start: ast.Position{
						Column: 1,
						Line:   41,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   41,
						},
						File:   "universe.flux",
						Source: "keep",
						Start: ast.Position{
							Column: 9,
							Line:   41,
						},
					},
				},
				Name: "keep",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 116,
							Line:   41,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?columns: [string], ?fn: (column: string) => bool) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 16,
							Line:   41,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 105,
								Line:   41,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 96,
								Line:   41,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 105,
									Line:   41,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 99,
									Line:   41,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 97,
									Line:   41,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 96,
									Line:   41,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 116,
								Line:   41,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 107,
								Line:   41,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 116,
									Line:   41,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 110,
									Line:   41,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 108,
									Line:   41,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 107,
									Line:   41,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 89,
								Line:   41,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?columns: [string], ?fn: (column: string) => bool) => [B]",
							Start: ast.Position{
								Column: 16,
								Line:   41,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   41,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 17,
									Line:   41,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   41,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   41,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   41,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 27,
										Line:   41,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   41,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 28,
											Line:   41,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   41,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 28,
												Line:   41,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   41,
								},
								File:   "universe.flux",
								Source: "?columns: [string]",
								Start: ast.Position{
									Column: 32,
									Line:   41,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   41,
									},
									File:   "universe.flux",
									Source: "columns",
									Start: ast.Position{
										Column: 33,
										Line:   41,
									},
								},
							},
							Name: "columns",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   41,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 42,
										Line:   41,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   41,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 43,
											Line:   41,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   41,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 43,
												Line:   41,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   41,
								},
								File:   "universe.flux",
								Source: "?fn: (column: string) => bool",
								Start: ast.Position{
									Column: 52,
									Line:   41,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   41,
									},
									File:   "universe.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 53,
										Line:   41,
									},
								},
							},
							Name: "fn",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   41,
									},
									File:   "universe.flux",
									Source: "(column: string) => bool",
									Start: ast.Position{
										Column: 57,
										Line:   41,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 72,
											Line:   41,
										},
										File:   "universe.flux",
										Source: "column: string",
										Start: ast.Position{
											Column: 58,
											Line:   41,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 64,
												Line:   41,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 58,
												Line:   41,
											},
										},
									},
									Name: "column",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 72,
												Line:   41,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 66,
												Line:   41,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 72,
													Line:   41,
												},
												File:   "universe.flux",
												Source: "string",
												Start: ast.Position{
													Column: 66,
													Line:   41,
												},
											},
										},
										Name: "string",
									},
								},
							}},
							Return: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 81,
											Line:   41,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 77,
											Line:   41,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 81,
												Line:   41,
											},
											File:   "universe.flux",
											Source: "bool",
											Start: ast.Position{
												Column: 77,
												Line:   41,
											},
										},
									},
									Name: "bool",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 89,
									Line:   41,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 86,
									Line:   41,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   41,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 87,
										Line:   41,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 88,
											Line:   41,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 87,
											Line:   41,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   42,
					},
					File:   "universe.flux",
					Source: "builtin keyValues",
					Start: ast.Position{
						Column: 1,
						Line:   42,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   42,
						},
						File:   "universe.flux",
						Source: "keyValues",
						Start: ast.Position{
							Column: 9,
							Line:   42,
						},
					},
				},
				Name: "keyValues",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 125,
							Line:   42,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?keyColumns: [string]) => [{C with _key: string , _value: B}] where A: Record, C: Record",
						Start: ast.Position{
							Column: 21,
							Line:   42,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 114,
								Line:   42,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 105,
								Line:   42,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 114,
									Line:   42,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 108,
									Line:   42,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 106,
									Line:   42,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 105,
									Line:   42,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 125,
								Line:   42,
							},
							File:   "universe.flux",
							Source: "C: Record",
							Start: ast.Position{
								Column: 116,
								Line:   42,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 125,
									Line:   42,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 119,
									Line:   42,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 117,
									Line:   42,
								},
								File:   "universe.flux",
								Source: "C",
								Start: ast.Position{
									Column: 116,
									Line:   42,
								},
							},
						},
						Name: "C",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 98,
								Line:   42,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?keyColumns: [string]) => [{C with _key: string , _value: B}]",
							Start: ast.Position{
								Column: 21,
								Line:   42,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   42,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 22,
									Line:   42,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   42,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 24,
										Line:   42,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   42,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 32,
										Line:   42,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   42,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 33,
											Line:   42,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   42,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 33,
												Line:   42,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   42,
								},
								File:   "universe.flux",
								Source: "?keyColumns: [string]",
								Start: ast.Position{
									Column: 37,
									Line:   42,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   42,
									},
									File:   "universe.flux",
									Source: "keyColumns",
									Start: ast.Position{
										Column: 38,
										Line:   42,
									},
								},
							},
							Name: "keyColumns",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   42,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 50,
										Line:   42,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   42,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 51,
											Line:   42,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   42,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 51,
												Line:   42,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 98,
									Line:   42,
								},
								File:   "universe.flux",
								Source: "[{C with _key: string , _value: B}]",
								Start: ast.Position{
									Column: 63,
									Line:   42,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 97,
										Line:   42,
									},
									File:   "universe.flux",
									Source: "{C with _key: string , _value: B}",
									Start: ast.Position{
										Column: 64,
										Line:   42,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 84,
											Line:   42,
										},
										File:   "universe.flux",
										Source: "_key: string",
										Start: ast.Position{
											Column: 72,
											Line:   42,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 76,
												Line:   42,
											},
											File:   "universe.flux",
											Source: "_key",
											Start: ast.Position{
												Column: 72,
												Line:   42,
											},
										},
									},
									Name: "_key",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 84,
												Line:   42,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 78,
												Line:   42,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 84,
													Line:   42,
												},
												File:   "universe.flux",
												Source: "string",
												Start: ast.Position{
													Column: 78,
													Line:   42,
												},
											},
										},
										Name: "string",
									},
								},
							}, &ast.PropertyType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 96,
											Line:   42,
										},
										File:   "universe.flux",
										Source: "_value: B",
										Start: ast.Position{
											Column: 87,
											Line:   42,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 93,
												Line:   42,
											},
											File:   "universe.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 87,
												Line:   42,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 96,
												Line:   42,
											},
											File:   "universe.flux",
											Source: "B",
											Start: ast.Position{
												Column: 95,
												Line:   42,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 96,
													Line:   42,
												},
												File:   "universe.flux",
												Source: "B",
												Start: ast.Position{
													Column: 95,
													Line:   42,
												},
											},
										},
										Name: "B",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 66,
											Line:   42,
										},
										File:   "universe.flux",
										Source: "C",
										Start: ast.Position{
											Column: 65,
											Line:   42,
										},
									},
								},
								Name: "C",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   43,
					},
					File:   "universe.flux",
					Source: "builtin keys",
					Start: ast.Position{
						Column: 1,
						Line:   43,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   43,
						},
						File:   "universe.flux",
						Source: "keys",
						Start: ast.Position{
							Column: 9,
							Line:   43,
						},
					},
				},
				Name: "keys",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 82,
							Line:   43,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 16,
							Line:   43,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 71,
								Line:   43,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 62,
								Line:   43,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   43,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 65,
									Line:   43,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   43,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 62,
									Line:   43,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 82,
								Line:   43,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 73,
								Line:   43,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   43,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 76,
									Line:   43,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 74,
									Line:   43,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 73,
									Line:   43,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 55,
								Line:   43,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string) => [B]",
							Start: ast.Position{
								Column: 16,
								Line:   43,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   43,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 17,
									Line:   43,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   43,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   43,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   43,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 27,
										Line:   43,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   43,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 28,
											Line:   43,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   43,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 28,
												Line:   43,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   43,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 32,
									Line:   43,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   43,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 33,
										Line:   43,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   43,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 41,
										Line:   43,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   43,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 41,
											Line:   43,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   43,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 52,
									Line:   43,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   43,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 53,
										Line:   43,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   43,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 53,
											Line:   43,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   44,
					},
					File:   "universe.flux",
					Source: "builtin last",
					Start: ast.Position{
						Column: 1,
						Line:   44,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   44,
						},
						File:   "universe.flux",
						Source: "last",
						Start: ast.Position{
							Column: 9,
							Line:   44,
						},
					},
				},
				Name: "last",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 71,
							Line:   44,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string) => [A] where A: Record",
						Start: ast.Position{
							Column: 16,
							Line:   44,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 71,
								Line:   44,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 62,
								Line:   44,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   44,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 65,
									Line:   44,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   44,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 62,
									Line:   44,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 55,
								Line:   44,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string) => [A]",
							Start: ast.Position{
								Column: 16,
								Line:   44,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   44,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 17,
									Line:   44,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   44,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   44,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   44,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 27,
										Line:   44,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   44,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 28,
											Line:   44,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   44,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 28,
												Line:   44,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   44,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 32,
									Line:   44,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   44,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 33,
										Line:   44,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   44,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 41,
										Line:   44,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   44,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 41,
											Line:   44,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   44,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 52,
									Line:   44,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   44,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 53,
										Line:   44,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   44,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 53,
											Line:   44,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   45,
					},
					File:   "universe.flux",
					Source: "builtin limit",
					Start: ast.Position{
						Column: 1,
						Line:   45,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   45,
						},
						File:   "universe.flux",
						Source: "limit",
						Start: ast.Position{
							Column: 9,
							Line:   45,
						},
					},
				},
				Name: "limit",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 61,
							Line:   45,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], n: int, ?offset: int) => [A]",
						Start: ast.Position{
							Column: 17,
							Line:   45,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 61,
								Line:   45,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], n: int, ?offset: int) => [A]",
							Start: ast.Position{
								Column: 17,
								Line:   45,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   45,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 18,
									Line:   45,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   45,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 20,
										Line:   45,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   45,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 28,
										Line:   45,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   45,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 29,
											Line:   45,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   45,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 29,
												Line:   45,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   45,
								},
								File:   "universe.flux",
								Source: "n: int",
								Start: ast.Position{
									Column: 33,
									Line:   45,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   45,
									},
									File:   "universe.flux",
									Source: "n",
									Start: ast.Position{
										Column: 33,
										Line:   45,
									},
								},
							},
							Name: "n",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   45,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 36,
										Line:   45,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   45,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 36,
											Line:   45,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   45,
								},
								File:   "universe.flux",
								Source: "?offset: int",
								Start: ast.Position{
									Column: 41,
									Line:   45,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   45,
									},
									File:   "universe.flux",
									Source: "offset",
									Start: ast.Position{
										Column: 42,
										Line:   45,
									},
								},
							},
							Name: "offset",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   45,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 50,
										Line:   45,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   45,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 50,
											Line:   45,
										},
									},
								},
								Name: "int",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   45,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 58,
									Line:   45,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   45,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 59,
										Line:   45,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 60,
											Line:   45,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 59,
											Line:   45,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   46,
					},
					File:   "universe.flux",
					Source: "builtin map",
					Start: ast.Position{
						Column: 1,
						Line:   46,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   46,
						},
						File:   "universe.flux",
						Source: "map",
						Start: ast.Position{
							Column: 9,
							Line:   46,
						},
					},
				},
				Name: "map",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 71,
							Line:   46,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], fn: (r: A) => B, ?mergeKey: bool) => [B]",
						Start: ast.Position{
							Column: 15,
							Line:   46,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 71,
								Line:   46,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], fn: (r: A) => B, ?mergeKey: bool) => [B]",
							Start: ast.Position{
								Column: 15,
								Line:   46,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   46,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 16,
									Line:   46,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   46,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 18,
										Line:   46,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   46,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 26,
										Line:   46,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   46,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 27,
											Line:   46,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   46,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 27,
												Line:   46,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   46,
								},
								File:   "universe.flux",
								Source: "fn: (r: A) => B",
								Start: ast.Position{
									Column: 31,
									Line:   46,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   46,
									},
									File:   "universe.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 31,
										Line:   46,
									},
								},
							},
							Name: "fn",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   46,
									},
									File:   "universe.flux",
									Source: "(r: A) => B",
									Start: ast.Position{
										Column: 35,
										Line:   46,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   46,
										},
										File:   "universe.flux",
										Source: "r: A",
										Start: ast.Position{
											Column: 36,
											Line:   46,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   46,
											},
											File:   "universe.flux",
											Source: "r",
											Start: ast.Position{
												Column: 36,
												Line:   46,
											},
										},
									},
									Name: "r",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   46,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 39,
												Line:   46,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   46,
												},
												File:   "universe.flux",
												Source: "A",
												Start: ast.Position{
													Column: 39,
													Line:   46,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Return: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   46,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 45,
											Line:   46,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   46,
											},
											File:   "universe.flux",
											Source: "B",
											Start: ast.Position{
												Column: 45,
												Line:   46,
											},
										},
									},
									Name: "B",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   46,
								},
								File:   "universe.flux",
								Source: "?mergeKey: bool",
								Start: ast.Position{
									Column: 48,
									Line:   46,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   46,
									},
									File:   "universe.flux",
									Source: "mergeKey",
									Start: ast.Position{
										Column: 49,
										Line:   46,
									},
								},
							},
							Name: "mergeKey",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   46,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 59,
										Line:   46,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 63,
											Line:   46,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 59,
											Line:   46,
										},
									},
								},
								Name: "bool",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   46,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 68,
									Line:   46,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   46,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 69,
										Line:   46,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   46,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 69,
											Line:   46,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   47,
					},
					File:   "universe.flux",
					Source: "builtin max",
					Start: ast.Position{
						Column: 1,
						Line:   47,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   47,
						},
						File:   "universe.flux",
						Source: "max",
						Start: ast.Position{
							Column: 9,
							Line:   47,
						},
					},
				},
				Name: "max",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 70,
							Line:   47,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string) => [A] where A: Record",
						Start: ast.Position{
							Column: 15,
							Line:   47,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 70,
								Line:   47,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 61,
								Line:   47,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   47,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 64,
									Line:   47,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   47,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 61,
									Line:   47,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 54,
								Line:   47,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string) => [A]",
							Start: ast.Position{
								Column: 15,
								Line:   47,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   47,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 16,
									Line:   47,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   47,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 18,
										Line:   47,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   47,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 26,
										Line:   47,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   47,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 27,
											Line:   47,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   47,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 27,
												Line:   47,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   47,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 31,
									Line:   47,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   47,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 32,
										Line:   47,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   47,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 40,
										Line:   47,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   47,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 40,
											Line:   47,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   47,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 51,
									Line:   47,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   47,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 52,
										Line:   47,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   47,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 52,
											Line:   47,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   48,
					},
					File:   "universe.flux",
					Source: "builtin mean",
					Start: ast.Position{
						Column: 1,
						Line:   48,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   48,
						},
						File:   "universe.flux",
						Source: "mean",
						Start: ast.Position{
							Column: 9,
							Line:   48,
						},
					},
				},
				Name: "mean",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 82,
							Line:   48,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 16,
							Line:   48,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 71,
								Line:   48,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 62,
								Line:   48,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   48,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 65,
									Line:   48,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   48,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 62,
									Line:   48,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 82,
								Line:   48,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 73,
								Line:   48,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   48,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 76,
									Line:   48,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 74,
									Line:   48,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 73,
									Line:   48,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 55,
								Line:   48,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string) => [B]",
							Start: ast.Position{
								Column: 16,
								Line:   48,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   48,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 17,
									Line:   48,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   48,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   48,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   48,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 27,
										Line:   48,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   48,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 28,
											Line:   48,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   48,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 28,
												Line:   48,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   48,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 32,
									Line:   48,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   48,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 33,
										Line:   48,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   48,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 41,
										Line:   48,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   48,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 41,
											Line:   48,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   48,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 52,
									Line:   48,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   48,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 53,
										Line:   48,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   48,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 53,
											Line:   48,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   49,
					},
					File:   "universe.flux",
					Source: "builtin min",
					Start: ast.Position{
						Column: 1,
						Line:   49,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   49,
						},
						File:   "universe.flux",
						Source: "min",
						Start: ast.Position{
							Column: 9,
							Line:   49,
						},
					},
				},
				Name: "min",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 70,
							Line:   49,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string) => [A] where A: Record",
						Start: ast.Position{
							Column: 15,
							Line:   49,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 70,
								Line:   49,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 61,
								Line:   49,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   49,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 64,
									Line:   49,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   49,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 61,
									Line:   49,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 54,
								Line:   49,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string) => [A]",
							Start: ast.Position{
								Column: 15,
								Line:   49,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   49,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 16,
									Line:   49,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   49,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 18,
										Line:   49,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   49,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 26,
										Line:   49,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   49,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 27,
											Line:   49,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   49,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 27,
												Line:   49,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   49,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 31,
									Line:   49,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   49,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 32,
										Line:   49,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   49,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 40,
										Line:   49,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   49,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 40,
											Line:   49,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   49,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 51,
									Line:   49,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   49,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 52,
										Line:   49,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   49,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 52,
											Line:   49,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   50,
					},
					File:   "universe.flux",
					Source: "builtin mode",
					Start: ast.Position{
						Column: 1,
						Line:   50,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   50,
						},
						File:   "universe.flux",
						Source: "mode",
						Start: ast.Position{
							Column: 9,
							Line:   50,
						},
					},
				},
				Name: "mode",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 99,
							Line:   50,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string) => [{C with _value: B}] where A: Record, C: Record",
						Start: ast.Position{
							Column: 16,
							Line:   50,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 88,
								Line:   50,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 79,
								Line:   50,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   50,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 82,
									Line:   50,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   50,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 79,
									Line:   50,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 99,
								Line:   50,
							},
							File:   "universe.flux",
							Source: "C: Record",
							Start: ast.Position{
								Column: 90,
								Line:   50,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   50,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 93,
									Line:   50,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 91,
									Line:   50,
								},
								File:   "universe.flux",
								Source: "C",
								Start: ast.Position{
									Column: 90,
									Line:   50,
								},
							},
						},
						Name: "C",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   50,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string) => [{C with _value: B}]",
							Start: ast.Position{
								Column: 16,
								Line:   50,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   50,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 17,
									Line:   50,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   50,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   50,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   50,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 27,
										Line:   50,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   50,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 28,
											Line:   50,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   50,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 28,
												Line:   50,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   50,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 32,
									Line:   50,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   50,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 33,
										Line:   50,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   50,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 41,
										Line:   50,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   50,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 41,
											Line:   50,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   50,
								},
								File:   "universe.flux",
								Source: "[{C with _value: B}]",
								Start: ast.Position{
									Column: 52,
									Line:   50,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   50,
									},
									File:   "universe.flux",
									Source: "{C with _value: B}",
									Start: ast.Position{
										Column: 53,
										Line:   50,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   50,
										},
										File:   "universe.flux",
										Source: "_value: B",
										Start: ast.Position{
											Column: 61,
											Line:   50,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   50,
											},
											File:   "universe.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 61,
												Line:   50,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 70,
												Line:   50,
											},
											File:   "universe.flux",
											Source: "B",
											Start: ast.Position{
												Column: 69,
												Line:   50,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 70,
													Line:   50,
												},
												File:   "universe.flux",
												Source: "B",
												Start: ast.Position{
													Column: 69,
													Line:   50,
												},
											},
										},
										Name: "B",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   50,
										},
										File:   "universe.flux",
										Source: "C",
										Start: ast.Position{
											Column: 54,
											Line:   50,
										},
									},
								},
								Name: "C",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   51,
					},
					File:   "universe.flux",
					Source: "builtin movingAverage",
					Start: ast.Position{
						Column: 1,
						Line:   51,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   51,
						},
						File:   "universe.flux",
						Source: "movingAverage",
						Start: ast.Position{
							Column: 9,
							Line:   51,
						},
					},
				},
				Name: "movingAverage",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 110,
							Line:   51,
						},
						File:   "universe.flux",
						Source: "(<-tables: [{B with _value: A}], n: int) => [{B with _value: float}] where A: Numeric",
						Start: ast.Position{
							Column: 25,
							Line:   51,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 110,
								Line:   51,
							},
							File:   "universe.flux",
							Source: "A: Numeric",
							Start: ast.Position{
								Column: 100,
								Line:   51,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 110,
									Line:   51,
								},
								File:   "universe.flux",
								Source: "Numeric",
								Start: ast.Position{
									Column: 103,
									Line:   51,
								},
							},
						},
						Name: "Numeric",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 101,
									Line:   51,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 100,
									Line:   51,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 93,
								Line:   51,
							},
							File:   "universe.flux",
							Source: "(<-tables: [{B with _value: A}], n: int) => [{B with _value: float}]",
							Start: ast.Position{
								Column: 25,
								Line:   51,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   51,
								},
								File:   "universe.flux",
								Source: "<-tables: [{B with _value: A}]",
								Start: ast.Position{
									Column: 26,
									Line:   51,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   51,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 28,
										Line:   51,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   51,
									},
									File:   "universe.flux",
									Source: "[{B with _value: A}]",
									Start: ast.Position{
										Column: 36,
										Line:   51,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   51,
										},
										File:   "universe.flux",
										Source: "{B with _value: A}",
										Start: ast.Position{
											Column: 37,
											Line:   51,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   51,
											},
											File:   "universe.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 45,
												Line:   51,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   51,
												},
												File:   "universe.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 45,
													Line:   51,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   51,
												},
												File:   "universe.flux",
												Source: "A",
												Start: ast.Position{
													Column: 53,
													Line:   51,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 54,
														Line:   51,
													},
													File:   "universe.flux",
													Source: "A",
													Start: ast.Position{
														Column: 53,
														Line:   51,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   51,
											},
											File:   "universe.flux",
											Source: "B",
											Start: ast.Position{
												Column: 38,
												Line:   51,
											},
										},
									},
									Name: "B",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   51,
								},
								File:   "universe.flux",
								Source: "n: int",
								Start: ast.Position{
									Column: 58,
									Line:   51,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   51,
									},
									File:   "universe.flux",
									Source: "n",
									Start: ast.Position{
										Column: 58,
										Line:   51,
									},
								},
							},
							Name: "n",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   51,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 61,
										Line:   51,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 64,
											Line:   51,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 61,
											Line:   51,
										},
									},
								},
								Name: "int",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 93,
									Line:   51,
								},
								File:   "universe.flux",
								Source: "[{B with _value: float}]",
								Start: ast.Position{
									Column: 69,
									Line:   51,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 92,
										Line:   51,
									},
									File:   "universe.flux",
									Source: "{B with _value: float}",
									Start: ast.Position{
										Column: 70,
										Line:   51,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 91,
											Line:   51,
										},
										File:   "universe.flux",
										Source: "_value: float",
										Start: ast.Position{
											Column: 78,
											Line:   51,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 84,
												Line:   51,
											},
											File:   "universe.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 78,
												Line:   51,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 91,
												Line:   51,
											},
											File:   "universe.flux",
											Source: "float",
											Start: ast.Position{
												Column: 86,
												Line:   51,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 91,
													Line:   51,
												},
												File:   "universe.flux",
												Source: "float",
												Start: ast.Position{
													Column: 86,
													Line:   51,
												},
											},
										},
										Name: "float",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 72,
											Line:   51,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 71,
											Line:   51,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   52,
					},
					File:   "universe.flux",
					Source: "builtin quantile",
					Start: ast.Position{
						Column: 1,
						Line:   52,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   52,
						},
						File:   "universe.flux",
						Source: "quantile",
						Start: ast.Position{
							Column: 9,
							Line:   52,
						},
					},
				},
				Name: "quantile",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 123,
							Line:   52,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string, q: float, ?compression: float, ?method: string) => [A] where A: Record",
						Start: ast.Position{
							Column: 20,
							Line:   52,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 123,
								Line:   52,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 114,
								Line:   52,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 123,
									Line:   52,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 117,
									Line:   52,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 115,
									Line:   52,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 114,
									Line:   52,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 107,
								Line:   52,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string, q: float, ?compression: float, ?method: string) => [A]",
							Start: ast.Position{
								Column: 20,
								Line:   52,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   52,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 21,
									Line:   52,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   52,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 23,
										Line:   52,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   52,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 31,
										Line:   52,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   52,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 32,
											Line:   52,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   52,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 32,
												Line:   52,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   52,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 36,
									Line:   52,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   52,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 37,
										Line:   52,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   52,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 45,
										Line:   52,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   52,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 45,
											Line:   52,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   52,
								},
								File:   "universe.flux",
								Source: "q: float",
								Start: ast.Position{
									Column: 53,
									Line:   52,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   52,
									},
									File:   "universe.flux",
									Source: "q",
									Start: ast.Position{
										Column: 53,
										Line:   52,
									},
								},
							},
							Name: "q",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   52,
									},
									File:   "universe.flux",
									Source: "float",
									Start: ast.Position{
										Column: 56,
										Line:   52,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   52,
										},
										File:   "universe.flux",
										Source: "float",
										Start: ast.Position{
											Column: 56,
											Line:   52,
										},
									},
								},
								Name: "float",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   52,
								},
								File:   "universe.flux",
								Source: "?compression: float",
								Start: ast.Position{
									Column: 63,
									Line:   52,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   52,
									},
									File:   "universe.flux",
									Source: "compression",
									Start: ast.Position{
										Column: 64,
										Line:   52,
									},
								},
							},
							Name: "compression",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 82,
										Line:   52,
									},
									File:   "universe.flux",
									Source: "float",
									Start: ast.Position{
										Column: 77,
										Line:   52,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 82,
											Line:   52,
										},
										File:   "universe.flux",
										Source: "float",
										Start: ast.Position{
											Column: 77,
											Line:   52,
										},
									},
								},
								Name: "float",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   52,
								},
								File:   "universe.flux",
								Source: "?method: string",
								Start: ast.Position{
									Column: 84,
									Line:   52,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 91,
										Line:   52,
									},
									File:   "universe.flux",
									Source: "method",
									Start: ast.Position{
										Column: 85,
										Line:   52,
									},
								},
							},
							Name: "method",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 99,
										Line:   52,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 93,
										Line:   52,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 99,
											Line:   52,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 93,
											Line:   52,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 107,
									Line:   52,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 104,
									Line:   52,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 106,
										Line:   52,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 105,
										Line:   52,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 106,
											Line:   52,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 105,
											Line:   52,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   53,
					},
					File:   "universe.flux",
					Source: "builtin pivot",
					Start: ast.Position{
						Column: 1,
						Line:   53,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   53,
						},
						File:   "universe.flux",
						Source: "pivot",
						Start: ast.Position{
							Column: 9,
							Line:   53,
						},
					},
				},
				Name: "pivot",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 126,
							Line:   53,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], rowKey: [string], columnKey: [string], valueColumn: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 17,
							Line:   53,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 115,
								Line:   53,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 106,
								Line:   53,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 115,
									Line:   53,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 109,
									Line:   53,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 107,
									Line:   53,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 106,
									Line:   53,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 126,
								Line:   53,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 117,
								Line:   53,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 126,
									Line:   53,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 120,
									Line:   53,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 118,
									Line:   53,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 117,
									Line:   53,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 99,
								Line:   53,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], rowKey: [string], columnKey: [string], valueColumn: string) => [B]",
							Start: ast.Position{
								Column: 17,
								Line:   53,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   53,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 18,
									Line:   53,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   53,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 20,
										Line:   53,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   53,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 28,
										Line:   53,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   53,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 29,
											Line:   53,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   53,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 29,
												Line:   53,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   53,
								},
								File:   "universe.flux",
								Source: "rowKey: [string]",
								Start: ast.Position{
									Column: 33,
									Line:   53,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   53,
									},
									File:   "universe.flux",
									Source: "rowKey",
									Start: ast.Position{
										Column: 33,
										Line:   53,
									},
								},
							},
							Name: "rowKey",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   53,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 41,
										Line:   53,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   53,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 42,
											Line:   53,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   53,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 42,
												Line:   53,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   53,
								},
								File:   "universe.flux",
								Source: "columnKey: [string]",
								Start: ast.Position{
									Column: 51,
									Line:   53,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   53,
									},
									File:   "universe.flux",
									Source: "columnKey",
									Start: ast.Position{
										Column: 51,
										Line:   53,
									},
								},
							},
							Name: "columnKey",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   53,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 62,
										Line:   53,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   53,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 63,
											Line:   53,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   53,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 63,
												Line:   53,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 91,
									Line:   53,
								},
								File:   "universe.flux",
								Source: "valueColumn: string",
								Start: ast.Position{
									Column: 72,
									Line:   53,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 83,
										Line:   53,
									},
									File:   "universe.flux",
									Source: "valueColumn",
									Start: ast.Position{
										Column: 72,
										Line:   53,
									},
								},
							},
							Name: "valueColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 91,
										Line:   53,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 85,
										Line:   53,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 91,
											Line:   53,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 85,
											Line:   53,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   53,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 96,
									Line:   53,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 98,
										Line:   53,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 97,
										Line:   53,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 98,
											Line:   53,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 97,
											Line:   53,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   54,
					},
					File:   "universe.flux",
					Source: "builtin range",
					Start: ast.Position{
						Column: 1,
						Line:   54,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   54,
						},
						File:   "universe.flux",
						Source: "range",
						Start: ast.Position{
							Column: 9,
							Line:   54,
						},
					},
				},
				Name: "range",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 150,
							Line:   54,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], start: B, ?stop: C, ?timeColumn: string, ?startColumn: string, ?stopColumn: string) => [D] where A: Record, D: Record",
						Start: ast.Position{
							Column: 17,
							Line:   54,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 139,
								Line:   54,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 130,
								Line:   54,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 139,
									Line:   54,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 133,
									Line:   54,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 131,
									Line:   54,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 130,
									Line:   54,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 150,
								Line:   54,
							},
							File:   "universe.flux",
							Source: "D: Record",
							Start: ast.Position{
								Column: 141,
								Line:   54,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 150,
									Line:   54,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 144,
									Line:   54,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 142,
									Line:   54,
								},
								File:   "universe.flux",
								Source: "D",
								Start: ast.Position{
									Column: 141,
									Line:   54,
								},
							},
						},
						Name: "D",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 123,
								Line:   54,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], start: B, ?stop: C, ?timeColumn: string, ?startColumn: string, ?stopColumn: string) => [D]",
							Start: ast.Position{
								Column: 17,
								Line:   54,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   54,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 18,
									Line:   54,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   54,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 20,
										Line:   54,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   54,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 28,
										Line:   54,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   54,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 29,
											Line:   54,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   54,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 29,
												Line:   54,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   54,
								},
								File:   "universe.flux",
								Source: "start: B",
								Start: ast.Position{
									Column: 33,
									Line:   54,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   54,
									},
									File:   "universe.flux",
									Source: "start",
									Start: ast.Position{
										Column: 33,
										Line:   54,
									},
								},
							},
							Name: "start",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   54,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 40,
										Line:   54,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   54,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 40,
											Line:   54,
										},
									},
								},
								Name: "B",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   54,
								},
								File:   "universe.flux",
								Source: "?stop: C",
								Start: ast.Position{
									Column: 43,
									Line:   54,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   54,
									},
									File:   "universe.flux",
									Source: "stop",
									Start: ast.Position{
										Column: 44,
										Line:   54,
									},
								},
							},
							Name: "stop",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   54,
									},
									File:   "universe.flux",
									Source: "C",
									Start: ast.Position{
										Column: 50,
										Line:   54,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   54,
										},
										File:   "universe.flux",
										Source: "C",
										Start: ast.Position{
											Column: 50,
											Line:   54,
										},
									},
								},
								Name: "C",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   54,
								},
								File:   "universe.flux",
								Source: "?timeColumn: string",
								Start: ast.Position{
									Column: 53,
									Line:   54,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   54,
									},
									File:   "universe.flux",
									Source: "timeColumn",
									Start: ast.Position{
										Column: 54,
										Line:   54,
									},
								},
							},
							Name: "timeColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   54,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 66,
										Line:   54,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 72,
											Line:   54,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 66,
											Line:   54,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 94,
									Line:   54,
								},
								File:   "universe.flux",
								Source: "?startColumn: string",
								Start: ast.Position{
									Column: 74,
									Line:   54,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 86,
										Line:   54,
									},
									File:   "universe.flux",
									Source: "startColumn",
									Start: ast.Position{
										Column: 75,
										Line:   54,
									},
								},
							},
							Name: "startColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 94,
										Line:   54,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 88,
										Line:   54,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 94,
											Line:   54,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 88,
											Line:   54,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 115,
									Line:   54,
								},
								File:   "universe.flux",
								Source: "?stopColumn: string",
								Start: ast.Position{
									Column: 96,
									Line:   54,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 107,
										Line:   54,
									},
									File:   "universe.flux",
									Source: "stopColumn",
									Start: ast.Position{
										Column: 97,
										Line:   54,
									},
								},
							},
							Name: "stopColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 115,
										Line:   54,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 109,
										Line:   54,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 115,
											Line:   54,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 109,
											Line:   54,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 123,
									Line:   54,
								},
								File:   "universe.flux",
								Source: "[D]",
								Start: ast.Position{
									Column: 120,
									Line:   54,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 122,
										Line:   54,
									},
									File:   "universe.flux",
									Source: "D",
									Start: ast.Position{
										Column: 121,
										Line:   54,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 122,
											Line:   54,
										},
										File:   "universe.flux",
										Source: "D",
										Start: ast.Position{
											Column: 121,
											Line:   54,
										},
									},
								},
								Name: "D",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   55,
					},
					File:   "universe.flux",
					Source: "builtin reduce",
					Start: ast.Position{
						Column: 1,
						Line:   55,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   55,
						},
						File:   "universe.flux",
						Source: "reduce",
						Start: ast.Position{
							Column: 9,
							Line:   55,
						},
					},
				},
				Name: "reduce",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 124,
							Line:   55,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], fn: (r: A, accumulator: B) => B, identity: B) => [C] where A: Record, B: Record, C: Record",
						Start: ast.Position{
							Column: 18,
							Line:   55,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 102,
								Line:   55,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 93,
								Line:   55,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 102,
									Line:   55,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 96,
									Line:   55,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 94,
									Line:   55,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 93,
									Line:   55,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 113,
								Line:   55,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 104,
								Line:   55,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 113,
									Line:   55,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 107,
									Line:   55,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 105,
									Line:   55,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 104,
									Line:   55,
								},
							},
						},
						Name: "B",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 124,
								Line:   55,
							},
							File:   "universe.flux",
							Source: "C: Record",
							Start: ast.Position{
								Column: 115,
								Line:   55,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 124,
									Line:   55,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 118,
									Line:   55,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 116,
									Line:   55,
								},
								File:   "universe.flux",
								Source: "C",
								Start: ast.Position{
									Column: 115,
									Line:   55,
								},
							},
						},
						Name: "C",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 86,
								Line:   55,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], fn: (r: A, accumulator: B) => B, identity: B) => [C]",
							Start: ast.Position{
								Column: 18,
								Line:   55,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   55,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 19,
									Line:   55,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   55,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 21,
										Line:   55,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   55,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 29,
										Line:   55,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   55,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 30,
											Line:   55,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   55,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 30,
												Line:   55,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 65,
									Line:   55,
								},
								File:   "universe.flux",
								Source: "fn: (r: A, accumulator: B) => B",
								Start: ast.Position{
									Column: 34,
									Line:   55,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   55,
									},
									File:   "universe.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 34,
										Line:   55,
									},
								},
							},
							Name: "fn",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   55,
									},
									File:   "universe.flux",
									Source: "(r: A, accumulator: B) => B",
									Start: ast.Position{
										Column: 38,
										Line:   55,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   55,
										},
										File:   "universe.flux",
										Source: "r: A",
										Start: ast.Position{
											Column: 39,
											Line:   55,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   55,
											},
											File:   "universe.flux",
											Source: "r",
											Start: ast.Position{
												Column: 39,
												Line:   55,
											},
										},
									},
									Name: "r",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   55,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 42,
												Line:   55,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   55,
												},
												File:   "universe.flux",
												Source: "A",
												Start: ast.Position{
													Column: 42,
													Line:   55,
												},
											},
										},
										Name: "A",
									},
								},
							}, &ast.ParameterType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   55,
										},
										File:   "universe.flux",
										Source: "accumulator: B",
										Start: ast.Position{
											Column: 45,
											Line:   55,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 56,
												Line:   55,
											},
											File:   "universe.flux",
											Source: "accumulator",
											Start: ast.Position{
												Column: 45,
												Line:   55,
											},
										},
									},
									Name: "accumulator",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   55,
											},
											File:   "universe.flux",
											Source: "B",
											Start: ast.Position{
												Column: 58,
												Line:   55,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   55,
												},
												File:   "universe.flux",
												Source: "B",
												Start: ast.Position{
													Column: 58,
													Line:   55,
												},
											},
										},
										Name: "B",
									},
								},
							}},
							Return: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   55,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 64,
											Line:   55,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   55,
											},
											File:   "universe.flux",
											Source: "B",
											Start: ast.Position{
												Column: 64,
												Line:   55,
											},
										},
									},
									Name: "B",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   55,
								},
								File:   "universe.flux",
								Source: "identity: B",
								Start: ast.Position{
									Column: 67,
									Line:   55,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   55,
									},
									File:   "universe.flux",
									Source: "identity",
									Start: ast.Position{
										Column: 67,
										Line:   55,
									},
								},
							},
							Name: "identity",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 78,
										Line:   55,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 77,
										Line:   55,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 78,
											Line:   55,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 77,
											Line:   55,
										},
									},
								},
								Name: "B",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   55,
								},
								File:   "universe.flux",
								Source: "[C]",
								Start: ast.Position{
									Column: 83,
									Line:   55,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 85,
										Line:   55,
									},
									File:   "universe.flux",
									Source: "C",
									Start: ast.Position{
										Column: 84,
										Line:   55,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 85,
											Line:   55,
										},
										File:   "universe.flux",
										Source: "C",
										Start: ast.Position{
											Column: 84,
											Line:   55,
										},
									},
								},
								Name: "C",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 30,
						Line:   56,
					},
					File:   "universe.flux",
					Source: "builtin relativeStrengthIndex",
					Start: ast.Position{
						Column: 1,
						Line:   56,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 30,
							Line:   56,
						},
						File:   "universe.flux",
						Source: "relativeStrengthIndex",
						Start: ast.Position{
							Column: 9,
							Line:   56,
						},
					},
				},
				Name: "relativeStrengthIndex",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 110,
							Line:   56,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], n: int, ?columns: [string]) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 33,
							Line:   56,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 99,
								Line:   56,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 90,
								Line:   56,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   56,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 93,
									Line:   56,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 91,
									Line:   56,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 90,
									Line:   56,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 110,
								Line:   56,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 101,
								Line:   56,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 110,
									Line:   56,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 104,
									Line:   56,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 102,
									Line:   56,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 101,
									Line:   56,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 83,
								Line:   56,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], n: int, ?columns: [string]) => [B]",
							Start: ast.Position{
								Column: 33,
								Line:   56,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   56,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 34,
									Line:   56,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   56,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 36,
										Line:   56,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   56,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 44,
										Line:   56,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   56,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 45,
											Line:   56,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   56,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 45,
												Line:   56,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   56,
								},
								File:   "universe.flux",
								Source: "n: int",
								Start: ast.Position{
									Column: 49,
									Line:   56,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   56,
									},
									File:   "universe.flux",
									Source: "n",
									Start: ast.Position{
										Column: 49,
										Line:   56,
									},
								},
							},
							Name: "n",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   56,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 52,
										Line:   56,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   56,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 52,
											Line:   56,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   56,
								},
								File:   "universe.flux",
								Source: "?columns: [string]",
								Start: ast.Position{
									Column: 57,
									Line:   56,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   56,
									},
									File:   "universe.flux",
									Source: "columns",
									Start: ast.Position{
										Column: 58,
										Line:   56,
									},
								},
							},
							Name: "columns",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   56,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 67,
										Line:   56,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 74,
											Line:   56,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 68,
											Line:   56,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 74,
												Line:   56,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 68,
												Line:   56,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 83,
									Line:   56,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 80,
									Line:   56,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 82,
										Line:   56,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 81,
										Line:   56,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 82,
											Line:   56,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 81,
											Line:   56,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   57,
					},
					File:   "universe.flux",
					Source: "builtin rename",
					Start: ast.Position{
						Column: 1,
						Line:   57,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   57,
						},
						File:   "universe.flux",
						Source: "rename",
						Start: ast.Position{
							Column: 9,
							Line:   57,
						},
					},
				},
				Name: "rename",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 124,
							Line:   57,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?fn: (column: string) => string, ?columns: B) => [C] where A: Record, B: Record, C: Record",
						Start: ast.Position{
							Column: 18,
							Line:   57,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 102,
								Line:   57,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 93,
								Line:   57,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 102,
									Line:   57,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 96,
									Line:   57,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 94,
									Line:   57,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 93,
									Line:   57,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 113,
								Line:   57,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 104,
								Line:   57,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 113,
									Line:   57,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 107,
									Line:   57,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 105,
									Line:   57,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 104,
									Line:   57,
								},
							},
						},
						Name: "B",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 124,
								Line:   57,
							},
							File:   "universe.flux",
							Source: "C: Record",
							Start: ast.Position{
								Column: 115,
								Line:   57,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 124,
									Line:   57,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 118,
									Line:   57,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 116,
									Line:   57,
								},
								File:   "universe.flux",
								Source: "C",
								Start: ast.Position{
									Column: 115,
									Line:   57,
								},
							},
						},
						Name: "C",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 86,
								Line:   57,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?fn: (column: string) => string, ?columns: B) => [C]",
							Start: ast.Position{
								Column: 18,
								Line:   57,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   57,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 19,
									Line:   57,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   57,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 21,
										Line:   57,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   57,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 29,
										Line:   57,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   57,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 30,
											Line:   57,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   57,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 30,
												Line:   57,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 65,
									Line:   57,
								},
								File:   "universe.flux",
								Source: "?fn: (column: string) => string",
								Start: ast.Position{
									Column: 34,
									Line:   57,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   57,
									},
									File:   "universe.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 35,
										Line:   57,
									},
								},
							},
							Name: "fn",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   57,
									},
									File:   "universe.flux",
									Source: "(column: string) => string",
									Start: ast.Position{
										Column: 39,
										Line:   57,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   57,
										},
										File:   "universe.flux",
										Source: "column: string",
										Start: ast.Position{
											Column: 40,
											Line:   57,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   57,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 40,
												Line:   57,
											},
										},
									},
									Name: "column",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   57,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 48,
												Line:   57,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   57,
												},
												File:   "universe.flux",
												Source: "string",
												Start: ast.Position{
													Column: 48,
													Line:   57,
												},
											},
										},
										Name: "string",
									},
								},
							}},
							Return: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   57,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 59,
											Line:   57,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   57,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 59,
												Line:   57,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   57,
								},
								File:   "universe.flux",
								Source: "?columns: B",
								Start: ast.Position{
									Column: 67,
									Line:   57,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   57,
									},
									File:   "universe.flux",
									Source: "columns",
									Start: ast.Position{
										Column: 68,
										Line:   57,
									},
								},
							},
							Name: "columns",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 78,
										Line:   57,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 77,
										Line:   57,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 78,
											Line:   57,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 77,
											Line:   57,
										},
									},
								},
								Name: "B",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 86,
									Line:   57,
								},
								File:   "universe.flux",
								Source: "[C]",
								Start: ast.Position{
									Column: 83,
									Line:   57,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 85,
										Line:   57,
									},
									File:   "universe.flux",
									Source: "C",
									Start: ast.Position{
										Column: 84,
										Line:   57,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 85,
											Line:   57,
										},
										File:   "universe.flux",
										Source: "C",
										Start: ast.Position{
											Column: 84,
											Line:   57,
										},
									},
								},
								Name: "C",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   58,
					},
					File:   "universe.flux",
					Source: "builtin sample",
					Start: ast.Position{
						Column: 1,
						Line:   58,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   58,
						},
						File:   "universe.flux",
						Source: "sample",
						Start: ast.Position{
							Column: 9,
							Line:   58,
						},
					},
				},
				Name: "sample",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 92,
							Line:   58,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], n: int, ?pos: int, ?column: string) => [A] where A: Record",
						Start: ast.Position{
							Column: 18,
							Line:   58,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 92,
								Line:   58,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 83,
								Line:   58,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 92,
									Line:   58,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 86,
									Line:   58,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 84,
									Line:   58,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 83,
									Line:   58,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 76,
								Line:   58,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], n: int, ?pos: int, ?column: string) => [A]",
							Start: ast.Position{
								Column: 18,
								Line:   58,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   58,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 19,
									Line:   58,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   58,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 21,
										Line:   58,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   58,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 29,
										Line:   58,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   58,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 30,
											Line:   58,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   58,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 30,
												Line:   58,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   58,
								},
								File:   "universe.flux",
								Source: "n: int",
								Start: ast.Position{
									Column: 34,
									Line:   58,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   58,
									},
									File:   "universe.flux",
									Source: "n",
									Start: ast.Position{
										Column: 34,
										Line:   58,
									},
								},
							},
							Name: "n",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   58,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 37,
										Line:   58,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   58,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 37,
											Line:   58,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   58,
								},
								File:   "universe.flux",
								Source: "?pos: int",
								Start: ast.Position{
									Column: 42,
									Line:   58,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   58,
									},
									File:   "universe.flux",
									Source: "pos",
									Start: ast.Position{
										Column: 43,
										Line:   58,
									},
								},
							},
							Name: "pos",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   58,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 48,
										Line:   58,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   58,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 48,
											Line:   58,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   58,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 53,
									Line:   58,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   58,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 54,
										Line:   58,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   58,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 62,
										Line:   58,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   58,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 62,
											Line:   58,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 76,
									Line:   58,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 73,
									Line:   58,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   58,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 74,
										Line:   58,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 75,
											Line:   58,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 74,
											Line:   58,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   59,
					},
					File:   "universe.flux",
					Source: "builtin set",
					Start: ast.Position{
						Column: 1,
						Line:   59,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   59,
						},
						File:   "universe.flux",
						Source: "set",
						Start: ast.Position{
							Column: 9,
							Line:   59,
						},
					},
				},
				Name: "set",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 81,
							Line:   59,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], key: string, value: string) => [A] where A: Record",
						Start: ast.Position{
							Column: 15,
							Line:   59,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 81,
								Line:   59,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 72,
								Line:   59,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   59,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 75,
									Line:   59,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 73,
									Line:   59,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 72,
									Line:   59,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 65,
								Line:   59,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], key: string, value: string) => [A]",
							Start: ast.Position{
								Column: 15,
								Line:   59,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   59,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 16,
									Line:   59,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   59,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 18,
										Line:   59,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   59,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 26,
										Line:   59,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   59,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 27,
											Line:   59,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   59,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 27,
												Line:   59,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   59,
								},
								File:   "universe.flux",
								Source: "key: string",
								Start: ast.Position{
									Column: 31,
									Line:   59,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   59,
									},
									File:   "universe.flux",
									Source: "key",
									Start: ast.Position{
										Column: 31,
										Line:   59,
									},
								},
							},
							Name: "key",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   59,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 36,
										Line:   59,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   59,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 36,
											Line:   59,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   59,
								},
								File:   "universe.flux",
								Source: "value: string",
								Start: ast.Position{
									Column: 44,
									Line:   59,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   59,
									},
									File:   "universe.flux",
									Source: "value",
									Start: ast.Position{
										Column: 44,
										Line:   59,
									},
								},
							},
							Name: "value",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   59,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 51,
										Line:   59,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   59,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 51,
											Line:   59,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 65,
									Line:   59,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 62,
									Line:   59,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   59,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 63,
										Line:   59,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 64,
											Line:   59,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 63,
											Line:   59,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   60,
					},
					File:   "universe.flux",
					Source: "builtin tail",
					Start: ast.Position{
						Column: 1,
						Line:   60,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   60,
						},
						File:   "universe.flux",
						Source: "tail",
						Start: ast.Position{
							Column: 9,
							Line:   60,
						},
					},
				},
				Name: "tail",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 60,
							Line:   60,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], n: int, ?offset: int) => [A]",
						Start: ast.Position{
							Column: 16,
							Line:   60,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 60,
								Line:   60,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], n: int, ?offset: int) => [A]",
							Start: ast.Position{
								Column: 16,
								Line:   60,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   60,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 17,
									Line:   60,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   60,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   60,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   60,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 27,
										Line:   60,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   60,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 28,
											Line:   60,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   60,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 28,
												Line:   60,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   60,
								},
								File:   "universe.flux",
								Source: "n: int",
								Start: ast.Position{
									Column: 32,
									Line:   60,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   60,
									},
									File:   "universe.flux",
									Source: "n",
									Start: ast.Position{
										Column: 32,
										Line:   60,
									},
								},
							},
							Name: "n",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   60,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 35,
										Line:   60,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   60,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 35,
											Line:   60,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   60,
								},
								File:   "universe.flux",
								Source: "?offset: int",
								Start: ast.Position{
									Column: 40,
									Line:   60,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   60,
									},
									File:   "universe.flux",
									Source: "offset",
									Start: ast.Position{
										Column: 41,
										Line:   60,
									},
								},
							},
							Name: "offset",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 52,
										Line:   60,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 49,
										Line:   60,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   60,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 49,
											Line:   60,
										},
									},
								},
								Name: "int",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 60,
									Line:   60,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 57,
									Line:   60,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   60,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 58,
										Line:   60,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   60,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 58,
											Line:   60,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   61,
					},
					File:   "universe.flux",
					Source: "builtin timeShift",
					Start: ast.Position{
						Column: 1,
						Line:   61,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   61,
						},
						File:   "universe.flux",
						Source: "timeShift",
						Start: ast.Position{
							Column: 9,
							Line:   61,
						},
					},
				},
				Name: "timeShift",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 83,
							Line:   61,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], duration: duration, ?columns: [string]) => [A]",
						Start: ast.Position{
							Column: 21,
							Line:   61,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 83,
								Line:   61,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], duration: duration, ?columns: [string]) => [A]",
							Start: ast.Position{
								Column: 21,
								Line:   61,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   61,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 22,
									Line:   61,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   61,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 24,
										Line:   61,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   61,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 32,
										Line:   61,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   61,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 33,
											Line:   61,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   61,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 33,
												Line:   61,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   61,
								},
								File:   "universe.flux",
								Source: "duration: duration",
								Start: ast.Position{
									Column: 37,
									Line:   61,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   61,
									},
									File:   "universe.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 37,
										Line:   61,
									},
								},
							},
							Name: "duration",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   61,
									},
									File:   "universe.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 47,
										Line:   61,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   61,
										},
										File:   "universe.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 47,
											Line:   61,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   61,
								},
								File:   "universe.flux",
								Source: "?columns: [string]",
								Start: ast.Position{
									Column: 57,
									Line:   61,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 65,
										Line:   61,
									},
									File:   "universe.flux",
									Source: "columns",
									Start: ast.Position{
										Column: 58,
										Line:   61,
									},
								},
							},
							Name: "columns",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   61,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 67,
										Line:   61,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 74,
											Line:   61,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 68,
											Line:   61,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 74,
												Line:   61,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 68,
												Line:   61,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 83,
									Line:   61,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 80,
									Line:   61,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 82,
										Line:   61,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 81,
										Line:   61,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 82,
											Line:   61,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 81,
											Line:   61,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   62,
					},
					File:   "universe.flux",
					Source: "builtin skew",
					Start: ast.Position{
						Column: 1,
						Line:   62,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   62,
						},
						File:   "universe.flux",
						Source: "skew",
						Start: ast.Position{
							Column: 9,
							Line:   62,
						},
					},
				},
				Name: "skew",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 82,
							Line:   62,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 16,
							Line:   62,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 71,
								Line:   62,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 62,
								Line:   62,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   62,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 65,
									Line:   62,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   62,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 62,
									Line:   62,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 82,
								Line:   62,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 73,
								Line:   62,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   62,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 76,
									Line:   62,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 74,
									Line:   62,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 73,
									Line:   62,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 55,
								Line:   62,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string) => [B]",
							Start: ast.Position{
								Column: 16,
								Line:   62,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   62,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 17,
									Line:   62,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   62,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   62,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   62,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 27,
										Line:   62,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   62,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 28,
											Line:   62,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   62,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 28,
												Line:   62,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   62,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 32,
									Line:   62,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   62,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 33,
										Line:   62,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   62,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 41,
										Line:   62,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   62,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 41,
											Line:   62,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   62,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 52,
									Line:   62,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   62,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 53,
										Line:   62,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   62,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 53,
											Line:   62,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   63,
					},
					File:   "universe.flux",
					Source: "builtin spread",
					Start: ast.Position{
						Column: 1,
						Line:   63,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   63,
						},
						File:   "universe.flux",
						Source: "spread",
						Start: ast.Position{
							Column: 9,
							Line:   63,
						},
					},
				},
				Name: "spread",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 84,
							Line:   63,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 18,
							Line:   63,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 73,
								Line:   63,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 64,
								Line:   63,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 73,
									Line:   63,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 67,
									Line:   63,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 65,
									Line:   63,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 64,
									Line:   63,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 84,
								Line:   63,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 75,
								Line:   63,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 84,
									Line:   63,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 78,
									Line:   63,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 76,
									Line:   63,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 75,
									Line:   63,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 57,
								Line:   63,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string) => [B]",
							Start: ast.Position{
								Column: 18,
								Line:   63,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   63,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 19,
									Line:   63,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   63,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 21,
										Line:   63,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   63,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 29,
										Line:   63,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   63,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 30,
											Line:   63,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   63,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 30,
												Line:   63,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   63,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 34,
									Line:   63,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   63,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 35,
										Line:   63,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   63,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 43,
										Line:   63,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   63,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 43,
											Line:   63,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   63,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 54,
									Line:   63,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   63,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 55,
										Line:   63,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   63,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 55,
											Line:   63,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   64,
					},
					File:   "universe.flux",
					Source: "builtin sort",
					Start: ast.Position{
						Column: 1,
						Line:   64,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   64,
						},
						File:   "universe.flux",
						Source: "sort",
						Start: ast.Position{
							Column: 9,
							Line:   64,
						},
					},
				},
				Name: "sort",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 87,
							Line:   64,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?columns: [string], ?desc: bool) => [A] where A: Record",
						Start: ast.Position{
							Column: 16,
							Line:   64,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 87,
								Line:   64,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 78,
								Line:   64,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 87,
									Line:   64,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 81,
									Line:   64,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 79,
									Line:   64,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 78,
									Line:   64,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 71,
								Line:   64,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?columns: [string], ?desc: bool) => [A]",
							Start: ast.Position{
								Column: 16,
								Line:   64,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   64,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 17,
									Line:   64,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   64,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 19,
										Line:   64,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   64,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 27,
										Line:   64,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   64,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 28,
											Line:   64,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   64,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 28,
												Line:   64,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   64,
								},
								File:   "universe.flux",
								Source: "?columns: [string]",
								Start: ast.Position{
									Column: 32,
									Line:   64,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   64,
									},
									File:   "universe.flux",
									Source: "columns",
									Start: ast.Position{
										Column: 33,
										Line:   64,
									},
								},
							},
							Name: "columns",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   64,
									},
									File:   "universe.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 42,
										Line:   64,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   64,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 43,
											Line:   64,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   64,
											},
											File:   "universe.flux",
											Source: "string",
											Start: ast.Position{
												Column: 43,
												Line:   64,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   64,
								},
								File:   "universe.flux",
								Source: "?desc: bool",
								Start: ast.Position{
									Column: 52,
									Line:   64,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   64,
									},
									File:   "universe.flux",
									Source: "desc",
									Start: ast.Position{
										Column: 53,
										Line:   64,
									},
								},
							},
							Name: "desc",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   64,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 59,
										Line:   64,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 63,
											Line:   64,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 59,
											Line:   64,
										},
									},
								},
								Name: "bool",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   64,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 68,
									Line:   64,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   64,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 69,
										Line:   64,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   64,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 69,
											Line:   64,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   65,
					},
					File:   "universe.flux",
					Source: "builtin stateTracking",
					Start: ast.Position{
						Column: 1,
						Line:   65,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   65,
						},
						File:   "universe.flux",
						Source: "stateTracking",
						Start: ast.Position{
							Column: 9,
							Line:   65,
						},
					},
				},
				Name: "stateTracking",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 187,
							Line:   65,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], fn: (r: A) => bool, ?countColumn: string, ?durationColumn: string, ?durationUnit: duration, ?timeColumn: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 25,
							Line:   65,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 176,
								Line:   65,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 167,
								Line:   65,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 176,
									Line:   65,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 170,
									Line:   65,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 168,
									Line:   65,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 167,
									Line:   65,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 187,
								Line:   65,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 178,
								Line:   65,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 187,
									Line:   65,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 181,
									Line:   65,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 179,
									Line:   65,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 178,
									Line:   65,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 160,
								Line:   65,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], fn: (r: A) => bool, ?countColumn: string, ?durationColumn: string, ?durationUnit: duration, ?timeColumn: string) => [B]",
							Start: ast.Position{
								Column: 25,
								Line:   65,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   65,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 26,
									Line:   65,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   65,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 28,
										Line:   65,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   65,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 36,
										Line:   65,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   65,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 37,
											Line:   65,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   65,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 37,
												Line:   65,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   65,
								},
								File:   "universe.flux",
								Source: "fn: (r: A) => bool",
								Start: ast.Position{
									Column: 41,
									Line:   65,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   65,
									},
									File:   "universe.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 41,
										Line:   65,
									},
								},
							},
							Name: "fn",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   65,
									},
									File:   "universe.flux",
									Source: "(r: A) => bool",
									Start: ast.Position{
										Column: 45,
										Line:   65,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   65,
										},
										File:   "universe.flux",
										Source: "r: A",
										Start: ast.Position{
											Column: 46,
											Line:   65,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   65,
											},
											File:   "universe.flux",
											Source: "r",
											Start: ast.Position{
												Column: 46,
												Line:   65,
											},
										},
									},
									Name: "r",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   65,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 49,
												Line:   65,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   65,
												},
												File:   "universe.flux",
												Source: "A",
												Start: ast.Position{
													Column: 49,
													Line:   65,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Return: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   65,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 55,
											Line:   65,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   65,
											},
											File:   "universe.flux",
											Source: "bool",
											Start: ast.Position{
												Column: 55,
												Line:   65,
											},
										},
									},
									Name: "bool",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   65,
								},
								File:   "universe.flux",
								Source: "?countColumn: string",
								Start: ast.Position{
									Column: 61,
									Line:   65,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 73,
										Line:   65,
									},
									File:   "universe.flux",
									Source: "countColumn",
									Start: ast.Position{
										Column: 62,
										Line:   65,
									},
								},
							},
							Name: "countColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   65,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 75,
										Line:   65,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 81,
											Line:   65,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 75,
											Line:   65,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 106,
									Line:   65,
								},
								File:   "universe.flux",
								Source: "?durationColumn: string",
								Start: ast.Position{
									Column: 83,
									Line:   65,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 98,
										Line:   65,
									},
									File:   "universe.flux",
									Source: "durationColumn",
									Start: ast.Position{
										Column: 84,
										Line:   65,
									},
								},
							},
							Name: "durationColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 106,
										Line:   65,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 100,
										Line:   65,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 106,
											Line:   65,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 100,
											Line:   65,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 131,
									Line:   65,
								},
								File:   "universe.flux",
								Source: "?durationUnit: duration",
								Start: ast.Position{
									Column: 108,
									Line:   65,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 121,
										Line:   65,
									},
									File:   "universe.flux",
									Source: "durationUnit",
									Start: ast.Position{
										Column: 109,
										Line:   65,
									},
								},
							},
							Name: "durationUnit",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 131,
										Line:   65,
									},
									File:   "universe.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 123,
										Line:   65,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 131,
											Line:   65,
										},
										File:   "universe.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 123,
											Line:   65,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 152,
									Line:   65,
								},
								File:   "universe.flux",
								Source: "?timeColumn: string",
								Start: ast.Position{
									Column: 133,
									Line:   65,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 144,
										Line:   65,
									},
									File:   "universe.flux",
									Source: "timeColumn",
									Start: ast.Position{
										Column: 134,
										Line:   65,
									},
								},
							},
							Name: "timeColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 152,
										Line:   65,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 146,
										Line:   65,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 152,
											Line:   65,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 146,
											Line:   65,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 160,
									Line:   65,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 157,
									Line:   65,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 159,
										Line:   65,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 158,
										Line:   65,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 159,
											Line:   65,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 158,
											Line:   65,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   66,
					},
					File:   "universe.flux",
					Source: "builtin stddev",
					Start: ast.Position{
						Column: 1,
						Line:   66,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   66,
						},
						File:   "universe.flux",
						Source: "stddev",
						Start: ast.Position{
							Column: 9,
							Line:   66,
						},
					},
				},
				Name: "stddev",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 99,
							Line:   66,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string, ?mode: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 18,
							Line:   66,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 88,
								Line:   66,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 79,
								Line:   66,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   66,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 82,
									Line:   66,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   66,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 79,
									Line:   66,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 99,
								Line:   66,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 90,
								Line:   66,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 99,
									Line:   66,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 93,
									Line:   66,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 91,
									Line:   66,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 90,
									Line:   66,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   66,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string, ?mode: string) => [B]",
							Start: ast.Position{
								Column: 18,
								Line:   66,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   66,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 19,
									Line:   66,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   66,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 21,
										Line:   66,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   66,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 29,
										Line:   66,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   66,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 30,
											Line:   66,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   66,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 30,
												Line:   66,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   66,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 34,
									Line:   66,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   66,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 35,
										Line:   66,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   66,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 43,
										Line:   66,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   66,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 43,
											Line:   66,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   66,
								},
								File:   "universe.flux",
								Source: "?mode: string",
								Start: ast.Position{
									Column: 51,
									Line:   66,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   66,
									},
									File:   "universe.flux",
									Source: "mode",
									Start: ast.Position{
										Column: 52,
										Line:   66,
									},
								},
							},
							Name: "mode",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   66,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 58,
										Line:   66,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 64,
											Line:   66,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 58,
											Line:   66,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   66,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 69,
									Line:   66,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   66,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 70,
										Line:   66,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 71,
											Line:   66,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 70,
											Line:   66,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   67,
					},
					File:   "universe.flux",
					Source: "builtin sum",
					Start: ast.Position{
						Column: 1,
						Line:   67,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   67,
						},
						File:   "universe.flux",
						Source: "sum",
						Start: ast.Position{
							Column: 9,
							Line:   67,
						},
					},
				},
				Name: "sum",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 81,
							Line:   67,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 15,
							Line:   67,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 70,
								Line:   67,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 61,
								Line:   67,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   67,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 64,
									Line:   67,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   67,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 61,
									Line:   67,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 81,
								Line:   67,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 72,
								Line:   67,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   67,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 75,
									Line:   67,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 73,
									Line:   67,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 72,
									Line:   67,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 54,
								Line:   67,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string) => [B]",
							Start: ast.Position{
								Column: 15,
								Line:   67,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   67,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 16,
									Line:   67,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   67,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 18,
										Line:   67,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   67,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 26,
										Line:   67,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   67,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 27,
											Line:   67,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   67,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 27,
												Line:   67,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   67,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 31,
									Line:   67,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   67,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 32,
										Line:   67,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   67,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 40,
										Line:   67,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   67,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 40,
											Line:   67,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   67,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 51,
									Line:   67,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   67,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 52,
										Line:   67,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   67,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 52,
											Line:   67,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 36,
						Line:   68,
					},
					File:   "universe.flux",
					Source: "builtin tripleExponentialDerivative",
					Start: ast.Position{
						Column: 1,
						Line:   68,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 36,
							Line:   68,
						},
						File:   "universe.flux",
						Source: "tripleExponentialDerivative",
						Start: ast.Position{
							Column: 9,
							Line:   68,
						},
					},
				},
				Name: "tripleExponentialDerivative",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 135,
							Line:   68,
						},
						File:   "universe.flux",
						Source: "(<-tables: [{B with _value: A}], n: int) => [{B with _value: float}] where A: Numeric, B: Record",
						Start: ast.Position{
							Column: 39,
							Line:   68,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 124,
								Line:   68,
							},
							File:   "universe.flux",
							Source: "A: Numeric",
							Start: ast.Position{
								Column: 114,
								Line:   68,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 124,
									Line:   68,
								},
								File:   "universe.flux",
								Source: "Numeric",
								Start: ast.Position{
									Column: 117,
									Line:   68,
								},
							},
						},
						Name: "Numeric",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 115,
									Line:   68,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 114,
									Line:   68,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 135,
								Line:   68,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 126,
								Line:   68,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 135,
									Line:   68,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 129,
									Line:   68,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 127,
									Line:   68,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 126,
									Line:   68,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 107,
								Line:   68,
							},
							File:   "universe.flux",
							Source: "(<-tables: [{B with _value: A}], n: int) => [{B with _value: float}]",
							Start: ast.Position{
								Column: 39,
								Line:   68,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   68,
								},
								File:   "universe.flux",
								Source: "<-tables: [{B with _value: A}]",
								Start: ast.Position{
									Column: 40,
									Line:   68,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   68,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 42,
										Line:   68,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   68,
									},
									File:   "universe.flux",
									Source: "[{B with _value: A}]",
									Start: ast.Position{
										Column: 50,
										Line:   68,
									},
								},
							},
							ElementType: &ast.RecordType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   68,
										},
										File:   "universe.flux",
										Source: "{B with _value: A}",
										Start: ast.Position{
											Column: 51,
											Line:   68,
										},
									},
								},
								Properties: []*ast.PropertyType{&ast.PropertyType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 68,
												Line:   68,
											},
											File:   "universe.flux",
											Source: "_value: A",
											Start: ast.Position{
												Column: 59,
												Line:   68,
											},
										},
									},
									Name: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 65,
													Line:   68,
												},
												File:   "universe.flux",
												Source: "_value",
												Start: ast.Position{
													Column: 59,
													Line:   68,
												},
											},
										},
										Name: "_value",
									},
									Ty: &ast.TvarType{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 68,
													Line:   68,
												},
												File:   "universe.flux",
												Source: "A",
												Start: ast.Position{
													Column: 67,
													Line:   68,
												},
											},
										},
										ID: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 68,
														Line:   68,
													},
													File:   "universe.flux",
													Source: "A",
													Start: ast.Position{
														Column: 67,
														Line:   68,
													},
												},
											},
											Name: "A",
										},
									},
								}},
								Tvar: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   68,
											},
											File:   "universe.flux",
											Source: "B",
											Start: ast.Position{
												Column: 52,
												Line:   68,
											},
										},
									},
									Name: "B",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   68,
								},
								File:   "universe.flux",
								Source: "n: int",
								Start: ast.Position{
									Column: 72,
									Line:   68,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 73,
										Line:   68,
									},
									File:   "universe.flux",
									Source: "n",
									Start: ast.Position{
										Column: 72,
										Line:   68,
									},
								},
							},
							Name: "n",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 78,
										Line:   68,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 75,
										Line:   68,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 78,
											Line:   68,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 75,
											Line:   68,
										},
									},
								},
								Name: "int",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 107,
									Line:   68,
								},
								File:   "universe.flux",
								Source: "[{B with _value: float}]",
								Start: ast.Position{
									Column: 83,
									Line:   68,
								},
							},
						},
						ElementType: &ast.RecordType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 106,
										Line:   68,
									},
									File:   "universe.flux",
									Source: "{B with _value: float}",
									Start: ast.Position{
										Column: 84,
										Line:   68,
									},
								},
							},
							Properties: []*ast.PropertyType{&ast.PropertyType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 105,
											Line:   68,
										},
										File:   "universe.flux",
										Source: "_value: float",
										Start: ast.Position{
											Column: 92,
											Line:   68,
										},
									},
								},
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 98,
												Line:   68,
											},
											File:   "universe.flux",
											Source: "_value",
											Start: ast.Position{
												Column: 92,
												Line:   68,
											},
										},
									},
									Name: "_value",
								},
								Ty: &ast.NamedType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 105,
												Line:   68,
											},
											File:   "universe.flux",
											Source: "float",
											Start: ast.Position{
												Column: 100,
												Line:   68,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 105,
													Line:   68,
												},
												File:   "universe.flux",
												Source: "float",
												Start: ast.Position{
													Column: 100,
													Line:   68,
												},
											},
										},
										Name: "float",
									},
								},
							}},
							Tvar: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 86,
											Line:   68,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 85,
											Line:   68,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   69,
					},
					File:   "universe.flux",
					Source: "builtin union",
					Start: ast.Position{
						Column: 1,
						Line:   69,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   69,
						},
						File:   "universe.flux",
						Source: "union",
						Start: ast.Position{
							Column: 9,
							Line:   69,
						},
					},
				},
				Name: "union",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 55,
							Line:   69,
						},
						File:   "universe.flux",
						Source: "(tables: [[A]]) => [A] where A: Record",
						Start: ast.Position{
							Column: 17,
							Line:   69,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 55,
								Line:   69,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 46,
								Line:   69,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   69,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 49,
									Line:   69,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   69,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 46,
									Line:   69,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   69,
							},
							File:   "universe.flux",
							Source: "(tables: [[A]]) => [A]",
							Start: ast.Position{
								Column: 17,
								Line:   69,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   69,
								},
								File:   "universe.flux",
								Source: "tables: [[A]]",
								Start: ast.Position{
									Column: 18,
									Line:   69,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   69,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 18,
										Line:   69,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   69,
									},
									File:   "universe.flux",
									Source: "[[A]]",
									Start: ast.Position{
										Column: 26,
										Line:   69,
									},
								},
							},
							ElementType: &ast.ArrayType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   69,
										},
										File:   "universe.flux",
										Source: "[A]",
										Start: ast.Position{
											Column: 27,
											Line:   69,
										},
									},
								},
								ElementType: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   69,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 28,
												Line:   69,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   69,
												},
												File:   "universe.flux",
												Source: "A",
												Start: ast.Position{
													Column: 28,
													Line:   69,
												},
											},
										},
										Name: "A",
									},
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   69,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 36,
									Line:   69,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   69,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 37,
										Line:   69,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   69,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 37,
											Line:   69,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   70,
					},
					File:   "universe.flux",
					Source: "builtin unique",
					Start: ast.Position{
						Column: 1,
						Line:   70,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   70,
						},
						File:   "universe.flux",
						Source: "unique",
						Start: ast.Position{
							Column: 9,
							Line:   70,
						},
					},
				},
				Name: "unique",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 73,
							Line:   70,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?column: string) => [A] where A: Record",
						Start: ast.Position{
							Column: 18,
							Line:   70,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 73,
								Line:   70,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 64,
								Line:   70,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 73,
									Line:   70,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 67,
									Line:   70,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 65,
									Line:   70,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 64,
									Line:   70,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 57,
								Line:   70,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?column: string) => [A]",
							Start: ast.Position{
								Column: 18,
								Line:   70,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   70,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 19,
									Line:   70,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   70,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 21,
										Line:   70,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   70,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 29,
										Line:   70,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   70,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 30,
											Line:   70,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   70,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 30,
												Line:   70,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   70,
								},
								File:   "universe.flux",
								Source: "?column: string",
								Start: ast.Position{
									Column: 34,
									Line:   70,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   70,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 35,
										Line:   70,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   70,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 43,
										Line:   70,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   70,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 43,
											Line:   70,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   70,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 54,
									Line:   70,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   70,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 55,
										Line:   70,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   70,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 55,
											Line:   70,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   71,
					},
					File:   "universe.flux",
					Source: "builtin window",
					Start: ast.Position{
						Column: 1,
						Line:   71,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   71,
						},
						File:   "universe.flux",
						Source: "window",
						Start: ast.Position{
							Column: 9,
							Line:   71,
						},
					},
				},
				Name: "window",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 207,
							Line:   71,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?every: duration, ?period: duration, ?offset: duration, ?timeColumn: string, ?startColumn: string, ?stopColumn: string, ?createEmpty: bool) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 18,
							Line:   71,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 196,
								Line:   71,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 187,
								Line:   71,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 196,
									Line:   71,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 190,
									Line:   71,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 188,
									Line:   71,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 187,
									Line:   71,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 207,
								Line:   71,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 198,
								Line:   71,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 207,
									Line:   71,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 201,
									Line:   71,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 199,
									Line:   71,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 198,
									Line:   71,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 180,
								Line:   71,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?every: duration, ?period: duration, ?offset: duration, ?timeColumn: string, ?startColumn: string, ?stopColumn: string, ?createEmpty: bool) => [B]",
							Start: ast.Position{
								Column: 18,
								Line:   71,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   71,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 19,
									Line:   71,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 21,
										Line:   71,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 29,
										Line:   71,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   71,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 30,
											Line:   71,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   71,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 30,
												Line:   71,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   71,
								},
								File:   "universe.flux",
								Source: "?every: duration",
								Start: ast.Position{
									Column: 34,
									Line:   71,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "every",
									Start: ast.Position{
										Column: 35,
										Line:   71,
									},
								},
							},
							Name: "every",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 42,
										Line:   71,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   71,
										},
										File:   "universe.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 42,
											Line:   71,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 69,
									Line:   71,
								},
								File:   "universe.flux",
								Source: "?period: duration",
								Start: ast.Position{
									Column: 52,
									Line:   71,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "period",
									Start: ast.Position{
										Column: 53,
										Line:   71,
									},
								},
							},
							Name: "period",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 69,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 61,
										Line:   71,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   71,
										},
										File:   "universe.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 61,
											Line:   71,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   71,
								},
								File:   "universe.flux",
								Source: "?offset: duration",
								Start: ast.Position{
									Column: 71,
									Line:   71,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 78,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "offset",
									Start: ast.Position{
										Column: 72,
										Line:   71,
									},
								},
							},
							Name: "offset",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 80,
										Line:   71,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 88,
											Line:   71,
										},
										File:   "universe.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 80,
											Line:   71,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 109,
									Line:   71,
								},
								File:   "universe.flux",
								Source: "?timeColumn: string",
								Start: ast.Position{
									Column: 90,
									Line:   71,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 101,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "timeColumn",
									Start: ast.Position{
										Column: 91,
										Line:   71,
									},
								},
							},
							Name: "timeColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 109,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 103,
										Line:   71,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 109,
											Line:   71,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 103,
											Line:   71,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 131,
									Line:   71,
								},
								File:   "universe.flux",
								Source: "?startColumn: string",
								Start: ast.Position{
									Column: 111,
									Line:   71,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 123,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "startColumn",
									Start: ast.Position{
										Column: 112,
										Line:   71,
									},
								},
							},
							Name: "startColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 131,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 125,
										Line:   71,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 131,
											Line:   71,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 125,
											Line:   71,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 152,
									Line:   71,
								},
								File:   "universe.flux",
								Source: "?stopColumn: string",
								Start: ast.Position{
									Column: 133,
									Line:   71,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 144,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "stopColumn",
									Start: ast.Position{
										Column: 134,
										Line:   71,
									},
								},
							},
							Name: "stopColumn",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 152,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 146,
										Line:   71,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 152,
											Line:   71,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 146,
											Line:   71,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 172,
									Line:   71,
								},
								File:   "universe.flux",
								Source: "?createEmpty: bool",
								Start: ast.Position{
									Column: 154,
									Line:   71,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 166,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "createEmpty",
									Start: ast.Position{
										Column: 155,
										Line:   71,
									},
								},
							},
							Name: "createEmpty",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 172,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 168,
										Line:   71,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 172,
											Line:   71,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 168,
											Line:   71,
										},
									},
								},
								Name: "bool",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 180,
									Line:   71,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 177,
									Line:   71,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 179,
										Line:   71,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 178,
										Line:   71,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 179,
											Line:   71,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 178,
											Line:   71,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   72,
					},
					File:   "universe.flux",
					Source: "builtin yield",
					Start: ast.Position{
						Column: 1,
						Line:   72,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   72,
						},
						File:   "universe.flux",
						Source: "yield",
						Start: ast.Position{
							Column: 9,
							Line:   72,
						},
					},
				},
				Name: "yield",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 70,
							Line:   72,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], ?name: string) => [A] where A: Record",
						Start: ast.Position{
							Column: 17,
							Line:   72,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 70,
								Line:   72,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 61,
								Line:   72,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   72,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 64,
									Line:   72,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   72,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 61,
									Line:   72,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 54,
								Line:   72,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], ?name: string) => [A]",
							Start: ast.Position{
								Column: 17,
								Line:   72,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   72,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 18,
									Line:   72,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   72,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 20,
										Line:   72,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   72,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 28,
										Line:   72,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   72,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 29,
											Line:   72,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   72,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 29,
												Line:   72,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   72,
								},
								File:   "universe.flux",
								Source: "?name: string",
								Start: ast.Position{
									Column: 33,
									Line:   72,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   72,
									},
									File:   "universe.flux",
									Source: "name",
									Start: ast.Position{
										Column: 34,
										Line:   72,
									},
								},
							},
							Name: "name",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   72,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 40,
										Line:   72,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   72,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 40,
											Line:   72,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   72,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 51,
									Line:   72,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   72,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 52,
										Line:   72,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   72,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 52,
											Line:   72,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   75,
					},
					File:   "universe.flux",
					Source: "builtin tableFind",
					Start: ast.Position{
						Column: 1,
						Line:   75,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   75,
						},
						File:   "universe.flux",
						Source: "tableFind",
						Start: ast.Position{
							Column: 9,
							Line:   75,
						},
					},
				},
				Name: "tableFind",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 92,
							Line:   75,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], fn: (key: B) => bool) => [A] where A: Record, B: Record",
						Start: ast.Position{
							Column: 21,
							Line:   75,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 81,
								Line:   75,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 72,
								Line:   75,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   75,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 75,
									Line:   75,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 73,
									Line:   75,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 72,
									Line:   75,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 92,
								Line:   75,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 83,
								Line:   75,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 92,
									Line:   75,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 86,
									Line:   75,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 84,
									Line:   75,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 83,
									Line:   75,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 65,
								Line:   75,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], fn: (key: B) => bool) => [A]",
							Start: ast.Position{
								Column: 21,
								Line:   75,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   75,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 22,
									Line:   75,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   75,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 24,
										Line:   75,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   75,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 32,
										Line:   75,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   75,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 33,
											Line:   75,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   75,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 33,
												Line:   75,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   75,
								},
								File:   "universe.flux",
								Source: "fn: (key: B) => bool",
								Start: ast.Position{
									Column: 37,
									Line:   75,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   75,
									},
									File:   "universe.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 37,
										Line:   75,
									},
								},
							},
							Name: "fn",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   75,
									},
									File:   "universe.flux",
									Source: "(key: B) => bool",
									Start: ast.Position{
										Column: 41,
										Line:   75,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   75,
										},
										File:   "universe.flux",
										Source: "key: B",
										Start: ast.Position{
											Column: 42,
											Line:   75,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   75,
											},
											File:   "universe.flux",
											Source: "key",
											Start: ast.Position{
												Column: 42,
												Line:   75,
											},
										},
									},
									Name: "key",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   75,
											},
											File:   "universe.flux",
											Source: "B",
											Start: ast.Position{
												Column: 47,
												Line:   75,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   75,
												},
												File:   "universe.flux",
												Source: "B",
												Start: ast.Position{
													Column: 47,
													Line:   75,
												},
											},
										},
										Name: "B",
									},
								},
							}},
							Return: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   75,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 53,
											Line:   75,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   75,
											},
											File:   "universe.flux",
											Source: "bool",
											Start: ast.Position{
												Column: 53,
												Line:   75,
											},
										},
									},
									Name: "bool",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 65,
									Line:   75,
								},
								File:   "universe.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 62,
									Line:   75,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   75,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 63,
										Line:   75,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 64,
											Line:   75,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 63,
											Line:   75,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   76,
					},
					File:   "universe.flux",
					Source: "builtin getColumn",
					Start: ast.Position{
						Column: 1,
						Line:   76,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   76,
						},
						File:   "universe.flux",
						Source: "getColumn",
						Start: ast.Position{
							Column: 9,
							Line:   76,
						},
					},
				},
				Name: "getColumn",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 74,
							Line:   76,
						},
						File:   "universe.flux",
						Source: "(<-table: [A], column: string) => [B] where A: Record",
						Start: ast.Position{
							Column: 21,
							Line:   76,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 74,
								Line:   76,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 65,
								Line:   76,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 74,
									Line:   76,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 68,
									Line:   76,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   76,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 65,
									Line:   76,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 58,
								Line:   76,
							},
							File:   "universe.flux",
							Source: "(<-table: [A], column: string) => [B]",
							Start: ast.Position{
								Column: 21,
								Line:   76,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   76,
								},
								File:   "universe.flux",
								Source: "<-table: [A]",
								Start: ast.Position{
									Column: 22,
									Line:   76,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   76,
									},
									File:   "universe.flux",
									Source: "table",
									Start: ast.Position{
										Column: 24,
										Line:   76,
									},
								},
							},
							Name: "table",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   76,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 31,
										Line:   76,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   76,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 32,
											Line:   76,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   76,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 32,
												Line:   76,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   76,
								},
								File:   "universe.flux",
								Source: "column: string",
								Start: ast.Position{
									Column: 36,
									Line:   76,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   76,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 36,
										Line:   76,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   76,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 44,
										Line:   76,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   76,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 44,
											Line:   76,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   76,
								},
								File:   "universe.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 55,
									Line:   76,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 57,
										Line:   76,
									},
									File:   "universe.flux",
									Source: "B",
									Start: ast.Position{
										Column: 56,
										Line:   76,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   76,
										},
										File:   "universe.flux",
										Source: "B",
										Start: ast.Position{
											Column: 56,
											Line:   76,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   77,
					},
					File:   "universe.flux",
					Source: "builtin getRecord",
					Start: ast.Position{
						Column: 1,
						Line:   77,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   77,
						},
						File:   "universe.flux",
						Source: "getRecord",
						Start: ast.Position{
							Column: 9,
							Line:   77,
						},
					},
				},
				Name: "getRecord",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 66,
							Line:   77,
						},
						File:   "universe.flux",
						Source: "(<-table: [A], idx: int) => A where A: Record",
						Start: ast.Position{
							Column: 21,
							Line:   77,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 66,
								Line:   77,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 57,
								Line:   77,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   77,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 60,
									Line:   77,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   77,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 57,
									Line:   77,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 50,
								Line:   77,
							},
							File:   "universe.flux",
							Source: "(<-table: [A], idx: int) => A",
							Start: ast.Position{
								Column: 21,
								Line:   77,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   77,
								},
								File:   "universe.flux",
								Source: "<-table: [A]",
								Start: ast.Position{
									Column: 22,
									Line:   77,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   77,
									},
									File:   "universe.flux",
									Source: "table",
									Start: ast.Position{
										Column: 24,
										Line:   77,
									},
								},
							},
							Name: "table",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   77,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 31,
										Line:   77,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   77,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 32,
											Line:   77,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   77,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 32,
												Line:   77,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   77,
								},
								File:   "universe.flux",
								Source: "idx: int",
								Start: ast.Position{
									Column: 36,
									Line:   77,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   77,
									},
									File:   "universe.flux",
									Source: "idx",
									Start: ast.Position{
										Column: 36,
										Line:   77,
									},
								},
							},
							Name: "idx",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   77,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 41,
										Line:   77,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 44,
											Line:   77,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 41,
											Line:   77,
										},
									},
								},
								Name: "int",
							},
						},
					}},
					Return: &ast.TvarType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   77,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 49,
									Line:   77,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   77,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 49,
										Line:   77,
									},
								},
							},
							Name: "A",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   78,
					},
					File:   "universe.flux",
					Source: "builtin findColumn",
					Start: ast.Position{
						Column: 1,
						Line:   78,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   78,
						},
						File:   "universe.flux",
						Source: "findColumn",
						Start: ast.Position{
							Column: 9,
							Line:   78,
						},
					},
				},
				Name: "findColumn",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 109,
							Line:   78,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], fn: (key: B) => bool, column: string) => [C] where A: Record, B: Record",
						Start: ast.Position{
							Column: 22,
							Line:   78,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 98,
								Line:   78,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 89,
								Line:   78,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 98,
									Line:   78,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 92,
									Line:   78,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   78,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 89,
									Line:   78,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 109,
								Line:   78,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 100,
								Line:   78,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 109,
									Line:   78,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 103,
									Line:   78,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 101,
									Line:   78,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 100,
									Line:   78,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 82,
								Line:   78,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], fn: (key: B) => bool, column: string) => [C]",
							Start: ast.Position{
								Column: 22,
								Line:   78,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   78,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 23,
									Line:   78,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   78,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 25,
										Line:   78,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   78,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 33,
										Line:   78,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   78,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 34,
											Line:   78,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   78,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 34,
												Line:   78,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   78,
								},
								File:   "universe.flux",
								Source: "fn: (key: B) => bool",
								Start: ast.Position{
									Column: 38,
									Line:   78,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   78,
									},
									File:   "universe.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 38,
										Line:   78,
									},
								},
							},
							Name: "fn",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   78,
									},
									File:   "universe.flux",
									Source: "(key: B) => bool",
									Start: ast.Position{
										Column: 42,
										Line:   78,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   78,
										},
										File:   "universe.flux",
										Source: "key: B",
										Start: ast.Position{
											Column: 43,
											Line:   78,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   78,
											},
											File:   "universe.flux",
											Source: "key",
											Start: ast.Position{
												Column: 43,
												Line:   78,
											},
										},
									},
									Name: "key",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   78,
											},
											File:   "universe.flux",
											Source: "B",
											Start: ast.Position{
												Column: 48,
												Line:   78,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   78,
												},
												File:   "universe.flux",
												Source: "B",
												Start: ast.Position{
													Column: 48,
													Line:   78,
												},
											},
										},
										Name: "B",
									},
								},
							}},
							Return: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   78,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 54,
											Line:   78,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   78,
											},
											File:   "universe.flux",
											Source: "bool",
											Start: ast.Position{
												Column: 54,
												Line:   78,
											},
										},
									},
									Name: "bool",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 74,
									Line:   78,
								},
								File:   "universe.flux",
								Source: "column: string",
								Start: ast.Position{
									Column: 60,
									Line:   78,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   78,
									},
									File:   "universe.flux",
									Source: "column",
									Start: ast.Position{
										Column: 60,
										Line:   78,
									},
								},
							},
							Name: "column",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 74,
										Line:   78,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 68,
										Line:   78,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 74,
											Line:   78,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 68,
											Line:   78,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   78,
								},
								File:   "universe.flux",
								Source: "[C]",
								Start: ast.Position{
									Column: 79,
									Line:   78,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   78,
									},
									File:   "universe.flux",
									Source: "C",
									Start: ast.Position{
										Column: 80,
										Line:   78,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 81,
											Line:   78,
										},
										File:   "universe.flux",
										Source: "C",
										Start: ast.Position{
											Column: 80,
											Line:   78,
										},
									},
								},
								Name: "C",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   79,
					},
					File:   "universe.flux",
					Source: "builtin findRecord",
					Start: ast.Position{
						Column: 1,
						Line:   79,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   79,
						},
						File:   "universe.flux",
						Source: "findRecord",
						Start: ast.Position{
							Column: 9,
							Line:   79,
						},
					},
				},
				Name: "findRecord",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 101,
							Line:   79,
						},
						File:   "universe.flux",
						Source: "(<-tables: [A], fn: (key: B) => bool, idx: int) => A where A: Record, B: Record",
						Start: ast.Position{
							Column: 22,
							Line:   79,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 90,
								Line:   79,
							},
							File:   "universe.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 81,
								Line:   79,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   79,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 84,
									Line:   79,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   79,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 81,
									Line:   79,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 101,
								Line:   79,
							},
							File:   "universe.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 92,
								Line:   79,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 101,
									Line:   79,
								},
								File:   "universe.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 95,
									Line:   79,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 93,
									Line:   79,
								},
								File:   "universe.flux",
								Source: "B",
								Start: ast.Position{
									Column: 92,
									Line:   79,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 74,
								Line:   79,
							},
							File:   "universe.flux",
							Source: "(<-tables: [A], fn: (key: B) => bool, idx: int) => A",
							Start: ast.Position{
								Column: 22,
								Line:   79,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   79,
								},
								File:   "universe.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 23,
									Line:   79,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   79,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 25,
										Line:   79,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   79,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 33,
										Line:   79,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   79,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 34,
											Line:   79,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   79,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 34,
												Line:   79,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   79,
								},
								File:   "universe.flux",
								Source: "fn: (key: B) => bool",
								Start: ast.Position{
									Column: 38,
									Line:   79,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   79,
									},
									File:   "universe.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 38,
										Line:   79,
									},
								},
							},
							Name: "fn",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   79,
									},
									File:   "universe.flux",
									Source: "(key: B) => bool",
									Start: ast.Position{
										Column: 42,
										Line:   79,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   79,
										},
										File:   "universe.flux",
										Source: "key: B",
										Start: ast.Position{
											Column: 43,
											Line:   79,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   79,
											},
											File:   "universe.flux",
											Source: "key",
											Start: ast.Position{
												Column: 43,
												Line:   79,
											},
										},
									},
									Name: "key",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   79,
											},
											File:   "universe.flux",
											Source: "B",
											Start: ast.Position{
												Column: 48,
												Line:   79,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   79,
												},
												File:   "universe.flux",
												Source: "B",
												Start: ast.Position{
													Column: 48,
													Line:   79,
												},
											},
										},
										Name: "B",
									},
								},
							}},
							Return: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   79,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 54,
											Line:   79,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   79,
											},
											File:   "universe.flux",
											Source: "bool",
											Start: ast.Position{
												Column: 54,
												Line:   79,
											},
										},
									},
									Name: "bool",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   79,
								},
								File:   "universe.flux",
								Source: "idx: int",
								Start: ast.Position{
									Column: 60,
									Line:   79,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   79,
									},
									File:   "universe.flux",
									Source: "idx",
									Start: ast.Position{
										Column: 60,
										Line:   79,
									},
								},
							},
							Name: "idx",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   79,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 65,
										Line:   79,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   79,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 65,
											Line:   79,
										},
									},
								},
								Name: "int",
							},
						},
					}},
					Return: &ast.TvarType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 74,
									Line:   79,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 73,
									Line:   79,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 74,
										Line:   79,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 73,
										Line:   79,
									},
								},
							},
							Name: "A",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   82,
					},
					File:   "universe.flux",
					Source: "builtin bool",
					Start: ast.Position{
						Column: 1,
						Line:   82,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   82,
						},
						File:   "universe.flux",
						Source: "bool",
						Start: ast.Position{
							Column: 9,
							Line:   82,
						},
					},
				},
				Name: "bool",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 30,
							Line:   82,
						},
						File:   "universe.flux",
						Source: "(v: A) => bool",
						Start: ast.Position{
							Column: 16,
							Line:   82,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   82,
							},
							File:   "universe.flux",
							Source: "(v: A) => bool",
							Start: ast.Position{
								Column: 16,
								Line:   82,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   82,
								},
								File:   "universe.flux",
								Source: "v: A",
								Start: ast.Position{
									Column: 17,
									Line:   82,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   82,
									},
									File:   "universe.flux",
									Source: "v",
									Start: ast.Position{
										Column: 17,
										Line:   82,
									},
								},
							},
							Name: "v",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   82,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 20,
										Line:   82,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   82,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 20,
											Line:   82,
										},
									},
								},
								Name: "A",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   82,
								},
								File:   "universe.flux",
								Source: "bool",
								Start: ast.Position{
									Column: 26,
									Line:   82,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   82,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 26,
										Line:   82,
									},
								},
							},
							Name: "bool",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   83,
					},
					File:   "universe.flux",
					Source: "builtin bytes",
					Start: ast.Position{
						Column: 1,
						Line:   83,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   83,
						},
						File:   "universe.flux",
						Source: "bytes",
						Start: ast.Position{
							Column: 9,
							Line:   83,
						},
					},
				},
				Name: "bytes",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 31,
							Line:   83,
						},
						File:   "universe.flux",
						Source: "(v: A) => bool",
						Start: ast.Position{
							Column: 17,
							Line:   83,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   83,
							},
							File:   "universe.flux",
							Source: "(v: A) => bool",
							Start: ast.Position{
								Column: 17,
								Line:   83,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   83,
								},
								File:   "universe.flux",
								Source: "v: A",
								Start: ast.Position{
									Column: 18,
									Line:   83,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   83,
									},
									File:   "universe.flux",
									Source: "v",
									Start: ast.Position{
										Column: 18,
										Line:   83,
									},
								},
							},
							Name: "v",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   83,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 21,
										Line:   83,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   83,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 21,
											Line:   83,
										},
									},
								},
								Name: "A",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   83,
								},
								File:   "universe.flux",
								Source: "bool",
								Start: ast.Position{
									Column: 27,
									Line:   83,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   83,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 27,
										Line:   83,
									},
								},
							},
							Name: "bool",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   84,
					},
					File:   "universe.flux",
					Source: "builtin duration",
					Start: ast.Position{
						Column: 1,
						Line:   84,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   84,
						},
						File:   "universe.flux",
						Source: "duration",
						Start: ast.Position{
							Column: 9,
							Line:   84,
						},
					},
				},
				Name: "duration",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 38,
							Line:   84,
						},
						File:   "universe.flux",
						Source: "(v: A) => duration",
						Start: ast.Position{
							Column: 20,
							Line:   84,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 38,
								Line:   84,
							},
							File:   "universe.flux",
							Source: "(v: A) => duration",
							Start: ast.Position{
								Column: 20,
								Line:   84,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   84,
								},
								File:   "universe.flux",
								Source: "v: A",
								Start: ast.Position{
									Column: 21,
									Line:   84,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   84,
									},
									File:   "universe.flux",
									Source: "v",
									Start: ast.Position{
										Column: 21,
										Line:   84,
									},
								},
							},
							Name: "v",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   84,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 24,
										Line:   84,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   84,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 24,
											Line:   84,
										},
									},
								},
								Name: "A",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   84,
								},
								File:   "universe.flux",
								Source: "duration",
								Start: ast.Position{
									Column: 30,
									Line:   84,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   84,
									},
									File:   "universe.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 30,
										Line:   84,
									},
								},
							},
							Name: "duration",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   85,
					},
					File:   "universe.flux",
					Source: "builtin float",
					Start: ast.Position{
						Column: 1,
						Line:   85,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   85,
						},
						File:   "universe.flux",
						Source: "float",
						Start: ast.Position{
							Column: 9,
							Line:   85,
						},
					},
				},
				Name: "float",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 32,
							Line:   85,
						},
						File:   "universe.flux",
						Source: "(v: A) => float",
						Start: ast.Position{
							Column: 17,
							Line:   85,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   85,
							},
							File:   "universe.flux",
							Source: "(v: A) => float",
							Start: ast.Position{
								Column: 17,
								Line:   85,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   85,
								},
								File:   "universe.flux",
								Source: "v: A",
								Start: ast.Position{
									Column: 18,
									Line:   85,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   85,
									},
									File:   "universe.flux",
									Source: "v",
									Start: ast.Position{
										Column: 18,
										Line:   85,
									},
								},
							},
							Name: "v",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   85,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 21,
										Line:   85,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   85,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 21,
											Line:   85,
										},
									},
								},
								Name: "A",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   85,
								},
								File:   "universe.flux",
								Source: "float",
								Start: ast.Position{
									Column: 27,
									Line:   85,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   85,
									},
									File:   "universe.flux",
									Source: "float",
									Start: ast.Position{
										Column: 27,
										Line:   85,
									},
								},
							},
							Name: "float",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   86,
					},
					File:   "universe.flux",
					Source: "builtin int",
					Start: ast.Position{
						Column: 1,
						Line:   86,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   86,
						},
						File:   "universe.flux",
						Source: "int",
						Start: ast.Position{
							Column: 9,
							Line:   86,
						},
					},
				},
				Name: "int",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 28,
							Line:   86,
						},
						File:   "universe.flux",
						Source: "(v: A) => int",
						Start: ast.Position{
							Column: 15,
							Line:   86,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   86,
							},
							File:   "universe.flux",
							Source: "(v: A) => int",
							Start: ast.Position{
								Column: 15,
								Line:   86,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   86,
								},
								File:   "universe.flux",
								Source: "v: A",
								Start: ast.Position{
									Column: 16,
									Line:   86,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   86,
									},
									File:   "universe.flux",
									Source: "v",
									Start: ast.Position{
										Column: 16,
										Line:   86,
									},
								},
							},
							Name: "v",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   86,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 19,
										Line:   86,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   86,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 19,
											Line:   86,
										},
									},
								},
								Name: "A",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   86,
								},
								File:   "universe.flux",
								Source: "int",
								Start: ast.Position{
									Column: 25,
									Line:   86,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   86,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 25,
										Line:   86,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   87,
					},
					File:   "universe.flux",
					Source: "builtin string",
					Start: ast.Position{
						Column: 1,
						Line:   87,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   87,
						},
						File:   "universe.flux",
						Source: "string",
						Start: ast.Position{
							Column: 9,
							Line:   87,
						},
					},
				},
				Name: "string",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 34,
							Line:   87,
						},
						File:   "universe.flux",
						Source: "(v: A) => string",
						Start: ast.Position{
							Column: 18,
							Line:   87,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 34,
								Line:   87,
							},
							File:   "universe.flux",
							Source: "(v: A) => string",
							Start: ast.Position{
								Column: 18,
								Line:   87,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   87,
								},
								File:   "universe.flux",
								Source: "v: A",
								Start: ast.Position{
									Column: 19,
									Line:   87,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   87,
									},
									File:   "universe.flux",
									Source: "v",
									Start: ast.Position{
										Column: 19,
										Line:   87,
									},
								},
							},
							Name: "v",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   87,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 22,
										Line:   87,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   87,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 22,
											Line:   87,
										},
									},
								},
								Name: "A",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   87,
								},
								File:   "universe.flux",
								Source: "string",
								Start: ast.Position{
									Column: 28,
									Line:   87,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   87,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 28,
										Line:   87,
									},
								},
							},
							Name: "string",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   88,
					},
					File:   "universe.flux",
					Source: "builtin time",
					Start: ast.Position{
						Column: 1,
						Line:   88,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   88,
						},
						File:   "universe.flux",
						Source: "time",
						Start: ast.Position{
							Column: 9,
							Line:   88,
						},
					},
				},
				Name: "time",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 30,
							Line:   88,
						},
						File:   "universe.flux",
						Source: "(v: A) => time",
						Start: ast.Position{
							Column: 16,
							Line:   88,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   88,
							},
							File:   "universe.flux",
							Source: "(v: A) => time",
							Start: ast.Position{
								Column: 16,
								Line:   88,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   88,
								},
								File:   "universe.flux",
								Source: "v: A",
								Start: ast.Position{
									Column: 17,
									Line:   88,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   88,
									},
									File:   "universe.flux",
									Source: "v",
									Start: ast.Position{
										Column: 17,
										Line:   88,
									},
								},
							},
							Name: "v",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   88,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 20,
										Line:   88,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   88,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 20,
											Line:   88,
										},
									},
								},
								Name: "A",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   88,
								},
								File:   "universe.flux",
								Source: "time",
								Start: ast.Position{
									Column: 26,
									Line:   88,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   88,
									},
									File:   "universe.flux",
									Source: "time",
									Start: ast.Position{
										Column: 26,
										Line:   88,
									},
								},
							},
							Name: "time",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   89,
					},
					File:   "universe.flux",
					Source: "builtin uint",
					Start: ast.Position{
						Column: 1,
						Line:   89,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   89,
						},
						File:   "universe.flux",
						Source: "uint",
						Start: ast.Position{
							Column: 9,
							Line:   89,
						},
					},
				},
				Name: "uint",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 30,
							Line:   89,
						},
						File:   "universe.flux",
						Source: "(v: A) => uint",
						Start: ast.Position{
							Column: 16,
							Line:   89,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   89,
							},
							File:   "universe.flux",
							Source: "(v: A) => uint",
							Start: ast.Position{
								Column: 16,
								Line:   89,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   89,
								},
								File:   "universe.flux",
								Source: "v: A",
								Start: ast.Position{
									Column: 17,
									Line:   89,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   89,
									},
									File:   "universe.flux",
									Source: "v",
									Start: ast.Position{
										Column: 17,
										Line:   89,
									},
								},
							},
							Name: "v",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   89,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 20,
										Line:   89,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   89,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 20,
											Line:   89,
										},
									},
								},
								Name: "A",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   89,
								},
								File:   "universe.flux",
								Source: "uint",
								Start: ast.Position{
									Column: 26,
									Line:   89,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   89,
									},
									File:   "universe.flux",
									Source: "uint",
									Start: ast.Position{
										Column: 26,
										Line:   89,
									},
								},
							},
							Name: "uint",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   92,
					},
					File:   "universe.flux",
					Source: "builtin contains",
					Start: ast.Position{
						Column: 1,
						Line:   92,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   92,
						},
						File:   "universe.flux",
						Source: "contains",
						Start: ast.Position{
							Column: 9,
							Line:   92,
						},
					},
				},
				Name: "contains",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 66,
							Line:   92,
						},
						File:   "universe.flux",
						Source: "(value: A, set: [A]) => bool where A: Nullable",
						Start: ast.Position{
							Column: 20,
							Line:   92,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 66,
								Line:   92,
							},
							File:   "universe.flux",
							Source: "A: Nullable",
							Start: ast.Position{
								Column: 55,
								Line:   92,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   92,
								},
								File:   "universe.flux",
								Source: "Nullable",
								Start: ast.Position{
									Column: 58,
									Line:   92,
								},
							},
						},
						Name: "Nullable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   92,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 55,
									Line:   92,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 48,
								Line:   92,
							},
							File:   "universe.flux",
							Source: "(value: A, set: [A]) => bool",
							Start: ast.Position{
								Column: 20,
								Line:   92,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   92,
								},
								File:   "universe.flux",
								Source: "value: A",
								Start: ast.Position{
									Column: 21,
									Line:   92,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   92,
									},
									File:   "universe.flux",
									Source: "value",
									Start: ast.Position{
										Column: 21,
										Line:   92,
									},
								},
							},
							Name: "value",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   92,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 28,
										Line:   92,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   92,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 28,
											Line:   92,
										},
									},
								},
								Name: "A",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   92,
								},
								File:   "universe.flux",
								Source: "set: [A]",
								Start: ast.Position{
									Column: 31,
									Line:   92,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   92,
									},
									File:   "universe.flux",
									Source: "set",
									Start: ast.Position{
										Column: 31,
										Line:   92,
									},
								},
							},
							Name: "set",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   92,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 36,
										Line:   92,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   92,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 37,
											Line:   92,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   92,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 37,
												Line:   92,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   92,
								},
								File:   "universe.flux",
								Source: "bool",
								Start: ast.Position{
									Column: 44,
									Line:   92,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   92,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 44,
										Line:   92,
									},
								},
							},
							Name: "bool",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   95,
					},
					File:   "universe.flux",
					Source: "builtin inf",
					Start: ast.Position{
						Column: 1,
						Line:   95,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   95,
						},
						File:   "universe.flux",
						Source: "inf",
						Start: ast.Position{
							Column: 9,
							Line:   95,
						},
					},
				},
				Name: "inf",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 23,
							Line:   95,
						},
						File:   "universe.flux",
						Source: "duration",
						Start: ast.Position{
							Column: 15,
							Line:   95,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.NamedType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   95,
							},
							File:   "universe.flux",
							Source: "duration",
							Start: ast.Position{
								Column: 15,
								Line:   95,
							},
						},
					},
					ID: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   95,
								},
								File:   "universe.flux",
								Source: "duration",
								Start: ast.Position{
									Column: 15,
									Line:   95,
								},
							},
						},
						Name: "duration",
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   96,
					},
					File:   "universe.flux",
					Source: "builtin length",
					Start: ast.Position{
						Column: 1,
						Line:   96,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   96,
						},
						File:   "universe.flux",
						Source: "length",
						Start: ast.Position{
							Column: 9,
							Line:   96,
						},
					},
				},
				Name: "length",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 35,
							Line:   96,
						},
						File:   "universe.flux",
						Source: "(arr: [A]) => int",
						Start: ast.Position{
							Column: 18,
							Line:   96,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   96,
							},
							File:   "universe.flux",
							Source: "(arr: [A]) => int",
							Start: ast.Position{
								Column: 18,
								Line:   96,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   96,
								},
								File:   "universe.flux",
								Source: "arr: [A]",
								Start: ast.Position{
									Column: 19,
									Line:   96,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   96,
									},
									File:   "universe.flux",
									Source: "arr",
									Start: ast.Position{
										Column: 19,
										Line:   96,
									},
								},
							},
							Name: "arr",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   96,
									},
									File:   "universe.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 24,
										Line:   96,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   96,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 25,
											Line:   96,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   96,
											},
											File:   "universe.flux",
											Source: "A",
											Start: ast.Position{
												Column: 25,
												Line:   96,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   96,
								},
								File:   "universe.flux",
								Source: "int",
								Start: ast.Position{
									Column: 32,
									Line:   96,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   96,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 32,
										Line:   96,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   97,
					},
					File:   "universe.flux",
					Source: "builtin linearBins",
					Start: ast.Position{
						Column: 1,
						Line:   97,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   97,
						},
						File:   "universe.flux",
						Source: "linearBins",
						Start: ast.Position{
							Column: 9,
							Line:   97,
						},
					},
				},
				Name: "linearBins",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 90,
							Line:   97,
						},
						File:   "universe.flux",
						Source: "(start: float, width: float, count: int, ?infinity: bool) => [float]",
						Start: ast.Position{
							Column: 22,
							Line:   97,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 90,
								Line:   97,
							},
							File:   "universe.flux",
							Source: "(start: float, width: float, count: int, ?infinity: bool) => [float]",
							Start: ast.Position{
								Column: 22,
								Line:   97,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   97,
								},
								File:   "universe.flux",
								Source: "start: float",
								Start: ast.Position{
									Column: 23,
									Line:   97,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   97,
									},
									File:   "universe.flux",
									Source: "start",
									Start: ast.Position{
										Column: 23,
										Line:   97,
									},
								},
							},
							Name: "start",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   97,
									},
									File:   "universe.flux",
									Source: "float",
									Start: ast.Position{
										Column: 30,
										Line:   97,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   97,
										},
										File:   "universe.flux",
										Source: "float",
										Start: ast.Position{
											Column: 30,
											Line:   97,
										},
									},
								},
								Name: "float",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   97,
								},
								File:   "universe.flux",
								Source: "width: float",
								Start: ast.Position{
									Column: 37,
									Line:   97,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   97,
									},
									File:   "universe.flux",
									Source: "width",
									Start: ast.Position{
										Column: 37,
										Line:   97,
									},
								},
							},
							Name: "width",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   97,
									},
									File:   "universe.flux",
									Source: "float",
									Start: ast.Position{
										Column: 44,
										Line:   97,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   97,
										},
										File:   "universe.flux",
										Source: "float",
										Start: ast.Position{
											Column: 44,
											Line:   97,
										},
									},
								},
								Name: "float",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   97,
								},
								File:   "universe.flux",
								Source: "count: int",
								Start: ast.Position{
									Column: 51,
									Line:   97,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   97,
									},
									File:   "universe.flux",
									Source: "count",
									Start: ast.Position{
										Column: 51,
										Line:   97,
									},
								},
							},
							Name: "count",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   97,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 58,
										Line:   97,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   97,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 58,
											Line:   97,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   97,
								},
								File:   "universe.flux",
								Source: "?infinity: bool",
								Start: ast.Position{
									Column: 63,
									Line:   97,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   97,
									},
									File:   "universe.flux",
									Source: "infinity",
									Start: ast.Position{
										Column: 64,
										Line:   97,
									},
								},
							},
							Name: "infinity",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 78,
										Line:   97,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 74,
										Line:   97,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 78,
											Line:   97,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 74,
											Line:   97,
										},
									},
								},
								Name: "bool",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   97,
								},
								File:   "universe.flux",
								Source: "[float]",
								Start: ast.Position{
									Column: 83,
									Line:   97,
								},
							},
						},
						ElementType: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 89,
										Line:   97,
									},
									File:   "universe.flux",
									Source: "float",
									Start: ast.Position{
										Column: 84,
										Line:   97,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 89,
											Line:   97,
										},
										File:   "universe.flux",
										Source: "float",
										Start: ast.Position{
											Column: 84,
											Line:   97,
										},
									},
								},
								Name: "float",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 24,
						Line:   98,
					},
					File:   "universe.flux",
					Source: "builtin logarithmicBins",
					Start: ast.Position{
						Column: 1,
						Line:   98,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 24,
							Line:   98,
						},
						File:   "universe.flux",
						Source: "logarithmicBins",
						Start: ast.Position{
							Column: 9,
							Line:   98,
						},
					},
				},
				Name: "logarithmicBins",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 96,
							Line:   98,
						},
						File:   "universe.flux",
						Source: "(start: float, factor: float, count: int, ?infinity: bool) => [float]",
						Start: ast.Position{
							Column: 27,
							Line:   98,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 96,
								Line:   98,
							},
							File:   "universe.flux",
							Source: "(start: float, factor: float, count: int, ?infinity: bool) => [float]",
							Start: ast.Position{
								Column: 27,
								Line:   98,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   98,
								},
								File:   "universe.flux",
								Source: "start: float",
								Start: ast.Position{
									Column: 28,
									Line:   98,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   98,
									},
									File:   "universe.flux",
									Source: "start",
									Start: ast.Position{
										Column: 28,
										Line:   98,
									},
								},
							},
							Name: "start",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   98,
									},
									File:   "universe.flux",
									Source: "float",
									Start: ast.Position{
										Column: 35,
										Line:   98,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   98,
										},
										File:   "universe.flux",
										Source: "float",
										Start: ast.Position{
											Column: 35,
											Line:   98,
										},
									},
								},
								Name: "float",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   98,
								},
								File:   "universe.flux",
								Source: "factor: float",
								Start: ast.Position{
									Column: 42,
									Line:   98,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   98,
									},
									File:   "universe.flux",
									Source: "factor",
									Start: ast.Position{
										Column: 42,
										Line:   98,
									},
								},
							},
							Name: "factor",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   98,
									},
									File:   "universe.flux",
									Source: "float",
									Start: ast.Position{
										Column: 50,
										Line:   98,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   98,
										},
										File:   "universe.flux",
										Source: "float",
										Start: ast.Position{
											Column: 50,
											Line:   98,
										},
									},
								},
								Name: "float",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 67,
									Line:   98,
								},
								File:   "universe.flux",
								Source: "count: int",
								Start: ast.Position{
									Column: 57,
									Line:   98,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   98,
									},
									File:   "universe.flux",
									Source: "count",
									Start: ast.Position{
										Column: 57,
										Line:   98,
									},
								},
							},
							Name: "count",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   98,
									},
									File:   "universe.flux",
									Source: "int",
									Start: ast.Position{
										Column: 64,
										Line:   98,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   98,
										},
										File:   "universe.flux",
										Source: "int",
										Start: ast.Position{
											Column: 64,
											Line:   98,
										},
									},
								},
								Name: "int",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 84,
									Line:   98,
								},
								File:   "universe.flux",
								Source: "?infinity: bool",
								Start: ast.Position{
									Column: 69,
									Line:   98,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 78,
										Line:   98,
									},
									File:   "universe.flux",
									Source: "infinity",
									Start: ast.Position{
										Column: 70,
										Line:   98,
									},
								},
							},
							Name: "infinity",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 84,
										Line:   98,
									},
									File:   "universe.flux",
									Source: "bool",
									Start: ast.Position{
										Column: 80,
										Line:   98,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 84,
											Line:   98,
										},
										File:   "universe.flux",
										Source: "bool",
										Start: ast.Position{
											Column: 80,
											Line:   98,
										},
									},
								},
								Name: "bool",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 96,
									Line:   98,
								},
								File:   "universe.flux",
								Source: "[float]",
								Start: ast.Position{
									Column: 89,
									Line:   98,
								},
							},
						},
						ElementType: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 95,
										Line:   98,
									},
									File:   "universe.flux",
									Source: "float",
									Start: ast.Position{
										Column: 90,
										Line:   98,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 95,
											Line:   98,
										},
										File:   "universe.flux",
										Source: "float",
										Start: ast.Position{
											Column: 90,
											Line:   98,
										},
									},
								},
								Name: "float",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   101,
					},
					File:   "universe.flux",
					Source: "builtin sleep",
					Start: ast.Position{
						Column: 1,
						Line:   101,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   101,
						},
						File:   "universe.flux",
						Source: "sleep",
						Start: ast.Position{
							Column: 9,
							Line:   101,
						},
					},
				},
				Name: "sleep",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 50,
							Line:   101,
						},
						File:   "universe.flux",
						Source: "(<-v: A, duration: duration) => A",
						Start: ast.Position{
							Column: 17,
							Line:   101,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 50,
								Line:   101,
							},
							File:   "universe.flux",
							Source: "(<-v: A, duration: duration) => A",
							Start: ast.Position{
								Column: 17,
								Line:   101,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   101,
								},
								File:   "universe.flux",
								Source: "<-v: A",
								Start: ast.Position{
									Column: 18,
									Line:   101,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   101,
									},
									File:   "universe.flux",
									Source: "v",
									Start: ast.Position{
										Column: 20,
										Line:   101,
									},
								},
							},
							Name: "v",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   101,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 23,
										Line:   101,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   101,
										},
										File:   "universe.flux",
										Source: "A",
										Start: ast.Position{
											Column: 23,
											Line:   101,
										},
									},
								},
								Name: "A",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   101,
								},
								File:   "universe.flux",
								Source: "duration: duration",
								Start: ast.Position{
									Column: 26,
									Line:   101,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   101,
									},
									File:   "universe.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 26,
										Line:   101,
									},
								},
							},
							Name: "duration",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   101,
									},
									File:   "universe.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 36,
										Line:   101,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 44,
											Line:   101,
										},
										File:   "universe.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 36,
											Line:   101,
										},
									},
								},
								Name: "duration",
							},
						},
					}},
					Return: &ast.TvarType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   101,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 49,
									Line:   101,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   101,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 49,
										Line:   101,
									},
								},
							},
							Name: "A",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   103,
					},
					File:   "universe.flux",
					Source: "builtin die",
					Start: ast.Position{
						Column: 1,
						Line:   103,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   103,
						},
						File:   "universe.flux",
						Source: "die",
						Start: ast.Position{
							Column: 9,
							Line:   103,
						},
					},
				},
				Name: "die",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 33,
							Line:   103,
						},
						File:   "universe.flux",
						Source: "(msg: string) => A",
						Start: ast.Position{
							Column: 15,
							Line:   103,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   103,
							},
							File:   "universe.flux",
							Source: "(msg: string) => A",
							Start: ast.Position{
								Column: 15,
								Line:   103,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   103,
								},
								File:   "universe.flux",
								Source: "msg: string",
								Start: ast.Position{
									Column: 16,
									Line:   103,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   103,
									},
									File:   "universe.flux",
									Source: "msg",
									Start: ast.Position{
										Column: 16,
										Line:   103,
									},
								},
							},
							Name: "msg",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   103,
									},
									File:   "universe.flux",
									Source: "string",
									Start: ast.Position{
										Column: 21,
										Line:   103,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   103,
										},
										File:   "universe.flux",
										Source: "string",
										Start: ast.Position{
											Column: 21,
											Line:   103,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.TvarType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   103,
								},
								File:   "universe.flux",
								Source: "A",
								Start: ast.Position{
									Column: 32,
									Line:   103,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   103,
									},
									File:   "universe.flux",
									Source: "A",
									Start: ast.Position{
										Column: 32,
										Line:   103,
									},
								},
							},
							Name: "A",
						},
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 128,
						Line:   108,
					},
					File:   "universe.flux",
					Source: "timeWeightedAvg = (tables=<-, unit) => tables\n    |> integral(unit: unit, interpolate: \"linear\")\n    |> map(fn: (r) => ({ r with _value: (r._value * float(v: uint(v: unit))) / float(v: int(v: r._stop) - int(v: r._start)) }))",
					Start: ast.Position{
						Column: 1,
						Line:   106,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   106,
						},
						File:   "universe.flux",
						Source: "timeWeightedAvg",
						Start: ast.Position{
							Column: 1,
							Line:   106,
						},
					},
				},
				Name: "timeWeightedAvg",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 128,
							Line:   108,
						},
						File:   "universe.flux",
						Source: "(tables=<-, unit) => tables\n    |> integral(unit: unit, interpolate: \"linear\")\n    |> map(fn: (r) => ({ r with _value: (r._value * float(v: uint(v: unit))) / float(v: int(v: r._stop) - int(v: r._start)) }))",
						Start: ast.Position{
							Column: 19,
							Line:   106,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   106,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 40,
										Line:   106,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   107,
								},
								File:   "universe.flux",
								Source: "tables\n    |> integral(unit: unit, interpolate: \"linear\")",
								Start: ast.Position{
									Column: 40,
									Line:   106,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   107,
										},
										File:   "universe.flux",
										Source: "unit: unit, interpolate: \"linear\"",
										Start: ast.Position{
											Column: 17,
											Line:   107,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   107,
											},
											File:   "universe.flux",
											Source: "unit: unit",
											Start: ast.Position{
												Column: 17,
												Line:   107,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   107,
												},
												File:   "universe.flux",
												Source: "unit",
												Start: ast.Position{
													Column: 17,
													Line:   107,
												},
											},
										},
										Name: "unit",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   107,
												},
												File:   "universe.flux",
												Source: "unit",
												Start: ast.Position{
													Column: 23,
													Line:   107,
												},
											},
										},
										Name: "unit",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   107,
											},
											File:   "universe.flux",
											Source: "interpolate: \"linear\"",
											Start: ast.Position{
												Column: 29,
												Line:   107,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   107,
												},
												File:   "universe.flux",
												Source: "interpolate",
												Start: ast.Position{
													Column: 29,
													Line:   107,
												},
											},
										},
										Name: "interpolate",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   107,
												},
												File:   "universe.flux",
												Source: "\"linear\"",
												Start: ast.Position{
													Column: 42,
													Line:   107,
												},
											},
										},
										Value: "linear",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   107,
									},
									File:   "universe.flux",
									Source: "integral(unit: unit, interpolate: \"linear\")",
									Start: ast.Position{
										Column: 8,
										Line:   107,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   107,
										},
										File:   "universe.flux",
										Source: "integral",
										Start: ast.Position{
											Column: 8,
											Line:   107,
										},
									},
								},
								Name: "integral",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 128,
								Line:   108,
							},
							File:   "universe.flux",
							Source: "tables\n    |> integral(unit: unit, interpolate: \"linear\")\n    |> map(fn: (r) => ({ r with _value: (r._value * float(v: uint(v: unit))) / float(v: int(v: r._stop) - int(v: r._start)) }))",
							Start: ast.Position{
								Column: 40,
								Line:   106,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 127,
										Line:   108,
									},
									File:   "universe.flux",
									Source: "fn: (r) => ({ r with _value: (r._value * float(v: uint(v: unit))) / float(v: int(v: r._stop) - int(v: r._start)) })",
									Start: ast.Position{
										Column: 12,
										Line:   108,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 127,
											Line:   108,
										},
										File:   "universe.flux",
										Source: "fn: (r) => ({ r with _value: (r._value * float(v: uint(v: unit))) / float(v: int(v: r._stop) - int(v: r._start)) })",
										Start: ast.Position{
											Column: 12,
											Line:   108,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   108,
											},
											File:   "universe.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 12,
												Line:   108,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 127,
												Line:   108,
											},
											File:   "universe.flux",
											Source: "(r) => ({ r with _value: (r._value * float(v: uint(v: unit))) / float(v: int(v: r._stop) - int(v: r._start)) })",
											Start: ast.Position{
												Column: 16,
												Line:   108,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 127,
													Line:   108,
												},
												File:   "universe.flux",
												Source: "({ r with _value: (r._value * float(v: uint(v: unit))) / float(v: int(v: r._stop) - int(v: r._start)) })",
												Start: ast.Position{
													Column: 23,
													Line:   108,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 126,
														Line:   108,
													},
													File:   "universe.flux",
													Source: "{ r with _value: (r._value * float(v: uint(v: unit))) / float(v: int(v: r._stop) - int(v: r._start)) }",
													Start: ast.Position{
														Column: 24,
														Line:   108,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 124,
															Line:   108,
														},
														File:   "universe.flux",
														Source: "_value: (r._value * float(v: uint(v: unit))) / float(v: int(v: r._stop) - int(v: r._start))",
														Start: ast.Position{
															Column: 33,
															Line:   108,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 39,
																Line:   108,
															},
															File:   "universe.flux",
															Source: "_value",
															Start: ast.Position{
																Column: 33,
																Line:   108,
															},
														},
													},
													Name: "_value",
												},
												Value: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 124,
																Line:   108,
															},
															File:   "universe.flux",
															Source: "(r._value * float(v: uint(v: unit))) / float(v: int(v: r._stop) - int(v: r._start))",
															Start: ast.Position{
																Column: 41,
																Line:   108,
															},
														},
													},
													Left: &ast.ParenExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 77,
																	Line:   108,
																},
																File:   "universe.flux",
																Source: "(r._value * float(v: uint(v: unit)))",
																Start: ast.Position{
																	Column: 41,
																	Line:   108,
																},
															},
														},
														Expression: &ast.BinaryExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 76,
																		Line:   108,
																	},
																	File:   "universe.flux",
																	Source: "r._value * float(v: uint(v: unit))",
																	Start: ast.Position{
																		Column: 42,
																		Line:   108,
																	},
																},
															},
															Left: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 50,
																			Line:   108,
																		},
																		File:   "universe.flux",
																		Source: "r._value",
																		Start: ast.Position{
																			Column: 42,
																			Line:   108,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 43,
																				Line:   108,
																			},
																			File:   "universe.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 42,
																				Line:   108,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 50,
																				Line:   108,
																			},
																			File:   "universe.flux",
																			Source: "_value",
																			Start: ast.Position{
																				Column: 44,
																				Line:   108,
																			},
																		},
																	},
																	Name: "_value",
																},
															},
															Operator: 1,
															Right: &ast.CallExpression{
																Arguments: []ast.Expression{&ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 75,
																				Line:   108,
																			},
																			File:   "universe.flux",
																			Source: "v: uint(v: unit)",
																			Start: ast.Position{
																				Column: 59,
																				Line:   108,
																			},
																		},
																	},
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 75,
																					Line:   108,
																				},
																				File:   "universe.flux",
																				Source: "v: uint(v: unit)",
																				Start: ast.Position{
																					Column: 59,
																					Line:   108,
																				},
																			},
																		},
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 60,
																						Line:   108,
																					},
																					File:   "universe.flux",
																					Source: "v",
																					Start: ast.Position{
																						Column: 59,
																						Line:   108,
																					},
																				},
																			},
																			Name: "v",
																		},
																		Value: &ast.CallExpression{
																			Arguments: []ast.Expression{&ast.ObjectExpression{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 74,
																							Line:   108,
																						},
																						File:   "universe.flux",
																						Source: "v: unit",
																						Start: ast.Position{
																							Column: 67,
																							Line:   108,
																						},
																					},
																				},
																				Properties: []*ast.Property{&ast.Property{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 74,
																								Line:   108,
																							},
																							File:   "universe.flux",
																							Source: "v: unit",
																							Start: ast.Position{
																								Column: 67,
																								Line:   108,
																							},
																						},
																					},
																					Key: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 68,
																									Line:   108,
																								},
																								File:   "universe.flux",
																								Source: "v",
																								Start: ast.Position{
																									Column: 67,
																									Line:   108,
																								},
																							},
																						},
																						Name: "v",
																					},
																					Value: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 74,
																									Line:   108,
																								},
																								File:   "universe.flux",
																								Source: "unit",
																								Start: ast.Position{
																									Column: 70,
																									Line:   108,
																								},
																							},
																						},
																						Name: "unit",
																					},
																				}},
																				With: nil,
																			}},
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 75,
																						Line:   108,
																					},
																					File:   "universe.flux",
																					Source: "uint(v: unit)",
																					Start: ast.Position{
																						Column: 62,
																						Line:   108,
																					},
																				},
																			},
																			Callee: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 66,
																							Line:   108,
																						},
																						File:   "universe.flux",
																						Source: "uint",
																						Start: ast.Position{
																							Column: 62,
																							Line:   108,
																						},
																					},
																				},
																				Name: "uint",
																			},
																		},
																	}},
																	With: nil,
																}},
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 76,
																			Line:   108,
																		},
																		File:   "universe.flux",
																		Source: "float(v: uint(v: unit))",
																		Start: ast.Position{
																			Column: 53,
																			Line:   108,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 58,
																				Line:   108,
																			},
																			File:   "universe.flux",
																			Source: "float",
																			Start: ast.Position{
																				Column: 53,
																				Line:   108,
																			},
																		},
																	},
																	Name: "float",
																},
															},
														},
													},
													Operator: 2,
													Right: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 123,
																		Line:   108,
																	},
																	File:   "universe.flux",
																	Source: "v: int(v: r._stop) - int(v: r._start)",
																	Start: ast.Position{
																		Column: 86,
																		Line:   108,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 123,
																			Line:   108,
																		},
																		File:   "universe.flux",
																		Source: "v: int(v: r._stop) - int(v: r._start)",
																		Start: ast.Position{
																			Column: 86,
																			Line:   108,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 87,
																				Line:   108,
																			},
																			File:   "universe.flux",
																			Source: "v",
																			Start: ast.Position{
																				Column: 86,
																				Line:   108,
																			},
																		},
																	},
																	Name: "v",
																},
																Value: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 123,
																				Line:   108,
																			},
																			File:   "universe.flux",
																			Source: "int(v: r._stop) - int(v: r._start)",
																			Start: ast.Position{
																				Column: 89,
																				Line:   108,
																			},
																		},
																	},
																	Left: &ast.CallExpression{
																		Arguments: []ast.Expression{&ast.ObjectExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 103,
																						Line:   108,
																					},
																					File:   "universe.flux",
																					Source: "v: r._stop",
																					Start: ast.Position{
																						Column: 93,
																						Line:   108,
																					},
																				},
																			},
																			Properties: []*ast.Property{&ast.Property{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 103,
																							Line:   108,
																						},
																						File:   "universe.flux",
																						Source: "v: r._stop",
																						Start: ast.Position{
																							Column: 93,
																							Line:   108,
																						},
																					},
																				},
																				Key: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 94,
																								Line:   108,
																							},
																							File:   "universe.flux",
																							Source: "v",
																							Start: ast.Position{
																								Column: 93,
																								Line:   108,
																							},
																						},
																					},
																					Name: "v",
																				},
																				Value: &ast.MemberExpression{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 103,
																								Line:   108,
																							},
																							File:   "universe.flux",
																							Source: "r._stop",
																							Start: ast.Position{
																								Column: 96,
																								Line:   108,
																							},
																						},
																					},
																					Object: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 97,
																									Line:   108,
																								},
																								File:   "universe.flux",
																								Source: "r",
																								Start: ast.Position{
																									Column: 96,
																									Line:   108,
																								},
																							},
																						},
																						Name: "r",
																					},
																					Property: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 103,
																									Line:   108,
																								},
																								File:   "universe.flux",
																								Source: "_stop",
																								Start: ast.Position{
																									Column: 98,
																									Line:   108,
																								},
																							},
																						},
																						Name: "_stop",
																					},
																				},
																			}},
																			With: nil,
																		}},
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 104,
																					Line:   108,
																				},
																				File:   "universe.flux",
																				Source: "int(v: r._stop)",
																				Start: ast.Position{
																					Column: 89,
																					Line:   108,
																				},
																			},
																		},
																		Callee: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 92,
																						Line:   108,
																					},
																					File:   "universe.flux",
																					Source: "int",
																					Start: ast.Position{
																						Column: 89,
																						Line:   108,
																					},
																				},
																			},
																			Name: "int",
																		},
																	},
																	Operator: 6,
																	Right: &ast.CallExpression{
																		Arguments: []ast.Expression{&ast.ObjectExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 122,
																						Line:   108,
																					},
																					File:   "universe.flux",
																					Source: "v: r._start",
																					Start: ast.Position{
																						Column: 111,
																						Line:   108,
																					},
																				},
																			},
																			Properties: []*ast.Property{&ast.Property{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 122,
																							Line:   108,
																						},
																						File:   "universe.flux",
																						Source: "v: r._start",
																						Start: ast.Position{
																							Column: 111,
																							Line:   108,
																						},
																					},
																				},
																				Key: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 112,
																								Line:   108,
																							},
																							File:   "universe.flux",
																							Source: "v",
																							Start: ast.Position{
																								Column: 111,
																								Line:   108,
																							},
																						},
																					},
																					Name: "v",
																				},
																				Value: &ast.MemberExpression{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 122,
																								Line:   108,
																							},
																							File:   "universe.flux",
																							Source: "r._start",
																							Start: ast.Position{
																								Column: 114,
																								Line:   108,
																							},
																						},
																					},
																					Object: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 115,
																									Line:   108,
																								},
																								File:   "universe.flux",
																								Source: "r",
																								Start: ast.Position{
																									Column: 114,
																									Line:   108,
																								},
																							},
																						},
																						Name: "r",
																					},
																					Property: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 122,
																									Line:   108,
																								},
																								File:   "universe.flux",
																								Source: "_start",
																								Start: ast.Position{
																									Column: 116,
																									Line:   108,
																								},
																							},
																						},
																						Name: "_start",
																					},
																				},
																			}},
																			With: nil,
																		}},
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 123,
																					Line:   108,
																				},
																				File:   "universe.flux",
																				Source: "int(v: r._start)",
																				Start: ast.Position{
																					Column: 107,
																					Line:   108,
																				},
																			},
																		},
																		Callee: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 110,
																						Line:   108,
																					},
																					File:   "universe.flux",
																					Source: "int",
																					Start: ast.Position{
																						Column: 107,
																						Line:   108,
																					},
																				},
																			},
																			Name: "int",
																		},
																	},
																},
															}},
															With: nil,
														}},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 124,
																	Line:   108,
																},
																File:   "universe.flux",
																Source: "float(v: int(v: r._stop) - int(v: r._start))",
																Start: ast.Position{
																	Column: 80,
																	Line:   108,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 85,
																		Line:   108,
																	},
																	File:   "universe.flux",
																	Source: "float",
																	Start: ast.Position{
																		Column: 80,
																		Line:   108,
																	},
																},
															},
															Name: "float",
														},
													},
												},
											}},
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   108,
														},
														File:   "universe.flux",
														Source: "r",
														Start: ast.Position{
															Column: 26,
															Line:   108,
														},
													},
												},
												Name: "r",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   108,
												},
												File:   "universe.flux",
												Source: "r",
												Start: ast.Position{
													Column: 17,
													Line:   108,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   108,
													},
													File:   "universe.flux",
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   108,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 128,
									Line:   108,
								},
								File:   "universe.flux",
								Source: "map(fn: (r) => ({ r with _value: (r._value * float(v: uint(v: unit))) / float(v: int(v: r._stop) - int(v: r._start)) }))",
								Start: ast.Position{
									Column: 8,
									Line:   108,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   108,
									},
									File:   "universe.flux",
									Source: "map",
									Start: ast.Position{
										Column: 8,
										Line:   108,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   106,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 20,
								Line:   106,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   106,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 20,
									Line:   106,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   106,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 27,
								Line:   106,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   106,
							},
							File:   "universe.flux",
							Source: "unit",
							Start: ast.Position{
								Column: 31,
								Line:   106,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   106,
								},
								File:   "universe.flux",
								Source: "unit",
								Start: ast.Position{
									Column: 31,
									Line:   106,
								},
							},
						},
						Name: "unit",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 70,
						Line:   116,
					},
					File:   "universe.flux",
					Source: "cov = (x,y,on,pearsonr=false) =>\n    join(\n        tables:{x:x, y:y},\n        on:on,\n    )\n    |> covariance(pearsonr:pearsonr, columns:[\"_value_x\",\"_value_y\"])",
					Start: ast.Position{
						Column: 1,
						Line:   111,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   111,
						},
						File:   "universe.flux",
						Source: "cov",
						Start: ast.Position{
							Column: 1,
							Line:   111,
						},
					},
				},
				Name: "cov",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 70,
							Line:   116,
						},
						File:   "universe.flux",
						Source: "(x,y,on,pearsonr=false) =>\n    join(\n        tables:{x:x, y:y},\n        on:on,\n    )\n    |> covariance(pearsonr:pearsonr, columns:[\"_value_x\",\"_value_y\"])",
						Start: ast.Position{
							Column: 7,
							Line:   111,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   114,
									},
									File:   "universe.flux",
									Source: "tables:{x:x, y:y},\n        on:on",
									Start: ast.Position{
										Column: 9,
										Line:   113,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   113,
										},
										File:   "universe.flux",
										Source: "tables:{x:x, y:y}",
										Start: ast.Position{
											Column: 9,
											Line:   113,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   113,
											},
											File:   "universe.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 9,
												Line:   113,
											},
										},
									},
									Name: "tables",
								},
								Value: &ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   113,
											},
											File:   "universe.flux",
											Source: "{x:x, y:y}",
											Start: ast.Position{
												Column: 16,
												Line:   113,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   113,
												},
												File:   "universe.flux",
												Source: "x:x",
												Start: ast.Position{
													Column: 17,
													Line:   113,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   113,
													},
													File:   "universe.flux",
													Source: "x",
													Start: ast.Position{
														Column: 17,
														Line:   113,
													},
												},
											},
											Name: "x",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 20,
														Line:   113,
													},
													File:   "universe.flux",
													Source: "x",
													Start: ast.Position{
														Column: 19,
														Line:   113,
													},
												},
											},
											Name: "x",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   113,
												},
												File:   "universe.flux",
												Source: "y:y",
												Start: ast.Position{
													Column: 22,
													Line:   113,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   113,
													},
													File:   "universe.flux",
													Source: "y",
													Start: ast.Position{
														Column: 22,
														Line:   113,
													},
												},
											},
											Name: "y",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   113,
													},
													File:   "universe.flux",
													Source: "y",
													Start: ast.Position{
														Column: 24,
														Line:   113,
													},
												},
											},
											Name: "y",
										},
									}},
									With: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   114,
										},
										File:   "universe.flux",
										Source: "on:on",
										Start: ast.Position{
											Column: 9,
											Line:   114,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   114,
											},
											File:   "universe.flux",
											Source: "on",
											Start: ast.Position{
												Column: 9,
												Line:   114,
											},
										},
									},
									Name: "on",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   114,
											},
											File:   "universe.flux",
											Source: "on",
											Start: ast.Position{
												Column: 12,
												Line:   114,
											},
										},
									},
									Name: "on",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   115,
								},
								File:   "universe.flux",
								Source: "join(\n        tables:{x:x, y:y},\n        on:on,\n    )",
								Start: ast.Position{
									Column: 5,
									Line:   112,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   112,
									},
									File:   "universe.flux",
									Source: "join",
									Start: ast.Position{
										Column: 5,
										Line:   112,
									},
								},
							},
							Name: "join",
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 70,
								Line:   116,
							},
							File:   "universe.flux",
							Source: "join(\n        tables:{x:x, y:y},\n        on:on,\n    )\n    |> covariance(pearsonr:pearsonr, columns:[\"_value_x\",\"_value_y\"])",
							Start: ast.Position{
								Column: 5,
								Line:   112,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 69,
										Line:   116,
									},
									File:   "universe.flux",
									Source: "pearsonr:pearsonr, columns:[\"_value_x\",\"_value_y\"]",
									Start: ast.Position{
										Column: 19,
										Line:   116,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   116,
										},
										File:   "universe.flux",
										Source: "pearsonr:pearsonr",
										Start: ast.Position{
											Column: 19,
											Line:   116,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   116,
											},
											File:   "universe.flux",
											Source: "pearsonr",
											Start: ast.Position{
												Column: 19,
												Line:   116,
											},
										},
									},
									Name: "pearsonr",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   116,
											},
											File:   "universe.flux",
											Source: "pearsonr",
											Start: ast.Position{
												Column: 28,
												Line:   116,
											},
										},
									},
									Name: "pearsonr",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   116,
										},
										File:   "universe.flux",
										Source: "columns:[\"_value_x\",\"_value_y\"]",
										Start: ast.Position{
											Column: 38,
											Line:   116,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   116,
											},
											File:   "universe.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 38,
												Line:   116,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   116,
											},
											File:   "universe.flux",
											Source: "[\"_value_x\",\"_value_y\"]",
											Start: ast.Position{
												Column: 46,
												Line:   116,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   116,
												},
												File:   "universe.flux",
												Source: "\"_value_x\"",
												Start: ast.Position{
													Column: 47,
													Line:   116,
												},
											},
										},
										Value: "_value_x",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 68,
													Line:   116,
												},
												File:   "universe.flux",
												Source: "\"_value_y\"",
												Start: ast.Position{
													Column: 58,
													Line:   116,
												},
											},
										},
										Value: "_value_y",
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   116,
								},
								File:   "universe.flux",
								Source: "covariance(pearsonr:pearsonr, columns:[\"_value_x\",\"_value_y\"])",
								Start: ast.Position{
									Column: 8,
									Line:   116,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   116,
									},
									File:   "universe.flux",
									Source: "covariance",
									Start: ast.Position{
										Column: 8,
										Line:   116,
									},
								},
							},
							Name: "covariance",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 9,
								Line:   111,
							},
							File:   "universe.flux",
							Source: "x",
							Start: ast.Position{
								Column: 8,
								Line:   111,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   111,
								},
								File:   "universe.flux",
								Source: "x",
								Start: ast.Position{
									Column: 8,
									Line:   111,
								},
							},
						},
						Name: "x",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   111,
							},
							File:   "universe.flux",
							Source: "y",
							Start: ast.Position{
								Column: 10,
								Line:   111,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   111,
								},
								File:   "universe.flux",
								Source: "y",
								Start: ast.Position{
									Column: 10,
									Line:   111,
								},
							},
						},
						Name: "y",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   111,
							},
							File:   "universe.flux",
							Source: "on",
							Start: ast.Position{
								Column: 12,
								Line:   111,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   111,
								},
								File:   "universe.flux",
								Source: "on",
								Start: ast.Position{
									Column: 12,
									Line:   111,
								},
							},
						},
						Name: "on",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   111,
							},
							File:   "universe.flux",
							Source: "pearsonr=false",
							Start: ast.Position{
								Column: 15,
								Line:   111,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   111,
								},
								File:   "universe.flux",
								Source: "pearsonr",
								Start: ast.Position{
									Column: 15,
									Line:   111,
								},
							},
						},
						Name: "pearsonr",
					},
					Value: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   111,
								},
								File:   "universe.flux",
								Source: "false",
								Start: ast.Position{
									Column: 24,
									Line:   111,
								},
							},
						},
						Name: "false",
					},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 59,
						Line:   118,
					},
					File:   "universe.flux",
					Source: "pearsonr = (x,y,on) => cov(x:x, y:y, on:on, pearsonr:true)",
					Start: ast.Position{
						Column: 1,
						Line:   118,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   118,
						},
						File:   "universe.flux",
						Source: "pearsonr",
						Start: ast.Position{
							Column: 1,
							Line:   118,
						},
					},
				},
				Name: "pearsonr",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 59,
							Line:   118,
						},
						File:   "universe.flux",
						Source: "(x,y,on) => cov(x:x, y:y, on:on, pearsonr:true)",
						Start: ast.Position{
							Column: 12,
							Line:   118,
						},
					},
				},
				Body: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   118,
								},
								File:   "universe.flux",
								Source: "x:x, y:y, on:on, pearsonr:true",
								Start: ast.Position{
									Column: 28,
									Line:   118,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   118,
									},
									File:   "universe.flux",
									Source: "x:x",
									Start: ast.Position{
										Column: 28,
										Line:   118,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   118,
										},
										File:   "universe.flux",
										Source: "x",
										Start: ast.Position{
											Column: 28,
											Line:   118,
										},
									},
								},
								Name: "x",
							},
							Value: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   118,
										},
										File:   "universe.flux",
										Source: "x",
										Start: ast.Position{
											Column: 30,
											Line:   118,
										},
									},
								},
								Name: "x",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   118,
									},
									File:   "universe.flux",
									Source: "y:y",
									Start: ast.Position{
										Column: 33,
										Line:   118,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   118,
										},
										File:   "universe.flux",
										Source: "y",
										Start: ast.Position{
											Column: 33,
											Line:   118,
										},
									},
								},
								Name: "y",
							},
							Value: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   118,
										},
										File:   "universe.flux",
										Source: "y",
										Start: ast.Position{
											Column: 35,
											Line:   118,
										},
									},
								},
								Name: "y",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   118,
									},
									File:   "universe.flux",
									Source: "on:on",
									Start: ast.Position{
										Column: 38,
										Line:   118,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   118,
										},
										File:   "universe.flux",
										Source: "on",
										Start: ast.Position{
											Column: 38,
											Line:   118,
										},
									},
								},
								Name: "on",
							},
							Value: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   118,
										},
										File:   "universe.flux",
										Source: "on",
										Start: ast.Position{
											Column: 41,
											Line:   118,
										},
									},
								},
								Name: "on",
							},
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   118,
									},
									File:   "universe.flux",
									Source: "pearsonr:true",
									Start: ast.Position{
										Column: 45,
										Line:   118,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   118,
										},
										File:   "universe.flux",
										Source: "pearsonr",
										Start: ast.Position{
											Column: 45,
											Line:   118,
										},
									},
								},
								Name: "pearsonr",
							},
							Value: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 58,
											Line:   118,
										},
										File:   "universe.flux",
										Source: "true",
										Start: ast.Position{
											Column: 54,
											Line:   118,
										},
									},
								},
								Name: "true",
							},
						}},
						With: nil,
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 59,
								Line:   118,
							},
							File:   "universe.flux",
							Source: "cov(x:x, y:y, on:on, pearsonr:true)",
							Start: ast.Position{
								Column: 24,
								Line:   118,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   118,
								},
								File:   "universe.flux",
								Source: "cov",
								Start: ast.Position{
									Column: 24,
									Line:   118,
								},
							},
						},
						Name: "cov",
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   118,
							},
							File:   "universe.flux",
							Source: "x",
							Start: ast.Position{
								Column: 13,
								Line:   118,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   118,
								},
								File:   "universe.flux",
								Source: "x",
								Start: ast.Position{
									Column: 13,
									Line:   118,
								},
							},
						},
						Name: "x",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   118,
							},
							File:   "universe.flux",
							Source: "y",
							Start: ast.Position{
								Column: 15,
								Line:   118,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   118,
								},
								File:   "universe.flux",
								Source: "y",
								Start: ast.Position{
									Column: 15,
									Line:   118,
								},
							},
						},
						Name: "y",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   118,
							},
							File:   "universe.flux",
							Source: "on",
							Start: ast.Position{
								Column: 17,
								Line:   118,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   118,
								},
								File:   "universe.flux",
								Source: "on",
								Start: ast.Position{
									Column: 17,
									Line:   118,
								},
							},
						},
						Name: "on",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 49,
						Line:   128,
					},
					File:   "universe.flux",
					Source: "aggregateWindow = (every, fn, column=\"_value\", timeSrc=\"_stop\",timeDst=\"_time\", createEmpty=true, tables=<-) =>\n    tables\n        |> window(every:every, createEmpty: createEmpty)\n        |> fn(column:column)\n        |> duplicate(column:timeSrc,as:timeDst)\n        |> window(every:inf, timeColumn:timeDst)",
					Start: ast.Position{
						Column: 1,
						Line:   123,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   123,
						},
						File:   "universe.flux",
						Source: "aggregateWindow",
						Start: ast.Position{
							Column: 1,
							Line:   123,
						},
					},
				},
				Name: "aggregateWindow",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 49,
							Line:   128,
						},
						File:   "universe.flux",
						Source: "(every, fn, column=\"_value\", timeSrc=\"_stop\",timeDst=\"_time\", createEmpty=true, tables=<-) =>\n    tables\n        |> window(every:every, createEmpty: createEmpty)\n        |> fn(column:column)\n        |> duplicate(column:timeSrc,as:timeDst)\n        |> window(every:inf, timeColumn:timeDst)",
						Start: ast.Position{
							Column: 19,
							Line:   123,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   124,
											},
											File:   "universe.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 5,
												Line:   124,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   125,
										},
										File:   "universe.flux",
										Source: "tables\n        |> window(every:every, createEmpty: createEmpty)",
										Start: ast.Position{
											Column: 5,
											Line:   124,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   125,
												},
												File:   "universe.flux",
												Source: "every:every, createEmpty: createEmpty",
												Start: ast.Position{
													Column: 19,
													Line:   125,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   125,
													},
													File:   "universe.flux",
													Source: "every:every",
													Start: ast.Position{
														Column: 19,
														Line:   125,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   125,
														},
														File:   "universe.flux",
														Source: "every",
														Start: ast.Position{
															Column: 19,
															Line:   125,
														},
													},
												},
												Name: "every",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   125,
														},
														File:   "universe.flux",
														Source: "every",
														Start: ast.Position{
															Column: 25,
															Line:   125,
														},
													},
												},
												Name: "every",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 56,
														Line:   125,
													},
													File:   "universe.flux",
													Source: "createEmpty: createEmpty",
													Start: ast.Position{
														Column: 32,
														Line:   125,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   125,
														},
														File:   "universe.flux",
														Source: "createEmpty",
														Start: ast.Position{
															Column: 32,
															Line:   125,
														},
													},
												},
												Name: "createEmpty",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 56,
															Line:   125,
														},
														File:   "universe.flux",
														Source: "createEmpty",
														Start: ast.Position{
															Column: 45,
															Line:   125,
														},
													},
												},
												Name: "createEmpty",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   125,
											},
											File:   "universe.flux",
											Source: "window(every:every, createEmpty: createEmpty)",
											Start: ast.Position{
												Column: 12,
												Line:   125,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   125,
												},
												File:   "universe.flux",
												Source: "window",
												Start: ast.Position{
													Column: 12,
													Line:   125,
												},
											},
										},
										Name: "window",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   126,
									},
									File:   "universe.flux",
									Source: "tables\n        |> window(every:every, createEmpty: createEmpty)\n        |> fn(column:column)",
									Start: ast.Position{
										Column: 5,
										Line:   124,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   126,
											},
											File:   "universe.flux",
											Source: "column:column",
											Start: ast.Position{
												Column: 15,
												Line:   126,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   126,
												},
												File:   "universe.flux",
												Source: "column:column",
												Start: ast.Position{
													Column: 15,
													Line:   126,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   126,
													},
													File:   "universe.flux",
													Source: "column",
													Start: ast.Position{
														Column: 15,
														Line:   126,
													},
												},
											},
											Name: "column",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   126,
													},
													File:   "universe.flux",
													Source: "column",
													Start: ast.Position{
														Column: 22,
														Line:   126,
													},
												},
											},
											Name: "column",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   126,
										},
										File:   "universe.flux",
										Source: "fn(column:column)",
										Start: ast.Position{
											Column: 12,
											Line:   126,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   126,
											},
											File:   "universe.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 12,
												Line:   126,
											},
										},
									},
									Name: "fn",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   127,
								},
								File:   "universe.flux",
								Source: "tables\n        |> window(every:every, createEmpty: createEmpty)\n        |> fn(column:column)\n        |> duplicate(column:timeSrc,as:timeDst)",
								Start: ast.Position{
									Column: 5,
									Line:   124,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   127,
										},
										File:   "universe.flux",
										Source: "column:timeSrc,as:timeDst",
										Start: ast.Position{
											Column: 22,
											Line:   127,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   127,
											},
											File:   "universe.flux",
											Source: "column:timeSrc",
											Start: ast.Position{
												Column: 22,
												Line:   127,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   127,
												},
												File:   "universe.flux",
												Source: "column",
												Start: ast.Position{
													Column: 22,
													Line:   127,
												},
											},
										},
										Name: "column",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   127,
												},
												File:   "universe.flux",
												Source: "timeSrc",
												Start: ast.Position{
													Column: 29,
													Line:   127,
												},
											},
										},
										Name: "timeSrc",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   127,
											},
											File:   "universe.flux",
											Source: "as:timeDst",
											Start: ast.Position{
												Column: 37,
												Line:   127,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   127,
												},
												File:   "universe.flux",
												Source: "as",
												Start: ast.Position{
													Column: 37,
													Line:   127,
												},
											},
										},
										Name: "as",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   127,
												},
												File:   "universe.flux",
												Source: "timeDst",
												Start: ast.Position{
													Column: 40,
													Line:   127,
												},
											},
										},
										Name: "timeDst",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   127,
									},
									File:   "universe.flux",
									Source: "duplicate(column:timeSrc,as:timeDst)",
									Start: ast.Position{
										Column: 12,
										Line:   127,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   127,
										},
										File:   "universe.flux",
										Source: "duplicate",
										Start: ast.Position{
											Column: 12,
											Line:   127,
										},
									},
								},
								Name: "duplicate",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   128,
							},
							File:   "universe.flux",
							Source: "tables\n        |> window(every:every, createEmpty: createEmpty)\n        |> fn(column:column)\n        |> duplicate(column:timeSrc,as:timeDst)\n        |> window(every:inf, timeColumn:timeDst)",
							Start: ast.Position{
								Column: 5,
								Line:   124,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   128,
									},
									File:   "universe.flux",
									Source: "every:inf, timeColumn:timeDst",
									Start: ast.Position{
										Column: 19,
										Line:   128,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   128,
										},
										File:   "universe.flux",
										Source: "every:inf",
										Start: ast.Position{
											Column: 19,
											Line:   128,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   128,
											},
											File:   "universe.flux",
											Source: "every",
											Start: ast.Position{
												Column: 19,
												Line:   128,
											},
										},
									},
									Name: "every",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   128,
											},
											File:   "universe.flux",
											Source: "inf",
											Start: ast.Position{
												Column: 25,
												Line:   128,
											},
										},
									},
									Name: "inf",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   128,
										},
										File:   "universe.flux",
										Source: "timeColumn:timeDst",
										Start: ast.Position{
											Column: 30,
											Line:   128,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   128,
											},
											File:   "universe.flux",
											Source: "timeColumn",
											Start: ast.Position{
												Column: 30,
												Line:   128,
											},
										},
									},
									Name: "timeColumn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   128,
											},
											File:   "universe.flux",
											Source: "timeDst",
											Start: ast.Position{
												Column: 41,
												Line:   128,
											},
										},
									},
									Name: "timeDst",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   128,
								},
								File:   "universe.flux",
								Source: "window(every:inf, timeColumn:timeDst)",
								Start: ast.Position{
									Column: 12,
									Line:   128,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   128,
									},
									File:   "universe.flux",
									Source: "window",
									Start: ast.Position{
										Column: 12,
										Line:   128,
									},
								},
							},
							Name: "window",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   123,
							},
							File:   "universe.flux",
							Source: "every",
							Start: ast.Position{
								Column: 20,
								Line:   123,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   123,
								},
								File:   "universe.flux",
								Source: "every",
								Start: ast.Position{
									Column: 20,
									Line:   123,
								},
							},
						},
						Name: "every",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   123,
							},
							File:   "universe.flux",
							Source: "fn",
							Start: ast.Position{
								Column: 27,
								Line:   123,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   123,
								},
								File:   "universe.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 27,
									Line:   123,
								},
							},
						},
						Name: "fn",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 46,
								Line:   123,
							},
							File:   "universe.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 31,
								Line:   123,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   123,
								},
								File:   "universe.flux",
								Source: "column",
								Start: ast.Position{
									Column: 31,
									Line:   123,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   123,
								},
								File:   "universe.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 38,
									Line:   123,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 63,
								Line:   123,
							},
							File:   "universe.flux",
							Source: "timeSrc=\"_stop\"",
							Start: ast.Position{
								Column: 48,
								Line:   123,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   123,
								},
								File:   "universe.flux",
								Source: "timeSrc",
								Start: ast.Position{
									Column: 48,
									Line:   123,
								},
							},
						},
						Name: "timeSrc",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   123,
								},
								File:   "universe.flux",
								Source: "\"_stop\"",
								Start: ast.Position{
									Column: 56,
									Line:   123,
								},
							},
						},
						Value: "_stop",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 79,
								Line:   123,
							},
							File:   "universe.flux",
							Source: "timeDst=\"_time\"",
							Start: ast.Position{
								Column: 64,
								Line:   123,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   123,
								},
								File:   "universe.flux",
								Source: "timeDst",
								Start: ast.Position{
									Column: 64,
									Line:   123,
								},
							},
						},
						Name: "timeDst",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 79,
									Line:   123,
								},
								File:   "universe.flux",
								Source: "\"_time\"",
								Start: ast.Position{
									Column: 72,
									Line:   123,
								},
							},
						},
						Value: "_time",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 97,
								Line:   123,
							},
							File:   "universe.flux",
							Source: "createEmpty=true",
							Start: ast.Position{
								Column: 81,
								Line:   123,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 92,
									Line:   123,
								},
								File:   "universe.flux",
								Source: "createEmpty",
								Start: ast.Position{
									Column: 81,
									Line:   123,
								},
							},
						},
						Name: "createEmpty",
					},
					Value: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 97,
									Line:   123,
								},
								File:   "universe.flux",
								Source: "true",
								Start: ast.Position{
									Column: 93,
									Line:   123,
								},
							},
						},
						Name: "true",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 108,
								Line:   123,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 99,
								Line:   123,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 105,
									Line:   123,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 99,
									Line:   123,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 108,
								Line:   123,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 106,
								Line:   123,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 43,
						Line:   137,
					},
					File:   "universe.flux",
					Source: "increase = (tables=<-, columns=[\"_value\"]) =>\n    tables\n        |> difference(nonNegative: true, columns:columns)\n        |> cumulativeSum(columns: columns)",
					Start: ast.Position{
						Column: 1,
						Line:   134,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   134,
						},
						File:   "universe.flux",
						Source: "increase",
						Start: ast.Position{
							Column: 1,
							Line:   134,
						},
					},
				},
				Name: "increase",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 43,
							Line:   137,
						},
						File:   "universe.flux",
						Source: "(tables=<-, columns=[\"_value\"]) =>\n    tables\n        |> difference(nonNegative: true, columns:columns)\n        |> cumulativeSum(columns: columns)",
						Start: ast.Position{
							Column: 12,
							Line:   134,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   135,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 5,
										Line:   135,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   136,
								},
								File:   "universe.flux",
								Source: "tables\n        |> difference(nonNegative: true, columns:columns)",
								Start: ast.Position{
									Column: 5,
									Line:   135,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   136,
										},
										File:   "universe.flux",
										Source: "nonNegative: true, columns:columns",
										Start: ast.Position{
											Column: 23,
											Line:   136,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   136,
											},
											File:   "universe.flux",
											Source: "nonNegative: true",
											Start: ast.Position{
												Column: 23,
												Line:   136,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   136,
												},
												File:   "universe.flux",
												Source: "nonNegative",
												Start: ast.Position{
													Column: 23,
													Line:   136,
												},
											},
										},
										Name: "nonNegative",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   136,
												},
												File:   "universe.flux",
												Source: "true",
												Start: ast.Position{
													Column: 36,
													Line:   136,
												},
											},
										},
										Name: "true",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   136,
											},
											File:   "universe.flux",
											Source: "columns:columns",
											Start: ast.Position{
												Column: 42,
												Line:   136,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   136,
												},
												File:   "universe.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 42,
													Line:   136,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   136,
												},
												File:   "universe.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 50,
													Line:   136,
												},
											},
										},
										Name: "columns",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 58,
										Line:   136,
									},
									File:   "universe.flux",
									Source: "difference(nonNegative: true, columns:columns)",
									Start: ast.Position{
										Column: 12,
										Line:   136,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   136,
										},
										File:   "universe.flux",
										Source: "difference",
										Start: ast.Position{
											Column: 12,
											Line:   136,
										},
									},
								},
								Name: "difference",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   137,
							},
							File:   "universe.flux",
							Source: "tables\n        |> difference(nonNegative: true, columns:columns)\n        |> cumulativeSum(columns: columns)",
							Start: ast.Position{
								Column: 5,
								Line:   135,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   137,
									},
									File:   "universe.flux",
									Source: "columns: columns",
									Start: ast.Position{
										Column: 26,
										Line:   137,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   137,
										},
										File:   "universe.flux",
										Source: "columns: columns",
										Start: ast.Position{
											Column: 26,
											Line:   137,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   137,
											},
											File:   "universe.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 26,
												Line:   137,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   137,
											},
											File:   "universe.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 35,
												Line:   137,
											},
										},
									},
									Name: "columns",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   137,
								},
								File:   "universe.flux",
								Source: "cumulativeSum(columns: columns)",
								Start: ast.Position{
									Column: 12,
									Line:   137,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   137,
									},
									File:   "universe.flux",
									Source: "cumulativeSum",
									Start: ast.Position{
										Column: 12,
										Line:   137,
									},
								},
							},
							Name: "cumulativeSum",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   134,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 13,
								Line:   134,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   134,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 13,
									Line:   134,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   134,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 20,
								Line:   134,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   134,
							},
							File:   "universe.flux",
							Source: "columns=[\"_value\"]",
							Start: ast.Position{
								Column: 24,
								Line:   134,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   134,
								},
								File:   "universe.flux",
								Source: "columns",
								Start: ast.Position{
									Column: 24,
									Line:   134,
								},
							},
						},
						Name: "columns",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   134,
								},
								File:   "universe.flux",
								Source: "[\"_value\"]",
								Start: ast.Position{
									Column: 32,
									Line:   134,
								},
							},
						},
						Elements: []ast.Expression{&ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   134,
									},
									File:   "universe.flux",
									Source: "\"_value\"",
									Start: ast.Position{
										Column: 33,
										Line:   134,
									},
								},
							},
							Value: "_value",
						}},
					},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 85,
						Line:   142,
					},
					File:   "universe.flux",
					Source: "median = (method=\"estimate_tdigest\", compression=0.0, column=\"_value\", tables=<-) =>\n    tables\n        |> quantile(q:0.5, method: method, compression: compression, column: column)",
					Start: ast.Position{
						Column: 1,
						Line:   140,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   140,
						},
						File:   "universe.flux",
						Source: "median",
						Start: ast.Position{
							Column: 1,
							Line:   140,
						},
					},
				},
				Name: "median",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 85,
							Line:   142,
						},
						File:   "universe.flux",
						Source: "(method=\"estimate_tdigest\", compression=0.0, column=\"_value\", tables=<-) =>\n    tables\n        |> quantile(q:0.5, method: method, compression: compression, column: column)",
						Start: ast.Position{
							Column: 10,
							Line:   140,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   141,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   141,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 85,
								Line:   142,
							},
							File:   "universe.flux",
							Source: "tables\n        |> quantile(q:0.5, method: method, compression: compression, column: column)",
							Start: ast.Position{
								Column: 5,
								Line:   141,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 84,
										Line:   142,
									},
									File:   "universe.flux",
									Source: "q:0.5, method: method, compression: compression, column: column",
									Start: ast.Position{
										Column: 21,
										Line:   142,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   142,
										},
										File:   "universe.flux",
										Source: "q:0.5",
										Start: ast.Position{
											Column: 21,
											Line:   142,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   142,
											},
											File:   "universe.flux",
											Source: "q",
											Start: ast.Position{
												Column: 21,
												Line:   142,
											},
										},
									},
									Name: "q",
								},
								Value: &ast.FloatLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   142,
											},
											File:   "universe.flux",
											Source: "0.5",
											Start: ast.Position{
												Column: 23,
												Line:   142,
											},
										},
									},
									Value: 0.5,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   142,
										},
										File:   "universe.flux",
										Source: "method: method",
										Start: ast.Position{
											Column: 28,
											Line:   142,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   142,
											},
											File:   "universe.flux",
											Source: "method",
											Start: ast.Position{
												Column: 28,
												Line:   142,
											},
										},
									},
									Name: "method",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   142,
											},
											File:   "universe.flux",
											Source: "method",
											Start: ast.Position{
												Column: 36,
												Line:   142,
											},
										},
									},
									Name: "method",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   142,
										},
										File:   "universe.flux",
										Source: "compression: compression",
										Start: ast.Position{
											Column: 44,
											Line:   142,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   142,
											},
											File:   "universe.flux",
											Source: "compression",
											Start: ast.Position{
												Column: 44,
												Line:   142,
											},
										},
									},
									Name: "compression",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 68,
												Line:   142,
											},
											File:   "universe.flux",
											Source: "compression",
											Start: ast.Position{
												Column: 57,
												Line:   142,
											},
										},
									},
									Name: "compression",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 84,
											Line:   142,
										},
										File:   "universe.flux",
										Source: "column: column",
										Start: ast.Position{
											Column: 70,
											Line:   142,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 76,
												Line:   142,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 70,
												Line:   142,
											},
										},
									},
									Name: "column",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 84,
												Line:   142,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 78,
												Line:   142,
											},
										},
									},
									Name: "column",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 85,
									Line:   142,
								},
								File:   "universe.flux",
								Source: "quantile(q:0.5, method: method, compression: compression, column: column)",
								Start: ast.Position{
									Column: 12,
									Line:   142,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   142,
									},
									File:   "universe.flux",
									Source: "quantile",
									Start: ast.Position{
										Column: 12,
										Line:   142,
									},
								},
							},
							Name: "quantile",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   140,
							},
							File:   "universe.flux",
							Source: "method=\"estimate_tdigest\"",
							Start: ast.Position{
								Column: 11,
								Line:   140,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   140,
								},
								File:   "universe.flux",
								Source: "method",
								Start: ast.Position{
									Column: 11,
									Line:   140,
								},
							},
						},
						Name: "method",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   140,
								},
								File:   "universe.flux",
								Source: "\"estimate_tdigest\"",
								Start: ast.Position{
									Column: 18,
									Line:   140,
								},
							},
						},
						Value: "estimate_tdigest",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 53,
								Line:   140,
							},
							File:   "universe.flux",
							Source: "compression=0.0",
							Start: ast.Position{
								Column: 38,
								Line:   140,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   140,
								},
								File:   "universe.flux",
								Source: "compression",
								Start: ast.Position{
									Column: 38,
									Line:   140,
								},
							},
						},
						Name: "compression",
					},
					Value: &ast.FloatLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   140,
								},
								File:   "universe.flux",
								Source: "0.0",
								Start: ast.Position{
									Column: 50,
									Line:   140,
								},
							},
						},
						Value: 0.0,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 70,
								Line:   140,
							},
							File:   "universe.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 55,
								Line:   140,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   140,
								},
								File:   "universe.flux",
								Source: "column",
								Start: ast.Position{
									Column: 55,
									Line:   140,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   140,
								},
								File:   "universe.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 62,
									Line:   140,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 81,
								Line:   140,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 72,
								Line:   140,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   140,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 72,
									Line:   140,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 81,
								Line:   140,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 79,
								Line:   140,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 52,
						Line:   155,
					},
					File:   "universe.flux",
					Source: "stateCount = (fn, column=\"stateCount\", tables=<-) =>\n    tables\n        |> stateTracking(countColumn:column, fn:fn)",
					Start: ast.Position{
						Column: 1,
						Line:   153,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   153,
						},
						File:   "universe.flux",
						Source: "stateCount",
						Start: ast.Position{
							Column: 1,
							Line:   153,
						},
					},
				},
				Name: "stateCount",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 52,
							Line:   155,
						},
						File:   "universe.flux",
						Source: "(fn, column=\"stateCount\", tables=<-) =>\n    tables\n        |> stateTracking(countColumn:column, fn:fn)",
						Start: ast.Position{
							Column: 14,
							Line:   153,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   154,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   154,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 52,
								Line:   155,
							},
							File:   "universe.flux",
							Source: "tables\n        |> stateTracking(countColumn:column, fn:fn)",
							Start: ast.Position{
								Column: 5,
								Line:   154,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   155,
									},
									File:   "universe.flux",
									Source: "countColumn:column, fn:fn",
									Start: ast.Position{
										Column: 26,
										Line:   155,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 44,
											Line:   155,
										},
										File:   "universe.flux",
										Source: "countColumn:column",
										Start: ast.Position{
											Column: 26,
											Line:   155,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   155,
											},
											File:   "universe.flux",
											Source: "countColumn",
											Start: ast.Position{
												Column: 26,
												Line:   155,
											},
										},
									},
									Name: "countColumn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   155,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 38,
												Line:   155,
											},
										},
									},
									Name: "column",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   155,
										},
										File:   "universe.flux",
										Source: "fn:fn",
										Start: ast.Position{
											Column: 46,
											Line:   155,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   155,
											},
											File:   "universe.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 46,
												Line:   155,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   155,
											},
											File:   "universe.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 49,
												Line:   155,
											},
										},
									},
									Name: "fn",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   155,
								},
								File:   "universe.flux",
								Source: "stateTracking(countColumn:column, fn:fn)",
								Start: ast.Position{
									Column: 12,
									Line:   155,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   155,
									},
									File:   "universe.flux",
									Source: "stateTracking",
									Start: ast.Position{
										Column: 12,
										Line:   155,
									},
								},
							},
							Name: "stateTracking",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 17,
								Line:   153,
							},
							File:   "universe.flux",
							Source: "fn",
							Start: ast.Position{
								Column: 15,
								Line:   153,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   153,
								},
								File:   "universe.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 15,
									Line:   153,
								},
							},
						},
						Name: "fn",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 38,
								Line:   153,
							},
							File:   "universe.flux",
							Source: "column=\"stateCount\"",
							Start: ast.Position{
								Column: 19,
								Line:   153,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   153,
								},
								File:   "universe.flux",
								Source: "column",
								Start: ast.Position{
									Column: 19,
									Line:   153,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   153,
								},
								File:   "universe.flux",
								Source: "\"stateCount\"",
								Start: ast.Position{
									Column: 26,
									Line:   153,
								},
							},
						},
						Value: "stateCount",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   153,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 40,
								Line:   153,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   153,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 40,
									Line:   153,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   153,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 47,
								Line:   153,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 97,
						Line:   174,
					},
					File:   "universe.flux",
					Source: "stateDuration = (fn, column=\"stateDuration\", timeColumn=\"_time\", unit=1s, tables=<-) =>\n    tables\n        |> stateTracking(durationColumn:column, timeColumn:timeColumn, fn:fn, durationUnit:unit)",
					Start: ast.Position{
						Column: 1,
						Line:   172,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   172,
						},
						File:   "universe.flux",
						Source: "stateDuration",
						Start: ast.Position{
							Column: 1,
							Line:   172,
						},
					},
				},
				Name: "stateDuration",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 97,
							Line:   174,
						},
						File:   "universe.flux",
						Source: "(fn, column=\"stateDuration\", timeColumn=\"_time\", unit=1s, tables=<-) =>\n    tables\n        |> stateTracking(durationColumn:column, timeColumn:timeColumn, fn:fn, durationUnit:unit)",
						Start: ast.Position{
							Column: 17,
							Line:   172,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   173,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   173,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 97,
								Line:   174,
							},
							File:   "universe.flux",
							Source: "tables\n        |> stateTracking(durationColumn:column, timeColumn:timeColumn, fn:fn, durationUnit:unit)",
							Start: ast.Position{
								Column: 5,
								Line:   173,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 96,
										Line:   174,
									},
									File:   "universe.flux",
									Source: "durationColumn:column, timeColumn:timeColumn, fn:fn, durationUnit:unit",
									Start: ast.Position{
										Column: 26,
										Line:   174,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   174,
										},
										File:   "universe.flux",
										Source: "durationColumn:column",
										Start: ast.Position{
											Column: 26,
											Line:   174,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   174,
											},
											File:   "universe.flux",
											Source: "durationColumn",
											Start: ast.Position{
												Column: 26,
												Line:   174,
											},
										},
									},
									Name: "durationColumn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   174,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 41,
												Line:   174,
											},
										},
									},
									Name: "column",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   174,
										},
										File:   "universe.flux",
										Source: "timeColumn:timeColumn",
										Start: ast.Position{
											Column: 49,
											Line:   174,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   174,
											},
											File:   "universe.flux",
											Source: "timeColumn",
											Start: ast.Position{
												Column: 49,
												Line:   174,
											},
										},
									},
									Name: "timeColumn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 70,
												Line:   174,
											},
											File:   "universe.flux",
											Source: "timeColumn",
											Start: ast.Position{
												Column: 60,
												Line:   174,
											},
										},
									},
									Name: "timeColumn",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 77,
											Line:   174,
										},
										File:   "universe.flux",
										Source: "fn:fn",
										Start: ast.Position{
											Column: 72,
											Line:   174,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 74,
												Line:   174,
											},
											File:   "universe.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 72,
												Line:   174,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 77,
												Line:   174,
											},
											File:   "universe.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 75,
												Line:   174,
											},
										},
									},
									Name: "fn",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 96,
											Line:   174,
										},
										File:   "universe.flux",
										Source: "durationUnit:unit",
										Start: ast.Position{
											Column: 79,
											Line:   174,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 91,
												Line:   174,
											},
											File:   "universe.flux",
											Source: "durationUnit",
											Start: ast.Position{
												Column: 79,
												Line:   174,
											},
										},
									},
									Name: "durationUnit",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 96,
												Line:   174,
											},
											File:   "universe.flux",
											Source: "unit",
											Start: ast.Position{
												Column: 92,
												Line:   174,
											},
										},
									},
									Name: "unit",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 97,
									Line:   174,
								},
								File:   "universe.flux",
								Source: "stateTracking(durationColumn:column, timeColumn:timeColumn, fn:fn, durationUnit:unit)",
								Start: ast.Position{
									Column: 12,
									Line:   174,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   174,
									},
									File:   "universe.flux",
									Source: "stateTracking",
									Start: ast.Position{
										Column: 12,
										Line:   174,
									},
								},
							},
							Name: "stateTracking",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   172,
							},
							File:   "universe.flux",
							Source: "fn",
							Start: ast.Position{
								Column: 18,
								Line:   172,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   172,
								},
								File:   "universe.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 18,
									Line:   172,
								},
							},
						},
						Name: "fn",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 44,
								Line:   172,
							},
							File:   "universe.flux",
							Source: "column=\"stateDuration\"",
							Start: ast.Position{
								Column: 22,
								Line:   172,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   172,
								},
								File:   "universe.flux",
								Source: "column",
								Start: ast.Position{
									Column: 22,
									Line:   172,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   172,
								},
								File:   "universe.flux",
								Source: "\"stateDuration\"",
								Start: ast.Position{
									Column: 29,
									Line:   172,
								},
							},
						},
						Value: "stateDuration",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 64,
								Line:   172,
							},
							File:   "universe.flux",
							Source: "timeColumn=\"_time\"",
							Start: ast.Position{
								Column: 46,
								Line:   172,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   172,
								},
								File:   "universe.flux",
								Source: "timeColumn",
								Start: ast.Position{
									Column: 46,
									Line:   172,
								},
							},
						},
						Name: "timeColumn",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   172,
								},
								File:   "universe.flux",
								Source: "\"_time\"",
								Start: ast.Position{
									Column: 57,
									Line:   172,
								},
							},
						},
						Value: "_time",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 73,
								Line:   172,
							},
							File:   "universe.flux",
							Source: "unit=1s",
							Start: ast.Position{
								Column: 66,
								Line:   172,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   172,
								},
								File:   "universe.flux",
								Source: "unit",
								Start: ast.Position{
									Column: 66,
									Line:   172,
								},
							},
						},
						Name: "unit",
					},
					Value: &ast.DurationLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 73,
									Line:   172,
								},
								File:   "universe.flux",
								Source: "1s",
								Start: ast.Position{
									Column: 71,
									Line:   172,
								},
							},
						},
						Values: []ast.Duration{ast.Duration{
							Magnitude: int64(1),
							Unit:      "s",
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 84,
								Line:   172,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 75,
								Line:   172,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   172,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 75,
									Line:   172,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 84,
								Line:   172,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 82,
								Line:   172,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   180,
					},
					File:   "universe.flux",
					Source: "_sortLimit = (n, desc, columns=[\"_value\"], tables=<-) =>\n    tables\n        |> sort(columns:columns, desc:desc)\n        |> limit(n:n)",
					Start: ast.Position{
						Column: 1,
						Line:   177,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   177,
						},
						File:   "universe.flux",
						Source: "_sortLimit",
						Start: ast.Position{
							Column: 1,
							Line:   177,
						},
					},
				},
				Name: "_sortLimit",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   180,
						},
						File:   "universe.flux",
						Source: "(n, desc, columns=[\"_value\"], tables=<-) =>\n    tables\n        |> sort(columns:columns, desc:desc)\n        |> limit(n:n)",
						Start: ast.Position{
							Column: 14,
							Line:   177,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   178,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 5,
										Line:   178,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   179,
								},
								File:   "universe.flux",
								Source: "tables\n        |> sort(columns:columns, desc:desc)",
								Start: ast.Position{
									Column: 5,
									Line:   178,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   179,
										},
										File:   "universe.flux",
										Source: "columns:columns, desc:desc",
										Start: ast.Position{
											Column: 17,
											Line:   179,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   179,
											},
											File:   "universe.flux",
											Source: "columns:columns",
											Start: ast.Position{
												Column: 17,
												Line:   179,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   179,
												},
												File:   "universe.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 17,
													Line:   179,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   179,
												},
												File:   "universe.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 25,
													Line:   179,
												},
											},
										},
										Name: "columns",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   179,
											},
											File:   "universe.flux",
											Source: "desc:desc",
											Start: ast.Position{
												Column: 34,
												Line:   179,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   179,
												},
												File:   "universe.flux",
												Source: "desc",
												Start: ast.Position{
													Column: 34,
													Line:   179,
												},
											},
										},
										Name: "desc",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   179,
												},
												File:   "universe.flux",
												Source: "desc",
												Start: ast.Position{
													Column: 39,
													Line:   179,
												},
											},
										},
										Name: "desc",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   179,
									},
									File:   "universe.flux",
									Source: "sort(columns:columns, desc:desc)",
									Start: ast.Position{
										Column: 12,
										Line:   179,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   179,
										},
										File:   "universe.flux",
										Source: "sort",
										Start: ast.Position{
											Column: 12,
											Line:   179,
										},
									},
								},
								Name: "sort",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   180,
							},
							File:   "universe.flux",
							Source: "tables\n        |> sort(columns:columns, desc:desc)\n        |> limit(n:n)",
							Start: ast.Position{
								Column: 5,
								Line:   178,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   180,
									},
									File:   "universe.flux",
									Source: "n:n",
									Start: ast.Position{
										Column: 18,
										Line:   180,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   180,
										},
										File:   "universe.flux",
										Source: "n:n",
										Start: ast.Position{
											Column: 18,
											Line:   180,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   180,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 18,
												Line:   180,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   180,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 20,
												Line:   180,
											},
										},
									},
									Name: "n",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   180,
								},
								File:   "universe.flux",
								Source: "limit(n:n)",
								Start: ast.Position{
									Column: 12,
									Line:   180,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   180,
									},
									File:   "universe.flux",
									Source: "limit",
									Start: ast.Position{
										Column: 12,
										Line:   180,
									},
								},
							},
							Name: "limit",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   177,
							},
							File:   "universe.flux",
							Source: "n",
							Start: ast.Position{
								Column: 15,
								Line:   177,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   177,
								},
								File:   "universe.flux",
								Source: "n",
								Start: ast.Position{
									Column: 15,
									Line:   177,
								},
							},
						},
						Name: "n",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   177,
							},
							File:   "universe.flux",
							Source: "desc",
							Start: ast.Position{
								Column: 18,
								Line:   177,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   177,
								},
								File:   "universe.flux",
								Source: "desc",
								Start: ast.Position{
									Column: 18,
									Line:   177,
								},
							},
						},
						Name: "desc",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   177,
							},
							File:   "universe.flux",
							Source: "columns=[\"_value\"]",
							Start: ast.Position{
								Column: 24,
								Line:   177,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   177,
								},
								File:   "universe.flux",
								Source: "columns",
								Start: ast.Position{
									Column: 24,
									Line:   177,
								},
							},
						},
						Name: "columns",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   177,
								},
								File:   "universe.flux",
								Source: "[\"_value\"]",
								Start: ast.Position{
									Column: 32,
									Line:   177,
								},
							},
						},
						Elements: []ast.Expression{&ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   177,
									},
									File:   "universe.flux",
									Source: "\"_value\"",
									Start: ast.Position{
										Column: 33,
										Line:   177,
									},
								},
							},
							Value: "_value",
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 53,
								Line:   177,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 44,
								Line:   177,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   177,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 44,
									Line:   177,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 53,
								Line:   177,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 51,
								Line:   177,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 55,
						Line:   185,
					},
					File:   "universe.flux",
					Source: "top = (n, columns=[\"_value\"], tables=<-) =>\n    tables\n        |> _sortLimit(n:n, columns:columns, desc:true)",
					Start: ast.Position{
						Column: 1,
						Line:   183,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   183,
						},
						File:   "universe.flux",
						Source: "top",
						Start: ast.Position{
							Column: 1,
							Line:   183,
						},
					},
				},
				Name: "top",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 55,
							Line:   185,
						},
						File:   "universe.flux",
						Source: "(n, columns=[\"_value\"], tables=<-) =>\n    tables\n        |> _sortLimit(n:n, columns:columns, desc:true)",
						Start: ast.Position{
							Column: 7,
							Line:   183,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   184,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   184,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 55,
								Line:   185,
							},
							File:   "universe.flux",
							Source: "tables\n        |> _sortLimit(n:n, columns:columns, desc:true)",
							Start: ast.Position{
								Column: 5,
								Line:   184,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   185,
									},
									File:   "universe.flux",
									Source: "n:n, columns:columns, desc:true",
									Start: ast.Position{
										Column: 23,
										Line:   185,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   185,
										},
										File:   "universe.flux",
										Source: "n:n",
										Start: ast.Position{
											Column: 23,
											Line:   185,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   185,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 23,
												Line:   185,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   185,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 25,
												Line:   185,
											},
										},
									},
									Name: "n",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   185,
										},
										File:   "universe.flux",
										Source: "columns:columns",
										Start: ast.Position{
											Column: 28,
											Line:   185,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   185,
											},
											File:   "universe.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 28,
												Line:   185,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   185,
											},
											File:   "universe.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 36,
												Line:   185,
											},
										},
									},
									Name: "columns",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   185,
										},
										File:   "universe.flux",
										Source: "desc:true",
										Start: ast.Position{
											Column: 45,
											Line:   185,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   185,
											},
											File:   "universe.flux",
											Source: "desc",
											Start: ast.Position{
												Column: 45,
												Line:   185,
											},
										},
									},
									Name: "desc",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   185,
											},
											File:   "universe.flux",
											Source: "true",
											Start: ast.Position{
												Column: 50,
												Line:   185,
											},
										},
									},
									Name: "true",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   185,
								},
								File:   "universe.flux",
								Source: "_sortLimit(n:n, columns:columns, desc:true)",
								Start: ast.Position{
									Column: 12,
									Line:   185,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   185,
									},
									File:   "universe.flux",
									Source: "_sortLimit",
									Start: ast.Position{
										Column: 12,
										Line:   185,
									},
								},
							},
							Name: "_sortLimit",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 9,
								Line:   183,
							},
							File:   "universe.flux",
							Source: "n",
							Start: ast.Position{
								Column: 8,
								Line:   183,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   183,
								},
								File:   "universe.flux",
								Source: "n",
								Start: ast.Position{
									Column: 8,
									Line:   183,
								},
							},
						},
						Name: "n",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   183,
							},
							File:   "universe.flux",
							Source: "columns=[\"_value\"]",
							Start: ast.Position{
								Column: 11,
								Line:   183,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   183,
								},
								File:   "universe.flux",
								Source: "columns",
								Start: ast.Position{
									Column: 11,
									Line:   183,
								},
							},
						},
						Name: "columns",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   183,
								},
								File:   "universe.flux",
								Source: "[\"_value\"]",
								Start: ast.Position{
									Column: 19,
									Line:   183,
								},
							},
						},
						Elements: []ast.Expression{&ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   183,
									},
									File:   "universe.flux",
									Source: "\"_value\"",
									Start: ast.Position{
										Column: 20,
										Line:   183,
									},
								},
							},
							Value: "_value",
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   183,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 31,
								Line:   183,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   183,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 31,
									Line:   183,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   183,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 38,
								Line:   183,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 56,
						Line:   190,
					},
					File:   "universe.flux",
					Source: "bottom = (n, columns=[\"_value\"], tables=<-) =>\n    tables\n        |> _sortLimit(n:n, columns:columns, desc:false)",
					Start: ast.Position{
						Column: 1,
						Line:   188,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   188,
						},
						File:   "universe.flux",
						Source: "bottom",
						Start: ast.Position{
							Column: 1,
							Line:   188,
						},
					},
				},
				Name: "bottom",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 56,
							Line:   190,
						},
						File:   "universe.flux",
						Source: "(n, columns=[\"_value\"], tables=<-) =>\n    tables\n        |> _sortLimit(n:n, columns:columns, desc:false)",
						Start: ast.Position{
							Column: 10,
							Line:   188,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   189,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   189,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 56,
								Line:   190,
							},
							File:   "universe.flux",
							Source: "tables\n        |> _sortLimit(n:n, columns:columns, desc:false)",
							Start: ast.Position{
								Column: 5,
								Line:   189,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   190,
									},
									File:   "universe.flux",
									Source: "n:n, columns:columns, desc:false",
									Start: ast.Position{
										Column: 23,
										Line:   190,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   190,
										},
										File:   "universe.flux",
										Source: "n:n",
										Start: ast.Position{
											Column: 23,
											Line:   190,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   190,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 23,
												Line:   190,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   190,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 25,
												Line:   190,
											},
										},
									},
									Name: "n",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   190,
										},
										File:   "universe.flux",
										Source: "columns:columns",
										Start: ast.Position{
											Column: 28,
											Line:   190,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   190,
											},
											File:   "universe.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 28,
												Line:   190,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   190,
											},
											File:   "universe.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 36,
												Line:   190,
											},
										},
									},
									Name: "columns",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   190,
										},
										File:   "universe.flux",
										Source: "desc:false",
										Start: ast.Position{
											Column: 45,
											Line:   190,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   190,
											},
											File:   "universe.flux",
											Source: "desc",
											Start: ast.Position{
												Column: 45,
												Line:   190,
											},
										},
									},
									Name: "desc",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   190,
											},
											File:   "universe.flux",
											Source: "false",
											Start: ast.Position{
												Column: 50,
												Line:   190,
											},
										},
									},
									Name: "false",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   190,
								},
								File:   "universe.flux",
								Source: "_sortLimit(n:n, columns:columns, desc:false)",
								Start: ast.Position{
									Column: 12,
									Line:   190,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   190,
									},
									File:   "universe.flux",
									Source: "_sortLimit",
									Start: ast.Position{
										Column: 12,
										Line:   190,
									},
								},
							},
							Name: "_sortLimit",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   188,
							},
							File:   "universe.flux",
							Source: "n",
							Start: ast.Position{
								Column: 11,
								Line:   188,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   188,
								},
								File:   "universe.flux",
								Source: "n",
								Start: ast.Position{
									Column: 11,
									Line:   188,
								},
							},
						},
						Name: "n",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   188,
							},
							File:   "universe.flux",
							Source: "columns=[\"_value\"]",
							Start: ast.Position{
								Column: 14,
								Line:   188,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   188,
								},
								File:   "universe.flux",
								Source: "columns",
								Start: ast.Position{
									Column: 14,
									Line:   188,
								},
							},
						},
						Name: "columns",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   188,
								},
								File:   "universe.flux",
								Source: "[\"_value\"]",
								Start: ast.Position{
									Column: 22,
									Line:   188,
								},
							},
						},
						Elements: []ast.Expression{&ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   188,
									},
									File:   "universe.flux",
									Source: "\"_value\"",
									Start: ast.Position{
										Column: 23,
										Line:   188,
									},
								},
							},
							Value: "_value",
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   188,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 34,
								Line:   188,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   188,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 34,
									Line:   188,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   188,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 41,
								Line:   188,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 45,
						Line:   200,
					},
					File:   "universe.flux",
					Source: "_highestOrLowest = (n, _sortLimit, reducer, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> group(columns:groupColumns)\n        |> reducer()\n        |> group(columns:[])\n        |> _sortLimit(n:n, columns:[column])",
					Start: ast.Position{
						Column: 1,
						Line:   195,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   195,
						},
						File:   "universe.flux",
						Source: "_highestOrLowest",
						Start: ast.Position{
							Column: 1,
							Line:   195,
						},
					},
				},
				Name: "_highestOrLowest",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 45,
							Line:   200,
						},
						File:   "universe.flux",
						Source: "(n, _sortLimit, reducer, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> group(columns:groupColumns)\n        |> reducer()\n        |> group(columns:[])\n        |> _sortLimit(n:n, columns:[column])",
						Start: ast.Position{
							Column: 20,
							Line:   195,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   196,
											},
											File:   "universe.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 5,
												Line:   196,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   197,
										},
										File:   "universe.flux",
										Source: "tables\n        |> group(columns:groupColumns)",
										Start: ast.Position{
											Column: 5,
											Line:   196,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   197,
												},
												File:   "universe.flux",
												Source: "columns:groupColumns",
												Start: ast.Position{
													Column: 18,
													Line:   197,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   197,
													},
													File:   "universe.flux",
													Source: "columns:groupColumns",
													Start: ast.Position{
														Column: 18,
														Line:   197,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   197,
														},
														File:   "universe.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 18,
															Line:   197,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   197,
														},
														File:   "universe.flux",
														Source: "groupColumns",
														Start: ast.Position{
															Column: 26,
															Line:   197,
														},
													},
												},
												Name: "groupColumns",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   197,
											},
											File:   "universe.flux",
											Source: "group(columns:groupColumns)",
											Start: ast.Position{
												Column: 12,
												Line:   197,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   197,
												},
												File:   "universe.flux",
												Source: "group",
												Start: ast.Position{
													Column: 12,
													Line:   197,
												},
											},
										},
										Name: "group",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   198,
									},
									File:   "universe.flux",
									Source: "tables\n        |> group(columns:groupColumns)\n        |> reducer()",
									Start: ast.Position{
										Column: 5,
										Line:   196,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   198,
										},
										File:   "universe.flux",
										Source: "reducer()",
										Start: ast.Position{
											Column: 12,
											Line:   198,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   198,
											},
											File:   "universe.flux",
											Source: "reducer",
											Start: ast.Position{
												Column: 12,
												Line:   198,
											},
										},
									},
									Name: "reducer",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   199,
								},
								File:   "universe.flux",
								Source: "tables\n        |> group(columns:groupColumns)\n        |> reducer()\n        |> group(columns:[])",
								Start: ast.Position{
									Column: 5,
									Line:   196,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   199,
										},
										File:   "universe.flux",
										Source: "columns:[]",
										Start: ast.Position{
											Column: 18,
											Line:   199,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   199,
											},
											File:   "universe.flux",
											Source: "columns:[]",
											Start: ast.Position{
												Column: 18,
												Line:   199,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   199,
												},
												File:   "universe.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 18,
													Line:   199,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   199,
												},
												File:   "universe.flux",
												Source: "[]",
												Start: ast.Position{
													Column: 26,
													Line:   199,
												},
											},
										},
										Elements: []ast.Expression{},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   199,
									},
									File:   "universe.flux",
									Source: "group(columns:[])",
									Start: ast.Position{
										Column: 12,
										Line:   199,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   199,
										},
										File:   "universe.flux",
										Source: "group",
										Start: ast.Position{
											Column: 12,
											Line:   199,
										},
									},
								},
								Name: "group",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 45,
								Line:   200,
							},
							File:   "universe.flux",
							Source: "tables\n        |> group(columns:groupColumns)\n        |> reducer()\n        |> group(columns:[])\n        |> _sortLimit(n:n, columns:[column])",
							Start: ast.Position{
								Column: 5,
								Line:   196,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 44,
										Line:   200,
									},
									File:   "universe.flux",
									Source: "n:n, columns:[column]",
									Start: ast.Position{
										Column: 23,
										Line:   200,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   200,
										},
										File:   "universe.flux",
										Source: "n:n",
										Start: ast.Position{
											Column: 23,
											Line:   200,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   200,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 23,
												Line:   200,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   200,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 25,
												Line:   200,
											},
										},
									},
									Name: "n",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 44,
											Line:   200,
										},
										File:   "universe.flux",
										Source: "columns:[column]",
										Start: ast.Position{
											Column: 28,
											Line:   200,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   200,
											},
											File:   "universe.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 28,
												Line:   200,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   200,
											},
											File:   "universe.flux",
											Source: "[column]",
											Start: ast.Position{
												Column: 36,
												Line:   200,
											},
										},
									},
									Elements: []ast.Expression{&ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   200,
												},
												File:   "universe.flux",
												Source: "column",
												Start: ast.Position{
													Column: 37,
													Line:   200,
												},
											},
										},
										Name: "column",
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   200,
								},
								File:   "universe.flux",
								Source: "_sortLimit(n:n, columns:[column])",
								Start: ast.Position{
									Column: 12,
									Line:   200,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   200,
									},
									File:   "universe.flux",
									Source: "_sortLimit",
									Start: ast.Position{
										Column: 12,
										Line:   200,
									},
								},
							},
							Name: "_sortLimit",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   195,
							},
							File:   "universe.flux",
							Source: "n",
							Start: ast.Position{
								Column: 21,
								Line:   195,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   195,
								},
								File:   "universe.flux",
								Source: "n",
								Start: ast.Position{
									Column: 21,
									Line:   195,
								},
							},
						},
						Name: "n",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 34,
								Line:   195,
							},
							File:   "universe.flux",
							Source: "_sortLimit",
							Start: ast.Position{
								Column: 24,
								Line:   195,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   195,
								},
								File:   "universe.flux",
								Source: "_sortLimit",
								Start: ast.Position{
									Column: 24,
									Line:   195,
								},
							},
						},
						Name: "_sortLimit",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   195,
							},
							File:   "universe.flux",
							Source: "reducer",
							Start: ast.Position{
								Column: 36,
								Line:   195,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   195,
								},
								File:   "universe.flux",
								Source: "reducer",
								Start: ast.Position{
									Column: 36,
									Line:   195,
								},
							},
						},
						Name: "reducer",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 60,
								Line:   195,
							},
							File:   "universe.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 45,
								Line:   195,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   195,
								},
								File:   "universe.flux",
								Source: "column",
								Start: ast.Position{
									Column: 45,
									Line:   195,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 60,
									Line:   195,
								},
								File:   "universe.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 52,
									Line:   195,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 77,
								Line:   195,
							},
							File:   "universe.flux",
							Source: "groupColumns=[]",
							Start: ast.Position{
								Column: 62,
								Line:   195,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 74,
									Line:   195,
								},
								File:   "universe.flux",
								Source: "groupColumns",
								Start: ast.Position{
									Column: 62,
									Line:   195,
								},
							},
						},
						Name: "groupColumns",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 77,
									Line:   195,
								},
								File:   "universe.flux",
								Source: "[]",
								Start: ast.Position{
									Column: 75,
									Line:   195,
								},
							},
						},
						Elements: []ast.Expression{},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 88,
								Line:   195,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 79,
								Line:   195,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 85,
									Line:   195,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 79,
									Line:   195,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 88,
								Line:   195,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 86,
								Line:   195,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   212,
					},
					File:   "universe.flux",
					Source: "highestMax = (n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                // TODO(nathanielc): Once max/min support selecting based on multiple columns change this to pass all columns.\n                reducer: (tables=<-) => tables |> max(column:column),\n                _sortLimit: top,\n            )",
					Start: ast.Position{
						Column: 1,
						Line:   203,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   203,
						},
						File:   "universe.flux",
						Source: "highestMax",
						Start: ast.Position{
							Column: 1,
							Line:   203,
						},
					},
				},
				Name: "highestMax",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   212,
						},
						File:   "universe.flux",
						Source: "(n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                // TODO(nathanielc): Once max/min support selecting based on multiple columns change this to pass all columns.\n                reducer: (tables=<-) => tables |> max(column:column),\n                _sortLimit: top,\n            )",
						Start: ast.Position{
							Column: 14,
							Line:   203,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   204,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   204,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   212,
							},
							File:   "universe.flux",
							Source: "tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                // TODO(nathanielc): Once max/min support selecting based on multiple columns change this to pass all columns.\n                reducer: (tables=<-) => tables |> max(column:column),\n                _sortLimit: top,\n            )",
							Start: ast.Position{
								Column: 5,
								Line:   204,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   211,
									},
									File:   "universe.flux",
									Source: "n:n,\n                column:column,\n                groupColumns:groupColumns,\n                // TODO(nathanielc): Once max/min support selecting based on multiple columns change this to pass all columns.\n                reducer: (tables=<-) => tables |> max(column:column),\n                _sortLimit: top",
									Start: ast.Position{
										Column: 17,
										Line:   206,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   206,
										},
										File:   "universe.flux",
										Source: "n:n",
										Start: ast.Position{
											Column: 17,
											Line:   206,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   206,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 17,
												Line:   206,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   206,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 19,
												Line:   206,
											},
										},
									},
									Name: "n",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   207,
										},
										File:   "universe.flux",
										Source: "column:column",
										Start: ast.Position{
											Column: 17,
											Line:   207,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   207,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 17,
												Line:   207,
											},
										},
									},
									Name: "column",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   207,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 24,
												Line:   207,
											},
										},
									},
									Name: "column",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   208,
										},
										File:   "universe.flux",
										Source: "groupColumns:groupColumns",
										Start: ast.Position{
											Column: 17,
											Line:   208,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   208,
											},
											File:   "universe.flux",
											Source: "groupColumns",
											Start: ast.Position{
												Column: 17,
												Line:   208,
											},
										},
									},
									Name: "groupColumns",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   208,
											},
											File:   "universe.flux",
											Source: "groupColumns",
											Start: ast.Position{
												Column: 30,
												Line:   208,
											},
										},
									},
									Name: "groupColumns",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   210,
										},
										File:   "universe.flux",
										Source: "reducer: (tables=<-) => tables |> max(column:column)",
										Start: ast.Position{
											Column: 17,
											Line:   210,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   210,
											},
											File:   "universe.flux",
											Source: "reducer",
											Start: ast.Position{
												Column: 17,
												Line:   210,
											},
										},
									},
									Name: "reducer",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   210,
											},
											File:   "universe.flux",
											Source: "(tables=<-) => tables |> max(column:column)",
											Start: ast.Position{
												Column: 26,
												Line:   210,
											},
										},
									},
									Body: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   210,
													},
													File:   "universe.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 41,
														Line:   210,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   210,
												},
												File:   "universe.flux",
												Source: "tables |> max(column:column)",
												Start: ast.Position{
													Column: 41,
													Line:   210,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 68,
															Line:   210,
														},
														File:   "universe.flux",
														Source: "column:column",
														Start: ast.Position{
															Column: 55,
															Line:   210,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 68,
																Line:   210,
															},
															File:   "universe.flux",
															Source: "column:column",
															Start: ast.Position{
																Column: 55,
																Line:   210,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 61,
																	Line:   210,
																},
																File:   "universe.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 55,
																	Line:   210,
																},
															},
														},
														Name: "column",
													},
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 68,
																	Line:   210,
																},
																File:   "universe.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 62,
																	Line:   210,
																},
															},
														},
														Name: "column",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 69,
														Line:   210,
													},
													File:   "universe.flux",
													Source: "max(column:column)",
													Start: ast.Position{
														Column: 51,
														Line:   210,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 54,
															Line:   210,
														},
														File:   "universe.flux",
														Source: "max",
														Start: ast.Position{
															Column: 51,
															Line:   210,
														},
													},
												},
												Name: "max",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   210,
												},
												File:   "universe.flux",
												Source: "tables=<-",
												Start: ast.Position{
													Column: 27,
													Line:   210,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   210,
													},
													File:   "universe.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 27,
														Line:   210,
													},
												},
											},
											Name: "tables",
										},
										Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   210,
												},
												File:   "universe.flux",
												Source: "<-",
												Start: ast.Position{
													Column: 34,
													Line:   210,
												},
											},
										}},
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   211,
										},
										File:   "universe.flux",
										Source: "_sortLimit: top",
										Start: ast.Position{
											Column: 17,
											Line:   211,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   211,
											},
											File:   "universe.flux",
											Source: "_sortLimit",
											Start: ast.Position{
												Column: 17,
												Line:   211,
											},
										},
									},
									Name: "_sortLimit",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   211,
											},
											File:   "universe.flux",
											Source: "top",
											Start: ast.Position{
												Column: 29,
												Line:   211,
											},
										},
									},
									Name: "top",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   212,
								},
								File:   "universe.flux",
								Source: "_highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                // TODO(nathanielc): Once max/min support selecting based on multiple columns change this to pass all columns.\n                reducer: (tables=<-) => tables |> max(column:column),\n                _sortLimit: top,\n            )",
								Start: ast.Position{
									Column: 12,
									Line:   205,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   205,
									},
									File:   "universe.flux",
									Source: "_highestOrLowest",
									Start: ast.Position{
										Column: 12,
										Line:   205,
									},
								},
							},
							Name: "_highestOrLowest",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   203,
							},
							File:   "universe.flux",
							Source: "n",
							Start: ast.Position{
								Column: 15,
								Line:   203,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   203,
								},
								File:   "universe.flux",
								Source: "n",
								Start: ast.Position{
									Column: 15,
									Line:   203,
								},
							},
						},
						Name: "n",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   203,
							},
							File:   "universe.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 18,
								Line:   203,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   203,
								},
								File:   "universe.flux",
								Source: "column",
								Start: ast.Position{
									Column: 18,
									Line:   203,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   203,
								},
								File:   "universe.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 25,
									Line:   203,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 50,
								Line:   203,
							},
							File:   "universe.flux",
							Source: "groupColumns=[]",
							Start: ast.Position{
								Column: 35,
								Line:   203,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   203,
								},
								File:   "universe.flux",
								Source: "groupColumns",
								Start: ast.Position{
									Column: 35,
									Line:   203,
								},
							},
						},
						Name: "groupColumns",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   203,
								},
								File:   "universe.flux",
								Source: "[]",
								Start: ast.Position{
									Column: 48,
									Line:   203,
								},
							},
						},
						Elements: []ast.Expression{},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 61,
								Line:   203,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 52,
								Line:   203,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   203,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 52,
									Line:   203,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 61,
								Line:   203,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 59,
								Line:   203,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   223,
					},
					File:   "universe.flux",
					Source: "highestAverage = (n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> mean(column:column),\n                _sortLimit: top,\n            )",
					Start: ast.Position{
						Column: 1,
						Line:   215,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   215,
						},
						File:   "universe.flux",
						Source: "highestAverage",
						Start: ast.Position{
							Column: 1,
							Line:   215,
						},
					},
				},
				Name: "highestAverage",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   223,
						},
						File:   "universe.flux",
						Source: "(n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> mean(column:column),\n                _sortLimit: top,\n            )",
						Start: ast.Position{
							Column: 18,
							Line:   215,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   216,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   216,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   223,
							},
							File:   "universe.flux",
							Source: "tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> mean(column:column),\n                _sortLimit: top,\n            )",
							Start: ast.Position{
								Column: 5,
								Line:   216,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   222,
									},
									File:   "universe.flux",
									Source: "n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> mean(column:column),\n                _sortLimit: top",
									Start: ast.Position{
										Column: 17,
										Line:   218,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   218,
										},
										File:   "universe.flux",
										Source: "n:n",
										Start: ast.Position{
											Column: 17,
											Line:   218,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   218,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 17,
												Line:   218,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   218,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 19,
												Line:   218,
											},
										},
									},
									Name: "n",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   219,
										},
										File:   "universe.flux",
										Source: "column:column",
										Start: ast.Position{
											Column: 17,
											Line:   219,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   219,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 17,
												Line:   219,
											},
										},
									},
									Name: "column",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   219,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 24,
												Line:   219,
											},
										},
									},
									Name: "column",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   220,
										},
										File:   "universe.flux",
										Source: "groupColumns:groupColumns",
										Start: ast.Position{
											Column: 17,
											Line:   220,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   220,
											},
											File:   "universe.flux",
											Source: "groupColumns",
											Start: ast.Position{
												Column: 17,
												Line:   220,
											},
										},
									},
									Name: "groupColumns",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   220,
											},
											File:   "universe.flux",
											Source: "groupColumns",
											Start: ast.Position{
												Column: 30,
												Line:   220,
											},
										},
									},
									Name: "groupColumns",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   221,
										},
										File:   "universe.flux",
										Source: "reducer: (tables=<-) => tables |> mean(column:column)",
										Start: ast.Position{
											Column: 17,
											Line:   221,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   221,
											},
											File:   "universe.flux",
											Source: "reducer",
											Start: ast.Position{
												Column: 17,
												Line:   221,
											},
										},
									},
									Name: "reducer",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 70,
												Line:   221,
											},
											File:   "universe.flux",
											Source: "(tables=<-) => tables |> mean(column:column)",
											Start: ast.Position{
												Column: 26,
												Line:   221,
											},
										},
									},
									Body: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   221,
													},
													File:   "universe.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 41,
														Line:   221,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 70,
													Line:   221,
												},
												File:   "universe.flux",
												Source: "tables |> mean(column:column)",
												Start: ast.Position{
													Column: 41,
													Line:   221,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 69,
															Line:   221,
														},
														File:   "universe.flux",
														Source: "column:column",
														Start: ast.Position{
															Column: 56,
															Line:   221,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 69,
																Line:   221,
															},
															File:   "universe.flux",
															Source: "column:column",
															Start: ast.Position{
																Column: 56,
																Line:   221,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 62,
																	Line:   221,
																},
																File:   "universe.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 56,
																	Line:   221,
																},
															},
														},
														Name: "column",
													},
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 69,
																	Line:   221,
																},
																File:   "universe.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 63,
																	Line:   221,
																},
															},
														},
														Name: "column",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 70,
														Line:   221,
													},
													File:   "universe.flux",
													Source: "mean(column:column)",
													Start: ast.Position{
														Column: 51,
														Line:   221,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   221,
														},
														File:   "universe.flux",
														Source: "mean",
														Start: ast.Position{
															Column: 51,
															Line:   221,
														},
													},
												},
												Name: "mean",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   221,
												},
												File:   "universe.flux",
												Source: "tables=<-",
												Start: ast.Position{
													Column: 27,
													Line:   221,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   221,
													},
													File:   "universe.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 27,
														Line:   221,
													},
												},
											},
											Name: "tables",
										},
										Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   221,
												},
												File:   "universe.flux",
												Source: "<-",
												Start: ast.Position{
													Column: 34,
													Line:   221,
												},
											},
										}},
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   222,
										},
										File:   "universe.flux",
										Source: "_sortLimit: top",
										Start: ast.Position{
											Column: 17,
											Line:   222,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   222,
											},
											File:   "universe.flux",
											Source: "_sortLimit",
											Start: ast.Position{
												Column: 17,
												Line:   222,
											},
										},
									},
									Name: "_sortLimit",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   222,
											},
											File:   "universe.flux",
											Source: "top",
											Start: ast.Position{
												Column: 29,
												Line:   222,
											},
										},
									},
									Name: "top",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   223,
								},
								File:   "universe.flux",
								Source: "_highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> mean(column:column),\n                _sortLimit: top,\n            )",
								Start: ast.Position{
									Column: 12,
									Line:   217,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   217,
									},
									File:   "universe.flux",
									Source: "_highestOrLowest",
									Start: ast.Position{
										Column: 12,
										Line:   217,
									},
								},
							},
							Name: "_highestOrLowest",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   215,
							},
							File:   "universe.flux",
							Source: "n",
							Start: ast.Position{
								Column: 19,
								Line:   215,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   215,
								},
								File:   "universe.flux",
								Source: "n",
								Start: ast.Position{
									Column: 19,
									Line:   215,
								},
							},
						},
						Name: "n",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 37,
								Line:   215,
							},
							File:   "universe.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 22,
								Line:   215,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   215,
								},
								File:   "universe.flux",
								Source: "column",
								Start: ast.Position{
									Column: 22,
									Line:   215,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   215,
								},
								File:   "universe.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 29,
									Line:   215,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 54,
								Line:   215,
							},
							File:   "universe.flux",
							Source: "groupColumns=[]",
							Start: ast.Position{
								Column: 39,
								Line:   215,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   215,
								},
								File:   "universe.flux",
								Source: "groupColumns",
								Start: ast.Position{
									Column: 39,
									Line:   215,
								},
							},
						},
						Name: "groupColumns",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   215,
								},
								File:   "universe.flux",
								Source: "[]",
								Start: ast.Position{
									Column: 52,
									Line:   215,
								},
							},
						},
						Elements: []ast.Expression{},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 65,
								Line:   215,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 56,
								Line:   215,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   215,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 56,
									Line:   215,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 65,
								Line:   215,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 63,
								Line:   215,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   234,
					},
					File:   "universe.flux",
					Source: "highestCurrent = (n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> last(column:column),\n                _sortLimit: top,\n            )",
					Start: ast.Position{
						Column: 1,
						Line:   226,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   226,
						},
						File:   "universe.flux",
						Source: "highestCurrent",
						Start: ast.Position{
							Column: 1,
							Line:   226,
						},
					},
				},
				Name: "highestCurrent",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   234,
						},
						File:   "universe.flux",
						Source: "(n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> last(column:column),\n                _sortLimit: top,\n            )",
						Start: ast.Position{
							Column: 18,
							Line:   226,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   227,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   227,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   234,
							},
							File:   "universe.flux",
							Source: "tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> last(column:column),\n                _sortLimit: top,\n            )",
							Start: ast.Position{
								Column: 5,
								Line:   227,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   233,
									},
									File:   "universe.flux",
									Source: "n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> last(column:column),\n                _sortLimit: top",
									Start: ast.Position{
										Column: 17,
										Line:   229,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   229,
										},
										File:   "universe.flux",
										Source: "n:n",
										Start: ast.Position{
											Column: 17,
											Line:   229,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   229,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 17,
												Line:   229,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   229,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 19,
												Line:   229,
											},
										},
									},
									Name: "n",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   230,
										},
										File:   "universe.flux",
										Source: "column:column",
										Start: ast.Position{
											Column: 17,
											Line:   230,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   230,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 17,
												Line:   230,
											},
										},
									},
									Name: "column",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   230,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 24,
												Line:   230,
											},
										},
									},
									Name: "column",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   231,
										},
										File:   "universe.flux",
										Source: "groupColumns:groupColumns",
										Start: ast.Position{
											Column: 17,
											Line:   231,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   231,
											},
											File:   "universe.flux",
											Source: "groupColumns",
											Start: ast.Position{
												Column: 17,
												Line:   231,
											},
										},
									},
									Name: "groupColumns",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   231,
											},
											File:   "universe.flux",
											Source: "groupColumns",
											Start: ast.Position{
												Column: 30,
												Line:   231,
											},
										},
									},
									Name: "groupColumns",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   232,
										},
										File:   "universe.flux",
										Source: "reducer: (tables=<-) => tables |> last(column:column)",
										Start: ast.Position{
											Column: 17,
											Line:   232,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   232,
											},
											File:   "universe.flux",
											Source: "reducer",
											Start: ast.Position{
												Column: 17,
												Line:   232,
											},
										},
									},
									Name: "reducer",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 70,
												Line:   232,
											},
											File:   "universe.flux",
											Source: "(tables=<-) => tables |> last(column:column)",
											Start: ast.Position{
												Column: 26,
												Line:   232,
											},
										},
									},
									Body: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   232,
													},
													File:   "universe.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 41,
														Line:   232,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 70,
													Line:   232,
												},
												File:   "universe.flux",
												Source: "tables |> last(column:column)",
												Start: ast.Position{
													Column: 41,
													Line:   232,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 69,
															Line:   232,
														},
														File:   "universe.flux",
														Source: "column:column",
														Start: ast.Position{
															Column: 56,
															Line:   232,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 69,
																Line:   232,
															},
															File:   "universe.flux",
															Source: "column:column",
															Start: ast.Position{
																Column: 56,
																Line:   232,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 62,
																	Line:   232,
																},
																File:   "universe.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 56,
																	Line:   232,
																},
															},
														},
														Name: "column",
													},
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 69,
																	Line:   232,
																},
																File:   "universe.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 63,
																	Line:   232,
																},
															},
														},
														Name: "column",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 70,
														Line:   232,
													},
													File:   "universe.flux",
													Source: "last(column:column)",
													Start: ast.Position{
														Column: 51,
														Line:   232,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   232,
														},
														File:   "universe.flux",
														Source: "last",
														Start: ast.Position{
															Column: 51,
															Line:   232,
														},
													},
												},
												Name: "last",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   232,
												},
												File:   "universe.flux",
												Source: "tables=<-",
												Start: ast.Position{
													Column: 27,
													Line:   232,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   232,
													},
													File:   "universe.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 27,
														Line:   232,
													},
												},
											},
											Name: "tables",
										},
										Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   232,
												},
												File:   "universe.flux",
												Source: "<-",
												Start: ast.Position{
													Column: 34,
													Line:   232,
												},
											},
										}},
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   233,
										},
										File:   "universe.flux",
										Source: "_sortLimit: top",
										Start: ast.Position{
											Column: 17,
											Line:   233,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   233,
											},
											File:   "universe.flux",
											Source: "_sortLimit",
											Start: ast.Position{
												Column: 17,
												Line:   233,
											},
										},
									},
									Name: "_sortLimit",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   233,
											},
											File:   "universe.flux",
											Source: "top",
											Start: ast.Position{
												Column: 29,
												Line:   233,
											},
										},
									},
									Name: "top",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   234,
								},
								File:   "universe.flux",
								Source: "_highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> last(column:column),\n                _sortLimit: top,\n            )",
								Start: ast.Position{
									Column: 12,
									Line:   228,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   228,
									},
									File:   "universe.flux",
									Source: "_highestOrLowest",
									Start: ast.Position{
										Column: 12,
										Line:   228,
									},
								},
							},
							Name: "_highestOrLowest",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   226,
							},
							File:   "universe.flux",
							Source: "n",
							Start: ast.Position{
								Column: 19,
								Line:   226,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   226,
								},
								File:   "universe.flux",
								Source: "n",
								Start: ast.Position{
									Column: 19,
									Line:   226,
								},
							},
						},
						Name: "n",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 37,
								Line:   226,
							},
							File:   "universe.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 22,
								Line:   226,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   226,
								},
								File:   "universe.flux",
								Source: "column",
								Start: ast.Position{
									Column: 22,
									Line:   226,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   226,
								},
								File:   "universe.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 29,
									Line:   226,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 54,
								Line:   226,
							},
							File:   "universe.flux",
							Source: "groupColumns=[]",
							Start: ast.Position{
								Column: 39,
								Line:   226,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   226,
								},
								File:   "universe.flux",
								Source: "groupColumns",
								Start: ast.Position{
									Column: 39,
									Line:   226,
								},
							},
						},
						Name: "groupColumns",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   226,
								},
								File:   "universe.flux",
								Source: "[]",
								Start: ast.Position{
									Column: 52,
									Line:   226,
								},
							},
						},
						Elements: []ast.Expression{},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 65,
								Line:   226,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 56,
								Line:   226,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   226,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 56,
									Line:   226,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 65,
								Line:   226,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 63,
								Line:   226,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   246,
					},
					File:   "universe.flux",
					Source: "lowestMin = (n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                // TODO(nathanielc): Once max/min support selecting based on multiple columns change this to pass all columns.\n                reducer: (tables=<-) => tables |> min(column:column),\n                _sortLimit: bottom,\n            )",
					Start: ast.Position{
						Column: 1,
						Line:   237,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   237,
						},
						File:   "universe.flux",
						Source: "lowestMin",
						Start: ast.Position{
							Column: 1,
							Line:   237,
						},
					},
				},
				Name: "lowestMin",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   246,
						},
						File:   "universe.flux",
						Source: "(n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                // TODO(nathanielc): Once max/min support selecting based on multiple columns change this to pass all columns.\n                reducer: (tables=<-) => tables |> min(column:column),\n                _sortLimit: bottom,\n            )",
						Start: ast.Position{
							Column: 13,
							Line:   237,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   238,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   238,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   246,
							},
							File:   "universe.flux",
							Source: "tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                // TODO(nathanielc): Once max/min support selecting based on multiple columns change this to pass all columns.\n                reducer: (tables=<-) => tables |> min(column:column),\n                _sortLimit: bottom,\n            )",
							Start: ast.Position{
								Column: 5,
								Line:   238,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   245,
									},
									File:   "universe.flux",
									Source: "n:n,\n                column:column,\n                groupColumns:groupColumns,\n                // TODO(nathanielc): Once max/min support selecting based on multiple columns change this to pass all columns.\n                reducer: (tables=<-) => tables |> min(column:column),\n                _sortLimit: bottom",
									Start: ast.Position{
										Column: 17,
										Line:   240,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   240,
										},
										File:   "universe.flux",
										Source: "n:n",
										Start: ast.Position{
											Column: 17,
											Line:   240,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   240,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 17,
												Line:   240,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   240,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 19,
												Line:   240,
											},
										},
									},
									Name: "n",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   241,
										},
										File:   "universe.flux",
										Source: "column:column",
										Start: ast.Position{
											Column: 17,
											Line:   241,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   241,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 17,
												Line:   241,
											},
										},
									},
									Name: "column",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   241,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 24,
												Line:   241,
											},
										},
									},
									Name: "column",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   242,
										},
										File:   "universe.flux",
										Source: "groupColumns:groupColumns",
										Start: ast.Position{
											Column: 17,
											Line:   242,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   242,
											},
											File:   "universe.flux",
											Source: "groupColumns",
											Start: ast.Position{
												Column: 17,
												Line:   242,
											},
										},
									},
									Name: "groupColumns",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   242,
											},
											File:   "universe.flux",
											Source: "groupColumns",
											Start: ast.Position{
												Column: 30,
												Line:   242,
											},
										},
									},
									Name: "groupColumns",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   244,
										},
										File:   "universe.flux",
										Source: "reducer: (tables=<-) => tables |> min(column:column)",
										Start: ast.Position{
											Column: 17,
											Line:   244,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   244,
											},
											File:   "universe.flux",
											Source: "reducer",
											Start: ast.Position{
												Column: 17,
												Line:   244,
											},
										},
									},
									Name: "reducer",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   244,
											},
											File:   "universe.flux",
											Source: "(tables=<-) => tables |> min(column:column)",
											Start: ast.Position{
												Column: 26,
												Line:   244,
											},
										},
									},
									Body: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   244,
													},
													File:   "universe.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 41,
														Line:   244,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   244,
												},
												File:   "universe.flux",
												Source: "tables |> min(column:column)",
												Start: ast.Position{
													Column: 41,
													Line:   244,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 68,
															Line:   244,
														},
														File:   "universe.flux",
														Source: "column:column",
														Start: ast.Position{
															Column: 55,
															Line:   244,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 68,
																Line:   244,
															},
															File:   "universe.flux",
															Source: "column:column",
															Start: ast.Position{
																Column: 55,
																Line:   244,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 61,
																	Line:   244,
																},
																File:   "universe.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 55,
																	Line:   244,
																},
															},
														},
														Name: "column",
													},
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 68,
																	Line:   244,
																},
																File:   "universe.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 62,
																	Line:   244,
																},
															},
														},
														Name: "column",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 69,
														Line:   244,
													},
													File:   "universe.flux",
													Source: "min(column:column)",
													Start: ast.Position{
														Column: 51,
														Line:   244,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 54,
															Line:   244,
														},
														File:   "universe.flux",
														Source: "min",
														Start: ast.Position{
															Column: 51,
															Line:   244,
														},
													},
												},
												Name: "min",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   244,
												},
												File:   "universe.flux",
												Source: "tables=<-",
												Start: ast.Position{
													Column: 27,
													Line:   244,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   244,
													},
													File:   "universe.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 27,
														Line:   244,
													},
												},
											},
											Name: "tables",
										},
										Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   244,
												},
												File:   "universe.flux",
												Source: "<-",
												Start: ast.Position{
													Column: 34,
													Line:   244,
												},
											},
										}},
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   245,
										},
										File:   "universe.flux",
										Source: "_sortLimit: bottom",
										Start: ast.Position{
											Column: 17,
											Line:   245,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   245,
											},
											File:   "universe.flux",
											Source: "_sortLimit",
											Start: ast.Position{
												Column: 17,
												Line:   245,
											},
										},
									},
									Name: "_sortLimit",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   245,
											},
											File:   "universe.flux",
											Source: "bottom",
											Start: ast.Position{
												Column: 29,
												Line:   245,
											},
										},
									},
									Name: "bottom",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   246,
								},
								File:   "universe.flux",
								Source: "_highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                // TODO(nathanielc): Once max/min support selecting based on multiple columns change this to pass all columns.\n                reducer: (tables=<-) => tables |> min(column:column),\n                _sortLimit: bottom,\n            )",
								Start: ast.Position{
									Column: 12,
									Line:   239,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   239,
									},
									File:   "universe.flux",
									Source: "_highestOrLowest",
									Start: ast.Position{
										Column: 12,
										Line:   239,
									},
								},
							},
							Name: "_highestOrLowest",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   237,
							},
							File:   "universe.flux",
							Source: "n",
							Start: ast.Position{
								Column: 14,
								Line:   237,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   237,
								},
								File:   "universe.flux",
								Source: "n",
								Start: ast.Position{
									Column: 14,
									Line:   237,
								},
							},
						},
						Name: "n",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   237,
							},
							File:   "universe.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 17,
								Line:   237,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   237,
								},
								File:   "universe.flux",
								Source: "column",
								Start: ast.Position{
									Column: 17,
									Line:   237,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   237,
								},
								File:   "universe.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 24,
									Line:   237,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   237,
							},
							File:   "universe.flux",
							Source: "groupColumns=[]",
							Start: ast.Position{
								Column: 34,
								Line:   237,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   237,
								},
								File:   "universe.flux",
								Source: "groupColumns",
								Start: ast.Position{
									Column: 34,
									Line:   237,
								},
							},
						},
						Name: "groupColumns",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   237,
								},
								File:   "universe.flux",
								Source: "[]",
								Start: ast.Position{
									Column: 47,
									Line:   237,
								},
							},
						},
						Elements: []ast.Expression{},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 60,
								Line:   237,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 51,
								Line:   237,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   237,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 51,
									Line:   237,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 60,
								Line:   237,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 58,
								Line:   237,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   257,
					},
					File:   "universe.flux",
					Source: "lowestAverage = (n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> mean(column:column),\n                _sortLimit: bottom,\n            )",
					Start: ast.Position{
						Column: 1,
						Line:   249,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   249,
						},
						File:   "universe.flux",
						Source: "lowestAverage",
						Start: ast.Position{
							Column: 1,
							Line:   249,
						},
					},
				},
				Name: "lowestAverage",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   257,
						},
						File:   "universe.flux",
						Source: "(n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> mean(column:column),\n                _sortLimit: bottom,\n            )",
						Start: ast.Position{
							Column: 17,
							Line:   249,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   250,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   250,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   257,
							},
							File:   "universe.flux",
							Source: "tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> mean(column:column),\n                _sortLimit: bottom,\n            )",
							Start: ast.Position{
								Column: 5,
								Line:   250,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   256,
									},
									File:   "universe.flux",
									Source: "n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> mean(column:column),\n                _sortLimit: bottom",
									Start: ast.Position{
										Column: 17,
										Line:   252,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   252,
										},
										File:   "universe.flux",
										Source: "n:n",
										Start: ast.Position{
											Column: 17,
											Line:   252,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   252,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 17,
												Line:   252,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   252,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 19,
												Line:   252,
											},
										},
									},
									Name: "n",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   253,
										},
										File:   "universe.flux",
										Source: "column:column",
										Start: ast.Position{
											Column: 17,
											Line:   253,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   253,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 17,
												Line:   253,
											},
										},
									},
									Name: "column",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   253,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 24,
												Line:   253,
											},
										},
									},
									Name: "column",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   254,
										},
										File:   "universe.flux",
										Source: "groupColumns:groupColumns",
										Start: ast.Position{
											Column: 17,
											Line:   254,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   254,
											},
											File:   "universe.flux",
											Source: "groupColumns",
											Start: ast.Position{
												Column: 17,
												Line:   254,
											},
										},
									},
									Name: "groupColumns",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   254,
											},
											File:   "universe.flux",
											Source: "groupColumns",
											Start: ast.Position{
												Column: 30,
												Line:   254,
											},
										},
									},
									Name: "groupColumns",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   255,
										},
										File:   "universe.flux",
										Source: "reducer: (tables=<-) => tables |> mean(column:column)",
										Start: ast.Position{
											Column: 17,
											Line:   255,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   255,
											},
											File:   "universe.flux",
											Source: "reducer",
											Start: ast.Position{
												Column: 17,
												Line:   255,
											},
										},
									},
									Name: "reducer",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 70,
												Line:   255,
											},
											File:   "universe.flux",
											Source: "(tables=<-) => tables |> mean(column:column)",
											Start: ast.Position{
												Column: 26,
												Line:   255,
											},
										},
									},
									Body: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   255,
													},
													File:   "universe.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 41,
														Line:   255,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 70,
													Line:   255,
												},
												File:   "universe.flux",
												Source: "tables |> mean(column:column)",
												Start: ast.Position{
													Column: 41,
													Line:   255,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 69,
															Line:   255,
														},
														File:   "universe.flux",
														Source: "column:column",
														Start: ast.Position{
															Column: 56,
															Line:   255,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 69,
																Line:   255,
															},
															File:   "universe.flux",
															Source: "column:column",
															Start: ast.Position{
																Column: 56,
																Line:   255,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 62,
																	Line:   255,
																},
																File:   "universe.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 56,
																	Line:   255,
																},
															},
														},
														Name: "column",
													},
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 69,
																	Line:   255,
																},
																File:   "universe.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 63,
																	Line:   255,
																},
															},
														},
														Name: "column",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 70,
														Line:   255,
													},
													File:   "universe.flux",
													Source: "mean(column:column)",
													Start: ast.Position{
														Column: 51,
														Line:   255,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   255,
														},
														File:   "universe.flux",
														Source: "mean",
														Start: ast.Position{
															Column: 51,
															Line:   255,
														},
													},
												},
												Name: "mean",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   255,
												},
												File:   "universe.flux",
												Source: "tables=<-",
												Start: ast.Position{
													Column: 27,
													Line:   255,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   255,
													},
													File:   "universe.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 27,
														Line:   255,
													},
												},
											},
											Name: "tables",
										},
										Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   255,
												},
												File:   "universe.flux",
												Source: "<-",
												Start: ast.Position{
													Column: 34,
													Line:   255,
												},
											},
										}},
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   256,
										},
										File:   "universe.flux",
										Source: "_sortLimit: bottom",
										Start: ast.Position{
											Column: 17,
											Line:   256,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   256,
											},
											File:   "universe.flux",
											Source: "_sortLimit",
											Start: ast.Position{
												Column: 17,
												Line:   256,
											},
										},
									},
									Name: "_sortLimit",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   256,
											},
											File:   "universe.flux",
											Source: "bottom",
											Start: ast.Position{
												Column: 29,
												Line:   256,
											},
										},
									},
									Name: "bottom",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   257,
								},
								File:   "universe.flux",
								Source: "_highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> mean(column:column),\n                _sortLimit: bottom,\n            )",
								Start: ast.Position{
									Column: 12,
									Line:   251,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   251,
									},
									File:   "universe.flux",
									Source: "_highestOrLowest",
									Start: ast.Position{
										Column: 12,
										Line:   251,
									},
								},
							},
							Name: "_highestOrLowest",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   249,
							},
							File:   "universe.flux",
							Source: "n",
							Start: ast.Position{
								Column: 18,
								Line:   249,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   249,
								},
								File:   "universe.flux",
								Source: "n",
								Start: ast.Position{
									Column: 18,
									Line:   249,
								},
							},
						},
						Name: "n",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   249,
							},
							File:   "universe.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 21,
								Line:   249,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   249,
								},
								File:   "universe.flux",
								Source: "column",
								Start: ast.Position{
									Column: 21,
									Line:   249,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   249,
								},
								File:   "universe.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 28,
									Line:   249,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 53,
								Line:   249,
							},
							File:   "universe.flux",
							Source: "groupColumns=[]",
							Start: ast.Position{
								Column: 38,
								Line:   249,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   249,
								},
								File:   "universe.flux",
								Source: "groupColumns",
								Start: ast.Position{
									Column: 38,
									Line:   249,
								},
							},
						},
						Name: "groupColumns",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   249,
								},
								File:   "universe.flux",
								Source: "[]",
								Start: ast.Position{
									Column: 51,
									Line:   249,
								},
							},
						},
						Elements: []ast.Expression{},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 64,
								Line:   249,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 55,
								Line:   249,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   249,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 55,
									Line:   249,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 64,
								Line:   249,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 62,
								Line:   249,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   268,
					},
					File:   "universe.flux",
					Source: "lowestCurrent = (n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> last(column:column),\n                _sortLimit: bottom,\n            )",
					Start: ast.Position{
						Column: 1,
						Line:   260,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   260,
						},
						File:   "universe.flux",
						Source: "lowestCurrent",
						Start: ast.Position{
							Column: 1,
							Line:   260,
						},
					},
				},
				Name: "lowestCurrent",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   268,
						},
						File:   "universe.flux",
						Source: "(n, column=\"_value\", groupColumns=[], tables=<-) =>\n    tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> last(column:column),\n                _sortLimit: bottom,\n            )",
						Start: ast.Position{
							Column: 17,
							Line:   260,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   261,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   261,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   268,
							},
							File:   "universe.flux",
							Source: "tables\n        |> _highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> last(column:column),\n                _sortLimit: bottom,\n            )",
							Start: ast.Position{
								Column: 5,
								Line:   261,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   267,
									},
									File:   "universe.flux",
									Source: "n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> last(column:column),\n                _sortLimit: bottom",
									Start: ast.Position{
										Column: 17,
										Line:   263,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   263,
										},
										File:   "universe.flux",
										Source: "n:n",
										Start: ast.Position{
											Column: 17,
											Line:   263,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   263,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 17,
												Line:   263,
											},
										},
									},
									Name: "n",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   263,
											},
											File:   "universe.flux",
											Source: "n",
											Start: ast.Position{
												Column: 19,
												Line:   263,
											},
										},
									},
									Name: "n",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   264,
										},
										File:   "universe.flux",
										Source: "column:column",
										Start: ast.Position{
											Column: 17,
											Line:   264,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   264,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 17,
												Line:   264,
											},
										},
									},
									Name: "column",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   264,
											},
											File:   "universe.flux",
											Source: "column",
											Start: ast.Position{
												Column: 24,
												Line:   264,
											},
										},
									},
									Name: "column",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   265,
										},
										File:   "universe.flux",
										Source: "groupColumns:groupColumns",
										Start: ast.Position{
											Column: 17,
											Line:   265,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   265,
											},
											File:   "universe.flux",
											Source: "groupColumns",
											Start: ast.Position{
												Column: 17,
												Line:   265,
											},
										},
									},
									Name: "groupColumns",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   265,
											},
											File:   "universe.flux",
											Source: "groupColumns",
											Start: ast.Position{
												Column: 30,
												Line:   265,
											},
										},
									},
									Name: "groupColumns",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   266,
										},
										File:   "universe.flux",
										Source: "reducer: (tables=<-) => tables |> last(column:column)",
										Start: ast.Position{
											Column: 17,
											Line:   266,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   266,
											},
											File:   "universe.flux",
											Source: "reducer",
											Start: ast.Position{
												Column: 17,
												Line:   266,
											},
										},
									},
									Name: "reducer",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 70,
												Line:   266,
											},
											File:   "universe.flux",
											Source: "(tables=<-) => tables |> last(column:column)",
											Start: ast.Position{
												Column: 26,
												Line:   266,
											},
										},
									},
									Body: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   266,
													},
													File:   "universe.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 41,
														Line:   266,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 70,
													Line:   266,
												},
												File:   "universe.flux",
												Source: "tables |> last(column:column)",
												Start: ast.Position{
													Column: 41,
													Line:   266,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 69,
															Line:   266,
														},
														File:   "universe.flux",
														Source: "column:column",
														Start: ast.Position{
															Column: 56,
															Line:   266,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 69,
																Line:   266,
															},
															File:   "universe.flux",
															Source: "column:column",
															Start: ast.Position{
																Column: 56,
																Line:   266,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 62,
																	Line:   266,
																},
																File:   "universe.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 56,
																	Line:   266,
																},
															},
														},
														Name: "column",
													},
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 69,
																	Line:   266,
																},
																File:   "universe.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 63,
																	Line:   266,
																},
															},
														},
														Name: "column",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 70,
														Line:   266,
													},
													File:   "universe.flux",
													Source: "last(column:column)",
													Start: ast.Position{
														Column: 51,
														Line:   266,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   266,
														},
														File:   "universe.flux",
														Source: "last",
														Start: ast.Position{
															Column: 51,
															Line:   266,
														},
													},
												},
												Name: "last",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   266,
												},
												File:   "universe.flux",
												Source: "tables=<-",
												Start: ast.Position{
													Column: 27,
													Line:   266,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   266,
													},
													File:   "universe.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 27,
														Line:   266,
													},
												},
											},
											Name: "tables",
										},
										Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   266,
												},
												File:   "universe.flux",
												Source: "<-",
												Start: ast.Position{
													Column: 34,
													Line:   266,
												},
											},
										}},
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   267,
										},
										File:   "universe.flux",
										Source: "_sortLimit: bottom",
										Start: ast.Position{
											Column: 17,
											Line:   267,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   267,
											},
											File:   "universe.flux",
											Source: "_sortLimit",
											Start: ast.Position{
												Column: 17,
												Line:   267,
											},
										},
									},
									Name: "_sortLimit",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   267,
											},
											File:   "universe.flux",
											Source: "bottom",
											Start: ast.Position{
												Column: 29,
												Line:   267,
											},
										},
									},
									Name: "bottom",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   268,
								},
								File:   "universe.flux",
								Source: "_highestOrLowest(\n                n:n,\n                column:column,\n                groupColumns:groupColumns,\n                reducer: (tables=<-) => tables |> last(column:column),\n                _sortLimit: bottom,\n            )",
								Start: ast.Position{
									Column: 12,
									Line:   262,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   262,
									},
									File:   "universe.flux",
									Source: "_highestOrLowest",
									Start: ast.Position{
										Column: 12,
										Line:   262,
									},
								},
							},
							Name: "_highestOrLowest",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   260,
							},
							File:   "universe.flux",
							Source: "n",
							Start: ast.Position{
								Column: 18,
								Line:   260,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   260,
								},
								File:   "universe.flux",
								Source: "n",
								Start: ast.Position{
									Column: 18,
									Line:   260,
								},
							},
						},
						Name: "n",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   260,
							},
							File:   "universe.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 21,
								Line:   260,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   260,
								},
								File:   "universe.flux",
								Source: "column",
								Start: ast.Position{
									Column: 21,
									Line:   260,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   260,
								},
								File:   "universe.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 28,
									Line:   260,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 53,
								Line:   260,
							},
							File:   "universe.flux",
							Source: "groupColumns=[]",
							Start: ast.Position{
								Column: 38,
								Line:   260,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   260,
								},
								File:   "universe.flux",
								Source: "groupColumns",
								Start: ast.Position{
									Column: 38,
									Line:   260,
								},
							},
						},
						Name: "groupColumns",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   260,
								},
								File:   "universe.flux",
								Source: "[]",
								Start: ast.Position{
									Column: 51,
									Line:   260,
								},
							},
						},
						Elements: []ast.Expression{},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 64,
								Line:   260,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 55,
								Line:   260,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   260,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 55,
									Line:   260,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 64,
								Line:   260,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 62,
								Line:   260,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 30,
						Line:   278,
					},
					File:   "universe.flux",
					Source: "timedMovingAverage = (every, period, column=\"_value\", tables=<-) =>\n    tables\n        |> window(every: every, period: period)\n        |> mean(column:column)\n        |> duplicate(column: \"_stop\", as: \"_time\")\n        |> window(every: inf)",
					Start: ast.Position{
						Column: 1,
						Line:   273,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   273,
						},
						File:   "universe.flux",
						Source: "timedMovingAverage",
						Start: ast.Position{
							Column: 1,
							Line:   273,
						},
					},
				},
				Name: "timedMovingAverage",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 30,
							Line:   278,
						},
						File:   "universe.flux",
						Source: "(every, period, column=\"_value\", tables=<-) =>\n    tables\n        |> window(every: every, period: period)\n        |> mean(column:column)\n        |> duplicate(column: \"_stop\", as: \"_time\")\n        |> window(every: inf)",
						Start: ast.Position{
							Column: 22,
							Line:   273,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   274,
											},
											File:   "universe.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 5,
												Line:   274,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   275,
										},
										File:   "universe.flux",
										Source: "tables\n        |> window(every: every, period: period)",
										Start: ast.Position{
											Column: 5,
											Line:   274,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   275,
												},
												File:   "universe.flux",
												Source: "every: every, period: period",
												Start: ast.Position{
													Column: 19,
													Line:   275,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   275,
													},
													File:   "universe.flux",
													Source: "every: every",
													Start: ast.Position{
														Column: 19,
														Line:   275,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   275,
														},
														File:   "universe.flux",
														Source: "every",
														Start: ast.Position{
															Column: 19,
															Line:   275,
														},
													},
												},
												Name: "every",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   275,
														},
														File:   "universe.flux",
														Source: "every",
														Start: ast.Position{
															Column: 26,
															Line:   275,
														},
													},
												},
												Name: "every",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   275,
													},
													File:   "universe.flux",
													Source: "period: period",
													Start: ast.Position{
														Column: 33,
														Line:   275,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 39,
															Line:   275,
														},
														File:   "universe.flux",
														Source: "period",
														Start: ast.Position{
															Column: 33,
															Line:   275,
														},
													},
												},
												Name: "period",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   275,
														},
														File:   "universe.flux",
														Source: "period",
														Start: ast.Position{
															Column: 41,
															Line:   275,
														},
													},
												},
												Name: "period",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   275,
											},
											File:   "universe.flux",
											Source: "window(every: every, period: period)",
											Start: ast.Position{
												Column: 12,
												Line:   275,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   275,
												},
												File:   "universe.flux",
												Source: "window",
												Start: ast.Position{
													Column: 12,
													Line:   275,
												},
											},
										},
										Name: "window",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   276,
									},
									File:   "universe.flux",
									Source: "tables\n        |> window(every: every, period: period)\n        |> mean(column:column)",
									Start: ast.Position{
										Column: 5,
										Line:   274,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   276,
											},
											File:   "universe.flux",
											Source: "column:column",
											Start: ast.Position{
												Column: 17,
												Line:   276,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   276,
												},
												File:   "universe.flux",
												Source: "column:column",
												Start: ast.Position{
													Column: 17,
													Line:   276,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   276,
													},
													File:   "universe.flux",
													Source: "column",
													Start: ast.Position{
														Column: 17,
														Line:   276,
													},
												},
											},
											Name: "column",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   276,
													},
													File:   "universe.flux",
													Source: "column",
													Start: ast.Position{
														Column: 24,
														Line:   276,
													},
												},
											},
											Name: "column",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   276,
										},
										File:   "universe.flux",
										Source: "mean(column:column)",
										Start: ast.Position{
											Column: 12,
											Line:   276,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   276,
											},
											File:   "universe.flux",
											Source: "mean",
											Start: ast.Position{
												Column: 12,
												Line:   276,
											},
										},
									},
									Name: "mean",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   277,
								},
								File:   "universe.flux",
								Source: "tables\n        |> window(every: every, period: period)\n        |> mean(column:column)\n        |> duplicate(column: \"_stop\", as: \"_time\")",
								Start: ast.Position{
									Column: 5,
									Line:   274,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   277,
										},
										File:   "universe.flux",
										Source: "column: \"_stop\", as: \"_time\"",
										Start: ast.Position{
											Column: 22,
											Line:   277,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   277,
											},
											File:   "universe.flux",
											Source: "column: \"_stop\"",
											Start: ast.Position{
												Column: 22,
												Line:   277,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   277,
												},
												File:   "universe.flux",
												Source: "column",
												Start: ast.Position{
													Column: 22,
													Line:   277,
												},
											},
										},
										Name: "column",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   277,
												},
												File:   "universe.flux",
												Source: "\"_stop\"",
												Start: ast.Position{
													Column: 30,
													Line:   277,
												},
											},
										},
										Value: "_stop",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   277,
											},
											File:   "universe.flux",
											Source: "as: \"_time\"",
											Start: ast.Position{
												Column: 39,
												Line:   277,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   277,
												},
												File:   "universe.flux",
												Source: "as",
												Start: ast.Position{
													Column: 39,
													Line:   277,
												},
											},
										},
										Name: "as",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   277,
												},
												File:   "universe.flux",
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 43,
													Line:   277,
												},
											},
										},
										Value: "_time",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   277,
									},
									File:   "universe.flux",
									Source: "duplicate(column: \"_stop\", as: \"_time\")",
									Start: ast.Position{
										Column: 12,
										Line:   277,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   277,
										},
										File:   "universe.flux",
										Source: "duplicate",
										Start: ast.Position{
											Column: 12,
											Line:   277,
										},
									},
								},
								Name: "duplicate",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   278,
							},
							File:   "universe.flux",
							Source: "tables\n        |> window(every: every, period: period)\n        |> mean(column:column)\n        |> duplicate(column: \"_stop\", as: \"_time\")\n        |> window(every: inf)",
							Start: ast.Position{
								Column: 5,
								Line:   274,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   278,
									},
									File:   "universe.flux",
									Source: "every: inf",
									Start: ast.Position{
										Column: 19,
										Line:   278,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   278,
										},
										File:   "universe.flux",
										Source: "every: inf",
										Start: ast.Position{
											Column: 19,
											Line:   278,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   278,
											},
											File:   "universe.flux",
											Source: "every",
											Start: ast.Position{
												Column: 19,
												Line:   278,
											},
										},
									},
									Name: "every",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   278,
											},
											File:   "universe.flux",
											Source: "inf",
											Start: ast.Position{
												Column: 26,
												Line:   278,
											},
										},
									},
									Name: "inf",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   278,
								},
								File:   "universe.flux",
								Source: "window(every: inf)",
								Start: ast.Position{
									Column: 12,
									Line:   278,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   278,
									},
									File:   "universe.flux",
									Source: "window",
									Start: ast.Position{
										Column: 12,
										Line:   278,
									},
								},
							},
							Name: "window",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   273,
							},
							File:   "universe.flux",
							Source: "every",
							Start: ast.Position{
								Column: 23,
								Line:   273,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   273,
								},
								File:   "universe.flux",
								Source: "every",
								Start: ast.Position{
									Column: 23,
									Line:   273,
								},
							},
						},
						Name: "every",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   273,
							},
							File:   "universe.flux",
							Source: "period",
							Start: ast.Position{
								Column: 30,
								Line:   273,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   273,
								},
								File:   "universe.flux",
								Source: "period",
								Start: ast.Position{
									Column: 30,
									Line:   273,
								},
							},
						},
						Name: "period",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 53,
								Line:   273,
							},
							File:   "universe.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 38,
								Line:   273,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   273,
								},
								File:   "universe.flux",
								Source: "column",
								Start: ast.Position{
									Column: 38,
									Line:   273,
								},
							},
						},
						Name: "column",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   273,
								},
								File:   "universe.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 45,
									Line:   273,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 64,
								Line:   273,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 55,
								Line:   273,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   273,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 55,
									Line:   273,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 64,
								Line:   273,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 62,
								Line:   273,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 38,
						Line:   291,
					},
					File:   "universe.flux",
					Source: "doubleEMA = (n, tables=<-) =>\n    tables\n          |> exponentialMovingAverage(n:n)\n          |> duplicate(column:\"_value\", as:\"__ema\")\n          |> exponentialMovingAverage(n:n)\n          |> map(fn: (r) => ({r with _value: 2.0*r.__ema - r._value}))\n          |> drop(columns: [\"__ema\"])",
					Start: ast.Position{
						Column: 1,
						Line:   285,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   285,
						},
						File:   "universe.flux",
						Source: "doubleEMA",
						Start: ast.Position{
							Column: 1,
							Line:   285,
						},
					},
				},
				Name: "doubleEMA",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 38,
							Line:   291,
						},
						File:   "universe.flux",
						Source: "(n, tables=<-) =>\n    tables\n          |> exponentialMovingAverage(n:n)\n          |> duplicate(column:\"_value\", as:\"__ema\")\n          |> exponentialMovingAverage(n:n)\n          |> map(fn: (r) => ({r with _value: 2.0*r.__ema - r._value}))\n          |> drop(columns: [\"__ema\"])",
						Start: ast.Position{
							Column: 13,
							Line:   285,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   286,
												},
												File:   "universe.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 5,
													Line:   286,
												},
											},
										},
										Name: "tables",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   287,
											},
											File:   "universe.flux",
											Source: "tables\n          |> exponentialMovingAverage(n:n)",
											Start: ast.Position{
												Column: 5,
												Line:   286,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   287,
													},
													File:   "universe.flux",
													Source: "n:n",
													Start: ast.Position{
														Column: 39,
														Line:   287,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   287,
														},
														File:   "universe.flux",
														Source: "n:n",
														Start: ast.Position{
															Column: 39,
															Line:   287,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   287,
															},
															File:   "universe.flux",
															Source: "n",
															Start: ast.Position{
																Column: 39,
																Line:   287,
															},
														},
													},
													Name: "n",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   287,
															},
															File:   "universe.flux",
															Source: "n",
															Start: ast.Position{
																Column: 41,
																Line:   287,
															},
														},
													},
													Name: "n",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   287,
												},
												File:   "universe.flux",
												Source: "exponentialMovingAverage(n:n)",
												Start: ast.Position{
													Column: 14,
													Line:   287,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   287,
													},
													File:   "universe.flux",
													Source: "exponentialMovingAverage",
													Start: ast.Position{
														Column: 14,
														Line:   287,
													},
												},
											},
											Name: "exponentialMovingAverage",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   288,
										},
										File:   "universe.flux",
										Source: "tables\n          |> exponentialMovingAverage(n:n)\n          |> duplicate(column:\"_value\", as:\"__ema\")",
										Start: ast.Position{
											Column: 5,
											Line:   286,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   288,
												},
												File:   "universe.flux",
												Source: "column:\"_value\", as:\"__ema\"",
												Start: ast.Position{
													Column: 24,
													Line:   288,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   288,
													},
													File:   "universe.flux",
													Source: "column:\"_value\"",
													Start: ast.Position{
														Column: 24,
														Line:   288,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   288,
														},
														File:   "universe.flux",
														Source: "column",
														Start: ast.Position{
															Column: 24,
															Line:   288,
														},
													},
												},
												Name: "column",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 39,
															Line:   288,
														},
														File:   "universe.flux",
														Source: "\"_value\"",
														Start: ast.Position{
															Column: 31,
															Line:   288,
														},
													},
												},
												Value: "_value",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   288,
													},
													File:   "universe.flux",
													Source: "as:\"__ema\"",
													Start: ast.Position{
														Column: 41,
														Line:   288,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   288,
														},
														File:   "universe.flux",
														Source: "as",
														Start: ast.Position{
															Column: 41,
															Line:   288,
														},
													},
												},
												Name: "as",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   288,
														},
														File:   "universe.flux",
														Source: "\"__ema\"",
														Start: ast.Position{
															Column: 44,
															Line:   288,
														},
													},
												},
												Value: "__ema",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 52,
												Line:   288,
											},
											File:   "universe.flux",
											Source: "duplicate(column:\"_value\", as:\"__ema\")",
											Start: ast.Position{
												Column: 14,
												Line:   288,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   288,
												},
												File:   "universe.flux",
												Source: "duplicate",
												Start: ast.Position{
													Column: 14,
													Line:   288,
												},
											},
										},
										Name: "duplicate",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   289,
									},
									File:   "universe.flux",
									Source: "tables\n          |> exponentialMovingAverage(n:n)\n          |> duplicate(column:\"_value\", as:\"__ema\")\n          |> exponentialMovingAverage(n:n)",
									Start: ast.Position{
										Column: 5,
										Line:   286,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   289,
											},
											File:   "universe.flux",
											Source: "n:n",
											Start: ast.Position{
												Column: 39,
												Line:   289,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   289,
												},
												File:   "universe.flux",
												Source: "n:n",
												Start: ast.Position{
													Column: 39,
													Line:   289,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   289,
													},
													File:   "universe.flux",
													Source: "n",
													Start: ast.Position{
														Column: 39,
														Line:   289,
													},
												},
											},
											Name: "n",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   289,
													},
													File:   "universe.flux",
													Source: "n",
													Start: ast.Position{
														Column: 41,
														Line:   289,
													},
												},
											},
											Name: "n",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   289,
										},
										File:   "universe.flux",
										Source: "exponentialMovingAverage(n:n)",
										Start: ast.Position{
											Column: 14,
											Line:   289,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   289,
											},
											File:   "universe.flux",
											Source: "exponentialMovingAverage",
											Start: ast.Position{
												Column: 14,
												Line:   289,
											},
										},
									},
									Name: "exponentialMovingAverage",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   290,
								},
								File:   "universe.flux",
								Source: "tables\n          |> exponentialMovingAverage(n:n)\n          |> duplicate(column:\"_value\", as:\"__ema\")\n          |> exponentialMovingAverage(n:n)\n          |> map(fn: (r) => ({r with _value: 2.0*r.__ema - r._value}))",
								Start: ast.Position{
									Column: 5,
									Line:   286,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   290,
										},
										File:   "universe.flux",
										Source: "fn: (r) => ({r with _value: 2.0*r.__ema - r._value})",
										Start: ast.Position{
											Column: 18,
											Line:   290,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 70,
												Line:   290,
											},
											File:   "universe.flux",
											Source: "fn: (r) => ({r with _value: 2.0*r.__ema - r._value})",
											Start: ast.Position{
												Column: 18,
												Line:   290,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   290,
												},
												File:   "universe.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 18,
													Line:   290,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 70,
													Line:   290,
												},
												File:   "universe.flux",
												Source: "(r) => ({r with _value: 2.0*r.__ema - r._value})",
												Start: ast.Position{
													Column: 22,
													Line:   290,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 70,
														Line:   290,
													},
													File:   "universe.flux",
													Source: "({r with _value: 2.0*r.__ema - r._value})",
													Start: ast.Position{
														Column: 29,
														Line:   290,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 69,
															Line:   290,
														},
														File:   "universe.flux",
														Source: "{r with _value: 2.0*r.__ema - r._value}",
														Start: ast.Position{
															Column: 30,
															Line:   290,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 68,
																Line:   290,
															},
															File:   "universe.flux",
															Source: "_value: 2.0*r.__ema - r._value",
															Start: ast.Position{
																Column: 38,
																Line:   290,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   290,
																},
																File:   "universe.flux",
																Source: "_value",
																Start: ast.Position{
																	Column: 38,
																	Line:   290,
																},
															},
														},
														Name: "_value",
													},
													Value: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 68,
																	Line:   290,
																},
																File:   "universe.flux",
																Source: "2.0*r.__ema - r._value",
																Start: ast.Position{
																	Column: 46,
																	Line:   290,
																},
															},
														},
														Left: &ast.BinaryExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 57,
																		Line:   290,
																	},
																	File:   "universe.flux",
																	Source: "2.0*r.__ema",
																	Start: ast.Position{
																		Column: 46,
																		Line:   290,
																	},
																},
															},
															Left: &ast.FloatLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 49,
																			Line:   290,
																		},
																		File:   "universe.flux",
																		Source: "2.0",
																		Start: ast.Position{
																			Column: 46,
																			Line:   290,
																		},
																	},
																},
																Value: 2.0,
															},
															Operator: 1,
															Right: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 57,
																			Line:   290,
																		},
																		File:   "universe.flux",
																		Source: "r.__ema",
																		Start: ast.Position{
																			Column: 50,
																			Line:   290,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 51,
																				Line:   290,
																			},
																			File:   "universe.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 50,
																				Line:   290,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 57,
																				Line:   290,
																			},
																			File:   "universe.flux",
																			Source: "__ema",
																			Start: ast.Position{
																				Column: 52,
																				Line:   290,
																			},
																		},
																	},
																	Name: "__ema",
																},
															},
														},
														Operator: 6,
														Right: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 68,
																		Line:   290,
																	},
																	File:   "universe.flux",
																	Source: "r._value",
																	Start: ast.Position{
																		Column: 60,
																		Line:   290,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 61,
																			Line:   290,
																		},
																		File:   "universe.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 60,
																			Line:   290,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 68,
																			Line:   290,
																		},
																		File:   "universe.flux",
																		Source: "_value",
																		Start: ast.Position{
																			Column: 62,
																			Line:   290,
																		},
																	},
																},
																Name: "_value",
															},
														},
													},
												}},
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 32,
																Line:   290,
															},
															File:   "universe.flux",
															Source: "r",
															Start: ast.Position{
																Column: 31,
																Line:   290,
															},
														},
													},
													Name: "r",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   290,
													},
													File:   "universe.flux",
													Source: "r",
													Start: ast.Position{
														Column: 23,
														Line:   290,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   290,
														},
														File:   "universe.flux",
														Source: "r",
														Start: ast.Position{
															Column: 23,
															Line:   290,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   290,
									},
									File:   "universe.flux",
									Source: "map(fn: (r) => ({r with _value: 2.0*r.__ema - r._value}))",
									Start: ast.Position{
										Column: 14,
										Line:   290,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   290,
										},
										File:   "universe.flux",
										Source: "map",
										Start: ast.Position{
											Column: 14,
											Line:   290,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 38,
								Line:   291,
							},
							File:   "universe.flux",
							Source: "tables\n          |> exponentialMovingAverage(n:n)\n          |> duplicate(column:\"_value\", as:\"__ema\")\n          |> exponentialMovingAverage(n:n)\n          |> map(fn: (r) => ({r with _value: 2.0*r.__ema - r._value}))\n          |> drop(columns: [\"__ema\"])",
							Start: ast.Position{
								Column: 5,
								Line:   286,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   291,
									},
									File:   "universe.flux",
									Source: "columns: [\"__ema\"]",
									Start: ast.Position{
										Column: 19,
										Line:   291,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   291,
										},
										File:   "universe.flux",
										Source: "columns: [\"__ema\"]",
										Start: ast.Position{
											Column: 19,
											Line:   291,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   291,
											},
											File:   "universe.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 19,
												Line:   291,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   291,
											},
											File:   "universe.flux",
											Source: "[\"__ema\"]",
											Start: ast.Position{
												Column: 28,
												Line:   291,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   291,
												},
												File:   "universe.flux",
												Source: "\"__ema\"",
												Start: ast.Position{
													Column: 29,
													Line:   291,
												},
											},
										},
										Value: "__ema",
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   291,
								},
								File:   "universe.flux",
								Source: "drop(columns: [\"__ema\"])",
								Start: ast.Position{
									Column: 14,
									Line:   291,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   291,
									},
									File:   "universe.flux",
									Source: "drop",
									Start: ast.Position{
										Column: 14,
										Line:   291,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   285,
							},
							File:   "universe.flux",
							Source: "n",
							Start: ast.Position{
								Column: 14,
								Line:   285,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   285,
								},
								File:   "universe.flux",
								Source: "n",
								Start: ast.Position{
									Column: 14,
									Line:   285,
								},
							},
						},
						Name: "n",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   285,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 17,
								Line:   285,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   285,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 17,
									Line:   285,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   285,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 24,
								Line:   285,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 41,
						Line:   307,
					},
					File:   "universe.flux",
					Source: "tripleEMA = (n, tables=<-) =>\n\ttables\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema1\")\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema2\")\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> map(fn: (r) => ({r with _value: 3.0*r.__ema1 - 3.0*r.__ema2 + r._value}))\n\t\t|> drop(columns: [\"__ema1\", \"__ema2\"])",
					Start: ast.Position{
						Column: 1,
						Line:   299,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   299,
						},
						File:   "universe.flux",
						Source: "tripleEMA",
						Start: ast.Position{
							Column: 1,
							Line:   299,
						},
					},
				},
				Name: "tripleEMA",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 41,
							Line:   307,
						},
						File:   "universe.flux",
						Source: "(n, tables=<-) =>\n\ttables\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema1\")\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema2\")\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> map(fn: (r) => ({r with _value: 3.0*r.__ema1 - 3.0*r.__ema2 + r._value}))\n\t\t|> drop(columns: [\"__ema1\", \"__ema2\"])",
						Start: ast.Position{
							Column: 13,
							Line:   299,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 8,
															Line:   300,
														},
														File:   "universe.flux",
														Source: "tables",
														Start: ast.Position{
															Column: 2,
															Line:   300,
														},
													},
												},
												Name: "tables",
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   301,
													},
													File:   "universe.flux",
													Source: "tables\n\t\t|> exponentialMovingAverage(n:n)",
													Start: ast.Position{
														Column: 2,
														Line:   300,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 34,
																Line:   301,
															},
															File:   "universe.flux",
															Source: "n:n",
															Start: ast.Position{
																Column: 31,
																Line:   301,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 34,
																	Line:   301,
																},
																File:   "universe.flux",
																Source: "n:n",
																Start: ast.Position{
																	Column: 31,
																	Line:   301,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 32,
																		Line:   301,
																	},
																	File:   "universe.flux",
																	Source: "n",
																	Start: ast.Position{
																		Column: 31,
																		Line:   301,
																	},
																},
															},
															Name: "n",
														},
														Value: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 34,
																		Line:   301,
																	},
																	File:   "universe.flux",
																	Source: "n",
																	Start: ast.Position{
																		Column: 33,
																		Line:   301,
																	},
																},
															},
															Name: "n",
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 35,
															Line:   301,
														},
														File:   "universe.flux",
														Source: "exponentialMovingAverage(n:n)",
														Start: ast.Position{
															Column: 6,
															Line:   301,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 30,
																Line:   301,
															},
															File:   "universe.flux",
															Source: "exponentialMovingAverage",
															Start: ast.Position{
																Column: 6,
																Line:   301,
															},
														},
													},
													Name: "exponentialMovingAverage",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   302,
												},
												File:   "universe.flux",
												Source: "tables\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema1\")",
												Start: ast.Position{
													Column: 2,
													Line:   300,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   302,
														},
														File:   "universe.flux",
														Source: "column:\"_value\", as:\"__ema1\"",
														Start: ast.Position{
															Column: 16,
															Line:   302,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   302,
															},
															File:   "universe.flux",
															Source: "column:\"_value\"",
															Start: ast.Position{
																Column: 16,
																Line:   302,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   302,
																},
																File:   "universe.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 16,
																	Line:   302,
																},
															},
														},
														Name: "column",
													},
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   302,
																},
																File:   "universe.flux",
																Source: "\"_value\"",
																Start: ast.Position{
																	Column: 23,
																	Line:   302,
																},
															},
														},
														Value: "_value",
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   302,
															},
															File:   "universe.flux",
															Source: "as:\"__ema1\"",
															Start: ast.Position{
																Column: 33,
																Line:   302,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 35,
																	Line:   302,
																},
																File:   "universe.flux",
																Source: "as",
																Start: ast.Position{
																	Column: 33,
																	Line:   302,
																},
															},
														},
														Name: "as",
													},
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   302,
																},
																File:   "universe.flux",
																Source: "\"__ema1\"",
																Start: ast.Position{
																	Column: 36,
																	Line:   302,
																},
															},
														},
														Value: "__ema1",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   302,
													},
													File:   "universe.flux",
													Source: "duplicate(column:\"_value\", as:\"__ema1\")",
													Start: ast.Position{
														Column: 6,
														Line:   302,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   302,
														},
														File:   "universe.flux",
														Source: "duplicate",
														Start: ast.Position{
															Column: 6,
															Line:   302,
														},
													},
												},
												Name: "duplicate",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   303,
											},
											File:   "universe.flux",
											Source: "tables\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema1\")\n\t\t|> exponentialMovingAverage(n:n)",
											Start: ast.Position{
												Column: 2,
												Line:   300,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   303,
													},
													File:   "universe.flux",
													Source: "n:n",
													Start: ast.Position{
														Column: 31,
														Line:   303,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   303,
														},
														File:   "universe.flux",
														Source: "n:n",
														Start: ast.Position{
															Column: 31,
															Line:   303,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 32,
																Line:   303,
															},
															File:   "universe.flux",
															Source: "n",
															Start: ast.Position{
																Column: 31,
																Line:   303,
															},
														},
													},
													Name: "n",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 34,
																Line:   303,
															},
															File:   "universe.flux",
															Source: "n",
															Start: ast.Position{
																Column: 33,
																Line:   303,
															},
														},
													},
													Name: "n",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   303,
												},
												File:   "universe.flux",
												Source: "exponentialMovingAverage(n:n)",
												Start: ast.Position{
													Column: 6,
													Line:   303,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   303,
													},
													File:   "universe.flux",
													Source: "exponentialMovingAverage",
													Start: ast.Position{
														Column: 6,
														Line:   303,
													},
												},
											},
											Name: "exponentialMovingAverage",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   304,
										},
										File:   "universe.flux",
										Source: "tables\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema1\")\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema2\")",
										Start: ast.Position{
											Column: 2,
											Line:   300,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   304,
												},
												File:   "universe.flux",
												Source: "column:\"_value\", as:\"__ema2\"",
												Start: ast.Position{
													Column: 16,
													Line:   304,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   304,
													},
													File:   "universe.flux",
													Source: "column:\"_value\"",
													Start: ast.Position{
														Column: 16,
														Line:   304,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   304,
														},
														File:   "universe.flux",
														Source: "column",
														Start: ast.Position{
															Column: 16,
															Line:   304,
														},
													},
												},
												Name: "column",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   304,
														},
														File:   "universe.flux",
														Source: "\"_value\"",
														Start: ast.Position{
															Column: 23,
															Line:   304,
														},
													},
												},
												Value: "_value",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   304,
													},
													File:   "universe.flux",
													Source: "as:\"__ema2\"",
													Start: ast.Position{
														Column: 33,
														Line:   304,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 35,
															Line:   304,
														},
														File:   "universe.flux",
														Source: "as",
														Start: ast.Position{
															Column: 33,
															Line:   304,
														},
													},
												},
												Name: "as",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   304,
														},
														File:   "universe.flux",
														Source: "\"__ema2\"",
														Start: ast.Position{
															Column: 36,
															Line:   304,
														},
													},
												},
												Value: "__ema2",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   304,
											},
											File:   "universe.flux",
											Source: "duplicate(column:\"_value\", as:\"__ema2\")",
											Start: ast.Position{
												Column: 6,
												Line:   304,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   304,
												},
												File:   "universe.flux",
												Source: "duplicate",
												Start: ast.Position{
													Column: 6,
													Line:   304,
												},
											},
										},
										Name: "duplicate",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   305,
									},
									File:   "universe.flux",
									Source: "tables\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema1\")\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema2\")\n\t\t|> exponentialMovingAverage(n:n)",
									Start: ast.Position{
										Column: 2,
										Line:   300,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   305,
											},
											File:   "universe.flux",
											Source: "n:n",
											Start: ast.Position{
												Column: 31,
												Line:   305,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   305,
												},
												File:   "universe.flux",
												Source: "n:n",
												Start: ast.Position{
													Column: 31,
													Line:   305,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   305,
													},
													File:   "universe.flux",
													Source: "n",
													Start: ast.Position{
														Column: 31,
														Line:   305,
													},
												},
											},
											Name: "n",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   305,
													},
													File:   "universe.flux",
													Source: "n",
													Start: ast.Position{
														Column: 33,
														Line:   305,
													},
												},
											},
											Name: "n",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   305,
										},
										File:   "universe.flux",
										Source: "exponentialMovingAverage(n:n)",
										Start: ast.Position{
											Column: 6,
											Line:   305,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   305,
											},
											File:   "universe.flux",
											Source: "exponentialMovingAverage",
											Start: ast.Position{
												Column: 6,
												Line:   305,
											},
										},
									},
									Name: "exponentialMovingAverage",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 79,
									Line:   306,
								},
								File:   "universe.flux",
								Source: "tables\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema1\")\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema2\")\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> map(fn: (r) => ({r with _value: 3.0*r.__ema1 - 3.0*r.__ema2 + r._value}))",
								Start: ast.Position{
									Column: 2,
									Line:   300,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 78,
											Line:   306,
										},
										File:   "universe.flux",
										Source: "fn: (r) => ({r with _value: 3.0*r.__ema1 - 3.0*r.__ema2 + r._value})",
										Start: ast.Position{
											Column: 10,
											Line:   306,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 78,
												Line:   306,
											},
											File:   "universe.flux",
											Source: "fn: (r) => ({r with _value: 3.0*r.__ema1 - 3.0*r.__ema2 + r._value})",
											Start: ast.Position{
												Column: 10,
												Line:   306,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 12,
													Line:   306,
												},
												File:   "universe.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 10,
													Line:   306,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 78,
													Line:   306,
												},
												File:   "universe.flux",
												Source: "(r) => ({r with _value: 3.0*r.__ema1 - 3.0*r.__ema2 + r._value})",
												Start: ast.Position{
													Column: 14,
													Line:   306,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 78,
														Line:   306,
													},
													File:   "universe.flux",
													Source: "({r with _value: 3.0*r.__ema1 - 3.0*r.__ema2 + r._value})",
													Start: ast.Position{
														Column: 21,
														Line:   306,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 77,
															Line:   306,
														},
														File:   "universe.flux",
														Source: "{r with _value: 3.0*r.__ema1 - 3.0*r.__ema2 + r._value}",
														Start: ast.Position{
															Column: 22,
															Line:   306,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 76,
																Line:   306,
															},
															File:   "universe.flux",
															Source: "_value: 3.0*r.__ema1 - 3.0*r.__ema2 + r._value",
															Start: ast.Position{
																Column: 30,
																Line:   306,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   306,
																},
																File:   "universe.flux",
																Source: "_value",
																Start: ast.Position{
																	Column: 30,
																	Line:   306,
																},
															},
														},
														Name: "_value",
													},
													Value: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 76,
																	Line:   306,
																},
																File:   "universe.flux",
																Source: "3.0*r.__ema1 - 3.0*r.__ema2 + r._value",
																Start: ast.Position{
																	Column: 38,
																	Line:   306,
																},
															},
														},
														Left: &ast.BinaryExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 65,
																		Line:   306,
																	},
																	File:   "universe.flux",
																	Source: "3.0*r.__ema1 - 3.0*r.__ema2",
																	Start: ast.Position{
																		Column: 38,
																		Line:   306,
																	},
																},
															},
															Left: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 50,
																			Line:   306,
																		},
																		File:   "universe.flux",
																		Source: "3.0*r.__ema1",
																		Start: ast.Position{
																			Column: 38,
																			Line:   306,
																		},
																	},
																},
																Left: &ast.FloatLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 41,
																				Line:   306,
																			},
																			File:   "universe.flux",
																			Source: "3.0",
																			Start: ast.Position{
																				Column: 38,
																				Line:   306,
																			},
																		},
																	},
																	Value: 3.0,
																},
																Operator: 1,
																Right: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 50,
																				Line:   306,
																			},
																			File:   "universe.flux",
																			Source: "r.__ema1",
																			Start: ast.Position{
																				Column: 42,
																				Line:   306,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 43,
																					Line:   306,
																				},
																				File:   "universe.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 42,
																					Line:   306,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 50,
																					Line:   306,
																				},
																				File:   "universe.flux",
																				Source: "__ema1",
																				Start: ast.Position{
																					Column: 44,
																					Line:   306,
																				},
																			},
																		},
																		Name: "__ema1",
																	},
																},
															},
															Operator: 6,
															Right: &ast.BinaryExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 65,
																			Line:   306,
																		},
																		File:   "universe.flux",
																		Source: "3.0*r.__ema2",
																		Start: ast.Position{
																			Column: 53,
																			Line:   306,
																		},
																	},
																},
																Left: &ast.FloatLiteral{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 56,
																				Line:   306,
																			},
																			File:   "universe.flux",
																			Source: "3.0",
																			Start: ast.Position{
																				Column: 53,
																				Line:   306,
																			},
																		},
																	},
																	Value: 3.0,
																},
																Operator: 1,
																Right: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 65,
																				Line:   306,
																			},
																			File:   "universe.flux",
																			Source: "r.__ema2",
																			Start: ast.Position{
																				Column: 57,
																				Line:   306,
																			},
																		},
																	},
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 58,
																					Line:   306,
																				},
																				File:   "universe.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 57,
																					Line:   306,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 65,
																					Line:   306,
																				},
																				File:   "universe.flux",
																				Source: "__ema2",
																				Start: ast.Position{
																					Column: 59,
																					Line:   306,
																				},
																			},
																		},
																		Name: "__ema2",
																	},
																},
															},
														},
														Operator: 5,
														Right: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 76,
																		Line:   306,
																	},
																	File:   "universe.flux",
																	Source: "r._value",
																	Start: ast.Position{
																		Column: 68,
																		Line:   306,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 69,
																			Line:   306,
																		},
																		File:   "universe.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 68,
																			Line:   306,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 76,
																			Line:   306,
																		},
																		File:   "universe.flux",
																		Source: "_value",
																		Start: ast.Position{
																			Column: 70,
																			Line:   306,
																		},
																	},
																},
																Name: "_value",
															},
														},
													},
												}},
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   306,
															},
															File:   "universe.flux",
															Source: "r",
															Start: ast.Position{
																Column: 23,
																Line:   306,
															},
														},
													},
													Name: "r",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   306,
													},
													File:   "universe.flux",
													Source: "r",
													Start: ast.Position{
														Column: 15,
														Line:   306,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 16,
															Line:   306,
														},
														File:   "universe.flux",
														Source: "r",
														Start: ast.Position{
															Column: 15,
															Line:   306,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 79,
										Line:   306,
									},
									File:   "universe.flux",
									Source: "map(fn: (r) => ({r with _value: 3.0*r.__ema1 - 3.0*r.__ema2 + r._value}))",
									Start: ast.Position{
										Column: 6,
										Line:   306,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   306,
										},
										File:   "universe.flux",
										Source: "map",
										Start: ast.Position{
											Column: 6,
											Line:   306,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 41,
								Line:   307,
							},
							File:   "universe.flux",
							Source: "tables\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema1\")\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> duplicate(column:\"_value\", as:\"__ema2\")\n\t\t|> exponentialMovingAverage(n:n)\n\t\t|> map(fn: (r) => ({r with _value: 3.0*r.__ema1 - 3.0*r.__ema2 + r._value}))\n\t\t|> drop(columns: [\"__ema1\", \"__ema2\"])",
							Start: ast.Position{
								Column: 2,
								Line:   300,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   307,
									},
									File:   "universe.flux",
									Source: "columns: [\"__ema1\", \"__ema2\"]",
									Start: ast.Position{
										Column: 11,
										Line:   307,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   307,
										},
										File:   "universe.flux",
										Source: "columns: [\"__ema1\", \"__ema2\"]",
										Start: ast.Position{
											Column: 11,
											Line:   307,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   307,
											},
											File:   "universe.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 11,
												Line:   307,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   307,
											},
											File:   "universe.flux",
											Source: "[\"__ema1\", \"__ema2\"]",
											Start: ast.Position{
												Column: 20,
												Line:   307,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   307,
												},
												File:   "universe.flux",
												Source: "\"__ema1\"",
												Start: ast.Position{
													Column: 21,
													Line:   307,
												},
											},
										},
										Value: "__ema1",
									}, &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   307,
												},
												File:   "universe.flux",
												Source: "\"__ema2\"",
												Start: ast.Position{
													Column: 31,
													Line:   307,
												},
											},
										},
										Value: "__ema2",
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   307,
								},
								File:   "universe.flux",
								Source: "drop(columns: [\"__ema1\", \"__ema2\"])",
								Start: ast.Position{
									Column: 6,
									Line:   307,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   307,
									},
									File:   "universe.flux",
									Source: "drop",
									Start: ast.Position{
										Column: 6,
										Line:   307,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   299,
							},
							File:   "universe.flux",
							Source: "n",
							Start: ast.Position{
								Column: 14,
								Line:   299,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   299,
								},
								File:   "universe.flux",
								Source: "n",
								Start: ast.Position{
									Column: 14,
									Line:   299,
								},
							},
						},
						Name: "n",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   299,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 17,
								Line:   299,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   299,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 17,
									Line:   299,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   299,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 24,
								Line:   299,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 82,
						Line:   313,
					},
					File:   "universe.flux",
					Source: "truncateTimeColumn = (timeColumn=\"_time\", unit, tables=<-) =>\n    tables\n        |> map(fn:(r) => ({r with _time: date.truncate(t: r._time, unit: unit)}))",
					Start: ast.Position{
						Column: 1,
						Line:   311,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   311,
						},
						File:   "universe.flux",
						Source: "truncateTimeColumn",
						Start: ast.Position{
							Column: 1,
							Line:   311,
						},
					},
				},
				Name: "truncateTimeColumn",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 82,
							Line:   313,
						},
						File:   "universe.flux",
						Source: "(timeColumn=\"_time\", unit, tables=<-) =>\n    tables\n        |> map(fn:(r) => ({r with _time: date.truncate(t: r._time, unit: unit)}))",
						Start: ast.Position{
							Column: 22,
							Line:   311,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   312,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   312,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 82,
								Line:   313,
							},
							File:   "universe.flux",
							Source: "tables\n        |> map(fn:(r) => ({r with _time: date.truncate(t: r._time, unit: unit)}))",
							Start: ast.Position{
								Column: 5,
								Line:   312,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 81,
										Line:   313,
									},
									File:   "universe.flux",
									Source: "fn:(r) => ({r with _time: date.truncate(t: r._time, unit: unit)})",
									Start: ast.Position{
										Column: 16,
										Line:   313,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 81,
											Line:   313,
										},
										File:   "universe.flux",
										Source: "fn:(r) => ({r with _time: date.truncate(t: r._time, unit: unit)})",
										Start: ast.Position{
											Column: 16,
											Line:   313,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   313,
											},
											File:   "universe.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 16,
												Line:   313,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 81,
												Line:   313,
											},
											File:   "universe.flux",
											Source: "(r) => ({r with _time: date.truncate(t: r._time, unit: unit)})",
											Start: ast.Position{
												Column: 19,
												Line:   313,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 81,
													Line:   313,
												},
												File:   "universe.flux",
												Source: "({r with _time: date.truncate(t: r._time, unit: unit)})",
												Start: ast.Position{
													Column: 26,
													Line:   313,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 80,
														Line:   313,
													},
													File:   "universe.flux",
													Source: "{r with _time: date.truncate(t: r._time, unit: unit)}",
													Start: ast.Position{
														Column: 27,
														Line:   313,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 79,
															Line:   313,
														},
														File:   "universe.flux",
														Source: "_time: date.truncate(t: r._time, unit: unit)",
														Start: ast.Position{
															Column: 35,
															Line:   313,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   313,
															},
															File:   "universe.flux",
															Source: "_time",
															Start: ast.Position{
																Column: 35,
																Line:   313,
															},
														},
													},
													Name: "_time",
												},
												Value: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 78,
																	Line:   313,
																},
																File:   "universe.flux",
																Source: "t: r._time, unit: unit",
																Start: ast.Position{
																	Column: 56,
																	Line:   313,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 66,
																		Line:   313,
																	},
																	File:   "universe.flux",
																	Source: "t: r._time",
																	Start: ast.Position{
																		Column: 56,
																		Line:   313,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 57,
																			Line:   313,
																		},
																		File:   "universe.flux",
																		Source: "t",
																		Start: ast.Position{
																			Column: 56,
																			Line:   313,
																		},
																	},
																},
																Name: "t",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 66,
																			Line:   313,
																		},
																		File:   "universe.flux",
																		Source: "r._time",
																		Start: ast.Position{
																			Column: 59,
																			Line:   313,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 60,
																				Line:   313,
																			},
																			File:   "universe.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 59,
																				Line:   313,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 66,
																				Line:   313,
																			},
																			File:   "universe.flux",
																			Source: "_time",
																			Start: ast.Position{
																				Column: 61,
																				Line:   313,
																			},
																		},
																	},
																	Name: "_time",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 78,
																		Line:   313,
																	},
																	File:   "universe.flux",
																	Source: "unit: unit",
																	Start: ast.Position{
																		Column: 68,
																		Line:   313,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 72,
																			Line:   313,
																		},
																		File:   "universe.flux",
																		Source: "unit",
																		Start: ast.Position{
																			Column: 68,
																			Line:   313,
																		},
																	},
																},
																Name: "unit",
															},
															Value: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 78,
																			Line:   313,
																		},
																		File:   "universe.flux",
																		Source: "unit",
																		Start: ast.Position{
																			Column: 74,
																			Line:   313,
																		},
																	},
																},
																Name: "unit",
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 79,
																Line:   313,
															},
															File:   "universe.flux",
															Source: "date.truncate(t: r._time, unit: unit)",
															Start: ast.Position{
																Column: 42,
																Line:   313,
															},
														},
													},
													Callee: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 55,
																	Line:   313,
																},
																File:   "universe.flux",
																Source: "date.truncate",
																Start: ast.Position{
																	Column: 42,
																	Line:   313,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   313,
																	},
																	File:   "universe.flux",
																	Source: "date",
																	Start: ast.Position{
																		Column: 42,
																		Line:   313,
																	},
																},
															},
															Name: "date",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 55,
																		Line:   313,
																	},
																	File:   "universe.flux",
																	Source: "truncate",
																	Start: ast.Position{
																		Column: 47,
																		Line:   313,
																	},
																},
															},
															Name: "truncate",
														},
													},
												},
											}},
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   313,
														},
														File:   "universe.flux",
														Source: "r",
														Start: ast.Position{
															Column: 28,
															Line:   313,
														},
													},
												},
												Name: "r",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   313,
												},
												File:   "universe.flux",
												Source: "r",
												Start: ast.Position{
													Column: 20,
													Line:   313,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   313,
													},
													File:   "universe.flux",
													Source: "r",
													Start: ast.Position{
														Column: 20,
														Line:   313,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 82,
									Line:   313,
								},
								File:   "universe.flux",
								Source: "map(fn:(r) => ({r with _time: date.truncate(t: r._time, unit: unit)}))",
								Start: ast.Position{
									Column: 12,
									Line:   313,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   313,
									},
									File:   "universe.flux",
									Source: "map",
									Start: ast.Position{
										Column: 12,
										Line:   313,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 41,
								Line:   311,
							},
							File:   "universe.flux",
							Source: "timeColumn=\"_time\"",
							Start: ast.Position{
								Column: 23,
								Line:   311,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   311,
								},
								File:   "universe.flux",
								Source: "timeColumn",
								Start: ast.Position{
									Column: 23,
									Line:   311,
								},
							},
						},
						Name: "timeColumn",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   311,
								},
								File:   "universe.flux",
								Source: "\"_time\"",
								Start: ast.Position{
									Column: 34,
									Line:   311,
								},
							},
						},
						Value: "_time",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 47,
								Line:   311,
							},
							File:   "universe.flux",
							Source: "unit",
							Start: ast.Position{
								Column: 43,
								Line:   311,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   311,
								},
								File:   "universe.flux",
								Source: "unit",
								Start: ast.Position{
									Column: 43,
									Line:   311,
								},
							},
						},
						Name: "unit",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 58,
								Line:   311,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 49,
								Line:   311,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   311,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 49,
									Line:   311,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 58,
								Line:   311,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 56,
								Line:   311,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 75,
						Line:   319,
					},
					File:   "universe.flux",
					Source: "kaufmansER = (n, tables=<-) =>\n    tables\n        |> chandeMomentumOscillator(n: n)\n        |> map(fn:(r) => ({r with _value: (math.abs(x: r._value)/100.0)}))",
					Start: ast.Position{
						Column: 1,
						Line:   316,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   316,
						},
						File:   "universe.flux",
						Source: "kaufmansER",
						Start: ast.Position{
							Column: 1,
							Line:   316,
						},
					},
				},
				Name: "kaufmansER",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 75,
							Line:   319,
						},
						File:   "universe.flux",
						Source: "(n, tables=<-) =>\n    tables\n        |> chandeMomentumOscillator(n: n)\n        |> map(fn:(r) => ({r with _value: (math.abs(x: r._value)/100.0)}))",
						Start: ast.Position{
							Column: 14,
							Line:   316,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   317,
									},
									File:   "universe.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 5,
										Line:   317,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   318,
								},
								File:   "universe.flux",
								Source: "tables\n        |> chandeMomentumOscillator(n: n)",
								Start: ast.Position{
									Column: 5,
									Line:   317,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   318,
										},
										File:   "universe.flux",
										Source: "n: n",
										Start: ast.Position{
											Column: 37,
											Line:   318,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   318,
											},
											File:   "universe.flux",
											Source: "n: n",
											Start: ast.Position{
												Column: 37,
												Line:   318,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   318,
												},
												File:   "universe.flux",
												Source: "n",
												Start: ast.Position{
													Column: 37,
													Line:   318,
												},
											},
										},
										Name: "n",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   318,
												},
												File:   "universe.flux",
												Source: "n",
												Start: ast.Position{
													Column: 40,
													Line:   318,
												},
											},
										},
										Name: "n",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   318,
									},
									File:   "universe.flux",
									Source: "chandeMomentumOscillator(n: n)",
									Start: ast.Position{
										Column: 12,
										Line:   318,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   318,
										},
										File:   "universe.flux",
										Source: "chandeMomentumOscillator",
										Start: ast.Position{
											Column: 12,
											Line:   318,
										},
									},
								},
								Name: "chandeMomentumOscillator",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 75,
								Line:   319,
							},
							File:   "universe.flux",
							Source: "tables\n        |> chandeMomentumOscillator(n: n)\n        |> map(fn:(r) => ({r with _value: (math.abs(x: r._value)/100.0)}))",
							Start: ast.Position{
								Column: 5,
								Line:   317,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 74,
										Line:   319,
									},
									File:   "universe.flux",
									Source: "fn:(r) => ({r with _value: (math.abs(x: r._value)/100.0)})",
									Start: ast.Position{
										Column: 16,
										Line:   319,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 74,
											Line:   319,
										},
										File:   "universe.flux",
										Source: "fn:(r) => ({r with _value: (math.abs(x: r._value)/100.0)})",
										Start: ast.Position{
											Column: 16,
											Line:   319,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   319,
											},
											File:   "universe.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 16,
												Line:   319,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 74,
												Line:   319,
											},
											File:   "universe.flux",
											Source: "(r) => ({r with _value: (math.abs(x: r._value)/100.0)})",
											Start: ast.Position{
												Column: 19,
												Line:   319,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 74,
													Line:   319,
												},
												File:   "universe.flux",
												Source: "({r with _value: (math.abs(x: r._value)/100.0)})",
												Start: ast.Position{
													Column: 26,
													Line:   319,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 73,
														Line:   319,
													},
													File:   "universe.flux",
													Source: "{r with _value: (math.abs(x: r._value)/100.0)}",
													Start: ast.Position{
														Column: 27,
														Line:   319,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 72,
															Line:   319,
														},
														File:   "universe.flux",
														Source: "_value: (math.abs(x: r._value)/100.0)",
														Start: ast.Position{
															Column: 35,
															Line:   319,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 41,
																Line:   319,
															},
															File:   "universe.flux",
															Source: "_value",
															Start: ast.Position{
																Column: 35,
																Line:   319,
															},
														},
													},
													Name: "_value",
												},
												Value: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 72,
																Line:   319,
															},
															File:   "universe.flux",
															Source: "(math.abs(x: r._value)/100.0)",
															Start: ast.Position{
																Column: 43,
																Line:   319,
															},
														},
													},
													Expression: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 71,
																	Line:   319,
																},
																File:   "universe.flux",
																Source: "math.abs(x: r._value)/100.0",
																Start: ast.Position{
																	Column: 44,
																	Line:   319,
																},
															},
														},
														Left: &ast.CallExpression{
															Arguments: []ast.Expression{&ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 64,
																			Line:   319,
																		},
																		File:   "universe.flux",
																		Source: "x: r._value",
																		Start: ast.Position{
																			Column: 53,
																			Line:   319,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 64,
																				Line:   319,
																			},
																			File:   "universe.flux",
																			Source: "x: r._value",
																			Start: ast.Position{
																				Column: 53,
																				Line:   319,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 54,
																					Line:   319,
																				},
																				File:   "universe.flux",
																				Source: "x",
																				Start: ast.Position{
																					Column: 53,
																					Line:   319,
																				},
																			},
																		},
																		Name: "x",
																	},
																	Value: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 64,
																					Line:   319,
																				},
																				File:   "universe.flux",
																				Source: "r._value",
																				Start: ast.Position{
																					Column: 56,
																					Line:   319,
																				},
																			},
																		},
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 57,
																						Line:   319,
																					},
																					File:   "universe.flux",
																					Source: "r",
																					Start: ast.Position{
																						Column: 56,
																						Line:   319,
																					},
																				},
																			},
																			Name: "r",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 64,
																						Line:   319,
																					},
																					File:   "universe.flux",
																					Source: "_value",
																					Start: ast.Position{
																						Column: 58,
																						Line:   319,
																					},
																				},
																			},
																			Name: "_value",
																		},
																	},
																}},
																With: nil,
															}},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 65,
																		Line:   319,
																	},
																	File:   "universe.flux",
																	Source: "math.abs(x: r._value)",
																	Start: ast.Position{
																		Column: 44,
																		Line:   319,
																	},
																},
															},
															Callee: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 52,
																			Line:   319,
																		},
																		File:   "universe.flux",
																		Source: "math.abs",
																		Start: ast.Position{
																			Column: 44,
																			Line:   319,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 48,
																				Line:   319,
																			},
																			File:   "universe.flux",
																			Source: "math",
																			Start: ast.Position{
																				Column: 44,
																				Line:   319,
																			},
																		},
																	},
																	Name: "math",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 52,
																				Line:   319,
																			},
																			File:   "universe.flux",
																			Source: "abs",
																			Start: ast.Position{
																				Column: 49,
																				Line:   319,
																			},
																		},
																	},
																	Name: "abs",
																},
															},
														},
														Operator: 2,
														Right: &ast.FloatLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 71,
																		Line:   319,
																	},
																	File:   "universe.flux",
																	Source: "100.0",
																	Start: ast.Position{
																		Column: 66,
																		Line:   319,
																	},
																},
															},
															Value: 100.0,
														},
													},
												},
											}},
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   319,
														},
														File:   "universe.flux",
														Source: "r",
														Start: ast.Position{
															Column: 28,
															Line:   319,
														},
													},
												},
												Name: "r",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   319,
												},
												File:   "universe.flux",
												Source: "r",
												Start: ast.Position{
													Column: 20,
													Line:   319,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   319,
													},
													File:   "universe.flux",
													Source: "r",
													Start: ast.Position{
														Column: 20,
														Line:   319,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   319,
								},
								File:   "universe.flux",
								Source: "map(fn:(r) => ({r with _value: (math.abs(x: r._value)/100.0)}))",
								Start: ast.Position{
									Column: 12,
									Line:   319,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   319,
									},
									File:   "universe.flux",
									Source: "map",
									Start: ast.Position{
										Column: 12,
										Line:   319,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   316,
							},
							File:   "universe.flux",
							Source: "n",
							Start: ast.Position{
								Column: 15,
								Line:   316,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   316,
								},
								File:   "universe.flux",
								Source: "n",
								Start: ast.Position{
									Column: 15,
									Line:   316,
								},
							},
						},
						Name: "n",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   316,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 18,
								Line:   316,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   316,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 18,
									Line:   316,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   316,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 25,
								Line:   316,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 91,
						Line:   321,
					},
					File:   "universe.flux",
					Source: "toString   = (tables=<-) => tables |> map(fn:(r) => ({r with _value: string(v:r._value)}))",
					Start: ast.Position{
						Column: 1,
						Line:   321,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   321,
						},
						File:   "universe.flux",
						Source: "toString",
						Start: ast.Position{
							Column: 1,
							Line:   321,
						},
					},
				},
				Name: "toString",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 91,
							Line:   321,
						},
						File:   "universe.flux",
						Source: "(tables=<-) => tables |> map(fn:(r) => ({r with _value: string(v:r._value)}))",
						Start: ast.Position{
							Column: 14,
							Line:   321,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   321,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 29,
									Line:   321,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 91,
								Line:   321,
							},
							File:   "universe.flux",
							Source: "tables |> map(fn:(r) => ({r with _value: string(v:r._value)}))",
							Start: ast.Position{
								Column: 29,
								Line:   321,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 90,
										Line:   321,
									},
									File:   "universe.flux",
									Source: "fn:(r) => ({r with _value: string(v:r._value)})",
									Start: ast.Position{
										Column: 43,
										Line:   321,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 90,
											Line:   321,
										},
										File:   "universe.flux",
										Source: "fn:(r) => ({r with _value: string(v:r._value)})",
										Start: ast.Position{
											Column: 43,
											Line:   321,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   321,
											},
											File:   "universe.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 43,
												Line:   321,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 90,
												Line:   321,
											},
											File:   "universe.flux",
											Source: "(r) => ({r with _value: string(v:r._value)})",
											Start: ast.Position{
												Column: 46,
												Line:   321,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 90,
													Line:   321,
												},
												File:   "universe.flux",
												Source: "({r with _value: string(v:r._value)})",
												Start: ast.Position{
													Column: 53,
													Line:   321,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 89,
														Line:   321,
													},
													File:   "universe.flux",
													Source: "{r with _value: string(v:r._value)}",
													Start: ast.Position{
														Column: 54,
														Line:   321,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 88,
															Line:   321,
														},
														File:   "universe.flux",
														Source: "_value: string(v:r._value)",
														Start: ast.Position{
															Column: 62,
															Line:   321,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 68,
																Line:   321,
															},
															File:   "universe.flux",
															Source: "_value",
															Start: ast.Position{
																Column: 62,
																Line:   321,
															},
														},
													},
													Name: "_value",
												},
												Value: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 87,
																	Line:   321,
																},
																File:   "universe.flux",
																Source: "v:r._value",
																Start: ast.Position{
																	Column: 77,
																	Line:   321,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 87,
																		Line:   321,
																	},
																	File:   "universe.flux",
																	Source: "v:r._value",
																	Start: ast.Position{
																		Column: 77,
																		Line:   321,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 78,
																			Line:   321,
																		},
																		File:   "universe.flux",
																		Source: "v",
																		Start: ast.Position{
																			Column: 77,
																			Line:   321,
																		},
																	},
																},
																Name: "v",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 87,
																			Line:   321,
																		},
																		File:   "universe.flux",
																		Source: "r._value",
																		Start: ast.Position{
																			Column: 79,
																			Line:   321,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 80,
																				Line:   321,
																			},
																			File:   "universe.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 79,
																				Line:   321,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 87,
																				Line:   321,
																			},
																			File:   "universe.flux",
																			Source: "_value",
																			Start: ast.Position{
																				Column: 81,
																				Line:   321,
																			},
																		},
																	},
																	Name: "_value",
																},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 88,
																Line:   321,
															},
															File:   "universe.flux",
															Source: "string(v:r._value)",
															Start: ast.Position{
																Column: 70,
																Line:   321,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 76,
																	Line:   321,
																},
																File:   "universe.flux",
																Source: "string",
																Start: ast.Position{
																	Column: 70,
																	Line:   321,
																},
															},
														},
														Name: "string",
													},
												},
											}},
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 56,
															Line:   321,
														},
														File:   "universe.flux",
														Source: "r",
														Start: ast.Position{
															Column: 55,
															Line:   321,
														},
													},
												},
												Name: "r",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   321,
												},
												File:   "universe.flux",
												Source: "r",
												Start: ast.Position{
													Column: 47,
													Line:   321,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   321,
													},
													File:   "universe.flux",
													Source: "r",
													Start: ast.Position{
														Column: 47,
														Line:   321,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 91,
									Line:   321,
								},
								File:   "universe.flux",
								Source: "map(fn:(r) => ({r with _value: string(v:r._value)}))",
								Start: ast.Position{
									Column: 39,
									Line:   321,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   321,
									},
									File:   "universe.flux",
									Source: "map",
									Start: ast.Position{
										Column: 39,
										Line:   321,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   321,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 15,
								Line:   321,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   321,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 15,
									Line:   321,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   321,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   321,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 88,
						Line:   322,
					},
					File:   "universe.flux",
					Source: "toInt      = (tables=<-) => tables |> map(fn:(r) => ({r with _value: int(v:r._value)}))",
					Start: ast.Position{
						Column: 1,
						Line:   322,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   322,
						},
						File:   "universe.flux",
						Source: "toInt",
						Start: ast.Position{
							Column: 1,
							Line:   322,
						},
					},
				},
				Name: "toInt",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 88,
							Line:   322,
						},
						File:   "universe.flux",
						Source: "(tables=<-) => tables |> map(fn:(r) => ({r with _value: int(v:r._value)}))",
						Start: ast.Position{
							Column: 14,
							Line:   322,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   322,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 29,
									Line:   322,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 88,
								Line:   322,
							},
							File:   "universe.flux",
							Source: "tables |> map(fn:(r) => ({r with _value: int(v:r._value)}))",
							Start: ast.Position{
								Column: 29,
								Line:   322,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 87,
										Line:   322,
									},
									File:   "universe.flux",
									Source: "fn:(r) => ({r with _value: int(v:r._value)})",
									Start: ast.Position{
										Column: 43,
										Line:   322,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 87,
											Line:   322,
										},
										File:   "universe.flux",
										Source: "fn:(r) => ({r with _value: int(v:r._value)})",
										Start: ast.Position{
											Column: 43,
											Line:   322,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   322,
											},
											File:   "universe.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 43,
												Line:   322,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 87,
												Line:   322,
											},
											File:   "universe.flux",
											Source: "(r) => ({r with _value: int(v:r._value)})",
											Start: ast.Position{
												Column: 46,
												Line:   322,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 87,
													Line:   322,
												},
												File:   "universe.flux",
												Source: "({r with _value: int(v:r._value)})",
												Start: ast.Position{
													Column: 53,
													Line:   322,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 86,
														Line:   322,
													},
													File:   "universe.flux",
													Source: "{r with _value: int(v:r._value)}",
													Start: ast.Position{
														Column: 54,
														Line:   322,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 85,
															Line:   322,
														},
														File:   "universe.flux",
														Source: "_value: int(v:r._value)",
														Start: ast.Position{
															Column: 62,
															Line:   322,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 68,
																Line:   322,
															},
															File:   "universe.flux",
															Source: "_value",
															Start: ast.Position{
																Column: 62,
																Line:   322,
															},
														},
													},
													Name: "_value",
												},
												Value: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 84,
																	Line:   322,
																},
																File:   "universe.flux",
																Source: "v:r._value",
																Start: ast.Position{
																	Column: 74,
																	Line:   322,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 84,
																		Line:   322,
																	},
																	File:   "universe.flux",
																	Source: "v:r._value",
																	Start: ast.Position{
																		Column: 74,
																		Line:   322,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 75,
																			Line:   322,
																		},
																		File:   "universe.flux",
																		Source: "v",
																		Start: ast.Position{
																			Column: 74,
																			Line:   322,
																		},
																	},
																},
																Name: "v",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 84,
																			Line:   322,
																		},
																		File:   "universe.flux",
																		Source: "r._value",
																		Start: ast.Position{
																			Column: 76,
																			Line:   322,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 77,
																				Line:   322,
																			},
																			File:   "universe.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 76,
																				Line:   322,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 84,
																				Line:   322,
																			},
																			File:   "universe.flux",
																			Source: "_value",
																			Start: ast.Position{
																				Column: 78,
																				Line:   322,
																			},
																		},
																	},
																	Name: "_value",
																},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 85,
																Line:   322,
															},
															File:   "universe.flux",
															Source: "int(v:r._value)",
															Start: ast.Position{
																Column: 70,
																Line:   322,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 73,
																	Line:   322,
																},
																File:   "universe.flux",
																Source: "int",
																Start: ast.Position{
																	Column: 70,
																	Line:   322,
																},
															},
														},
														Name: "int",
													},
												},
											}},
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 56,
															Line:   322,
														},
														File:   "universe.flux",
														Source: "r",
														Start: ast.Position{
															Column: 55,
															Line:   322,
														},
													},
												},
												Name: "r",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   322,
												},
												File:   "universe.flux",
												Source: "r",
												Start: ast.Position{
													Column: 47,
													Line:   322,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   322,
													},
													File:   "universe.flux",
													Source: "r",
													Start: ast.Position{
														Column: 47,
														Line:   322,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   322,
								},
								File:   "universe.flux",
								Source: "map(fn:(r) => ({r with _value: int(v:r._value)}))",
								Start: ast.Position{
									Column: 39,
									Line:   322,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   322,
									},
									File:   "universe.flux",
									Source: "map",
									Start: ast.Position{
										Column: 39,
										Line:   322,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   322,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 15,
								Line:   322,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   322,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 15,
									Line:   322,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   322,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   322,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 89,
						Line:   323,
					},
					File:   "universe.flux",
					Source: "toUInt     = (tables=<-) => tables |> map(fn:(r) => ({r with _value: uint(v:r._value)}))",
					Start: ast.Position{
						Column: 1,
						Line:   323,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   323,
						},
						File:   "universe.flux",
						Source: "toUInt",
						Start: ast.Position{
							Column: 1,
							Line:   323,
						},
					},
				},
				Name: "toUInt",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 89,
							Line:   323,
						},
						File:   "universe.flux",
						Source: "(tables=<-) => tables |> map(fn:(r) => ({r with _value: uint(v:r._value)}))",
						Start: ast.Position{
							Column: 14,
							Line:   323,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   323,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 29,
									Line:   323,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 89,
								Line:   323,
							},
							File:   "universe.flux",
							Source: "tables |> map(fn:(r) => ({r with _value: uint(v:r._value)}))",
							Start: ast.Position{
								Column: 29,
								Line:   323,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   323,
									},
									File:   "universe.flux",
									Source: "fn:(r) => ({r with _value: uint(v:r._value)})",
									Start: ast.Position{
										Column: 43,
										Line:   323,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 88,
											Line:   323,
										},
										File:   "universe.flux",
										Source: "fn:(r) => ({r with _value: uint(v:r._value)})",
										Start: ast.Position{
											Column: 43,
											Line:   323,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   323,
											},
											File:   "universe.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 43,
												Line:   323,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 88,
												Line:   323,
											},
											File:   "universe.flux",
											Source: "(r) => ({r with _value: uint(v:r._value)})",
											Start: ast.Position{
												Column: 46,
												Line:   323,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 88,
													Line:   323,
												},
												File:   "universe.flux",
												Source: "({r with _value: uint(v:r._value)})",
												Start: ast.Position{
													Column: 53,
													Line:   323,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 87,
														Line:   323,
													},
													File:   "universe.flux",
													Source: "{r with _value: uint(v:r._value)}",
													Start: ast.Position{
														Column: 54,
														Line:   323,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 86,
															Line:   323,
														},
														File:   "universe.flux",
														Source: "_value: uint(v:r._value)",
														Start: ast.Position{
															Column: 62,
															Line:   323,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 68,
																Line:   323,
															},
															File:   "universe.flux",
															Source: "_value",
															Start: ast.Position{
																Column: 62,
																Line:   323,
															},
														},
													},
													Name: "_value",
												},
												Value: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 85,
																	Line:   323,
																},
																File:   "universe.flux",
																Source: "v:r._value",
																Start: ast.Position{
																	Column: 75,
																	Line:   323,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 85,
																		Line:   323,
																	},
																	File:   "universe.flux",
																	Source: "v:r._value",
																	Start: ast.Position{
																		Column: 75,
																		Line:   323,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 76,
																			Line:   323,
																		},
																		File:   "universe.flux",
																		Source: "v",
																		Start: ast.Position{
																			Column: 75,
																			Line:   323,
																		},
																	},
																},
																Name: "v",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 85,
																			Line:   323,
																		},
																		File:   "universe.flux",
																		Source: "r._value",
																		Start: ast.Position{
																			Column: 77,
																			Line:   323,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 78,
																				Line:   323,
																			},
																			File:   "universe.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 77,
																				Line:   323,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 85,
																				Line:   323,
																			},
																			File:   "universe.flux",
																			Source: "_value",
																			Start: ast.Position{
																				Column: 79,
																				Line:   323,
																			},
																		},
																	},
																	Name: "_value",
																},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 86,
																Line:   323,
															},
															File:   "universe.flux",
															Source: "uint(v:r._value)",
															Start: ast.Position{
																Column: 70,
																Line:   323,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 74,
																	Line:   323,
																},
																File:   "universe.flux",
																Source: "uint",
																Start: ast.Position{
																	Column: 70,
																	Line:   323,
																},
															},
														},
														Name: "uint",
													},
												},
											}},
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 56,
															Line:   323,
														},
														File:   "universe.flux",
														Source: "r",
														Start: ast.Position{
															Column: 55,
															Line:   323,
														},
													},
												},
												Name: "r",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   323,
												},
												File:   "universe.flux",
												Source: "r",
												Start: ast.Position{
													Column: 47,
													Line:   323,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   323,
													},
													File:   "universe.flux",
													Source: "r",
													Start: ast.Position{
														Column: 47,
														Line:   323,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 89,
									Line:   323,
								},
								File:   "universe.flux",
								Source: "map(fn:(r) => ({r with _value: uint(v:r._value)}))",
								Start: ast.Position{
									Column: 39,
									Line:   323,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   323,
									},
									File:   "universe.flux",
									Source: "map",
									Start: ast.Position{
										Column: 39,
										Line:   323,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   323,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 15,
								Line:   323,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   323,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 15,
									Line:   323,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   323,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   323,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 90,
						Line:   324,
					},
					File:   "universe.flux",
					Source: "toFloat    = (tables=<-) => tables |> map(fn:(r) => ({r with _value: float(v:r._value)}))",
					Start: ast.Position{
						Column: 1,
						Line:   324,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   324,
						},
						File:   "universe.flux",
						Source: "toFloat",
						Start: ast.Position{
							Column: 1,
							Line:   324,
						},
					},
				},
				Name: "toFloat",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 90,
							Line:   324,
						},
						File:   "universe.flux",
						Source: "(tables=<-) => tables |> map(fn:(r) => ({r with _value: float(v:r._value)}))",
						Start: ast.Position{
							Column: 14,
							Line:   324,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   324,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 29,
									Line:   324,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 90,
								Line:   324,
							},
							File:   "universe.flux",
							Source: "tables |> map(fn:(r) => ({r with _value: float(v:r._value)}))",
							Start: ast.Position{
								Column: 29,
								Line:   324,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 89,
										Line:   324,
									},
									File:   "universe.flux",
									Source: "fn:(r) => ({r with _value: float(v:r._value)})",
									Start: ast.Position{
										Column: 43,
										Line:   324,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 89,
											Line:   324,
										},
										File:   "universe.flux",
										Source: "fn:(r) => ({r with _value: float(v:r._value)})",
										Start: ast.Position{
											Column: 43,
											Line:   324,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   324,
											},
											File:   "universe.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 43,
												Line:   324,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 89,
												Line:   324,
											},
											File:   "universe.flux",
											Source: "(r) => ({r with _value: float(v:r._value)})",
											Start: ast.Position{
												Column: 46,
												Line:   324,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 89,
													Line:   324,
												},
												File:   "universe.flux",
												Source: "({r with _value: float(v:r._value)})",
												Start: ast.Position{
													Column: 53,
													Line:   324,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 88,
														Line:   324,
													},
													File:   "universe.flux",
													Source: "{r with _value: float(v:r._value)}",
													Start: ast.Position{
														Column: 54,
														Line:   324,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 87,
															Line:   324,
														},
														File:   "universe.flux",
														Source: "_value: float(v:r._value)",
														Start: ast.Position{
															Column: 62,
															Line:   324,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 68,
																Line:   324,
															},
															File:   "universe.flux",
															Source: "_value",
															Start: ast.Position{
																Column: 62,
																Line:   324,
															},
														},
													},
													Name: "_value",
												},
												Value: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 86,
																	Line:   324,
																},
																File:   "universe.flux",
																Source: "v:r._value",
																Start: ast.Position{
																	Column: 76,
																	Line:   324,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 86,
																		Line:   324,
																	},
																	File:   "universe.flux",
																	Source: "v:r._value",
																	Start: ast.Position{
																		Column: 76,
																		Line:   324,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 77,
																			Line:   324,
																		},
																		File:   "universe.flux",
																		Source: "v",
																		Start: ast.Position{
																			Column: 76,
																			Line:   324,
																		},
																	},
																},
																Name: "v",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 86,
																			Line:   324,
																		},
																		File:   "universe.flux",
																		Source: "r._value",
																		Start: ast.Position{
																			Column: 78,
																			Line:   324,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 79,
																				Line:   324,
																			},
																			File:   "universe.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 78,
																				Line:   324,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 86,
																				Line:   324,
																			},
																			File:   "universe.flux",
																			Source: "_value",
																			Start: ast.Position{
																				Column: 80,
																				Line:   324,
																			},
																		},
																	},
																	Name: "_value",
																},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 87,
																Line:   324,
															},
															File:   "universe.flux",
															Source: "float(v:r._value)",
															Start: ast.Position{
																Column: 70,
																Line:   324,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 75,
																	Line:   324,
																},
																File:   "universe.flux",
																Source: "float",
																Start: ast.Position{
																	Column: 70,
																	Line:   324,
																},
															},
														},
														Name: "float",
													},
												},
											}},
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 56,
															Line:   324,
														},
														File:   "universe.flux",
														Source: "r",
														Start: ast.Position{
															Column: 55,
															Line:   324,
														},
													},
												},
												Name: "r",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   324,
												},
												File:   "universe.flux",
												Source: "r",
												Start: ast.Position{
													Column: 47,
													Line:   324,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   324,
													},
													File:   "universe.flux",
													Source: "r",
													Start: ast.Position{
														Column: 47,
														Line:   324,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 90,
									Line:   324,
								},
								File:   "universe.flux",
								Source: "map(fn:(r) => ({r with _value: float(v:r._value)}))",
								Start: ast.Position{
									Column: 39,
									Line:   324,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   324,
									},
									File:   "universe.flux",
									Source: "map",
									Start: ast.Position{
										Column: 39,
										Line:   324,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   324,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 15,
								Line:   324,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   324,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 15,
									Line:   324,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   324,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   324,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 89,
						Line:   325,
					},
					File:   "universe.flux",
					Source: "toBool     = (tables=<-) => tables |> map(fn:(r) => ({r with _value: bool(v:r._value)}))",
					Start: ast.Position{
						Column: 1,
						Line:   325,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   325,
						},
						File:   "universe.flux",
						Source: "toBool",
						Start: ast.Position{
							Column: 1,
							Line:   325,
						},
					},
				},
				Name: "toBool",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 89,
							Line:   325,
						},
						File:   "universe.flux",
						Source: "(tables=<-) => tables |> map(fn:(r) => ({r with _value: bool(v:r._value)}))",
						Start: ast.Position{
							Column: 14,
							Line:   325,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   325,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 29,
									Line:   325,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 89,
								Line:   325,
							},
							File:   "universe.flux",
							Source: "tables |> map(fn:(r) => ({r with _value: bool(v:r._value)}))",
							Start: ast.Position{
								Column: 29,
								Line:   325,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   325,
									},
									File:   "universe.flux",
									Source: "fn:(r) => ({r with _value: bool(v:r._value)})",
									Start: ast.Position{
										Column: 43,
										Line:   325,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 88,
											Line:   325,
										},
										File:   "universe.flux",
										Source: "fn:(r) => ({r with _value: bool(v:r._value)})",
										Start: ast.Position{
											Column: 43,
											Line:   325,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   325,
											},
											File:   "universe.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 43,
												Line:   325,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 88,
												Line:   325,
											},
											File:   "universe.flux",
											Source: "(r) => ({r with _value: bool(v:r._value)})",
											Start: ast.Position{
												Column: 46,
												Line:   325,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 88,
													Line:   325,
												},
												File:   "universe.flux",
												Source: "({r with _value: bool(v:r._value)})",
												Start: ast.Position{
													Column: 53,
													Line:   325,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 87,
														Line:   325,
													},
													File:   "universe.flux",
													Source: "{r with _value: bool(v:r._value)}",
													Start: ast.Position{
														Column: 54,
														Line:   325,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 86,
															Line:   325,
														},
														File:   "universe.flux",
														Source: "_value: bool(v:r._value)",
														Start: ast.Position{
															Column: 62,
															Line:   325,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 68,
																Line:   325,
															},
															File:   "universe.flux",
															Source: "_value",
															Start: ast.Position{
																Column: 62,
																Line:   325,
															},
														},
													},
													Name: "_value",
												},
												Value: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 85,
																	Line:   325,
																},
																File:   "universe.flux",
																Source: "v:r._value",
																Start: ast.Position{
																	Column: 75,
																	Line:   325,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 85,
																		Line:   325,
																	},
																	File:   "universe.flux",
																	Source: "v:r._value",
																	Start: ast.Position{
																		Column: 75,
																		Line:   325,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 76,
																			Line:   325,
																		},
																		File:   "universe.flux",
																		Source: "v",
																		Start: ast.Position{
																			Column: 75,
																			Line:   325,
																		},
																	},
																},
																Name: "v",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 85,
																			Line:   325,
																		},
																		File:   "universe.flux",
																		Source: "r._value",
																		Start: ast.Position{
																			Column: 77,
																			Line:   325,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 78,
																				Line:   325,
																			},
																			File:   "universe.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 77,
																				Line:   325,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 85,
																				Line:   325,
																			},
																			File:   "universe.flux",
																			Source: "_value",
																			Start: ast.Position{
																				Column: 79,
																				Line:   325,
																			},
																		},
																	},
																	Name: "_value",
																},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 86,
																Line:   325,
															},
															File:   "universe.flux",
															Source: "bool(v:r._value)",
															Start: ast.Position{
																Column: 70,
																Line:   325,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 74,
																	Line:   325,
																},
																File:   "universe.flux",
																Source: "bool",
																Start: ast.Position{
																	Column: 70,
																	Line:   325,
																},
															},
														},
														Name: "bool",
													},
												},
											}},
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 56,
															Line:   325,
														},
														File:   "universe.flux",
														Source: "r",
														Start: ast.Position{
															Column: 55,
															Line:   325,
														},
													},
												},
												Name: "r",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   325,
												},
												File:   "universe.flux",
												Source: "r",
												Start: ast.Position{
													Column: 47,
													Line:   325,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   325,
													},
													File:   "universe.flux",
													Source: "r",
													Start: ast.Position{
														Column: 47,
														Line:   325,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 89,
									Line:   325,
								},
								File:   "universe.flux",
								Source: "map(fn:(r) => ({r with _value: bool(v:r._value)}))",
								Start: ast.Position{
									Column: 39,
									Line:   325,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   325,
									},
									File:   "universe.flux",
									Source: "map",
									Start: ast.Position{
										Column: 39,
										Line:   325,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   325,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 15,
								Line:   325,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   325,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 15,
									Line:   325,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   325,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   325,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 89,
						Line:   326,
					},
					File:   "universe.flux",
					Source: "toTime     = (tables=<-) => tables |> map(fn:(r) => ({r with _value: time(v:r._value)}))",
					Start: ast.Position{
						Column: 1,
						Line:   326,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   326,
						},
						File:   "universe.flux",
						Source: "toTime",
						Start: ast.Position{
							Column: 1,
							Line:   326,
						},
					},
				},
				Name: "toTime",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 89,
							Line:   326,
						},
						File:   "universe.flux",
						Source: "(tables=<-) => tables |> map(fn:(r) => ({r with _value: time(v:r._value)}))",
						Start: ast.Position{
							Column: 14,
							Line:   326,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   326,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 29,
									Line:   326,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 89,
								Line:   326,
							},
							File:   "universe.flux",
							Source: "tables |> map(fn:(r) => ({r with _value: time(v:r._value)}))",
							Start: ast.Position{
								Column: 29,
								Line:   326,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   326,
									},
									File:   "universe.flux",
									Source: "fn:(r) => ({r with _value: time(v:r._value)})",
									Start: ast.Position{
										Column: 43,
										Line:   326,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 88,
											Line:   326,
										},
										File:   "universe.flux",
										Source: "fn:(r) => ({r with _value: time(v:r._value)})",
										Start: ast.Position{
											Column: 43,
											Line:   326,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   326,
											},
											File:   "universe.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 43,
												Line:   326,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 88,
												Line:   326,
											},
											File:   "universe.flux",
											Source: "(r) => ({r with _value: time(v:r._value)})",
											Start: ast.Position{
												Column: 46,
												Line:   326,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 88,
													Line:   326,
												},
												File:   "universe.flux",
												Source: "({r with _value: time(v:r._value)})",
												Start: ast.Position{
													Column: 53,
													Line:   326,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 87,
														Line:   326,
													},
													File:   "universe.flux",
													Source: "{r with _value: time(v:r._value)}",
													Start: ast.Position{
														Column: 54,
														Line:   326,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 86,
															Line:   326,
														},
														File:   "universe.flux",
														Source: "_value: time(v:r._value)",
														Start: ast.Position{
															Column: 62,
															Line:   326,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 68,
																Line:   326,
															},
															File:   "universe.flux",
															Source: "_value",
															Start: ast.Position{
																Column: 62,
																Line:   326,
															},
														},
													},
													Name: "_value",
												},
												Value: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 85,
																	Line:   326,
																},
																File:   "universe.flux",
																Source: "v:r._value",
																Start: ast.Position{
																	Column: 75,
																	Line:   326,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 85,
																		Line:   326,
																	},
																	File:   "universe.flux",
																	Source: "v:r._value",
																	Start: ast.Position{
																		Column: 75,
																		Line:   326,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 76,
																			Line:   326,
																		},
																		File:   "universe.flux",
																		Source: "v",
																		Start: ast.Position{
																			Column: 75,
																			Line:   326,
																		},
																	},
																},
																Name: "v",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 85,
																			Line:   326,
																		},
																		File:   "universe.flux",
																		Source: "r._value",
																		Start: ast.Position{
																			Column: 77,
																			Line:   326,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 78,
																				Line:   326,
																			},
																			File:   "universe.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 77,
																				Line:   326,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 85,
																				Line:   326,
																			},
																			File:   "universe.flux",
																			Source: "_value",
																			Start: ast.Position{
																				Column: 79,
																				Line:   326,
																			},
																		},
																	},
																	Name: "_value",
																},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 86,
																Line:   326,
															},
															File:   "universe.flux",
															Source: "time(v:r._value)",
															Start: ast.Position{
																Column: 70,
																Line:   326,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 74,
																	Line:   326,
																},
																File:   "universe.flux",
																Source: "time",
																Start: ast.Position{
																	Column: 70,
																	Line:   326,
																},
															},
														},
														Name: "time",
													},
												},
											}},
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 56,
															Line:   326,
														},
														File:   "universe.flux",
														Source: "r",
														Start: ast.Position{
															Column: 55,
															Line:   326,
														},
													},
												},
												Name: "r",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   326,
												},
												File:   "universe.flux",
												Source: "r",
												Start: ast.Position{
													Column: 47,
													Line:   326,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   326,
													},
													File:   "universe.flux",
													Source: "r",
													Start: ast.Position{
														Column: 47,
														Line:   326,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 89,
									Line:   326,
								},
								File:   "universe.flux",
								Source: "map(fn:(r) => ({r with _value: time(v:r._value)}))",
								Start: ast.Position{
									Column: 39,
									Line:   326,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   326,
									},
									File:   "universe.flux",
									Source: "map",
									Start: ast.Position{
										Column: 39,
										Line:   326,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   326,
							},
							File:   "universe.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 15,
								Line:   326,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   326,
								},
								File:   "universe.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 15,
									Line:   326,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   326,
							},
							File:   "universe.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   326,
							},
						},
					}},
				}},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   3,
					},
					File:   "universe.flux",
					Source: "import \"system\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   3,
						},
						File:   "universe.flux",
						Source: "\"system\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "system",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   4,
					},
					File:   "universe.flux",
					Source: "import \"date\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   4,
						},
						File:   "universe.flux",
						Source: "\"date\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "date",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   5,
					},
					File:   "universe.flux",
					Source: "import \"math\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   5,
						},
						File:   "universe.flux",
						Source: "\"math\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "math",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   6,
					},
					File:   "universe.flux",
					Source: "import \"strings\"",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   6,
						},
						File:   "universe.flux",
						Source: "\"strings\"",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				Value: "strings",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   7,
					},
					File:   "universe.flux",
					Source: "import \"regexp\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   7,
						},
						File:   "universe.flux",
						Source: "\"regexp\"",
						Start: ast.Position{
							Column: 8,
							Line:   7,
						},
					},
				},
				Value: "regexp",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "universe.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   1,
					},
					File:   "universe.flux",
					Source: "package universe",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   1,
						},
						File:   "universe.flux",
						Source: "universe",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "universe",
			},
		},
	}},
	Package: "universe",
	Path:    "universe",
}
