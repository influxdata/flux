package universe

import (
	"fmt"

	"github.com/apache/arrow/go/arrow"
	"github.com/apache/arrow/go/arrow/array"
	"github.com/influxdata/flux"
)

func (t *fillTransformation) fillColumn(typ flux.ColType, arr array.Interface) array.Interface {
	switch typ {
	{{range .}}case {{.ColumnType}}:
		return t.fill{{.Name}}Column(arr.(*{{.ArrowType}}))
	{{end}}
	default:
		panic(fmt.Errorf("unsupported array data type: %s", arr.DataType()))
	}
}

{{range .}}
func (t *fillTransformation) fill{{.Name}}Column(arr *{{.ArrowType}}) array.Interface {
	var prevValue {{.Type}}
	prevNull := false
	if t.spec.UsePrevious {
		if prevNull = arr.IsNull(0); !prevNull {
			prevValue = arr.{{.Value}}(0)
		}
	} else {
		{{if eq .Name "Time"}}prevValue = int64(t.spec.Value.{{.FluxValue}}()){{else}}prevValue = t.spec.Value.{{.FluxValue}}(){{end}}
	}
	{{if eq .Name "String"}}b := array.NewBinaryBuilder(t.alloc, arrow.BinaryTypes.String){{else}}b := array.New{{.ArrowName}}Builder(t.alloc){{end}}
	b.Resize(arr.Len())
	for i := 0; i < arr.Len(); i++ {
		if arr.IsNull(i) {
			if prevNull {
				b.AppendNull()
			} else {
				b.{{.Append}}(prevValue)
			}
		} else {
			v := arr.{{.Value}}(i)
			b.{{.Append}}(v)
			if t.spec.UsePrevious {
				prevValue = v
				prevNull = false
			}
		}
	}
	return b.NewArray()
}
{{end}}