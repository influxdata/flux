package universe

import (
	"fmt"

	arrowmem "github.com/apache/arrow/go/arrow/memory"
	"github.com/influxdata/flux"
	"github.com/influxdata/flux/array"
	"github.com/influxdata/flux/values"
)

func (t *fillTransformation) fillColumn(typ flux.ColType, arr array.Interface, fillValue *interface{}, mem arrowmem.Allocator) array.Interface {
    switch typ {
    {{range .}}case {{.ColumnType}}:
        return t.fill{{.Name}}Column(arr.(*{{.ArrowType}}), fillValue, mem)
    {{end}}
    default:
        panic(fmt.Errorf("unsupported array data type: %s", arr.DataType()))
    }
}

{{range .}}
func (t *fillTransformation) fill{{.Name}}Column(arr *{{.ArrowType}}, fillValue *interface{}, mem arrowmem.Allocator) array.Interface {
    fillValueNull := *fillValue == nil
    var fillValue{{.Name}} {{.Type}}
    if !fillValueNull {
        {{if eq .Name "Time"}}fillValue{{.Name}} = {{.Type}}((*fillValue).(values.Time)){{else}}fillValue{{.Name}} = (*fillValue).({{.Type}}){{end}}
    }
    b := array.New{{.ArrowName}}Builder(mem)
    b.Resize(arr.Len())
    for i := 0; i < arr.Len(); i++ {
        if arr.IsNull(i) {
            if fillValueNull {
                b.AppendNull()
            } else {
                b.{{.Append}}(fillValue{{.Name}})
            }
        } else {
            v := arr.{{.Value}}(i)
            b.{{.Append}}(v)
            if t.spec.UsePrevious {
                fillValue{{.Name}} = v
                fillValueNull = false
            }
        }
    }
    if t.spec.UsePrevious && !fillValueNull {
        *fillValue = fillValue{{.Name}}
    }
    return b.NewArray()
}
{{end}}
