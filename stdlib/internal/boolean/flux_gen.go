// DO NOT EDIT: This file is autogenerated via the builtin command.

package boolean

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 14,
					Line:   9,
				},
				File:   "boolean.flux",
				Source: "package boolean\n\n\n// true is a constant that is the truth value.\nbuiltin true : bool\n\n// false is a constant that is the false value.\nbuiltin false",
				Start: ast.Position{
					Column: 1,
					Line:   2,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// true is a constant that is the truth value.\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   6,
					},
					File:   "boolean.flux",
					Source: "builtin true",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   6,
						},
						File:   "boolean.flux",
						Source: "true",
						Start: ast.Position{
							Column: 9,
							Line:   6,
						},
					},
				},
				Name: "true",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   6,
						},
						File:   "boolean.flux",
						Source: "bool",
						Start: ast.Position{
							Column: 16,
							Line:   6,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.NamedType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   6,
							},
							File:   "boolean.flux",
							Source: "bool",
							Start: ast.Position{
								Column: 16,
								Line:   6,
							},
						},
					},
					ID: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   6,
								},
								File:   "boolean.flux",
								Source: "bool",
								Start: ast.Position{
									Column: 16,
									Line:   6,
								},
							},
						},
						Name: "bool",
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// false is a constant that is the false value.\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   9,
					},
					File:   "boolean.flux",
					Source: "builtin false",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   9,
						},
						File:   "boolean.flux",
						Source: "false",
						Start: ast.Position{
							Column: 9,
							Line:   9,
						},
					},
				},
				Name: "false",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   9,
						},
						File:   "boolean.flux",
						Source: "bool",
						Start: ast.Position{
							Column: 17,
							Line:   9,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.NamedType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   9,
							},
							File:   "boolean.flux",
							Source: "bool",
							Start: ast.Position{
								Column: 17,
								Line:   9,
							},
						},
					},
					ID: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   9,
								},
								File:   "boolean.flux",
								Source: "bool",
								Start: ast.Position{
									Column: 17,
									Line:   9,
								},
							},
						},
						Name: "bool",
					},
				},
			},
		}},
		Eof:      nil,
		Imports:  nil,
		Metadata: "parser-type=rust",
		Name:     "boolean.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Package boolean provides constants for true and false values.\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   2,
					},
					File:   "boolean.flux",
					Source: "package boolean",
					Start: ast.Position{
						Column: 1,
						Line:   2,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   2,
						},
						File:   "boolean.flux",
						Source: "boolean",
						Start: ast.Position{
							Column: 9,
							Line:   2,
						},
					},
				},
				Name: "boolean",
			},
		},
	}},
	Package: "boolean",
	Path:    "internal/boolean",
}
