// DO NOT EDIT: This file is autogenerated via the builtin command.

package array

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 99,
					Line:   106,
				},
				File:   "array.flux",
				Source: "package array\n\n\nimport ejson \"experimental/json\"\nimport \"json\"\n\n// append is a function that appends value to array.\n//\n// ## Parameters\n// - `arr` is the array to operate on.\n// - `v` is the value to append to the array.\n//\n//   Array may be empty. If not, value type must match the type of existing element(s).\n//\n// ## Append to array\n//\n// ```\n// import \"contrib/bonitoo-io/array\"\n//\n// good = [\"foo\", \"bar\"]\n//\n// from(bucket: \"my-bucket\")\n//   |> range(start: -1h)\n//   |> keep(columns: array.append(arr: [\"_time\", \"_value\"], v: good)\n// ```\nbuiltin append : (arr: [A], v: [A]) => [A]\n\n// map is a function that applies supplied function to each element and returns a new array.\n//\n// ## Parameters\n// - `arr` is the array to operate on.\n// - `fn` is the function to convert items.\n//\n// ## Convert array of ints to array of strings\n//\n// ```\n// import \"contrib/bonitoo-io/array\"\n//\n// ia = [1, 1]\n//\n// sa = array.map(arr: a, fn: (x) => string(v: x))\n// ```\nbuiltin map : (arr: [A], fn: (x: A) => B) => [B]\n\n// empty JSON-encoded array as string\nemptyStr = \"[]\"\n\n// fromStr parses JSON-encoded (as string) array into array.\n//\n// ## Parameters\n// - `arr` is the JSON-encoded (as string) array to operate on.\n//\n// ## Parse simple type array\n//\n// ```\n// import \"contrib/bonitoo-io/array\"\n//\n// s = \"[1, 2, 3]\"\n//\n// a = array.fromStr(arr: s)\n// ```\n//\n// ## Parse records array\n//\n// ```\n// import \"contrib/bonitoo-io/array\"\n//\n// s = \"[{\\\"n\\\": 1}, {\\\"n\\\": 2}, {\\\"n\\\": 3}]\"\n//\n// a = array.fromStr(arr: s)\n// ```\nfromStr = (arr) => ejson.parse(data: bytes(v: arr))\n\n// appendStr is a function that appends value to JSON-encoded array.\n//\n// ## Parameters\n// - `arr` is the JSON-encoded array to operate on.\n// - `v` is the value to append to the array.\n//\n//   Array may be empty. If not, value type must match the type of existing element(s).\n//   This variant of append is useful in transformations, because flux table column cannot be of array type.\n//\n// ## Append to array\n//\n// ```\n// import \"contrib/bonitoo-io/array\"\n//\n// from(bucket: \"my-bucket\")\n//   |> range(start: -1h)\n//   |> reduce(\n//       fn: (r, accumulator) => ({\n//           sarr: array.appendStr(arr: accumulator.sarr, v: [r._value])\n//       }),\n//       identity: {\n//           sarr: array.emptyStr  // \"[]\"\n//       }\n//   )\n//   |> map(fn: (r) => ({ r with status:\n//       http.post(\n//           url: \"http://endpoint:12345/\",\n//           data: json.encode(v: array.fromStr(arr: r.sarr))\n//       )})\n//  )\n// ```\nappendStr = (arr = emptyStr, v) => string(v: json.encode(v: append(arr: fromStr(arr: arr), v: v)))",
				Start: ast.Position{
					Column: 1,
					Line:   2,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// append is a function that appends value to array.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `arr` is the array to operate on.\n"}, ast.Comment{Text: "// - `v` is the value to append to the array.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Array may be empty. If not, value type must match the type of existing element(s).\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Append to array\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"contrib/bonitoo-io/array\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// good = [\"foo\", \"bar\"]\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket: \"my-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -1h)\n"}, ast.Comment{Text: "//   |> keep(columns: array.append(arr: [\"_time\", \"_value\"], v: good)\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   27,
					},
					File:   "array.flux",
					Source: "builtin append",
					Start: ast.Position{
						Column: 1,
						Line:   27,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   27,
						},
						File:   "array.flux",
						Source: "append",
						Start: ast.Position{
							Column: 9,
							Line:   27,
						},
					},
				},
				Name: "append",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 43,
							Line:   27,
						},
						File:   "array.flux",
						Source: "(arr: [A], v: [A]) => [A]",
						Start: ast.Position{
							Column: 18,
							Line:   27,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   27,
							},
							File:   "array.flux",
							Source: "(arr: [A], v: [A]) => [A]",
							Start: ast.Position{
								Column: 18,
								Line:   27,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   27,
								},
								File:   "array.flux",
								Source: "arr: [A]",
								Start: ast.Position{
									Column: 19,
									Line:   27,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   27,
									},
									File:   "array.flux",
									Source: "arr",
									Start: ast.Position{
										Column: 19,
										Line:   27,
									},
								},
							},
							Name: "arr",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   27,
									},
									File:   "array.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 24,
										Line:   27,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   27,
										},
										File:   "array.flux",
										Source: "A",
										Start: ast.Position{
											Column: 25,
											Line:   27,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   27,
											},
											File:   "array.flux",
											Source: "A",
											Start: ast.Position{
												Column: 25,
												Line:   27,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   27,
								},
								File:   "array.flux",
								Source: "v: [A]",
								Start: ast.Position{
									Column: 29,
									Line:   27,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   27,
									},
									File:   "array.flux",
									Source: "v",
									Start: ast.Position{
										Column: 29,
										Line:   27,
									},
								},
							},
							Name: "v",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   27,
									},
									File:   "array.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 32,
										Line:   27,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   27,
										},
										File:   "array.flux",
										Source: "A",
										Start: ast.Position{
											Column: 33,
											Line:   27,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   27,
											},
											File:   "array.flux",
											Source: "A",
											Start: ast.Position{
												Column: 33,
												Line:   27,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   27,
								},
								File:   "array.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 40,
									Line:   27,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   27,
									},
									File:   "array.flux",
									Source: "A",
									Start: ast.Position{
										Column: 41,
										Line:   27,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   27,
										},
										File:   "array.flux",
										Source: "A",
										Start: ast.Position{
											Column: 41,
											Line:   27,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// map is a function that applies supplied function to each element and returns a new array.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `arr` is the array to operate on.\n"}, ast.Comment{Text: "// - `fn` is the function to convert items.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Convert array of ints to array of strings\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"contrib/bonitoo-io/array\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ia = [1, 1]\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// sa = array.map(arr: a, fn: (x) => string(v: x))\n"}, ast.Comment{Text: "// ```\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   44,
					},
					File:   "array.flux",
					Source: "builtin map",
					Start: ast.Position{
						Column: 1,
						Line:   44,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   44,
						},
						File:   "array.flux",
						Source: "map",
						Start: ast.Position{
							Column: 9,
							Line:   44,
						},
					},
				},
				Name: "map",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 49,
							Line:   44,
						},
						File:   "array.flux",
						Source: "(arr: [A], fn: (x: A) => B) => [B]",
						Start: ast.Position{
							Column: 15,
							Line:   44,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   44,
							},
							File:   "array.flux",
							Source: "(arr: [A], fn: (x: A) => B) => [B]",
							Start: ast.Position{
								Column: 15,
								Line:   44,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   44,
								},
								File:   "array.flux",
								Source: "arr: [A]",
								Start: ast.Position{
									Column: 16,
									Line:   44,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   44,
									},
									File:   "array.flux",
									Source: "arr",
									Start: ast.Position{
										Column: 16,
										Line:   44,
									},
								},
							},
							Name: "arr",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   44,
									},
									File:   "array.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 21,
										Line:   44,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   44,
										},
										File:   "array.flux",
										Source: "A",
										Start: ast.Position{
											Column: 22,
											Line:   44,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   44,
											},
											File:   "array.flux",
											Source: "A",
											Start: ast.Position{
												Column: 22,
												Line:   44,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   44,
								},
								File:   "array.flux",
								Source: "fn: (x: A) => B",
								Start: ast.Position{
									Column: 26,
									Line:   44,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   44,
									},
									File:   "array.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 26,
										Line:   44,
									},
								},
							},
							Name: "fn",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   44,
									},
									File:   "array.flux",
									Source: "(x: A) => B",
									Start: ast.Position{
										Column: 30,
										Line:   44,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   44,
										},
										File:   "array.flux",
										Source: "x: A",
										Start: ast.Position{
											Column: 31,
											Line:   44,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   44,
											},
											File:   "array.flux",
											Source: "x",
											Start: ast.Position{
												Column: 31,
												Line:   44,
											},
										},
									},
									Name: "x",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   44,
											},
											File:   "array.flux",
											Source: "A",
											Start: ast.Position{
												Column: 34,
												Line:   44,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   44,
												},
												File:   "array.flux",
												Source: "A",
												Start: ast.Position{
													Column: 34,
													Line:   44,
												},
											},
										},
										Name: "A",
									},
								},
							}},
							Return: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   44,
										},
										File:   "array.flux",
										Source: "B",
										Start: ast.Position{
											Column: 40,
											Line:   44,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   44,
											},
											File:   "array.flux",
											Source: "B",
											Start: ast.Position{
												Column: 40,
												Line:   44,
											},
										},
									},
									Name: "B",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   44,
								},
								File:   "array.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 46,
									Line:   44,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   44,
									},
									File:   "array.flux",
									Source: "B",
									Start: ast.Position{
										Column: 47,
										Line:   44,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   44,
										},
										File:   "array.flux",
										Source: "B",
										Start: ast.Position{
											Column: 47,
											Line:   44,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   47,
					},
					File:   "array.flux",
					Source: "emptyStr = \"[]\"",
					Start: ast.Position{
						Column: 1,
						Line:   47,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// empty JSON-encoded array as string\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   47,
						},
						File:   "array.flux",
						Source: "emptyStr",
						Start: ast.Position{
							Column: 1,
							Line:   47,
						},
					},
				},
				Name: "emptyStr",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   47,
						},
						File:   "array.flux",
						Source: "\"[]\"",
						Start: ast.Position{
							Column: 12,
							Line:   47,
						},
					},
				},
				Value: "[]",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 52,
						Line:   73,
					},
					File:   "array.flux",
					Source: "fromStr = (arr) => ejson.parse(data: bytes(v: arr))",
					Start: ast.Position{
						Column: 1,
						Line:   73,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// fromStr parses JSON-encoded (as string) array into array.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `arr` is the JSON-encoded (as string) array to operate on.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parse simple type array\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"contrib/bonitoo-io/array\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// s = \"[1, 2, 3]\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// a = array.fromStr(arr: s)\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parse records array\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"contrib/bonitoo-io/array\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// s = \"[{\\\"n\\\": 1}, {\\\"n\\\": 2}, {\\\"n\\\": 3}]\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// a = array.fromStr(arr: s)\n"}, ast.Comment{Text: "// ```\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   73,
						},
						File:   "array.flux",
						Source: "fromStr",
						Start: ast.Position{
							Column: 1,
							Line:   73,
						},
					},
				},
				Name: "fromStr",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 52,
							Line:   73,
						},
						File:   "array.flux",
						Source: "(arr) => ejson.parse(data: bytes(v: arr))",
						Start: ast.Position{
							Column: 11,
							Line:   73,
						},
					},
				},
				Body: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   73,
								},
								File:   "array.flux",
								Source: "data: bytes(v: arr)",
								Start: ast.Position{
									Column: 32,
									Line:   73,
								},
							},
						},
						Lbrace: nil,
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   73,
									},
									File:   "array.flux",
									Source: "data: bytes(v: arr)",
									Start: ast.Position{
										Column: 32,
										Line:   73,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   73,
										},
										File:   "array.flux",
										Source: "data",
										Start: ast.Position{
											Column: 32,
											Line:   73,
										},
									},
								},
								Name: "data",
							},
							Separator: nil,
							Value: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 50,
												Line:   73,
											},
											File:   "array.flux",
											Source: "v: arr",
											Start: ast.Position{
												Column: 44,
												Line:   73,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   73,
												},
												File:   "array.flux",
												Source: "v: arr",
												Start: ast.Position{
													Column: 44,
													Line:   73,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   73,
													},
													File:   "array.flux",
													Source: "v",
													Start: ast.Position{
														Column: 44,
														Line:   73,
													},
												},
											},
											Name: "v",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 50,
														Line:   73,
													},
													File:   "array.flux",
													Source: "arr",
													Start: ast.Position{
														Column: 47,
														Line:   73,
													},
												},
											},
											Name: "arr",
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   73,
										},
										File:   "array.flux",
										Source: "bytes(v: arr)",
										Start: ast.Position{
											Column: 38,
											Line:   73,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   73,
											},
											File:   "array.flux",
											Source: "bytes",
											Start: ast.Position{
												Column: 38,
												Line:   73,
											},
										},
									},
									Name: "bytes",
								},
								Lparen: nil,
								Rparen: nil,
							},
						}},
						Rbrace: nil,
						With:   nil,
					}},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 52,
								Line:   73,
							},
							File:   "array.flux",
							Source: "ejson.parse(data: bytes(v: arr))",
							Start: ast.Position{
								Column: 20,
								Line:   73,
							},
						},
					},
					Callee: &ast.MemberExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   73,
								},
								File:   "array.flux",
								Source: "ejson.parse",
								Start: ast.Position{
									Column: 20,
									Line:   73,
								},
							},
						},
						Lbrack: nil,
						Object: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   73,
									},
									File:   "array.flux",
									Source: "ejson",
									Start: ast.Position{
										Column: 20,
										Line:   73,
									},
								},
							},
							Name: "ejson",
						},
						Property: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   73,
									},
									File:   "array.flux",
									Source: "parse",
									Start: ast.Position{
										Column: 26,
										Line:   73,
									},
								},
							},
							Name: "parse",
						},
						Rbrack: nil,
					},
					Lparen: nil,
					Rparen: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   73,
							},
							File:   "array.flux",
							Source: "arr",
							Start: ast.Position{
								Column: 12,
								Line:   73,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   73,
								},
								File:   "array.flux",
								Source: "arr",
								Start: ast.Position{
									Column: 12,
									Line:   73,
								},
							},
						},
						Name: "arr",
					},
					Separator: nil,
					Value:     nil,
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 99,
						Line:   106,
					},
					File:   "array.flux",
					Source: "appendStr = (arr = emptyStr, v) => string(v: json.encode(v: append(arr: fromStr(arr: arr), v: v)))",
					Start: ast.Position{
						Column: 1,
						Line:   106,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// appendStr is a function that appends value to JSON-encoded array.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "// - `arr` is the JSON-encoded array to operate on.\n"}, ast.Comment{Text: "// - `v` is the value to append to the array.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   Array may be empty. If not, value type must match the type of existing element(s).\n"}, ast.Comment{Text: "//   This variant of append is useful in transformations, because flux table column cannot be of array type.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Append to array\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"contrib/bonitoo-io/array\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// from(bucket: \"my-bucket\")\n"}, ast.Comment{Text: "//   |> range(start: -1h)\n"}, ast.Comment{Text: "//   |> reduce(\n"}, ast.Comment{Text: "//       fn: (r, accumulator) => ({\n"}, ast.Comment{Text: "//           sarr: array.appendStr(arr: accumulator.sarr, v: [r._value])\n"}, ast.Comment{Text: "//       }),\n"}, ast.Comment{Text: "//       identity: {\n"}, ast.Comment{Text: "//           sarr: array.emptyStr  // \"[]\"\n"}, ast.Comment{Text: "//       }\n"}, ast.Comment{Text: "//   )\n"}, ast.Comment{Text: "//   |> map(fn: (r) => ({ r with status:\n"}, ast.Comment{Text: "//       http.post(\n"}, ast.Comment{Text: "//           url: \"http://endpoint:12345/\",\n"}, ast.Comment{Text: "//           data: json.encode(v: array.fromStr(arr: r.sarr))\n"}, ast.Comment{Text: "//       )})\n"}, ast.Comment{Text: "//  )\n"}, ast.Comment{Text: "// ```\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   106,
						},
						File:   "array.flux",
						Source: "appendStr",
						Start: ast.Position{
							Column: 1,
							Line:   106,
						},
					},
				},
				Name: "appendStr",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 99,
							Line:   106,
						},
						File:   "array.flux",
						Source: "(arr = emptyStr, v) => string(v: json.encode(v: append(arr: fromStr(arr: arr), v: v)))",
						Start: ast.Position{
							Column: 13,
							Line:   106,
						},
					},
				},
				Body: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 98,
									Line:   106,
								},
								File:   "array.flux",
								Source: "v: json.encode(v: append(arr: fromStr(arr: arr), v: v))",
								Start: ast.Position{
									Column: 43,
									Line:   106,
								},
							},
						},
						Lbrace: nil,
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 98,
										Line:   106,
									},
									File:   "array.flux",
									Source: "v: json.encode(v: append(arr: fromStr(arr: arr), v: v))",
									Start: ast.Position{
										Column: 43,
										Line:   106,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 44,
											Line:   106,
										},
										File:   "array.flux",
										Source: "v",
										Start: ast.Position{
											Column: 43,
											Line:   106,
										},
									},
								},
								Name: "v",
							},
							Separator: nil,
							Value: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 97,
												Line:   106,
											},
											File:   "array.flux",
											Source: "v: append(arr: fromStr(arr: arr), v: v)",
											Start: ast.Position{
												Column: 58,
												Line:   106,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 97,
													Line:   106,
												},
												File:   "array.flux",
												Source: "v: append(arr: fromStr(arr: arr), v: v)",
												Start: ast.Position{
													Column: 58,
													Line:   106,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 59,
														Line:   106,
													},
													File:   "array.flux",
													Source: "v",
													Start: ast.Position{
														Column: 58,
														Line:   106,
													},
												},
											},
											Name: "v",
										},
										Separator: nil,
										Value: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 96,
															Line:   106,
														},
														File:   "array.flux",
														Source: "arr: fromStr(arr: arr), v: v",
														Start: ast.Position{
															Column: 68,
															Line:   106,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 90,
																Line:   106,
															},
															File:   "array.flux",
															Source: "arr: fromStr(arr: arr)",
															Start: ast.Position{
																Column: 68,
																Line:   106,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 71,
																	Line:   106,
																},
																File:   "array.flux",
																Source: "arr",
																Start: ast.Position{
																	Column: 68,
																	Line:   106,
																},
															},
														},
														Name: "arr",
													},
													Separator: nil,
													Value: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 89,
																		Line:   106,
																	},
																	File:   "array.flux",
																	Source: "arr: arr",
																	Start: ast.Position{
																		Column: 81,
																		Line:   106,
																	},
																},
															},
															Lbrace: nil,
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 89,
																			Line:   106,
																		},
																		File:   "array.flux",
																		Source: "arr: arr",
																		Start: ast.Position{
																			Column: 81,
																			Line:   106,
																		},
																	},
																},
																Comma: nil,
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 84,
																				Line:   106,
																			},
																			File:   "array.flux",
																			Source: "arr",
																			Start: ast.Position{
																				Column: 81,
																				Line:   106,
																			},
																		},
																	},
																	Name: "arr",
																},
																Separator: nil,
																Value: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 89,
																				Line:   106,
																			},
																			File:   "array.flux",
																			Source: "arr",
																			Start: ast.Position{
																				Column: 86,
																				Line:   106,
																			},
																		},
																	},
																	Name: "arr",
																},
															}},
															Rbrace: nil,
															With:   nil,
														}},
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 90,
																	Line:   106,
																},
																File:   "array.flux",
																Source: "fromStr(arr: arr)",
																Start: ast.Position{
																	Column: 73,
																	Line:   106,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 80,
																		Line:   106,
																	},
																	File:   "array.flux",
																	Source: "fromStr",
																	Start: ast.Position{
																		Column: 73,
																		Line:   106,
																	},
																},
															},
															Name: "fromStr",
														},
														Lparen: nil,
														Rparen: nil,
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 96,
																Line:   106,
															},
															File:   "array.flux",
															Source: "v: v",
															Start: ast.Position{
																Column: 92,
																Line:   106,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 93,
																	Line:   106,
																},
																File:   "array.flux",
																Source: "v",
																Start: ast.Position{
																	Column: 92,
																	Line:   106,
																},
															},
														},
														Name: "v",
													},
													Separator: nil,
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 96,
																	Line:   106,
																},
																File:   "array.flux",
																Source: "v",
																Start: ast.Position{
																	Column: 95,
																	Line:   106,
																},
															},
														},
														Name: "v",
													},
												}},
												Rbrace: nil,
												With:   nil,
											}},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 97,
														Line:   106,
													},
													File:   "array.flux",
													Source: "append(arr: fromStr(arr: arr), v: v)",
													Start: ast.Position{
														Column: 61,
														Line:   106,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 67,
															Line:   106,
														},
														File:   "array.flux",
														Source: "append",
														Start: ast.Position{
															Column: 61,
															Line:   106,
														},
													},
												},
												Name: "append",
											},
											Lparen: nil,
											Rparen: nil,
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 98,
											Line:   106,
										},
										File:   "array.flux",
										Source: "json.encode(v: append(arr: fromStr(arr: arr), v: v))",
										Start: ast.Position{
											Column: 46,
											Line:   106,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   106,
											},
											File:   "array.flux",
											Source: "json.encode",
											Start: ast.Position{
												Column: 46,
												Line:   106,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   106,
												},
												File:   "array.flux",
												Source: "json",
												Start: ast.Position{
													Column: 46,
													Line:   106,
												},
											},
										},
										Name: "json",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   106,
												},
												File:   "array.flux",
												Source: "encode",
												Start: ast.Position{
													Column: 51,
													Line:   106,
												},
											},
										},
										Name: "encode",
									},
									Rbrack: nil,
								},
								Lparen: nil,
								Rparen: nil,
							},
						}},
						Rbrace: nil,
						With:   nil,
					}},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 99,
								Line:   106,
							},
							File:   "array.flux",
							Source: "string(v: json.encode(v: append(arr: fromStr(arr: arr), v: v)))",
							Start: ast.Position{
								Column: 36,
								Line:   106,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   106,
								},
								File:   "array.flux",
								Source: "string",
								Start: ast.Position{
									Column: 36,
									Line:   106,
								},
							},
						},
						Name: "string",
					},
					Lparen: nil,
					Rparen: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   106,
							},
							File:   "array.flux",
							Source: "arr = emptyStr",
							Start: ast.Position{
								Column: 14,
								Line:   106,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   106,
								},
								File:   "array.flux",
								Source: "arr",
								Start: ast.Position{
									Column: 14,
									Line:   106,
								},
							},
						},
						Name: "arr",
					},
					Separator: nil,
					Value: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   106,
								},
								File:   "array.flux",
								Source: "emptyStr",
								Start: ast.Position{
									Column: 20,
									Line:   106,
								},
							},
						},
						Name: "emptyStr",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   106,
							},
							File:   "array.flux",
							Source: "v",
							Start: ast.Position{
								Column: 30,
								Line:   106,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   106,
								},
								File:   "array.flux",
								Source: "v",
								Start: ast.Position{
									Column: 30,
									Line:   106,
								},
							},
						},
						Name: "v",
					},
					Separator: nil,
					Value:     nil,
				}},
				Rparan: nil,
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   5,
						},
						File:   "array.flux",
						Source: "ejson",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Name: "ejson",
			},
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 33,
						Line:   5,
					},
					File:   "array.flux",
					Source: "import ejson \"experimental/json\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 33,
							Line:   5,
						},
						File:   "array.flux",
						Source: "\"experimental/json\"",
						Start: ast.Position{
							Column: 14,
							Line:   5,
						},
					},
				},
				Value: "experimental/json",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   6,
					},
					File:   "array.flux",
					Source: "import \"json\"",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   6,
						},
						File:   "array.flux",
						Source: "\"json\"",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				Value: "json",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "array.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Package array provides functions for interacting with arrays.\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   2,
					},
					File:   "array.flux",
					Source: "package array",
					Start: ast.Position{
						Column: 1,
						Line:   2,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   2,
						},
						File:   "array.flux",
						Source: "array",
						Start: ast.Position{
							Column: 9,
							Line:   2,
						},
					},
				},
				Name: "array",
			},
		},
	}},
	Package: "array",
	Path:    "contrib/bonitoo-io/array",
}
