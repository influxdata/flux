// DO NOT EDIT: This file is autogenerated via the builtin command.

package tickscript

import (
	ast "github.com/influxdata/flux/ast"
	parser "github.com/influxdata/flux/internal/parser"
	runtime "github.com/influxdata/flux/runtime"
	"regexp"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 69,
					Line:   148,
				},
				File:   "tickscript.flux",
				Source: "package tickscript\n\n\nimport \"experimental\"\nimport \"experimental/array\"\nimport \"influxdata/influxdb\"\nimport \"influxdata/influxdb/monitor\"\nimport \"influxdata/influxdb/schema\"\nimport \"universe\"\n\n// defineCheck creates custom check data required by alert() and deadman()\ndefineCheck = (id, name, type=\"custom\") => {\n    return {\n        _check_id: id,\n        _check_name: name,\n        _type: type,\n        tags: {},\n    }\n}\n\n// alert is a helper function similar to TICKscript alert.\nalert = (check, id=(r) => \"${r._check_id}\", details=(r) => \"\", message=(r) => \"Threshold Check: ${r._check_name} is: ${r._level}\", crit=(r) => false, warn=(r) => false, info=(r) => false, ok=(r) => true, topic=\"\", tables=<-) => {\n    _addTopic = if topic != \"\" then\n        (tables=<-) => tables\n            |> set(key: \"_topic\", value: topic)\n            |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    else\n        (tables=<-) => tables\n\n    return tables\n        |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n        |> map(\n            fn: (r) => ({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            }),\n        )\n        |> map(fn: (r) => ({r with id: id(r: r)}))\n        |> map(fn: (r) => ({r with details: details(r: r)}))\n        |> _addTopic()\n        |> monitor.check(\n            crit: crit,\n            warn: warn,\n            info: info,\n            ok: ok,\n            messageFn: message,\n            data: check,\n        )\n}\n\n// deadman is a helper function similar to TICKscript deadman.\ndeadman = (check, measurement, threshold=0, id=(r) => \"${r._check_id}\", message=(r) => \"Deadman Check: ${r._check_name} is: \" + (if r.dead then \"dead\" else \"alive\"), topic=\"\", tables=<-) => {\n    // In order to detect empty stream (without tables), we concatenate input with dummy stream and count the result,\n    // because count() returns nothing for empty stream. If the input stream is empty, then dummy stream with empty\n    // table is used as input for actual threshold check in order to get 0.\n    _dummy = array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n        |> set(key: \"_measurement\", value: measurement)\n        // required by monitor.check\n        |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")\n        // input tables are expected to be pivoted already    \n        |> schema.fieldsAsCols()\n    _counts = union(tables: [_dummy, tables])\n        |> keep(columns: [\"_measurement\", \"_time\"])\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        |> findColumn(fn: (key) => key._measurement == measurement, column: \"__value__\")\n    _tables = \n        // only dummy table is in the concatenated stream\n        if _counts[0] == 1 then\n            _dummy\n                |> drop(columns: [\"unknown\"])\n                // need empty table\n                |> limit(n: 0)\n        else\n            tables\n\n    return _tables\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        // recreate _time column after aggregation\n        |> map(fn: (r) => ({r with _time: now()}))\n        // same tag that monitor.deadman() adds\n        |> map(fn: (r) => ({r with dead: r.__value__ <= threshold}))\n        // drop dummy field\n        |> drop(columns: [\"__value__\"])\n        |> alert(\n            check: check,\n            id: id,\n            message: message,\n            crit: (r) => r.dead,\n            topic: topic,\n        )\n}\n\n// select selects a column and optionally computes aggregated value.\n// It is meant to be a convenience function to be used for:\n//\n//   query(\"SELECT x AS y\")\n//   query(\"SELECT f(x) AS y\") without time grouping\n//\nselect = (column=\"_value\", fn=(column, tables=<-) => tables, as, tables=<-) => {\n    _column = column\n    _as = as\n\n    return tables\n        |> fn(column: _column)\n        |> rename(fn: (column) => if column == _column then _as else column)\n}\n\n// selectWindow selects a column with time grouping and computes aggregated values.\n// It is a convenience function to be used as\n//\n//   query(\"SELECT f(x) AS y\")\n//     .groupBy(time(t), ...)\n//\nselectWindow = (column=\"_value\", fn, as, every, defaultValue, tables=<-) => {\n    _column = column\n    _as = as\n\n    return tables\n        |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n        |> fill(column: _column, value: defaultValue)\n        |> rename(fn: (column) => if column == _column then _as else column)\n}\n\n// compute computes aggregated value of the input data.\n// It is a convenience function to be used as\n//\n//   |median('x)'\n//      .as(y)\n//\ncompute = select\n\n// groupBy groups by specified columns.\n// It is a convenience function, it adds _measurement column which is required by monitor.check().\ngroupBy = (columns, tables=<-) => tables\n    |> group(columns: columns)\n    // required by monitor.check\n    |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")\n\n// join merges two streams using standard join().\n// It is meant a convenience function, it ensures _measurement column exists and is in the group key.\njoin = (tables, on=[\"_time\"], measurement) => universe.join(tables: tables, on: on)\n    |> map(fn: (r) => ({r with _measurement: measurement}))\n    // required by monitor.check\n    |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   19,
					},
					File:   "tickscript.flux",
					Source: "defineCheck = (id, name, type=\"custom\") => {\n    return {\n        _check_id: id,\n        _check_name: name,\n        _type: type,\n        tags: {},\n    }\n}",
					Start: ast.Position{
						Column: 1,
						Line:   12,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// defineCheck creates custom check data required by alert() and deadman()\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   12,
						},
						File:   "tickscript.flux",
						Source: "defineCheck",
						Start: ast.Position{
							Column: 1,
							Line:   12,
						},
					},
				},
				Name: "defineCheck",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   19,
						},
						File:   "tickscript.flux",
						Source: "(id, name, type=\"custom\") => {\n    return {\n        _check_id: id,\n        _check_name: name,\n        _type: type,\n        tags: {},\n    }\n}",
						Start: ast.Position{
							Column: 15,
							Line:   12,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   19,
							},
							File:   "tickscript.flux",
							Source: "{\n    return {\n        _check_id: id,\n        _check_name: name,\n        _type: type,\n        tags: {},\n    }\n}",
							Start: ast.Position{
								Column: 44,
								Line:   12,
							},
						},
					},
					Body: []ast.Statement{&ast.ReturnStatement{
						Argument: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   18,
									},
									File:   "tickscript.flux",
									Source: "{\n        _check_id: id,\n        _check_name: name,\n        _type: type,\n        tags: {},\n    }",
									Start: ast.Position{
										Column: 12,
										Line:   13,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   14,
										},
										File:   "tickscript.flux",
										Source: "_check_id: id",
										Start: ast.Position{
											Column: 9,
											Line:   14,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   14,
											},
											File:   "tickscript.flux",
											Source: "_check_id",
											Start: ast.Position{
												Column: 9,
												Line:   14,
											},
										},
									},
									Name: "_check_id",
								},
								Separator: nil,
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   14,
											},
											File:   "tickscript.flux",
											Source: "id",
											Start: ast.Position{
												Column: 20,
												Line:   14,
											},
										},
									},
									Name: "id",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   15,
										},
										File:   "tickscript.flux",
										Source: "_check_name: name",
										Start: ast.Position{
											Column: 9,
											Line:   15,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   15,
											},
											File:   "tickscript.flux",
											Source: "_check_name",
											Start: ast.Position{
												Column: 9,
												Line:   15,
											},
										},
									},
									Name: "_check_name",
								},
								Separator: nil,
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   15,
											},
											File:   "tickscript.flux",
											Source: "name",
											Start: ast.Position{
												Column: 22,
												Line:   15,
											},
										},
									},
									Name: "name",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   16,
										},
										File:   "tickscript.flux",
										Source: "_type: type",
										Start: ast.Position{
											Column: 9,
											Line:   16,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   16,
											},
											File:   "tickscript.flux",
											Source: "_type",
											Start: ast.Position{
												Column: 9,
												Line:   16,
											},
										},
									},
									Name: "_type",
								},
								Separator: nil,
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   16,
											},
											File:   "tickscript.flux",
											Source: "type",
											Start: ast.Position{
												Column: 16,
												Line:   16,
											},
										},
									},
									Name: "type",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   17,
										},
										File:   "tickscript.flux",
										Source: "tags: {}",
										Start: ast.Position{
											Column: 9,
											Line:   17,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   17,
											},
											File:   "tickscript.flux",
											Source: "tags",
											Start: ast.Position{
												Column: 9,
												Line:   17,
											},
										},
									},
									Name: "tags",
								},
								Separator: nil,
								Value: &ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   17,
											},
											File:   "tickscript.flux",
											Source: "{}",
											Start: ast.Position{
												Column: 15,
												Line:   17,
											},
										},
									},
									Lbrace:     nil,
									Properties: []*ast.Property{},
									Rbrace:     nil,
									With:       nil,
								},
							}},
							Rbrace: nil,
							With:   nil,
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   18,
								},
								File:   "tickscript.flux",
								Source: "return {\n        _check_id: id,\n        _check_name: name,\n        _type: type,\n        tags: {},\n    }",
								Start: ast.Position{
									Column: 5,
									Line:   13,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   12,
							},
							File:   "tickscript.flux",
							Source: "id",
							Start: ast.Position{
								Column: 16,
								Line:   12,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   12,
								},
								File:   "tickscript.flux",
								Source: "id",
								Start: ast.Position{
									Column: 16,
									Line:   12,
								},
							},
						},
						Name: "id",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   12,
							},
							File:   "tickscript.flux",
							Source: "name",
							Start: ast.Position{
								Column: 20,
								Line:   12,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   12,
								},
								File:   "tickscript.flux",
								Source: "name",
								Start: ast.Position{
									Column: 20,
									Line:   12,
								},
							},
						},
						Name: "name",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   12,
							},
							File:   "tickscript.flux",
							Source: "type=\"custom\"",
							Start: ast.Position{
								Column: 26,
								Line:   12,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   12,
								},
								File:   "tickscript.flux",
								Source: "type",
								Start: ast.Position{
									Column: 26,
									Line:   12,
								},
							},
						},
						Name: "type",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   12,
								},
								File:   "tickscript.flux",
								Source: "\"custom\"",
								Start: ast.Position{
									Column: 31,
									Line:   12,
								},
							},
						},
						Value: "custom",
					},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   49,
					},
					File:   "tickscript.flux",
					Source: "alert = (check, id=(r) => \"${r._check_id}\", details=(r) => \"\", message=(r) => \"Threshold Check: ${r._check_name} is: ${r._level}\", crit=(r) => false, warn=(r) => false, info=(r) => false, ok=(r) => true, topic=\"\", tables=<-) => {\n    _addTopic = if topic != \"\" then\n        (tables=<-) => tables\n            |> set(key: \"_topic\", value: topic)\n            |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    else\n        (tables=<-) => tables\n\n    return tables\n        |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n        |> map(\n            fn: (r) => ({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            }),\n        )\n        |> map(fn: (r) => ({r with id: id(r: r)}))\n        |> map(fn: (r) => ({r with details: details(r: r)}))\n        |> _addTopic()\n        |> monitor.check(\n            crit: crit,\n            warn: warn,\n            info: info,\n            ok: ok,\n            messageFn: message,\n            data: check,\n        )\n}",
					Start: ast.Position{
						Column: 1,
						Line:   22,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// alert is a helper function similar to TICKscript alert.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   22,
						},
						File:   "tickscript.flux",
						Source: "alert",
						Start: ast.Position{
							Column: 1,
							Line:   22,
						},
					},
				},
				Name: "alert",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   49,
						},
						File:   "tickscript.flux",
						Source: "(check, id=(r) => \"${r._check_id}\", details=(r) => \"\", message=(r) => \"Threshold Check: ${r._check_name} is: ${r._level}\", crit=(r) => false, warn=(r) => false, info=(r) => false, ok=(r) => true, topic=\"\", tables=<-) => {\n    _addTopic = if topic != \"\" then\n        (tables=<-) => tables\n            |> set(key: \"_topic\", value: topic)\n            |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    else\n        (tables=<-) => tables\n\n    return tables\n        |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n        |> map(\n            fn: (r) => ({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            }),\n        )\n        |> map(fn: (r) => ({r with id: id(r: r)}))\n        |> map(fn: (r) => ({r with details: details(r: r)}))\n        |> _addTopic()\n        |> monitor.check(\n            crit: crit,\n            warn: warn,\n            info: info,\n            ok: ok,\n            messageFn: message,\n            data: check,\n        )\n}",
						Start: ast.Position{
							Column: 9,
							Line:   22,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   49,
							},
							File:   "tickscript.flux",
							Source: "{\n    _addTopic = if topic != \"\" then\n        (tables=<-) => tables\n            |> set(key: \"_topic\", value: topic)\n            |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    else\n        (tables=<-) => tables\n\n    return tables\n        |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n        |> map(\n            fn: (r) => ({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            }),\n        )\n        |> map(fn: (r) => ({r with id: id(r: r)}))\n        |> map(fn: (r) => ({r with details: details(r: r)}))\n        |> _addTopic()\n        |> monitor.check(\n            crit: crit,\n            warn: warn,\n            info: info,\n            ok: ok,\n            messageFn: message,\n            data: check,\n        )\n}",
							Start: ast.Position{
								Column: 229,
								Line:   22,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   28,
								},
								File:   "tickscript.flux",
								Source: "_addTopic = if topic != \"\" then\n        (tables=<-) => tables\n            |> set(key: \"_topic\", value: topic)\n            |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    else\n        (tables=<-) => tables",
								Start: ast.Position{
									Column: 5,
									Line:   23,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   23,
									},
									File:   "tickscript.flux",
									Source: "_addTopic",
									Start: ast.Position{
										Column: 5,
										Line:   23,
									},
								},
							},
							Name: "_addTopic",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.FunctionExpression{
								Arrow: nil,
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   28,
										},
										File:   "tickscript.flux",
										Source: "(tables=<-) => tables",
										Start: ast.Position{
											Column: 9,
											Line:   28,
										},
									},
								},
								Body: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   28,
											},
											File:   "tickscript.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 24,
												Line:   28,
											},
										},
									},
									Name: "tables",
								},
								Lparen: nil,
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   28,
											},
											File:   "tickscript.flux",
											Source: "tables=<-",
											Start: ast.Position{
												Column: 10,
												Line:   28,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   28,
												},
												File:   "tickscript.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 10,
													Line:   28,
												},
											},
										},
										Name: "tables",
									},
									Separator: nil,
									Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   28,
											},
											File:   "tickscript.flux",
											Source: "<-",
											Start: ast.Position{
												Column: 17,
												Line:   28,
											},
										},
									}},
								}},
								Rparan: nil,
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   28,
									},
									File:   "tickscript.flux",
									Source: "if topic != \"\" then\n        (tables=<-) => tables\n            |> set(key: \"_topic\", value: topic)\n            |> experimental.group(mode: \"extend\", columns: [\"_topic\"])\n    else\n        (tables=<-) => tables",
									Start: ast.Position{
										Column: 17,
										Line:   23,
									},
								},
							},
							Consequent: &ast.FunctionExpression{
								Arrow: nil,
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 71,
											Line:   26,
										},
										File:   "tickscript.flux",
										Source: "(tables=<-) => tables\n            |> set(key: \"_topic\", value: topic)\n            |> experimental.group(mode: \"extend\", columns: [\"_topic\"])",
										Start: ast.Position{
											Column: 9,
											Line:   24,
										},
									},
								},
								Body: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   24,
													},
													File:   "tickscript.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 24,
														Line:   24,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   25,
												},
												File:   "tickscript.flux",
												Source: "tables\n            |> set(key: \"_topic\", value: topic)",
												Start: ast.Position{
													Column: 24,
													Line:   24,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   25,
														},
														File:   "tickscript.flux",
														Source: "key: \"_topic\", value: topic",
														Start: ast.Position{
															Column: 20,
															Line:   25,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   25,
															},
															File:   "tickscript.flux",
															Source: "key: \"_topic\"",
															Start: ast.Position{
																Column: 20,
																Line:   25,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 23,
																	Line:   25,
																},
																File:   "tickscript.flux",
																Source: "key",
																Start: ast.Position{
																	Column: 20,
																	Line:   25,
																},
															},
														},
														Name: "key",
													},
													Separator: nil,
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   25,
																},
																File:   "tickscript.flux",
																Source: "\"_topic\"",
																Start: ast.Position{
																	Column: 25,
																	Line:   25,
																},
															},
														},
														Value: "_topic",
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   25,
															},
															File:   "tickscript.flux",
															Source: "value: topic",
															Start: ast.Position{
																Column: 35,
																Line:   25,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   25,
																},
																File:   "tickscript.flux",
																Source: "value",
																Start: ast.Position{
																	Column: 35,
																	Line:   25,
																},
															},
														},
														Name: "value",
													},
													Separator: nil,
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   25,
																},
																File:   "tickscript.flux",
																Source: "topic",
																Start: ast.Position{
																	Column: 42,
																	Line:   25,
																},
															},
														},
														Name: "topic",
													},
												}},
												Rbrace: nil,
												With:   nil,
											}},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   25,
													},
													File:   "tickscript.flux",
													Source: "set(key: \"_topic\", value: topic)",
													Start: ast.Position{
														Column: 16,
														Line:   25,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   25,
														},
														File:   "tickscript.flux",
														Source: "set",
														Start: ast.Position{
															Column: 16,
															Line:   25,
														},
													},
												},
												Name: "set",
											},
											Lparen: nil,
											Rparen: nil,
										},
									},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 71,
												Line:   26,
											},
											File:   "tickscript.flux",
											Source: "tables\n            |> set(key: \"_topic\", value: topic)\n            |> experimental.group(mode: \"extend\", columns: [\"_topic\"])",
											Start: ast.Position{
												Column: 24,
												Line:   24,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 70,
														Line:   26,
													},
													File:   "tickscript.flux",
													Source: "mode: \"extend\", columns: [\"_topic\"]",
													Start: ast.Position{
														Column: 35,
														Line:   26,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 49,
															Line:   26,
														},
														File:   "tickscript.flux",
														Source: "mode: \"extend\"",
														Start: ast.Position{
															Column: 35,
															Line:   26,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 39,
																Line:   26,
															},
															File:   "tickscript.flux",
															Source: "mode",
															Start: ast.Position{
																Column: 35,
																Line:   26,
															},
														},
													},
													Name: "mode",
												},
												Separator: nil,
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 49,
																Line:   26,
															},
															File:   "tickscript.flux",
															Source: "\"extend\"",
															Start: ast.Position{
																Column: 41,
																Line:   26,
															},
														},
													},
													Value: "extend",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 70,
															Line:   26,
														},
														File:   "tickscript.flux",
														Source: "columns: [\"_topic\"]",
														Start: ast.Position{
															Column: 51,
															Line:   26,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 58,
																Line:   26,
															},
															File:   "tickscript.flux",
															Source: "columns",
															Start: ast.Position{
																Column: 51,
																Line:   26,
															},
														},
													},
													Name: "columns",
												},
												Separator: nil,
												Value: &ast.ArrayExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 70,
																Line:   26,
															},
															File:   "tickscript.flux",
															Source: "[\"_topic\"]",
															Start: ast.Position{
																Column: 60,
																Line:   26,
															},
														},
													},
													Elements: []ast.Expression{&ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 69,
																	Line:   26,
																},
																File:   "tickscript.flux",
																Source: "\"_topic\"",
																Start: ast.Position{
																	Column: 61,
																	Line:   26,
																},
															},
														},
														Value: "_topic",
													}},
													Lbrack: nil,
													Rbrack: nil,
												},
											}},
											Rbrace: nil,
											With:   nil,
										}},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 71,
													Line:   26,
												},
												File:   "tickscript.flux",
												Source: "experimental.group(mode: \"extend\", columns: [\"_topic\"])",
												Start: ast.Position{
													Column: 16,
													Line:   26,
												},
											},
										},
										Callee: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   26,
													},
													File:   "tickscript.flux",
													Source: "experimental.group",
													Start: ast.Position{
														Column: 16,
														Line:   26,
													},
												},
											},
											Lbrack: nil,
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   26,
														},
														File:   "tickscript.flux",
														Source: "experimental",
														Start: ast.Position{
															Column: 16,
															Line:   26,
														},
													},
												},
												Name: "experimental",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   26,
														},
														File:   "tickscript.flux",
														Source: "group",
														Start: ast.Position{
															Column: 29,
															Line:   26,
														},
													},
												},
												Name: "group",
											},
											Rbrack: nil,
										},
										Lparen: nil,
										Rparen: nil,
									},
								},
								Lparen: nil,
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   24,
											},
											File:   "tickscript.flux",
											Source: "tables=<-",
											Start: ast.Position{
												Column: 10,
												Line:   24,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   24,
												},
												File:   "tickscript.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 10,
													Line:   24,
												},
											},
										},
										Name: "tables",
									},
									Separator: nil,
									Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   24,
											},
											File:   "tickscript.flux",
											Source: "<-",
											Start: ast.Position{
												Column: 17,
												Line:   24,
											},
										},
									}},
								}},
								Rparan: nil,
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   23,
										},
										File:   "tickscript.flux",
										Source: "topic != \"\"",
										Start: ast.Position{
											Column: 20,
											Line:   23,
										},
									},
								},
								Left: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   23,
											},
											File:   "tickscript.flux",
											Source: "topic",
											Start: ast.Position{
												Column: 20,
												Line:   23,
											},
										},
									},
									Name: "topic",
								},
								Operator: 18,
								Right: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   23,
											},
											File:   "tickscript.flux",
											Source: "\"\"",
											Start: ast.Position{
												Column: 29,
												Line:   23,
											},
										},
									},
									Value: "",
								},
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   30,
															},
															File:   "tickscript.flux",
															Source: "tables",
															Start: ast.Position{
																Column: 12,
																Line:   30,
															},
														},
													},
													Name: "tables",
												},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 77,
															Line:   31,
														},
														File:   "tickscript.flux",
														Source: "tables\n        |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)",
														Start: ast.Position{
															Column: 12,
															Line:   30,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 76,
																	Line:   31,
																},
																File:   "tickscript.flux",
																Source: "fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/",
																Start: ast.Position{
																	Column: 17,
																	Line:   31,
																},
															},
														},
														Lbrace: nil,
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 76,
																		Line:   31,
																	},
																	File:   "tickscript.flux",
																	Source: "fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/",
																	Start: ast.Position{
																		Column: 17,
																		Line:   31,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 19,
																			Line:   31,
																		},
																		File:   "tickscript.flux",
																		Source: "fn",
																		Start: ast.Position{
																			Column: 17,
																			Line:   31,
																		},
																	},
																},
																Name: "fn",
															},
															Separator: nil,
															Value: &ast.FunctionExpression{
																Arrow: nil,
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 76,
																			Line:   31,
																		},
																		File:   "tickscript.flux",
																		Source: "(column) => column =~ /_start.*/ or column =~ /_stop.*/",
																		Start: ast.Position{
																			Column: 21,
																			Line:   31,
																		},
																	},
																},
																Body: &ast.LogicalExpression{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 76,
																				Line:   31,
																			},
																			File:   "tickscript.flux",
																			Source: "column =~ /_start.*/ or column =~ /_stop.*/",
																			Start: ast.Position{
																				Column: 33,
																				Line:   31,
																			},
																		},
																	},
																	Left: &ast.BinaryExpression{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 53,
																					Line:   31,
																				},
																				File:   "tickscript.flux",
																				Source: "column =~ /_start.*/",
																				Start: ast.Position{
																					Column: 33,
																					Line:   31,
																				},
																			},
																		},
																		Left: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 39,
																						Line:   31,
																					},
																					File:   "tickscript.flux",
																					Source: "column",
																					Start: ast.Position{
																						Column: 33,
																						Line:   31,
																					},
																				},
																			},
																			Name: "column",
																		},
																		Operator: 19,
																		Right: &ast.RegexpLiteral{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 53,
																						Line:   31,
																					},
																					File:   "tickscript.flux",
																					Source: "/_start.*/",
																					Start: ast.Position{
																						Column: 43,
																						Line:   31,
																					},
																				},
																			},
																			Value: regexp.MustCompile("_start.*"),
																		},
																	},
																	Operator: 2,
																	Right: &ast.BinaryExpression{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 76,
																					Line:   31,
																				},
																				File:   "tickscript.flux",
																				Source: "column =~ /_stop.*/",
																				Start: ast.Position{
																					Column: 57,
																					Line:   31,
																				},
																			},
																		},
																		Left: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 63,
																						Line:   31,
																					},
																					File:   "tickscript.flux",
																					Source: "column",
																					Start: ast.Position{
																						Column: 57,
																						Line:   31,
																					},
																				},
																			},
																			Name: "column",
																		},
																		Operator: 19,
																		Right: &ast.RegexpLiteral{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 76,
																						Line:   31,
																					},
																					File:   "tickscript.flux",
																					Source: "/_stop.*/",
																					Start: ast.Position{
																						Column: 67,
																						Line:   31,
																					},
																				},
																			},
																			Value: regexp.MustCompile("_stop.*"),
																		},
																	},
																},
																Lparen: nil,
																Params: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 28,
																				Line:   31,
																			},
																			File:   "tickscript.flux",
																			Source: "column",
																			Start: ast.Position{
																				Column: 22,
																				Line:   31,
																			},
																		},
																	},
																	Comma: nil,
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 28,
																					Line:   31,
																				},
																				File:   "tickscript.flux",
																				Source: "column",
																				Start: ast.Position{
																					Column: 22,
																					Line:   31,
																				},
																			},
																		},
																		Name: "column",
																	},
																	Separator: nil,
																	Value:     nil,
																}},
																Rparan: nil,
															},
														}},
														Rbrace: nil,
														With:   nil,
													}},
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 77,
																Line:   31,
															},
															File:   "tickscript.flux",
															Source: "drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)",
															Start: ast.Position{
																Column: 12,
																Line:   31,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 16,
																	Line:   31,
																},
																File:   "tickscript.flux",
																Source: "drop",
																Start: ast.Position{
																	Column: 12,
																	Line:   31,
																},
															},
														},
														Name: "drop",
													},
													Lparen: nil,
													Rparen: nil,
												},
											},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 10,
														Line:   37,
													},
													File:   "tickscript.flux",
													Source: "tables\n        |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n        |> map(\n            fn: (r) => ({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            }),\n        )",
													Start: ast.Position{
														Column: 12,
														Line:   30,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 15,
																Line:   36,
															},
															File:   "tickscript.flux",
															Source: "fn: (r) => ({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            })",
															Start: ast.Position{
																Column: 13,
																Line:   33,
															},
														},
													},
													Lbrace: nil,
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 15,
																	Line:   36,
																},
																File:   "tickscript.flux",
																Source: "fn: (r) => ({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            })",
																Start: ast.Position{
																	Column: 13,
																	Line:   33,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 15,
																		Line:   33,
																	},
																	File:   "tickscript.flux",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 13,
																		Line:   33,
																	},
																},
															},
															Name: "fn",
														},
														Separator: nil,
														Value: &ast.FunctionExpression{
															Arrow: nil,
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 15,
																		Line:   36,
																	},
																	File:   "tickscript.flux",
																	Source: "(r) => ({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            })",
																	Start: ast.Position{
																		Column: 17,
																		Line:   33,
																	},
																},
															},
															Body: &ast.ParenExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 15,
																			Line:   36,
																		},
																		File:   "tickscript.flux",
																		Source: "({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            })",
																		Start: ast.Position{
																			Column: 24,
																			Line:   33,
																		},
																	},
																},
																Expression: &ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 14,
																				Line:   36,
																			},
																			File:   "tickscript.flux",
																			Source: "{r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            }",
																			Start: ast.Position{
																				Column: 25,
																				Line:   33,
																			},
																		},
																	},
																	Lbrace: nil,
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 43,
																					Line:   34,
																				},
																				File:   "tickscript.flux",
																				Source: "_check_id: check._check_id",
																				Start: ast.Position{
																					Column: 17,
																					Line:   34,
																				},
																			},
																		},
																		Comma: nil,
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 26,
																						Line:   34,
																					},
																					File:   "tickscript.flux",
																					Source: "_check_id",
																					Start: ast.Position{
																						Column: 17,
																						Line:   34,
																					},
																				},
																			},
																			Name: "_check_id",
																		},
																		Separator: nil,
																		Value: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 43,
																						Line:   34,
																					},
																					File:   "tickscript.flux",
																					Source: "check._check_id",
																					Start: ast.Position{
																						Column: 28,
																						Line:   34,
																					},
																				},
																			},
																			Lbrack: nil,
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 33,
																							Line:   34,
																						},
																						File:   "tickscript.flux",
																						Source: "check",
																						Start: ast.Position{
																							Column: 28,
																							Line:   34,
																						},
																					},
																				},
																				Name: "check",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 43,
																							Line:   34,
																						},
																						File:   "tickscript.flux",
																						Source: "_check_id",
																						Start: ast.Position{
																							Column: 34,
																							Line:   34,
																						},
																					},
																				},
																				Name: "_check_id",
																			},
																			Rbrack: nil,
																		},
																	}, &ast.Property{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 47,
																					Line:   35,
																				},
																				File:   "tickscript.flux",
																				Source: "_check_name: check._check_name",
																				Start: ast.Position{
																					Column: 17,
																					Line:   35,
																				},
																			},
																		},
																		Comma: nil,
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 28,
																						Line:   35,
																					},
																					File:   "tickscript.flux",
																					Source: "_check_name",
																					Start: ast.Position{
																						Column: 17,
																						Line:   35,
																					},
																				},
																			},
																			Name: "_check_name",
																		},
																		Separator: nil,
																		Value: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 47,
																						Line:   35,
																					},
																					File:   "tickscript.flux",
																					Source: "check._check_name",
																					Start: ast.Position{
																						Column: 30,
																						Line:   35,
																					},
																				},
																			},
																			Lbrack: nil,
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 35,
																							Line:   35,
																						},
																						File:   "tickscript.flux",
																						Source: "check",
																						Start: ast.Position{
																							Column: 30,
																							Line:   35,
																						},
																					},
																				},
																				Name: "check",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 47,
																							Line:   35,
																						},
																						File:   "tickscript.flux",
																						Source: "_check_name",
																						Start: ast.Position{
																							Column: 36,
																							Line:   35,
																						},
																					},
																				},
																				Name: "_check_name",
																			},
																			Rbrack: nil,
																		},
																	}},
																	Rbrace: nil,
																	With: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 27,
																					Line:   33,
																				},
																				File:   "tickscript.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 26,
																					Line:   33,
																				},
																			},
																		},
																		Name: "r",
																	},
																},
																Lparen: nil,
																Rparen: nil,
															},
															Lparen: nil,
															Params: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 19,
																			Line:   33,
																		},
																		File:   "tickscript.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 18,
																			Line:   33,
																		},
																	},
																},
																Comma: nil,
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 19,
																				Line:   33,
																			},
																			File:   "tickscript.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 18,
																				Line:   33,
																			},
																		},
																	},
																	Name: "r",
																},
																Separator: nil,
																Value:     nil,
															}},
															Rparan: nil,
														},
													}},
													Rbrace: nil,
													With:   nil,
												}},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 10,
															Line:   37,
														},
														File:   "tickscript.flux",
														Source: "map(\n            fn: (r) => ({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            }),\n        )",
														Start: ast.Position{
															Column: 12,
															Line:   32,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 15,
																Line:   32,
															},
															File:   "tickscript.flux",
															Source: "map",
															Start: ast.Position{
																Column: 12,
																Line:   32,
															},
														},
													},
													Name: "map",
												},
												Lparen: nil,
												Rparen: nil,
											},
										},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   38,
												},
												File:   "tickscript.flux",
												Source: "tables\n        |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n        |> map(\n            fn: (r) => ({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            }),\n        )\n        |> map(fn: (r) => ({r with id: id(r: r)}))",
												Start: ast.Position{
													Column: 12,
													Line:   30,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 50,
															Line:   38,
														},
														File:   "tickscript.flux",
														Source: "fn: (r) => ({r with id: id(r: r)})",
														Start: ast.Position{
															Column: 16,
															Line:   38,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 50,
																Line:   38,
															},
															File:   "tickscript.flux",
															Source: "fn: (r) => ({r with id: id(r: r)})",
															Start: ast.Position{
																Column: 16,
																Line:   38,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   38,
																},
																File:   "tickscript.flux",
																Source: "fn",
																Start: ast.Position{
																	Column: 16,
																	Line:   38,
																},
															},
														},
														Name: "fn",
													},
													Separator: nil,
													Value: &ast.FunctionExpression{
														Arrow: nil,
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 50,
																	Line:   38,
																},
																File:   "tickscript.flux",
																Source: "(r) => ({r with id: id(r: r)})",
																Start: ast.Position{
																	Column: 20,
																	Line:   38,
																},
															},
														},
														Body: &ast.ParenExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 50,
																		Line:   38,
																	},
																	File:   "tickscript.flux",
																	Source: "({r with id: id(r: r)})",
																	Start: ast.Position{
																		Column: 27,
																		Line:   38,
																	},
																},
															},
															Expression: &ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 49,
																			Line:   38,
																		},
																		File:   "tickscript.flux",
																		Source: "{r with id: id(r: r)}",
																		Start: ast.Position{
																			Column: 28,
																			Line:   38,
																		},
																	},
																},
																Lbrace: nil,
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 48,
																				Line:   38,
																			},
																			File:   "tickscript.flux",
																			Source: "id: id(r: r)",
																			Start: ast.Position{
																				Column: 36,
																				Line:   38,
																			},
																		},
																	},
																	Comma: nil,
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 38,
																					Line:   38,
																				},
																				File:   "tickscript.flux",
																				Source: "id",
																				Start: ast.Position{
																					Column: 36,
																					Line:   38,
																				},
																			},
																		},
																		Name: "id",
																	},
																	Separator: nil,
																	Value: &ast.CallExpression{
																		Arguments: []ast.Expression{&ast.ObjectExpression{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 47,
																						Line:   38,
																					},
																					File:   "tickscript.flux",
																					Source: "r: r",
																					Start: ast.Position{
																						Column: 43,
																						Line:   38,
																					},
																				},
																			},
																			Lbrace: nil,
																			Properties: []*ast.Property{&ast.Property{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 47,
																							Line:   38,
																						},
																						File:   "tickscript.flux",
																						Source: "r: r",
																						Start: ast.Position{
																							Column: 43,
																							Line:   38,
																						},
																					},
																				},
																				Comma: nil,
																				Key: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Comments: nil,
																						Errors:   nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 44,
																								Line:   38,
																							},
																							File:   "tickscript.flux",
																							Source: "r",
																							Start: ast.Position{
																								Column: 43,
																								Line:   38,
																							},
																						},
																					},
																					Name: "r",
																				},
																				Separator: nil,
																				Value: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Comments: nil,
																						Errors:   nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 47,
																								Line:   38,
																							},
																							File:   "tickscript.flux",
																							Source: "r",
																							Start: ast.Position{
																								Column: 46,
																								Line:   38,
																							},
																						},
																					},
																					Name: "r",
																				},
																			}},
																			Rbrace: nil,
																			With:   nil,
																		}},
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 48,
																					Line:   38,
																				},
																				File:   "tickscript.flux",
																				Source: "id(r: r)",
																				Start: ast.Position{
																					Column: 40,
																					Line:   38,
																				},
																			},
																		},
																		Callee: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 42,
																						Line:   38,
																					},
																					File:   "tickscript.flux",
																					Source: "id",
																					Start: ast.Position{
																						Column: 40,
																						Line:   38,
																					},
																				},
																			},
																			Name: "id",
																		},
																		Lparen: nil,
																		Rparen: nil,
																	},
																}},
																Rbrace: nil,
																With: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   38,
																			},
																			File:   "tickscript.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 29,
																				Line:   38,
																			},
																		},
																	},
																	Name: "r",
																},
															},
															Lparen: nil,
															Rparen: nil,
														},
														Lparen: nil,
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 22,
																		Line:   38,
																	},
																	File:   "tickscript.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 21,
																		Line:   38,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 22,
																			Line:   38,
																		},
																		File:   "tickscript.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 21,
																			Line:   38,
																		},
																	},
																},
																Name: "r",
															},
															Separator: nil,
															Value:     nil,
														}},
														Rparan: nil,
													},
												}},
												Rbrace: nil,
												With:   nil,
											}},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   38,
													},
													File:   "tickscript.flux",
													Source: "map(fn: (r) => ({r with id: id(r: r)}))",
													Start: ast.Position{
														Column: 12,
														Line:   38,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   38,
														},
														File:   "tickscript.flux",
														Source: "map",
														Start: ast.Position{
															Column: 12,
															Line:   38,
														},
													},
												},
												Name: "map",
											},
											Lparen: nil,
											Rparen: nil,
										},
									},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 61,
												Line:   39,
											},
											File:   "tickscript.flux",
											Source: "tables\n        |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n        |> map(\n            fn: (r) => ({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            }),\n        )\n        |> map(fn: (r) => ({r with id: id(r: r)}))\n        |> map(fn: (r) => ({r with details: details(r: r)}))",
											Start: ast.Position{
												Column: 12,
												Line:   30,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 60,
														Line:   39,
													},
													File:   "tickscript.flux",
													Source: "fn: (r) => ({r with details: details(r: r)})",
													Start: ast.Position{
														Column: 16,
														Line:   39,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 60,
															Line:   39,
														},
														File:   "tickscript.flux",
														Source: "fn: (r) => ({r with details: details(r: r)})",
														Start: ast.Position{
															Column: 16,
															Line:   39,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   39,
															},
															File:   "tickscript.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 16,
																Line:   39,
															},
														},
													},
													Name: "fn",
												},
												Separator: nil,
												Value: &ast.FunctionExpression{
													Arrow: nil,
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   39,
															},
															File:   "tickscript.flux",
															Source: "(r) => ({r with details: details(r: r)})",
															Start: ast.Position{
																Column: 20,
																Line:   39,
															},
														},
													},
													Body: &ast.ParenExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   39,
																},
																File:   "tickscript.flux",
																Source: "({r with details: details(r: r)})",
																Start: ast.Position{
																	Column: 27,
																	Line:   39,
																},
															},
														},
														Expression: &ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 59,
																		Line:   39,
																	},
																	File:   "tickscript.flux",
																	Source: "{r with details: details(r: r)}",
																	Start: ast.Position{
																		Column: 28,
																		Line:   39,
																	},
																},
															},
															Lbrace: nil,
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 58,
																			Line:   39,
																		},
																		File:   "tickscript.flux",
																		Source: "details: details(r: r)",
																		Start: ast.Position{
																			Column: 36,
																			Line:   39,
																		},
																	},
																},
																Comma: nil,
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 43,
																				Line:   39,
																			},
																			File:   "tickscript.flux",
																			Source: "details",
																			Start: ast.Position{
																				Column: 36,
																				Line:   39,
																			},
																		},
																	},
																	Name: "details",
																},
																Separator: nil,
																Value: &ast.CallExpression{
																	Arguments: []ast.Expression{&ast.ObjectExpression{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 57,
																					Line:   39,
																				},
																				File:   "tickscript.flux",
																				Source: "r: r",
																				Start: ast.Position{
																					Column: 53,
																					Line:   39,
																				},
																			},
																		},
																		Lbrace: nil,
																		Properties: []*ast.Property{&ast.Property{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 57,
																						Line:   39,
																					},
																					File:   "tickscript.flux",
																					Source: "r: r",
																					Start: ast.Position{
																						Column: 53,
																						Line:   39,
																					},
																				},
																			},
																			Comma: nil,
																			Key: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 54,
																							Line:   39,
																						},
																						File:   "tickscript.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 53,
																							Line:   39,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Separator: nil,
																			Value: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 57,
																							Line:   39,
																						},
																						File:   "tickscript.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 56,
																							Line:   39,
																						},
																					},
																				},
																				Name: "r",
																			},
																		}},
																		Rbrace: nil,
																		With:   nil,
																	}},
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 58,
																				Line:   39,
																			},
																			File:   "tickscript.flux",
																			Source: "details(r: r)",
																			Start: ast.Position{
																				Column: 45,
																				Line:   39,
																			},
																		},
																	},
																	Callee: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 52,
																					Line:   39,
																				},
																				File:   "tickscript.flux",
																				Source: "details",
																				Start: ast.Position{
																					Column: 45,
																					Line:   39,
																				},
																			},
																		},
																		Name: "details",
																	},
																	Lparen: nil,
																	Rparen: nil,
																},
															}},
															Rbrace: nil,
															With: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 30,
																			Line:   39,
																		},
																		File:   "tickscript.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 29,
																			Line:   39,
																		},
																	},
																},
																Name: "r",
															},
														},
														Lparen: nil,
														Rparen: nil,
													},
													Lparen: nil,
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   39,
																},
																File:   "tickscript.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 21,
																	Line:   39,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 22,
																		Line:   39,
																	},
																	File:   "tickscript.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 21,
																		Line:   39,
																	},
																},
															},
															Name: "r",
														},
														Separator: nil,
														Value:     nil,
													}},
													Rparan: nil,
												},
											}},
											Rbrace: nil,
											With:   nil,
										}},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 61,
													Line:   39,
												},
												File:   "tickscript.flux",
												Source: "map(fn: (r) => ({r with details: details(r: r)}))",
												Start: ast.Position{
													Column: 12,
													Line:   39,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   39,
													},
													File:   "tickscript.flux",
													Source: "map",
													Start: ast.Position{
														Column: 12,
														Line:   39,
													},
												},
											},
											Name: "map",
										},
										Lparen: nil,
										Rparen: nil,
									},
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   40,
										},
										File:   "tickscript.flux",
										Source: "tables\n        |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n        |> map(\n            fn: (r) => ({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            }),\n        )\n        |> map(fn: (r) => ({r with id: id(r: r)}))\n        |> map(fn: (r) => ({r with details: details(r: r)}))\n        |> _addTopic()",
										Start: ast.Position{
											Column: 12,
											Line:   30,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: nil,
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   40,
											},
											File:   "tickscript.flux",
											Source: "_addTopic()",
											Start: ast.Position{
												Column: 12,
												Line:   40,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   40,
												},
												File:   "tickscript.flux",
												Source: "_addTopic",
												Start: ast.Position{
													Column: 12,
													Line:   40,
												},
											},
										},
										Name: "_addTopic",
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   48,
									},
									File:   "tickscript.flux",
									Source: "tables\n        |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n        |> map(\n            fn: (r) => ({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            }),\n        )\n        |> map(fn: (r) => ({r with id: id(r: r)}))\n        |> map(fn: (r) => ({r with details: details(r: r)}))\n        |> _addTopic()\n        |> monitor.check(\n            crit: crit,\n            warn: warn,\n            info: info,\n            ok: ok,\n            messageFn: message,\n            data: check,\n        )",
									Start: ast.Position{
										Column: 12,
										Line:   30,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   47,
											},
											File:   "tickscript.flux",
											Source: "crit: crit,\n            warn: warn,\n            info: info,\n            ok: ok,\n            messageFn: message,\n            data: check",
											Start: ast.Position{
												Column: 13,
												Line:   42,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   42,
												},
												File:   "tickscript.flux",
												Source: "crit: crit",
												Start: ast.Position{
													Column: 13,
													Line:   42,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   42,
													},
													File:   "tickscript.flux",
													Source: "crit",
													Start: ast.Position{
														Column: 13,
														Line:   42,
													},
												},
											},
											Name: "crit",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   42,
													},
													File:   "tickscript.flux",
													Source: "crit",
													Start: ast.Position{
														Column: 19,
														Line:   42,
													},
												},
											},
											Name: "crit",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   43,
												},
												File:   "tickscript.flux",
												Source: "warn: warn",
												Start: ast.Position{
													Column: 13,
													Line:   43,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   43,
													},
													File:   "tickscript.flux",
													Source: "warn",
													Start: ast.Position{
														Column: 13,
														Line:   43,
													},
												},
											},
											Name: "warn",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   43,
													},
													File:   "tickscript.flux",
													Source: "warn",
													Start: ast.Position{
														Column: 19,
														Line:   43,
													},
												},
											},
											Name: "warn",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   44,
												},
												File:   "tickscript.flux",
												Source: "info: info",
												Start: ast.Position{
													Column: 13,
													Line:   44,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   44,
													},
													File:   "tickscript.flux",
													Source: "info",
													Start: ast.Position{
														Column: 13,
														Line:   44,
													},
												},
											},
											Name: "info",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   44,
													},
													File:   "tickscript.flux",
													Source: "info",
													Start: ast.Position{
														Column: 19,
														Line:   44,
													},
												},
											},
											Name: "info",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   45,
												},
												File:   "tickscript.flux",
												Source: "ok: ok",
												Start: ast.Position{
													Column: 13,
													Line:   45,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   45,
													},
													File:   "tickscript.flux",
													Source: "ok",
													Start: ast.Position{
														Column: 13,
														Line:   45,
													},
												},
											},
											Name: "ok",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   45,
													},
													File:   "tickscript.flux",
													Source: "ok",
													Start: ast.Position{
														Column: 17,
														Line:   45,
													},
												},
											},
											Name: "ok",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   46,
												},
												File:   "tickscript.flux",
												Source: "messageFn: message",
												Start: ast.Position{
													Column: 13,
													Line:   46,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   46,
													},
													File:   "tickscript.flux",
													Source: "messageFn",
													Start: ast.Position{
														Column: 13,
														Line:   46,
													},
												},
											},
											Name: "messageFn",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   46,
													},
													File:   "tickscript.flux",
													Source: "message",
													Start: ast.Position{
														Column: 24,
														Line:   46,
													},
												},
											},
											Name: "message",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   47,
												},
												File:   "tickscript.flux",
												Source: "data: check",
												Start: ast.Position{
													Column: 13,
													Line:   47,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   47,
													},
													File:   "tickscript.flux",
													Source: "data",
													Start: ast.Position{
														Column: 13,
														Line:   47,
													},
												},
											},
											Name: "data",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   47,
													},
													File:   "tickscript.flux",
													Source: "check",
													Start: ast.Position{
														Column: 19,
														Line:   47,
													},
												},
											},
											Name: "check",
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   48,
										},
										File:   "tickscript.flux",
										Source: "monitor.check(\n            crit: crit,\n            warn: warn,\n            info: info,\n            ok: ok,\n            messageFn: message,\n            data: check,\n        )",
										Start: ast.Position{
											Column: 12,
											Line:   41,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   41,
											},
											File:   "tickscript.flux",
											Source: "monitor.check",
											Start: ast.Position{
												Column: 12,
												Line:   41,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   41,
												},
												File:   "tickscript.flux",
												Source: "monitor",
												Start: ast.Position{
													Column: 12,
													Line:   41,
												},
											},
										},
										Name: "monitor",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   41,
												},
												File:   "tickscript.flux",
												Source: "check",
												Start: ast.Position{
													Column: 20,
													Line:   41,
												},
											},
										},
										Name: "check",
									},
									Rbrack: nil,
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   48,
								},
								File:   "tickscript.flux",
								Source: "return tables\n        |> drop(fn: (column) => column =~ /_start.*/ or column =~ /_stop.*/)\n        |> map(\n            fn: (r) => ({r with\n                _check_id: check._check_id,\n                _check_name: check._check_name,\n            }),\n        )\n        |> map(fn: (r) => ({r with id: id(r: r)}))\n        |> map(fn: (r) => ({r with details: details(r: r)}))\n        |> _addTopic()\n        |> monitor.check(\n            crit: crit,\n            warn: warn,\n            info: info,\n            ok: ok,\n            messageFn: message,\n            data: check,\n        )",
								Start: ast.Position{
									Column: 5,
									Line:   30,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   22,
							},
							File:   "tickscript.flux",
							Source: "check",
							Start: ast.Position{
								Column: 10,
								Line:   22,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "check",
								Start: ast.Position{
									Column: 10,
									Line:   22,
								},
							},
						},
						Name: "check",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   22,
							},
							File:   "tickscript.flux",
							Source: "id=(r) => \"${r._check_id}\"",
							Start: ast.Position{
								Column: 17,
								Line:   22,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "id",
								Start: ast.Position{
									Column: 17,
									Line:   22,
								},
							},
						},
						Name: "id",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "(r) => \"${r._check_id}\"",
								Start: ast.Position{
									Column: 20,
									Line:   22,
								},
							},
						},
						Body: &ast.StringExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "\"${r._check_id}\"",
									Start: ast.Position{
										Column: 27,
										Line:   22,
									},
								},
							},
							Parts: []ast.StringExpressionPart{&ast.InterpolatedPart{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   22,
										},
										File:   "tickscript.flux",
										Source: "${r._check_id}",
										Start: ast.Position{
											Column: 28,
											Line:   22,
										},
									},
								},
								Expression: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   22,
											},
											File:   "tickscript.flux",
											Source: "r._check_id",
											Start: ast.Position{
												Column: 30,
												Line:   22,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   22,
												},
												File:   "tickscript.flux",
												Source: "r",
												Start: ast.Position{
													Column: 30,
													Line:   22,
												},
											},
										},
										Name: "r",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   22,
												},
												File:   "tickscript.flux",
												Source: "_check_id",
												Start: ast.Position{
													Column: 32,
													Line:   22,
												},
											},
										},
										Name: "_check_id",
									},
									Rbrack: nil,
								},
							}},
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 21,
										Line:   22,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   22,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 21,
											Line:   22,
										},
									},
								},
								Name: "r",
							},
							Separator: nil,
							Value:     nil,
						}},
						Rparan: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 62,
								Line:   22,
							},
							File:   "tickscript.flux",
							Source: "details=(r) => \"\"",
							Start: ast.Position{
								Column: 45,
								Line:   22,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "details",
								Start: ast.Position{
									Column: 45,
									Line:   22,
								},
							},
						},
						Name: "details",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "(r) => \"\"",
								Start: ast.Position{
									Column: 53,
									Line:   22,
								},
							},
						},
						Body: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "\"\"",
									Start: ast.Position{
										Column: 60,
										Line:   22,
									},
								},
							},
							Value: "",
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 54,
										Line:   22,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   22,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 54,
											Line:   22,
										},
									},
								},
								Name: "r",
							},
							Separator: nil,
							Value:     nil,
						}},
						Rparan: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 130,
								Line:   22,
							},
							File:   "tickscript.flux",
							Source: "message=(r) => \"Threshold Check: ${r._check_name} is: ${r._level}\"",
							Start: ast.Position{
								Column: 64,
								Line:   22,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "message",
								Start: ast.Position{
									Column: 64,
									Line:   22,
								},
							},
						},
						Name: "message",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 130,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "(r) => \"Threshold Check: ${r._check_name} is: ${r._level}\"",
								Start: ast.Position{
									Column: 72,
									Line:   22,
								},
							},
						},
						Body: &ast.StringExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 130,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "\"Threshold Check: ${r._check_name} is: ${r._level}\"",
									Start: ast.Position{
										Column: 79,
										Line:   22,
									},
								},
							},
							Parts: []ast.StringExpressionPart{&ast.TextPart{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 97,
											Line:   22,
										},
										File:   "tickscript.flux",
										Source: "Threshold Check: ",
										Start: ast.Position{
											Column: 80,
											Line:   22,
										},
									},
								},
								Value: "Threshold Check: ",
							}, &ast.InterpolatedPart{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 113,
											Line:   22,
										},
										File:   "tickscript.flux",
										Source: "${r._check_name}",
										Start: ast.Position{
											Column: 97,
											Line:   22,
										},
									},
								},
								Expression: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 112,
												Line:   22,
											},
											File:   "tickscript.flux",
											Source: "r._check_name",
											Start: ast.Position{
												Column: 99,
												Line:   22,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 100,
													Line:   22,
												},
												File:   "tickscript.flux",
												Source: "r",
												Start: ast.Position{
													Column: 99,
													Line:   22,
												},
											},
										},
										Name: "r",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 112,
													Line:   22,
												},
												File:   "tickscript.flux",
												Source: "_check_name",
												Start: ast.Position{
													Column: 101,
													Line:   22,
												},
											},
										},
										Name: "_check_name",
									},
									Rbrack: nil,
								},
							}, &ast.TextPart{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 118,
											Line:   22,
										},
										File:   "tickscript.flux",
										Source: " is: ",
										Start: ast.Position{
											Column: 113,
											Line:   22,
										},
									},
								},
								Value: " is: ",
							}, &ast.InterpolatedPart{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 129,
											Line:   22,
										},
										File:   "tickscript.flux",
										Source: "${r._level}",
										Start: ast.Position{
											Column: 118,
											Line:   22,
										},
									},
								},
								Expression: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 128,
												Line:   22,
											},
											File:   "tickscript.flux",
											Source: "r._level",
											Start: ast.Position{
												Column: 120,
												Line:   22,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 121,
													Line:   22,
												},
												File:   "tickscript.flux",
												Source: "r",
												Start: ast.Position{
													Column: 120,
													Line:   22,
												},
											},
										},
										Name: "r",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 128,
													Line:   22,
												},
												File:   "tickscript.flux",
												Source: "_level",
												Start: ast.Position{
													Column: 122,
													Line:   22,
												},
											},
										},
										Name: "_level",
									},
									Rbrack: nil,
								},
							}},
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 74,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 73,
										Line:   22,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 74,
											Line:   22,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 73,
											Line:   22,
										},
									},
								},
								Name: "r",
							},
							Separator: nil,
							Value:     nil,
						}},
						Rparan: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 149,
								Line:   22,
							},
							File:   "tickscript.flux",
							Source: "crit=(r) => false",
							Start: ast.Position{
								Column: 132,
								Line:   22,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 136,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "crit",
								Start: ast.Position{
									Column: 132,
									Line:   22,
								},
							},
						},
						Name: "crit",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 149,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 137,
									Line:   22,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 149,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "false",
									Start: ast.Position{
										Column: 144,
										Line:   22,
									},
								},
							},
							Name: "false",
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 139,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 138,
										Line:   22,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 139,
											Line:   22,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 138,
											Line:   22,
										},
									},
								},
								Name: "r",
							},
							Separator: nil,
							Value:     nil,
						}},
						Rparan: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 168,
								Line:   22,
							},
							File:   "tickscript.flux",
							Source: "warn=(r) => false",
							Start: ast.Position{
								Column: 151,
								Line:   22,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 155,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "warn",
								Start: ast.Position{
									Column: 151,
									Line:   22,
								},
							},
						},
						Name: "warn",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 168,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 156,
									Line:   22,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 168,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "false",
									Start: ast.Position{
										Column: 163,
										Line:   22,
									},
								},
							},
							Name: "false",
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 158,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 157,
										Line:   22,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 158,
											Line:   22,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 157,
											Line:   22,
										},
									},
								},
								Name: "r",
							},
							Separator: nil,
							Value:     nil,
						}},
						Rparan: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 187,
								Line:   22,
							},
							File:   "tickscript.flux",
							Source: "info=(r) => false",
							Start: ast.Position{
								Column: 170,
								Line:   22,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 174,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "info",
								Start: ast.Position{
									Column: 170,
									Line:   22,
								},
							},
						},
						Name: "info",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 187,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 175,
									Line:   22,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 187,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "false",
									Start: ast.Position{
										Column: 182,
										Line:   22,
									},
								},
							},
							Name: "false",
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 177,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 176,
										Line:   22,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 177,
											Line:   22,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 176,
											Line:   22,
										},
									},
								},
								Name: "r",
							},
							Separator: nil,
							Value:     nil,
						}},
						Rparan: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 203,
								Line:   22,
							},
							File:   "tickscript.flux",
							Source: "ok=(r) => true",
							Start: ast.Position{
								Column: 189,
								Line:   22,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 191,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "ok",
								Start: ast.Position{
									Column: 189,
									Line:   22,
								},
							},
						},
						Name: "ok",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 203,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "(r) => true",
								Start: ast.Position{
									Column: 192,
									Line:   22,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 203,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "true",
									Start: ast.Position{
										Column: 199,
										Line:   22,
									},
								},
							},
							Name: "true",
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 194,
										Line:   22,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 193,
										Line:   22,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 194,
											Line:   22,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 193,
											Line:   22,
										},
									},
								},
								Name: "r",
							},
							Separator: nil,
							Value:     nil,
						}},
						Rparan: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 213,
								Line:   22,
							},
							File:   "tickscript.flux",
							Source: "topic=\"\"",
							Start: ast.Position{
								Column: 205,
								Line:   22,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 210,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "topic",
								Start: ast.Position{
									Column: 205,
									Line:   22,
								},
							},
						},
						Name: "topic",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 213,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "\"\"",
								Start: ast.Position{
									Column: 211,
									Line:   22,
								},
							},
						},
						Value: "",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 224,
								Line:   22,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 215,
								Line:   22,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 221,
									Line:   22,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 215,
									Line:   22,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 224,
								Line:   22,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 222,
								Line:   22,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   95,
					},
					File:   "tickscript.flux",
					Source: "deadman = (check, measurement, threshold=0, id=(r) => \"${r._check_id}\", message=(r) => \"Deadman Check: ${r._check_name} is: \" + (if r.dead then \"dead\" else \"alive\"), topic=\"\", tables=<-) => {\n    // In order to detect empty stream (without tables), we concatenate input with dummy stream and count the result,\n    // because count() returns nothing for empty stream. If the input stream is empty, then dummy stream with empty\n    // table is used as input for actual threshold check in order to get 0.\n    _dummy = array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n        |> set(key: \"_measurement\", value: measurement)\n        // required by monitor.check\n        |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")\n        // input tables are expected to be pivoted already    \n        |> schema.fieldsAsCols()\n    _counts = union(tables: [_dummy, tables])\n        |> keep(columns: [\"_measurement\", \"_time\"])\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        |> findColumn(fn: (key) => key._measurement == measurement, column: \"__value__\")\n    _tables = \n        // only dummy table is in the concatenated stream\n        if _counts[0] == 1 then\n            _dummy\n                |> drop(columns: [\"unknown\"])\n                // need empty table\n                |> limit(n: 0)\n        else\n            tables\n\n    return _tables\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        // recreate _time column after aggregation\n        |> map(fn: (r) => ({r with _time: now()}))\n        // same tag that monitor.deadman() adds\n        |> map(fn: (r) => ({r with dead: r.__value__ <= threshold}))\n        // drop dummy field\n        |> drop(columns: [\"__value__\"])\n        |> alert(\n            check: check,\n            id: id,\n            message: message,\n            crit: (r) => r.dead,\n            topic: topic,\n        )\n}",
					Start: ast.Position{
						Column: 1,
						Line:   52,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// deadman is a helper function similar to TICKscript deadman.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   52,
						},
						File:   "tickscript.flux",
						Source: "deadman",
						Start: ast.Position{
							Column: 1,
							Line:   52,
						},
					},
				},
				Name: "deadman",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   95,
						},
						File:   "tickscript.flux",
						Source: "(check, measurement, threshold=0, id=(r) => \"${r._check_id}\", message=(r) => \"Deadman Check: ${r._check_name} is: \" + (if r.dead then \"dead\" else \"alive\"), topic=\"\", tables=<-) => {\n    // In order to detect empty stream (without tables), we concatenate input with dummy stream and count the result,\n    // because count() returns nothing for empty stream. If the input stream is empty, then dummy stream with empty\n    // table is used as input for actual threshold check in order to get 0.\n    _dummy = array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n        |> set(key: \"_measurement\", value: measurement)\n        // required by monitor.check\n        |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")\n        // input tables are expected to be pivoted already    \n        |> schema.fieldsAsCols()\n    _counts = union(tables: [_dummy, tables])\n        |> keep(columns: [\"_measurement\", \"_time\"])\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        |> findColumn(fn: (key) => key._measurement == measurement, column: \"__value__\")\n    _tables = \n        // only dummy table is in the concatenated stream\n        if _counts[0] == 1 then\n            _dummy\n                |> drop(columns: [\"unknown\"])\n                // need empty table\n                |> limit(n: 0)\n        else\n            tables\n\n    return _tables\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        // recreate _time column after aggregation\n        |> map(fn: (r) => ({r with _time: now()}))\n        // same tag that monitor.deadman() adds\n        |> map(fn: (r) => ({r with dead: r.__value__ <= threshold}))\n        // drop dummy field\n        |> drop(columns: [\"__value__\"])\n        |> alert(\n            check: check,\n            id: id,\n            message: message,\n            crit: (r) => r.dead,\n            topic: topic,\n        )\n}",
						Start: ast.Position{
							Column: 11,
							Line:   52,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   95,
							},
							File:   "tickscript.flux",
							Source: "{\n    // In order to detect empty stream (without tables), we concatenate input with dummy stream and count the result,\n    // because count() returns nothing for empty stream. If the input stream is empty, then dummy stream with empty\n    // table is used as input for actual threshold check in order to get 0.\n    _dummy = array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n        |> set(key: \"_measurement\", value: measurement)\n        // required by monitor.check\n        |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")\n        // input tables are expected to be pivoted already    \n        |> schema.fieldsAsCols()\n    _counts = union(tables: [_dummy, tables])\n        |> keep(columns: [\"_measurement\", \"_time\"])\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        |> findColumn(fn: (key) => key._measurement == measurement, column: \"__value__\")\n    _tables = \n        // only dummy table is in the concatenated stream\n        if _counts[0] == 1 then\n            _dummy\n                |> drop(columns: [\"unknown\"])\n                // need empty table\n                |> limit(n: 0)\n        else\n            tables\n\n    return _tables\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        // recreate _time column after aggregation\n        |> map(fn: (r) => ({r with _time: now()}))\n        // same tag that monitor.deadman() adds\n        |> map(fn: (r) => ({r with dead: r.__value__ <= threshold}))\n        // drop dummy field\n        |> drop(columns: [\"__value__\"])\n        |> alert(\n            check: check,\n            id: id,\n            message: message,\n            crit: (r) => r.dead,\n            topic: topic,\n        )\n}",
							Start: ast.Position{
								Column: 191,
								Line:   52,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   61,
								},
								File:   "tickscript.flux",
								Source: "_dummy = array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n        |> set(key: \"_measurement\", value: measurement)\n        // required by monitor.check\n        |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")\n        // input tables are expected to be pivoted already    \n        |> schema.fieldsAsCols()",
								Start: ast.Position{
									Column: 5,
									Line:   56,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: []ast.Comment{ast.Comment{Text: "// In order to detect empty stream (without tables), we concatenate input with dummy stream and count the result,\n"}, ast.Comment{Text: "// because count() returns nothing for empty stream. If the input stream is empty, then dummy stream with empty\n"}, ast.Comment{Text: "// table is used as input for actual threshold check in order to get 0.\n"}},
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   56,
									},
									File:   "tickscript.flux",
									Source: "_dummy",
									Start: ast.Position{
										Column: 5,
										Line:   56,
									},
								},
							},
							Name: "_dummy",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 92,
														Line:   56,
													},
													File:   "tickscript.flux",
													Source: "rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}]",
													Start: ast.Position{
														Column: 25,
														Line:   56,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 92,
															Line:   56,
														},
														File:   "tickscript.flux",
														Source: "rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}]",
														Start: ast.Position{
															Column: 25,
															Line:   56,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 29,
																Line:   56,
															},
															File:   "tickscript.flux",
															Source: "rows",
															Start: ast.Position{
																Column: 25,
																Line:   56,
															},
														},
													},
													Name: "rows",
												},
												Separator: nil,
												Value: &ast.ArrayExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 92,
																Line:   56,
															},
															File:   "tickscript.flux",
															Source: "[{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}]",
															Start: ast.Position{
																Column: 31,
																Line:   56,
															},
														},
													},
													Elements: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 91,
																	Line:   56,
																},
																File:   "tickscript.flux",
																Source: "{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}",
																Start: ast.Position{
																	Column: 32,
																	Line:   56,
																},
															},
														},
														Lbrace: nil,
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 60,
																		Line:   56,
																	},
																	File:   "tickscript.flux",
																	Source: "_time: 2000-01-01T00:00:00Z",
																	Start: ast.Position{
																		Column: 33,
																		Line:   56,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 38,
																			Line:   56,
																		},
																		File:   "tickscript.flux",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 33,
																			Line:   56,
																		},
																	},
																},
																Name: "_time",
															},
															Separator: nil,
															Value: &ast.DateTimeLiteral{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 60,
																			Line:   56,
																		},
																		File:   "tickscript.flux",
																		Source: "2000-01-01T00:00:00Z",
																		Start: ast.Position{
																			Column: 40,
																			Line:   56,
																		},
																	},
																},
																Value: parser.MustParseTime("2000-01-01T00:00:00Z"),
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 79,
																		Line:   56,
																	},
																	File:   "tickscript.flux",
																	Source: "_field: \"unknown\"",
																	Start: ast.Position{
																		Column: 62,
																		Line:   56,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 68,
																			Line:   56,
																		},
																		File:   "tickscript.flux",
																		Source: "_field",
																		Start: ast.Position{
																			Column: 62,
																			Line:   56,
																		},
																	},
																},
																Name: "_field",
															},
															Separator: nil,
															Value: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 79,
																			Line:   56,
																		},
																		File:   "tickscript.flux",
																		Source: "\"unknown\"",
																		Start: ast.Position{
																			Column: 70,
																			Line:   56,
																		},
																	},
																},
																Value: "unknown",
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 90,
																		Line:   56,
																	},
																	File:   "tickscript.flux",
																	Source: "_value: 0",
																	Start: ast.Position{
																		Column: 81,
																		Line:   56,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 87,
																			Line:   56,
																		},
																		File:   "tickscript.flux",
																		Source: "_value",
																		Start: ast.Position{
																			Column: 81,
																			Line:   56,
																		},
																	},
																},
																Name: "_value",
															},
															Separator: nil,
															Value: &ast.IntegerLiteral{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 90,
																			Line:   56,
																		},
																		File:   "tickscript.flux",
																		Source: "0",
																		Start: ast.Position{
																			Column: 89,
																			Line:   56,
																		},
																	},
																},
																Value: int64(0),
															},
														}},
														Rbrace: nil,
														With:   nil,
													}},
													Lbrack: nil,
													Rbrack: nil,
												},
											}},
											Rbrace: nil,
											With:   nil,
										}},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 93,
													Line:   56,
												},
												File:   "tickscript.flux",
												Source: "array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])",
												Start: ast.Position{
													Column: 14,
													Line:   56,
												},
											},
										},
										Callee: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   56,
													},
													File:   "tickscript.flux",
													Source: "array.from",
													Start: ast.Position{
														Column: 14,
														Line:   56,
													},
												},
											},
											Lbrack: nil,
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   56,
														},
														File:   "tickscript.flux",
														Source: "array",
														Start: ast.Position{
															Column: 14,
															Line:   56,
														},
													},
												},
												Name: "array",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   56,
														},
														File:   "tickscript.flux",
														Source: "from",
														Start: ast.Position{
															Column: 20,
															Line:   56,
														},
													},
												},
												Name: "from",
											},
											Rbrack: nil,
										},
										Lparen: nil,
										Rparen: nil,
									},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 56,
												Line:   57,
											},
											File:   "tickscript.flux",
											Source: "array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n        |> set(key: \"_measurement\", value: measurement)",
											Start: ast.Position{
												Column: 14,
												Line:   56,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 55,
														Line:   57,
													},
													File:   "tickscript.flux",
													Source: "key: \"_measurement\", value: measurement",
													Start: ast.Position{
														Column: 16,
														Line:   57,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 35,
															Line:   57,
														},
														File:   "tickscript.flux",
														Source: "key: \"_measurement\"",
														Start: ast.Position{
															Column: 16,
															Line:   57,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 19,
																Line:   57,
															},
															File:   "tickscript.flux",
															Source: "key",
															Start: ast.Position{
																Column: 16,
																Line:   57,
															},
														},
													},
													Name: "key",
												},
												Separator: nil,
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   57,
															},
															File:   "tickscript.flux",
															Source: "\"_measurement\"",
															Start: ast.Position{
																Column: 21,
																Line:   57,
															},
														},
													},
													Value: "_measurement",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   57,
														},
														File:   "tickscript.flux",
														Source: "value: measurement",
														Start: ast.Position{
															Column: 37,
															Line:   57,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   57,
															},
															File:   "tickscript.flux",
															Source: "value",
															Start: ast.Position{
																Column: 37,
																Line:   57,
															},
														},
													},
													Name: "value",
												},
												Separator: nil,
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   57,
															},
															File:   "tickscript.flux",
															Source: "measurement",
															Start: ast.Position{
																Column: 44,
																Line:   57,
															},
														},
													},
													Name: "measurement",
												},
											}},
											Rbrace: nil,
											With:   nil,
										}},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   57,
												},
												File:   "tickscript.flux",
												Source: "set(key: \"_measurement\", value: measurement)",
												Start: ast.Position{
													Column: 12,
													Line:   57,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   57,
													},
													File:   "tickscript.flux",
													Source: "set",
													Start: ast.Position{
														Column: 12,
														Line:   57,
													},
												},
											},
											Name: "set",
										},
										Lparen: nil,
										Rparen: nil,
									},
								},
								BaseNode: ast.BaseNode{
									Comments: []ast.Comment{ast.Comment{Text: "// required by monitor.check\n"}},
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 73,
											Line:   59,
										},
										File:   "tickscript.flux",
										Source: "array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n        |> set(key: \"_measurement\", value: measurement)\n        // required by monitor.check\n        |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
										Start: ast.Position{
											Column: 14,
											Line:   56,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 72,
													Line:   59,
												},
												File:   "tickscript.flux",
												Source: "columns: [\"_measurement\"], mode: \"extend\"",
												Start: ast.Position{
													Column: 31,
													Line:   59,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 56,
														Line:   59,
													},
													File:   "tickscript.flux",
													Source: "columns: [\"_measurement\"]",
													Start: ast.Position{
														Column: 31,
														Line:   59,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   59,
														},
														File:   "tickscript.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 31,
															Line:   59,
														},
													},
												},
												Name: "columns",
											},
											Separator: nil,
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 56,
															Line:   59,
														},
														File:   "tickscript.flux",
														Source: "[\"_measurement\"]",
														Start: ast.Position{
															Column: 40,
															Line:   59,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   59,
															},
															File:   "tickscript.flux",
															Source: "\"_measurement\"",
															Start: ast.Position{
																Column: 41,
																Line:   59,
															},
														},
													},
													Value: "_measurement",
												}},
												Lbrack: nil,
												Rbrack: nil,
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 72,
														Line:   59,
													},
													File:   "tickscript.flux",
													Source: "mode: \"extend\"",
													Start: ast.Position{
														Column: 58,
														Line:   59,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 62,
															Line:   59,
														},
														File:   "tickscript.flux",
														Source: "mode",
														Start: ast.Position{
															Column: 58,
															Line:   59,
														},
													},
												},
												Name: "mode",
											},
											Separator: nil,
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 72,
															Line:   59,
														},
														File:   "tickscript.flux",
														Source: "\"extend\"",
														Start: ast.Position{
															Column: 64,
															Line:   59,
														},
													},
												},
												Value: "extend",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 73,
												Line:   59,
											},
											File:   "tickscript.flux",
											Source: "experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
											Start: ast.Position{
												Column: 12,
												Line:   59,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   59,
												},
												File:   "tickscript.flux",
												Source: "experimental.group",
												Start: ast.Position{
													Column: 12,
													Line:   59,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   59,
													},
													File:   "tickscript.flux",
													Source: "experimental",
													Start: ast.Position{
														Column: 12,
														Line:   59,
													},
												},
											},
											Name: "experimental",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   59,
													},
													File:   "tickscript.flux",
													Source: "group",
													Start: ast.Position{
														Column: 25,
														Line:   59,
													},
												},
											},
											Name: "group",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							BaseNode: ast.BaseNode{
								Comments: []ast.Comment{ast.Comment{Text: "// input tables are expected to be pivoted already    \n"}},
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   61,
									},
									File:   "tickscript.flux",
									Source: "array.from(rows: [{_time: 2000-01-01T00:00:00Z, _field: \"unknown\", _value: 0}])\n        |> set(key: \"_measurement\", value: measurement)\n        // required by monitor.check\n        |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")\n        // input tables are expected to be pivoted already    \n        |> schema.fieldsAsCols()",
									Start: ast.Position{
										Column: 14,
										Line:   56,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   61,
										},
										File:   "tickscript.flux",
										Source: "schema.fieldsAsCols()",
										Start: ast.Position{
											Column: 12,
											Line:   61,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   61,
											},
											File:   "tickscript.flux",
											Source: "schema.fieldsAsCols",
											Start: ast.Position{
												Column: 12,
												Line:   61,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   61,
												},
												File:   "tickscript.flux",
												Source: "schema",
												Start: ast.Position{
													Column: 12,
													Line:   61,
												},
											},
										},
										Name: "schema",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   61,
												},
												File:   "tickscript.flux",
												Source: "fieldsAsCols",
												Start: ast.Position{
													Column: 19,
													Line:   61,
												},
											},
										},
										Name: "fieldsAsCols",
									},
									Rbrack: nil,
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 89,
									Line:   67,
								},
								File:   "tickscript.flux",
								Source: "_counts = union(tables: [_dummy, tables])\n        |> keep(columns: [\"_measurement\", \"_time\"])\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        |> findColumn(fn: (key) => key._measurement == measurement, column: \"__value__\")",
								Start: ast.Position{
									Column: 5,
									Line:   62,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   62,
									},
									File:   "tickscript.flux",
									Source: "_counts",
									Start: ast.Position{
										Column: 5,
										Line:   62,
									},
								},
							},
							Name: "_counts",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   62,
														},
														File:   "tickscript.flux",
														Source: "tables: [_dummy, tables]",
														Start: ast.Position{
															Column: 21,
															Line:   62,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   62,
															},
															File:   "tickscript.flux",
															Source: "tables: [_dummy, tables]",
															Start: ast.Position{
																Column: 21,
																Line:   62,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 27,
																	Line:   62,
																},
																File:   "tickscript.flux",
																Source: "tables",
																Start: ast.Position{
																	Column: 21,
																	Line:   62,
																},
															},
														},
														Name: "tables",
													},
													Separator: nil,
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 45,
																	Line:   62,
																},
																File:   "tickscript.flux",
																Source: "[_dummy, tables]",
																Start: ast.Position{
																	Column: 29,
																	Line:   62,
																},
															},
														},
														Elements: []ast.Expression{&ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   62,
																	},
																	File:   "tickscript.flux",
																	Source: "_dummy",
																	Start: ast.Position{
																		Column: 30,
																		Line:   62,
																	},
																},
															},
															Name: "_dummy",
														}, &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 44,
																		Line:   62,
																	},
																	File:   "tickscript.flux",
																	Source: "tables",
																	Start: ast.Position{
																		Column: 38,
																		Line:   62,
																	},
																},
															},
															Name: "tables",
														}},
														Lbrack: nil,
														Rbrack: nil,
													},
												}},
												Rbrace: nil,
												With:   nil,
											}},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 46,
														Line:   62,
													},
													File:   "tickscript.flux",
													Source: "union(tables: [_dummy, tables])",
													Start: ast.Position{
														Column: 15,
														Line:   62,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 20,
															Line:   62,
														},
														File:   "tickscript.flux",
														Source: "union",
														Start: ast.Position{
															Column: 15,
															Line:   62,
														},
													},
												},
												Name: "union",
											},
											Lparen: nil,
											Rparen: nil,
										},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 52,
													Line:   63,
												},
												File:   "tickscript.flux",
												Source: "union(tables: [_dummy, tables])\n        |> keep(columns: [\"_measurement\", \"_time\"])",
												Start: ast.Position{
													Column: 15,
													Line:   62,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   63,
														},
														File:   "tickscript.flux",
														Source: "columns: [\"_measurement\", \"_time\"]",
														Start: ast.Position{
															Column: 17,
															Line:   63,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 51,
																Line:   63,
															},
															File:   "tickscript.flux",
															Source: "columns: [\"_measurement\", \"_time\"]",
															Start: ast.Position{
																Column: 17,
																Line:   63,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 24,
																	Line:   63,
																},
																File:   "tickscript.flux",
																Source: "columns",
																Start: ast.Position{
																	Column: 17,
																	Line:   63,
																},
															},
														},
														Name: "columns",
													},
													Separator: nil,
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 51,
																	Line:   63,
																},
																File:   "tickscript.flux",
																Source: "[\"_measurement\", \"_time\"]",
																Start: ast.Position{
																	Column: 26,
																	Line:   63,
																},
															},
														},
														Elements: []ast.Expression{&ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 41,
																		Line:   63,
																	},
																	File:   "tickscript.flux",
																	Source: "\"_measurement\"",
																	Start: ast.Position{
																		Column: 27,
																		Line:   63,
																	},
																},
															},
															Value: "_measurement",
														}, &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 50,
																		Line:   63,
																	},
																	File:   "tickscript.flux",
																	Source: "\"_time\"",
																	Start: ast.Position{
																		Column: 43,
																		Line:   63,
																	},
																},
															},
															Value: "_time",
														}},
														Lbrack: nil,
														Rbrack: nil,
													},
												}},
												Rbrace: nil,
												With:   nil,
											}},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 52,
														Line:   63,
													},
													File:   "tickscript.flux",
													Source: "keep(columns: [\"_measurement\", \"_time\"])",
													Start: ast.Position{
														Column: 12,
														Line:   63,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 16,
															Line:   63,
														},
														File:   "tickscript.flux",
														Source: "keep",
														Start: ast.Position{
															Column: 12,
															Line:   63,
														},
													},
												},
												Name: "keep",
											},
											Lparen: nil,
											Rparen: nil,
										},
									},
									BaseNode: ast.BaseNode{
										Comments: []ast.Comment{ast.Comment{Text: "// _measurement column is always present\n"}},
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 62,
												Line:   65,
											},
											File:   "tickscript.flux",
											Source: "union(tables: [_dummy, tables])\n        |> keep(columns: [\"_measurement\", \"_time\"])\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")",
											Start: ast.Position{
												Column: 15,
												Line:   62,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 61,
														Line:   65,
													},
													File:   "tickscript.flux",
													Source: "column: \"_measurement\", as: \"__value__\"",
													Start: ast.Position{
														Column: 22,
														Line:   65,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   65,
														},
														File:   "tickscript.flux",
														Source: "column: \"_measurement\"",
														Start: ast.Position{
															Column: 22,
															Line:   65,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   65,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 22,
																Line:   65,
															},
														},
													},
													Name: "column",
												},
												Separator: nil,
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   65,
															},
															File:   "tickscript.flux",
															Source: "\"_measurement\"",
															Start: ast.Position{
																Column: 30,
																Line:   65,
															},
														},
													},
													Value: "_measurement",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 61,
															Line:   65,
														},
														File:   "tickscript.flux",
														Source: "as: \"__value__\"",
														Start: ast.Position{
															Column: 46,
															Line:   65,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   65,
															},
															File:   "tickscript.flux",
															Source: "as",
															Start: ast.Position{
																Column: 46,
																Line:   65,
															},
														},
													},
													Name: "as",
												},
												Separator: nil,
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 61,
																Line:   65,
															},
															File:   "tickscript.flux",
															Source: "\"__value__\"",
															Start: ast.Position{
																Column: 50,
																Line:   65,
															},
														},
													},
													Value: "__value__",
												},
											}},
											Rbrace: nil,
											With:   nil,
										}},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 62,
													Line:   65,
												},
												File:   "tickscript.flux",
												Source: "duplicate(column: \"_measurement\", as: \"__value__\")",
												Start: ast.Position{
													Column: 12,
													Line:   65,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   65,
													},
													File:   "tickscript.flux",
													Source: "duplicate",
													Start: ast.Position{
														Column: 12,
														Line:   65,
													},
												},
											},
											Name: "duplicate",
										},
										Lparen: nil,
										Rparen: nil,
									},
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   66,
										},
										File:   "tickscript.flux",
										Source: "union(tables: [_dummy, tables])\n        |> keep(columns: [\"_measurement\", \"_time\"])\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")",
										Start: ast.Position{
											Column: 15,
											Line:   62,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   66,
												},
												File:   "tickscript.flux",
												Source: "column: \"__value__\"",
												Start: ast.Position{
													Column: 18,
													Line:   66,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   66,
													},
													File:   "tickscript.flux",
													Source: "column: \"__value__\"",
													Start: ast.Position{
														Column: 18,
														Line:   66,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   66,
														},
														File:   "tickscript.flux",
														Source: "column",
														Start: ast.Position{
															Column: 18,
															Line:   66,
														},
													},
												},
												Name: "column",
											},
											Separator: nil,
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   66,
														},
														File:   "tickscript.flux",
														Source: "\"__value__\"",
														Start: ast.Position{
															Column: 26,
															Line:   66,
														},
													},
												},
												Value: "__value__",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   66,
											},
											File:   "tickscript.flux",
											Source: "count(column: \"__value__\")",
											Start: ast.Position{
												Column: 12,
												Line:   66,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   66,
												},
												File:   "tickscript.flux",
												Source: "count",
												Start: ast.Position{
													Column: 12,
													Line:   66,
												},
											},
										},
										Name: "count",
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 89,
										Line:   67,
									},
									File:   "tickscript.flux",
									Source: "union(tables: [_dummy, tables])\n        |> keep(columns: [\"_measurement\", \"_time\"])\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        |> findColumn(fn: (key) => key._measurement == measurement, column: \"__value__\")",
									Start: ast.Position{
										Column: 15,
										Line:   62,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 88,
												Line:   67,
											},
											File:   "tickscript.flux",
											Source: "fn: (key) => key._measurement == measurement, column: \"__value__\"",
											Start: ast.Position{
												Column: 23,
												Line:   67,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 67,
													Line:   67,
												},
												File:   "tickscript.flux",
												Source: "fn: (key) => key._measurement == measurement",
												Start: ast.Position{
													Column: 23,
													Line:   67,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   67,
													},
													File:   "tickscript.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 23,
														Line:   67,
													},
												},
											},
											Name: "fn",
										},
										Separator: nil,
										Value: &ast.FunctionExpression{
											Arrow: nil,
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 67,
														Line:   67,
													},
													File:   "tickscript.flux",
													Source: "(key) => key._measurement == measurement",
													Start: ast.Position{
														Column: 27,
														Line:   67,
													},
												},
											},
											Body: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 67,
															Line:   67,
														},
														File:   "tickscript.flux",
														Source: "key._measurement == measurement",
														Start: ast.Position{
															Column: 36,
															Line:   67,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 52,
																Line:   67,
															},
															File:   "tickscript.flux",
															Source: "key._measurement",
															Start: ast.Position{
																Column: 36,
																Line:   67,
															},
														},
													},
													Lbrack: nil,
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 39,
																	Line:   67,
																},
																File:   "tickscript.flux",
																Source: "key",
																Start: ast.Position{
																	Column: 36,
																	Line:   67,
																},
															},
														},
														Name: "key",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 52,
																	Line:   67,
																},
																File:   "tickscript.flux",
																Source: "_measurement",
																Start: ast.Position{
																	Column: 40,
																	Line:   67,
																},
															},
														},
														Name: "_measurement",
													},
													Rbrack: nil,
												},
												Operator: 17,
												Right: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 67,
																Line:   67,
															},
															File:   "tickscript.flux",
															Source: "measurement",
															Start: ast.Position{
																Column: 56,
																Line:   67,
															},
														},
													},
													Name: "measurement",
												},
											},
											Lparen: nil,
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   67,
														},
														File:   "tickscript.flux",
														Source: "key",
														Start: ast.Position{
															Column: 28,
															Line:   67,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   67,
															},
															File:   "tickscript.flux",
															Source: "key",
															Start: ast.Position{
																Column: 28,
																Line:   67,
															},
														},
													},
													Name: "key",
												},
												Separator: nil,
												Value:     nil,
											}},
											Rparan: nil,
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 88,
													Line:   67,
												},
												File:   "tickscript.flux",
												Source: "column: \"__value__\"",
												Start: ast.Position{
													Column: 69,
													Line:   67,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 75,
														Line:   67,
													},
													File:   "tickscript.flux",
													Source: "column",
													Start: ast.Position{
														Column: 69,
														Line:   67,
													},
												},
											},
											Name: "column",
										},
										Separator: nil,
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 88,
														Line:   67,
													},
													File:   "tickscript.flux",
													Source: "\"__value__\"",
													Start: ast.Position{
														Column: 77,
														Line:   67,
													},
												},
											},
											Value: "__value__",
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 89,
											Line:   67,
										},
										File:   "tickscript.flux",
										Source: "findColumn(fn: (key) => key._measurement == measurement, column: \"__value__\")",
										Start: ast.Position{
											Column: 12,
											Line:   67,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   67,
											},
											File:   "tickscript.flux",
											Source: "findColumn",
											Start: ast.Position{
												Column: 12,
												Line:   67,
											},
										},
									},
									Name: "findColumn",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   76,
								},
								File:   "tickscript.flux",
								Source: "_tables = \n        // only dummy table is in the concatenated stream\n        if _counts[0] == 1 then\n            _dummy\n                |> drop(columns: [\"unknown\"])\n                // need empty table\n                |> limit(n: 0)\n        else\n            tables",
								Start: ast.Position{
									Column: 5,
									Line:   68,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   68,
									},
									File:   "tickscript.flux",
									Source: "_tables",
									Start: ast.Position{
										Column: 5,
										Line:   68,
									},
								},
							},
							Name: "_tables",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   76,
										},
										File:   "tickscript.flux",
										Source: "tables",
										Start: ast.Position{
											Column: 13,
											Line:   76,
										},
									},
								},
								Name: "tables",
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   76,
									},
									File:   "tickscript.flux",
									Source: "if _counts[0] == 1 then\n            _dummy\n                |> drop(columns: [\"unknown\"])\n                // need empty table\n                |> limit(n: 0)\n        else\n            tables",
									Start: ast.Position{
										Column: 9,
										Line:   70,
									},
								},
							},
							Consequent: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   71,
												},
												File:   "tickscript.flux",
												Source: "_dummy",
												Start: ast.Position{
													Column: 13,
													Line:   71,
												},
											},
										},
										Name: "_dummy",
									},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   72,
											},
											File:   "tickscript.flux",
											Source: "_dummy\n                |> drop(columns: [\"unknown\"])",
											Start: ast.Position{
												Column: 13,
												Line:   71,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   72,
													},
													File:   "tickscript.flux",
													Source: "columns: [\"unknown\"]",
													Start: ast.Position{
														Column: 25,
														Line:   72,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   72,
														},
														File:   "tickscript.flux",
														Source: "columns: [\"unknown\"]",
														Start: ast.Position{
															Column: 25,
															Line:   72,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 32,
																Line:   72,
															},
															File:   "tickscript.flux",
															Source: "columns",
															Start: ast.Position{
																Column: 25,
																Line:   72,
															},
														},
													},
													Name: "columns",
												},
												Separator: nil,
												Value: &ast.ArrayExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   72,
															},
															File:   "tickscript.flux",
															Source: "[\"unknown\"]",
															Start: ast.Position{
																Column: 34,
																Line:   72,
															},
														},
													},
													Elements: []ast.Expression{&ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   72,
																},
																File:   "tickscript.flux",
																Source: "\"unknown\"",
																Start: ast.Position{
																	Column: 35,
																	Line:   72,
																},
															},
														},
														Value: "unknown",
													}},
													Lbrack: nil,
													Rbrack: nil,
												},
											}},
											Rbrace: nil,
											With:   nil,
										}},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   72,
												},
												File:   "tickscript.flux",
												Source: "drop(columns: [\"unknown\"])",
												Start: ast.Position{
													Column: 20,
													Line:   72,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   72,
													},
													File:   "tickscript.flux",
													Source: "drop",
													Start: ast.Position{
														Column: 20,
														Line:   72,
													},
												},
											},
											Name: "drop",
										},
										Lparen: nil,
										Rparen: nil,
									},
								},
								BaseNode: ast.BaseNode{
									Comments: []ast.Comment{ast.Comment{Text: "// need empty table\n"}},
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   74,
										},
										File:   "tickscript.flux",
										Source: "_dummy\n                |> drop(columns: [\"unknown\"])\n                // need empty table\n                |> limit(n: 0)",
										Start: ast.Position{
											Column: 13,
											Line:   71,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   74,
												},
												File:   "tickscript.flux",
												Source: "n: 0",
												Start: ast.Position{
													Column: 26,
													Line:   74,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   74,
													},
													File:   "tickscript.flux",
													Source: "n: 0",
													Start: ast.Position{
														Column: 26,
														Line:   74,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   74,
														},
														File:   "tickscript.flux",
														Source: "n",
														Start: ast.Position{
															Column: 26,
															Line:   74,
														},
													},
												},
												Name: "n",
											},
											Separator: nil,
											Value: &ast.IntegerLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   74,
														},
														File:   "tickscript.flux",
														Source: "0",
														Start: ast.Position{
															Column: 29,
															Line:   74,
														},
													},
												},
												Value: int64(0),
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   74,
											},
											File:   "tickscript.flux",
											Source: "limit(n: 0)",
											Start: ast.Position{
												Column: 20,
												Line:   74,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   74,
												},
												File:   "tickscript.flux",
												Source: "limit",
												Start: ast.Position{
													Column: 20,
													Line:   74,
												},
											},
										},
										Name: "limit",
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   70,
										},
										File:   "tickscript.flux",
										Source: "_counts[0] == 1",
										Start: ast.Position{
											Column: 12,
											Line:   70,
										},
									},
								},
								Left: &ast.IndexExpression{
									Array: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   70,
												},
												File:   "tickscript.flux",
												Source: "_counts",
												Start: ast.Position{
													Column: 12,
													Line:   70,
												},
											},
										},
										Name: "_counts",
									},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   70,
											},
											File:   "tickscript.flux",
											Source: "_counts[0]",
											Start: ast.Position{
												Column: 12,
												Line:   70,
											},
										},
									},
									Index: &ast.IntegerLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   70,
												},
												File:   "tickscript.flux",
												Source: "0",
												Start: ast.Position{
													Column: 20,
													Line:   70,
												},
											},
										},
										Value: int64(0),
									},
									Lbrack: nil,
									Rbrack: nil,
								},
								Operator: 17,
								Right: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   70,
											},
											File:   "tickscript.flux",
											Source: "1",
											Start: ast.Position{
												Column: 26,
												Line:   70,
											},
										},
									},
									Value: int64(1),
								},
							},
							Tk_else: nil,
							Tk_if:   []ast.Comment{ast.Comment{Text: "// only dummy table is in the concatenated stream\n"}},
							Tk_then: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 19,
																Line:   78,
															},
															File:   "tickscript.flux",
															Source: "_tables",
															Start: ast.Position{
																Column: 12,
																Line:   78,
															},
														},
													},
													Name: "_tables",
												},
												BaseNode: ast.BaseNode{
													Comments: []ast.Comment{ast.Comment{Text: "// _measurement column is always present\n"}},
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 62,
															Line:   80,
														},
														File:   "tickscript.flux",
														Source: "_tables\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")",
														Start: ast.Position{
															Column: 12,
															Line:   78,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 61,
																	Line:   80,
																},
																File:   "tickscript.flux",
																Source: "column: \"_measurement\", as: \"__value__\"",
																Start: ast.Position{
																	Column: 22,
																	Line:   80,
																},
															},
														},
														Lbrace: nil,
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 44,
																		Line:   80,
																	},
																	File:   "tickscript.flux",
																	Source: "column: \"_measurement\"",
																	Start: ast.Position{
																		Column: 22,
																		Line:   80,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 28,
																			Line:   80,
																		},
																		File:   "tickscript.flux",
																		Source: "column",
																		Start: ast.Position{
																			Column: 22,
																			Line:   80,
																		},
																	},
																},
																Name: "column",
															},
															Separator: nil,
															Value: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 44,
																			Line:   80,
																		},
																		File:   "tickscript.flux",
																		Source: "\"_measurement\"",
																		Start: ast.Position{
																			Column: 30,
																			Line:   80,
																		},
																	},
																},
																Value: "_measurement",
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 61,
																		Line:   80,
																	},
																	File:   "tickscript.flux",
																	Source: "as: \"__value__\"",
																	Start: ast.Position{
																		Column: 46,
																		Line:   80,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 48,
																			Line:   80,
																		},
																		File:   "tickscript.flux",
																		Source: "as",
																		Start: ast.Position{
																			Column: 46,
																			Line:   80,
																		},
																	},
																},
																Name: "as",
															},
															Separator: nil,
															Value: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 61,
																			Line:   80,
																		},
																		File:   "tickscript.flux",
																		Source: "\"__value__\"",
																		Start: ast.Position{
																			Column: 50,
																			Line:   80,
																		},
																	},
																},
																Value: "__value__",
															},
														}},
														Rbrace: nil,
														With:   nil,
													}},
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 62,
																Line:   80,
															},
															File:   "tickscript.flux",
															Source: "duplicate(column: \"_measurement\", as: \"__value__\")",
															Start: ast.Position{
																Column: 12,
																Line:   80,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 21,
																	Line:   80,
																},
																File:   "tickscript.flux",
																Source: "duplicate",
																Start: ast.Position{
																	Column: 12,
																	Line:   80,
																},
															},
														},
														Name: "duplicate",
													},
													Lparen: nil,
													Rparen: nil,
												},
											},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   81,
													},
													File:   "tickscript.flux",
													Source: "_tables\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")",
													Start: ast.Position{
														Column: 12,
														Line:   78,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   81,
															},
															File:   "tickscript.flux",
															Source: "column: \"__value__\"",
															Start: ast.Position{
																Column: 18,
																Line:   81,
															},
														},
													},
													Lbrace: nil,
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   81,
																},
																File:   "tickscript.flux",
																Source: "column: \"__value__\"",
																Start: ast.Position{
																	Column: 18,
																	Line:   81,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 24,
																		Line:   81,
																	},
																	File:   "tickscript.flux",
																	Source: "column",
																	Start: ast.Position{
																		Column: 18,
																		Line:   81,
																	},
																},
															},
															Name: "column",
														},
														Separator: nil,
														Value: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 37,
																		Line:   81,
																	},
																	File:   "tickscript.flux",
																	Source: "\"__value__\"",
																	Start: ast.Position{
																		Column: 26,
																		Line:   81,
																	},
																},
															},
															Value: "__value__",
														},
													}},
													Rbrace: nil,
													With:   nil,
												}},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   81,
														},
														File:   "tickscript.flux",
														Source: "count(column: \"__value__\")",
														Start: ast.Position{
															Column: 12,
															Line:   81,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   81,
															},
															File:   "tickscript.flux",
															Source: "count",
															Start: ast.Position{
																Column: 12,
																Line:   81,
															},
														},
													},
													Name: "count",
												},
												Lparen: nil,
												Rparen: nil,
											},
										},
										BaseNode: ast.BaseNode{
											Comments: []ast.Comment{ast.Comment{Text: "// recreate _time column after aggregation\n"}},
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   83,
												},
												File:   "tickscript.flux",
												Source: "_tables\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        // recreate _time column after aggregation\n        |> map(fn: (r) => ({r with _time: now()}))",
												Start: ast.Position{
													Column: 12,
													Line:   78,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 50,
															Line:   83,
														},
														File:   "tickscript.flux",
														Source: "fn: (r) => ({r with _time: now()})",
														Start: ast.Position{
															Column: 16,
															Line:   83,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 50,
																Line:   83,
															},
															File:   "tickscript.flux",
															Source: "fn: (r) => ({r with _time: now()})",
															Start: ast.Position{
																Column: 16,
																Line:   83,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   83,
																},
																File:   "tickscript.flux",
																Source: "fn",
																Start: ast.Position{
																	Column: 16,
																	Line:   83,
																},
															},
														},
														Name: "fn",
													},
													Separator: nil,
													Value: &ast.FunctionExpression{
														Arrow: nil,
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 50,
																	Line:   83,
																},
																File:   "tickscript.flux",
																Source: "(r) => ({r with _time: now()})",
																Start: ast.Position{
																	Column: 20,
																	Line:   83,
																},
															},
														},
														Body: &ast.ParenExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 50,
																		Line:   83,
																	},
																	File:   "tickscript.flux",
																	Source: "({r with _time: now()})",
																	Start: ast.Position{
																		Column: 27,
																		Line:   83,
																	},
																},
															},
															Expression: &ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 49,
																			Line:   83,
																		},
																		File:   "tickscript.flux",
																		Source: "{r with _time: now()}",
																		Start: ast.Position{
																			Column: 28,
																			Line:   83,
																		},
																	},
																},
																Lbrace: nil,
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 48,
																				Line:   83,
																			},
																			File:   "tickscript.flux",
																			Source: "_time: now()",
																			Start: ast.Position{
																				Column: 36,
																				Line:   83,
																			},
																		},
																	},
																	Comma: nil,
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 41,
																					Line:   83,
																				},
																				File:   "tickscript.flux",
																				Source: "_time",
																				Start: ast.Position{
																					Column: 36,
																					Line:   83,
																				},
																			},
																		},
																		Name: "_time",
																	},
																	Separator: nil,
																	Value: &ast.CallExpression{
																		Arguments: nil,
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 48,
																					Line:   83,
																				},
																				File:   "tickscript.flux",
																				Source: "now()",
																				Start: ast.Position{
																					Column: 43,
																					Line:   83,
																				},
																			},
																		},
																		Callee: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 46,
																						Line:   83,
																					},
																					File:   "tickscript.flux",
																					Source: "now",
																					Start: ast.Position{
																						Column: 43,
																						Line:   83,
																					},
																				},
																			},
																			Name: "now",
																		},
																		Lparen: nil,
																		Rparen: nil,
																	},
																}},
																Rbrace: nil,
																With: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   83,
																			},
																			File:   "tickscript.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 29,
																				Line:   83,
																			},
																		},
																	},
																	Name: "r",
																},
															},
															Lparen: nil,
															Rparen: nil,
														},
														Lparen: nil,
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 22,
																		Line:   83,
																	},
																	File:   "tickscript.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 21,
																		Line:   83,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 22,
																			Line:   83,
																		},
																		File:   "tickscript.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 21,
																			Line:   83,
																		},
																	},
																},
																Name: "r",
															},
															Separator: nil,
															Value:     nil,
														}},
														Rparan: nil,
													},
												}},
												Rbrace: nil,
												With:   nil,
											}},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   83,
													},
													File:   "tickscript.flux",
													Source: "map(fn: (r) => ({r with _time: now()}))",
													Start: ast.Position{
														Column: 12,
														Line:   83,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   83,
														},
														File:   "tickscript.flux",
														Source: "map",
														Start: ast.Position{
															Column: 12,
															Line:   83,
														},
													},
												},
												Name: "map",
											},
											Lparen: nil,
											Rparen: nil,
										},
									},
									BaseNode: ast.BaseNode{
										Comments: []ast.Comment{ast.Comment{Text: "// same tag that monitor.deadman() adds\n"}},
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   85,
											},
											File:   "tickscript.flux",
											Source: "_tables\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        // recreate _time column after aggregation\n        |> map(fn: (r) => ({r with _time: now()}))\n        // same tag that monitor.deadman() adds\n        |> map(fn: (r) => ({r with dead: r.__value__ <= threshold}))",
											Start: ast.Position{
												Column: 12,
												Line:   78,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 68,
														Line:   85,
													},
													File:   "tickscript.flux",
													Source: "fn: (r) => ({r with dead: r.__value__ <= threshold})",
													Start: ast.Position{
														Column: 16,
														Line:   85,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 68,
															Line:   85,
														},
														File:   "tickscript.flux",
														Source: "fn: (r) => ({r with dead: r.__value__ <= threshold})",
														Start: ast.Position{
															Column: 16,
															Line:   85,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   85,
															},
															File:   "tickscript.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 16,
																Line:   85,
															},
														},
													},
													Name: "fn",
												},
												Separator: nil,
												Value: &ast.FunctionExpression{
													Arrow: nil,
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 68,
																Line:   85,
															},
															File:   "tickscript.flux",
															Source: "(r) => ({r with dead: r.__value__ <= threshold})",
															Start: ast.Position{
																Column: 20,
																Line:   85,
															},
														},
													},
													Body: &ast.ParenExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 68,
																	Line:   85,
																},
																File:   "tickscript.flux",
																Source: "({r with dead: r.__value__ <= threshold})",
																Start: ast.Position{
																	Column: 27,
																	Line:   85,
																},
															},
														},
														Expression: &ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 67,
																		Line:   85,
																	},
																	File:   "tickscript.flux",
																	Source: "{r with dead: r.__value__ <= threshold}",
																	Start: ast.Position{
																		Column: 28,
																		Line:   85,
																	},
																},
															},
															Lbrace: nil,
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 66,
																			Line:   85,
																		},
																		File:   "tickscript.flux",
																		Source: "dead: r.__value__ <= threshold",
																		Start: ast.Position{
																			Column: 36,
																			Line:   85,
																		},
																	},
																},
																Comma: nil,
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 40,
																				Line:   85,
																			},
																			File:   "tickscript.flux",
																			Source: "dead",
																			Start: ast.Position{
																				Column: 36,
																				Line:   85,
																			},
																		},
																	},
																	Name: "dead",
																},
																Separator: nil,
																Value: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 66,
																				Line:   85,
																			},
																			File:   "tickscript.flux",
																			Source: "r.__value__ <= threshold",
																			Start: ast.Position{
																				Column: 42,
																				Line:   85,
																			},
																		},
																	},
																	Left: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 53,
																					Line:   85,
																				},
																				File:   "tickscript.flux",
																				Source: "r.__value__",
																				Start: ast.Position{
																					Column: 42,
																					Line:   85,
																				},
																			},
																		},
																		Lbrack: nil,
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 43,
																						Line:   85,
																					},
																					File:   "tickscript.flux",
																					Source: "r",
																					Start: ast.Position{
																						Column: 42,
																						Line:   85,
																					},
																				},
																			},
																			Name: "r",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 53,
																						Line:   85,
																					},
																					File:   "tickscript.flux",
																					Source: "__value__",
																					Start: ast.Position{
																						Column: 44,
																						Line:   85,
																					},
																				},
																			},
																			Name: "__value__",
																		},
																		Rbrack: nil,
																	},
																	Operator: 7,
																	Right: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 66,
																					Line:   85,
																				},
																				File:   "tickscript.flux",
																				Source: "threshold",
																				Start: ast.Position{
																					Column: 57,
																					Line:   85,
																				},
																			},
																		},
																		Name: "threshold",
																	},
																},
															}},
															Rbrace: nil,
															With: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 30,
																			Line:   85,
																		},
																		File:   "tickscript.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 29,
																			Line:   85,
																		},
																	},
																},
																Name: "r",
															},
														},
														Lparen: nil,
														Rparen: nil,
													},
													Lparen: nil,
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   85,
																},
																File:   "tickscript.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 21,
																	Line:   85,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 22,
																		Line:   85,
																	},
																	File:   "tickscript.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 21,
																		Line:   85,
																	},
																},
															},
															Name: "r",
														},
														Separator: nil,
														Value:     nil,
													}},
													Rparan: nil,
												},
											}},
											Rbrace: nil,
											With:   nil,
										}},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   85,
												},
												File:   "tickscript.flux",
												Source: "map(fn: (r) => ({r with dead: r.__value__ <= threshold}))",
												Start: ast.Position{
													Column: 12,
													Line:   85,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   85,
													},
													File:   "tickscript.flux",
													Source: "map",
													Start: ast.Position{
														Column: 12,
														Line:   85,
													},
												},
											},
											Name: "map",
										},
										Lparen: nil,
										Rparen: nil,
									},
								},
								BaseNode: ast.BaseNode{
									Comments: []ast.Comment{ast.Comment{Text: "// drop dummy field\n"}},
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   87,
										},
										File:   "tickscript.flux",
										Source: "_tables\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        // recreate _time column after aggregation\n        |> map(fn: (r) => ({r with _time: now()}))\n        // same tag that monitor.deadman() adds\n        |> map(fn: (r) => ({r with dead: r.__value__ <= threshold}))\n        // drop dummy field\n        |> drop(columns: [\"__value__\"])",
										Start: ast.Position{
											Column: 12,
											Line:   78,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 39,
													Line:   87,
												},
												File:   "tickscript.flux",
												Source: "columns: [\"__value__\"]",
												Start: ast.Position{
													Column: 17,
													Line:   87,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   87,
													},
													File:   "tickscript.flux",
													Source: "columns: [\"__value__\"]",
													Start: ast.Position{
														Column: 17,
														Line:   87,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   87,
														},
														File:   "tickscript.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 17,
															Line:   87,
														},
													},
												},
												Name: "columns",
											},
											Separator: nil,
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 39,
															Line:   87,
														},
														File:   "tickscript.flux",
														Source: "[\"__value__\"]",
														Start: ast.Position{
															Column: 26,
															Line:   87,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   87,
															},
															File:   "tickscript.flux",
															Source: "\"__value__\"",
															Start: ast.Position{
																Column: 27,
																Line:   87,
															},
														},
													},
													Value: "__value__",
												}},
												Lbrack: nil,
												Rbrack: nil,
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   87,
											},
											File:   "tickscript.flux",
											Source: "drop(columns: [\"__value__\"])",
											Start: ast.Position{
												Column: 12,
												Line:   87,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   87,
												},
												File:   "tickscript.flux",
												Source: "drop",
												Start: ast.Position{
													Column: 12,
													Line:   87,
												},
											},
										},
										Name: "drop",
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   94,
									},
									File:   "tickscript.flux",
									Source: "_tables\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        // recreate _time column after aggregation\n        |> map(fn: (r) => ({r with _time: now()}))\n        // same tag that monitor.deadman() adds\n        |> map(fn: (r) => ({r with dead: r.__value__ <= threshold}))\n        // drop dummy field\n        |> drop(columns: [\"__value__\"])\n        |> alert(\n            check: check,\n            id: id,\n            message: message,\n            crit: (r) => r.dead,\n            topic: topic,\n        )",
									Start: ast.Position{
										Column: 12,
										Line:   78,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   93,
											},
											File:   "tickscript.flux",
											Source: "check: check,\n            id: id,\n            message: message,\n            crit: (r) => r.dead,\n            topic: topic",
											Start: ast.Position{
												Column: 13,
												Line:   89,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   89,
												},
												File:   "tickscript.flux",
												Source: "check: check",
												Start: ast.Position{
													Column: 13,
													Line:   89,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   89,
													},
													File:   "tickscript.flux",
													Source: "check",
													Start: ast.Position{
														Column: 13,
														Line:   89,
													},
												},
											},
											Name: "check",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   89,
													},
													File:   "tickscript.flux",
													Source: "check",
													Start: ast.Position{
														Column: 20,
														Line:   89,
													},
												},
											},
											Name: "check",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   90,
												},
												File:   "tickscript.flux",
												Source: "id: id",
												Start: ast.Position{
													Column: 13,
													Line:   90,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   90,
													},
													File:   "tickscript.flux",
													Source: "id",
													Start: ast.Position{
														Column: 13,
														Line:   90,
													},
												},
											},
											Name: "id",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   90,
													},
													File:   "tickscript.flux",
													Source: "id",
													Start: ast.Position{
														Column: 17,
														Line:   90,
													},
												},
											},
											Name: "id",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   91,
												},
												File:   "tickscript.flux",
												Source: "message: message",
												Start: ast.Position{
													Column: 13,
													Line:   91,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 20,
														Line:   91,
													},
													File:   "tickscript.flux",
													Source: "message",
													Start: ast.Position{
														Column: 13,
														Line:   91,
													},
												},
											},
											Name: "message",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   91,
													},
													File:   "tickscript.flux",
													Source: "message",
													Start: ast.Position{
														Column: 22,
														Line:   91,
													},
												},
											},
											Name: "message",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   92,
												},
												File:   "tickscript.flux",
												Source: "crit: (r) => r.dead",
												Start: ast.Position{
													Column: 13,
													Line:   92,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   92,
													},
													File:   "tickscript.flux",
													Source: "crit",
													Start: ast.Position{
														Column: 13,
														Line:   92,
													},
												},
											},
											Name: "crit",
										},
										Separator: nil,
										Value: &ast.FunctionExpression{
											Arrow: nil,
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   92,
													},
													File:   "tickscript.flux",
													Source: "(r) => r.dead",
													Start: ast.Position{
														Column: 19,
														Line:   92,
													},
												},
											},
											Body: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   92,
														},
														File:   "tickscript.flux",
														Source: "r.dead",
														Start: ast.Position{
															Column: 26,
															Line:   92,
														},
													},
												},
												Lbrack: nil,
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 27,
																Line:   92,
															},
															File:   "tickscript.flux",
															Source: "r",
															Start: ast.Position{
																Column: 26,
																Line:   92,
															},
														},
													},
													Name: "r",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 32,
																Line:   92,
															},
															File:   "tickscript.flux",
															Source: "dead",
															Start: ast.Position{
																Column: 28,
																Line:   92,
															},
														},
													},
													Name: "dead",
												},
												Rbrack: nil,
											},
											Lparen: nil,
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   92,
														},
														File:   "tickscript.flux",
														Source: "r",
														Start: ast.Position{
															Column: 20,
															Line:   92,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   92,
															},
															File:   "tickscript.flux",
															Source: "r",
															Start: ast.Position{
																Column: 20,
																Line:   92,
															},
														},
													},
													Name: "r",
												},
												Separator: nil,
												Value:     nil,
											}},
											Rparan: nil,
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   93,
												},
												File:   "tickscript.flux",
												Source: "topic: topic",
												Start: ast.Position{
													Column: 13,
													Line:   93,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   93,
													},
													File:   "tickscript.flux",
													Source: "topic",
													Start: ast.Position{
														Column: 13,
														Line:   93,
													},
												},
											},
											Name: "topic",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   93,
													},
													File:   "tickscript.flux",
													Source: "topic",
													Start: ast.Position{
														Column: 20,
														Line:   93,
													},
												},
											},
											Name: "topic",
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   94,
										},
										File:   "tickscript.flux",
										Source: "alert(\n            check: check,\n            id: id,\n            message: message,\n            crit: (r) => r.dead,\n            topic: topic,\n        )",
										Start: ast.Position{
											Column: 12,
											Line:   88,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   88,
											},
											File:   "tickscript.flux",
											Source: "alert",
											Start: ast.Position{
												Column: 12,
												Line:   88,
											},
										},
									},
									Name: "alert",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   94,
								},
								File:   "tickscript.flux",
								Source: "return _tables\n        // _measurement column is always present\n        |> duplicate(column: \"_measurement\", as: \"__value__\")\n        |> count(column: \"__value__\")\n        // recreate _time column after aggregation\n        |> map(fn: (r) => ({r with _time: now()}))\n        // same tag that monitor.deadman() adds\n        |> map(fn: (r) => ({r with dead: r.__value__ <= threshold}))\n        // drop dummy field\n        |> drop(columns: [\"__value__\"])\n        |> alert(\n            check: check,\n            id: id,\n            message: message,\n            crit: (r) => r.dead,\n            topic: topic,\n        )",
								Start: ast.Position{
									Column: 5,
									Line:   78,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 17,
								Line:   52,
							},
							File:   "tickscript.flux",
							Source: "check",
							Start: ast.Position{
								Column: 12,
								Line:   52,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   52,
								},
								File:   "tickscript.flux",
								Source: "check",
								Start: ast.Position{
									Column: 12,
									Line:   52,
								},
							},
						},
						Name: "check",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   52,
							},
							File:   "tickscript.flux",
							Source: "measurement",
							Start: ast.Position{
								Column: 19,
								Line:   52,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   52,
								},
								File:   "tickscript.flux",
								Source: "measurement",
								Start: ast.Position{
									Column: 19,
									Line:   52,
								},
							},
						},
						Name: "measurement",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   52,
							},
							File:   "tickscript.flux",
							Source: "threshold=0",
							Start: ast.Position{
								Column: 32,
								Line:   52,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   52,
								},
								File:   "tickscript.flux",
								Source: "threshold",
								Start: ast.Position{
									Column: 32,
									Line:   52,
								},
							},
						},
						Name: "threshold",
					},
					Separator: nil,
					Value: &ast.IntegerLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   52,
								},
								File:   "tickscript.flux",
								Source: "0",
								Start: ast.Position{
									Column: 42,
									Line:   52,
								},
							},
						},
						Value: int64(0),
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 71,
								Line:   52,
							},
							File:   "tickscript.flux",
							Source: "id=(r) => \"${r._check_id}\"",
							Start: ast.Position{
								Column: 45,
								Line:   52,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   52,
								},
								File:   "tickscript.flux",
								Source: "id",
								Start: ast.Position{
									Column: 45,
									Line:   52,
								},
							},
						},
						Name: "id",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 71,
									Line:   52,
								},
								File:   "tickscript.flux",
								Source: "(r) => \"${r._check_id}\"",
								Start: ast.Position{
									Column: 48,
									Line:   52,
								},
							},
						},
						Body: &ast.StringExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   52,
									},
									File:   "tickscript.flux",
									Source: "\"${r._check_id}\"",
									Start: ast.Position{
										Column: 55,
										Line:   52,
									},
								},
							},
							Parts: []ast.StringExpressionPart{&ast.InterpolatedPart{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 70,
											Line:   52,
										},
										File:   "tickscript.flux",
										Source: "${r._check_id}",
										Start: ast.Position{
											Column: 56,
											Line:   52,
										},
									},
								},
								Expression: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   52,
											},
											File:   "tickscript.flux",
											Source: "r._check_id",
											Start: ast.Position{
												Column: 58,
												Line:   52,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   52,
												},
												File:   "tickscript.flux",
												Source: "r",
												Start: ast.Position{
													Column: 58,
													Line:   52,
												},
											},
										},
										Name: "r",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   52,
												},
												File:   "tickscript.flux",
												Source: "_check_id",
												Start: ast.Position{
													Column: 60,
													Line:   52,
												},
											},
										},
										Name: "_check_id",
									},
									Rbrack: nil,
								},
							}},
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   52,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 49,
										Line:   52,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 50,
											Line:   52,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 49,
											Line:   52,
										},
									},
								},
								Name: "r",
							},
							Separator: nil,
							Value:     nil,
						}},
						Rparan: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 165,
								Line:   52,
							},
							File:   "tickscript.flux",
							Source: "message=(r) => \"Deadman Check: ${r._check_name} is: \" + (if r.dead then \"dead\" else \"alive\")",
							Start: ast.Position{
								Column: 73,
								Line:   52,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   52,
								},
								File:   "tickscript.flux",
								Source: "message",
								Start: ast.Position{
									Column: 73,
									Line:   52,
								},
							},
						},
						Name: "message",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 165,
									Line:   52,
								},
								File:   "tickscript.flux",
								Source: "(r) => \"Deadman Check: ${r._check_name} is: \" + (if r.dead then \"dead\" else \"alive\")",
								Start: ast.Position{
									Column: 81,
									Line:   52,
								},
							},
						},
						Body: &ast.BinaryExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 165,
										Line:   52,
									},
									File:   "tickscript.flux",
									Source: "\"Deadman Check: ${r._check_name} is: \" + (if r.dead then \"dead\" else \"alive\")",
									Start: ast.Position{
										Column: 88,
										Line:   52,
									},
								},
							},
							Left: &ast.StringExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 126,
											Line:   52,
										},
										File:   "tickscript.flux",
										Source: "\"Deadman Check: ${r._check_name} is: \"",
										Start: ast.Position{
											Column: 88,
											Line:   52,
										},
									},
								},
								Parts: []ast.StringExpressionPart{&ast.TextPart{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 104,
												Line:   52,
											},
											File:   "tickscript.flux",
											Source: "Deadman Check: ",
											Start: ast.Position{
												Column: 89,
												Line:   52,
											},
										},
									},
									Value: "Deadman Check: ",
								}, &ast.InterpolatedPart{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 120,
												Line:   52,
											},
											File:   "tickscript.flux",
											Source: "${r._check_name}",
											Start: ast.Position{
												Column: 104,
												Line:   52,
											},
										},
									},
									Expression: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 119,
													Line:   52,
												},
												File:   "tickscript.flux",
												Source: "r._check_name",
												Start: ast.Position{
													Column: 106,
													Line:   52,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 107,
														Line:   52,
													},
													File:   "tickscript.flux",
													Source: "r",
													Start: ast.Position{
														Column: 106,
														Line:   52,
													},
												},
											},
											Name: "r",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 119,
														Line:   52,
													},
													File:   "tickscript.flux",
													Source: "_check_name",
													Start: ast.Position{
														Column: 108,
														Line:   52,
													},
												},
											},
											Name: "_check_name",
										},
										Rbrack: nil,
									},
								}, &ast.TextPart{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 125,
												Line:   52,
											},
											File:   "tickscript.flux",
											Source: " is: ",
											Start: ast.Position{
												Column: 120,
												Line:   52,
											},
										},
									},
									Value: " is: ",
								}},
							},
							Operator: 5,
							Right: &ast.ParenExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 165,
											Line:   52,
										},
										File:   "tickscript.flux",
										Source: "(if r.dead then \"dead\" else \"alive\")",
										Start: ast.Position{
											Column: 129,
											Line:   52,
										},
									},
								},
								Expression: &ast.ConditionalExpression{
									Alternate: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 164,
													Line:   52,
												},
												File:   "tickscript.flux",
												Source: "\"alive\"",
												Start: ast.Position{
													Column: 157,
													Line:   52,
												},
											},
										},
										Value: "alive",
									},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 164,
												Line:   52,
											},
											File:   "tickscript.flux",
											Source: "if r.dead then \"dead\" else \"alive\"",
											Start: ast.Position{
												Column: 130,
												Line:   52,
											},
										},
									},
									Consequent: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 151,
													Line:   52,
												},
												File:   "tickscript.flux",
												Source: "\"dead\"",
												Start: ast.Position{
													Column: 145,
													Line:   52,
												},
											},
										},
										Value: "dead",
									},
									Test: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 139,
													Line:   52,
												},
												File:   "tickscript.flux",
												Source: "r.dead",
												Start: ast.Position{
													Column: 133,
													Line:   52,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 134,
														Line:   52,
													},
													File:   "tickscript.flux",
													Source: "r",
													Start: ast.Position{
														Column: 133,
														Line:   52,
													},
												},
											},
											Name: "r",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 139,
														Line:   52,
													},
													File:   "tickscript.flux",
													Source: "dead",
													Start: ast.Position{
														Column: 135,
														Line:   52,
													},
												},
											},
											Name: "dead",
										},
										Rbrack: nil,
									},
									Tk_else: nil,
									Tk_if:   nil,
									Tk_then: nil,
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 83,
										Line:   52,
									},
									File:   "tickscript.flux",
									Source: "r",
									Start: ast.Position{
										Column: 82,
										Line:   52,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 83,
											Line:   52,
										},
										File:   "tickscript.flux",
										Source: "r",
										Start: ast.Position{
											Column: 82,
											Line:   52,
										},
									},
								},
								Name: "r",
							},
							Separator: nil,
							Value:     nil,
						}},
						Rparan: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 175,
								Line:   52,
							},
							File:   "tickscript.flux",
							Source: "topic=\"\"",
							Start: ast.Position{
								Column: 167,
								Line:   52,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 172,
									Line:   52,
								},
								File:   "tickscript.flux",
								Source: "topic",
								Start: ast.Position{
									Column: 167,
									Line:   52,
								},
							},
						},
						Name: "topic",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 175,
									Line:   52,
								},
								File:   "tickscript.flux",
								Source: "\"\"",
								Start: ast.Position{
									Column: 173,
									Line:   52,
								},
							},
						},
						Value: "",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 186,
								Line:   52,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 177,
								Line:   52,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 183,
									Line:   52,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 177,
									Line:   52,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 186,
								Line:   52,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 184,
								Line:   52,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   110,
					},
					File:   "tickscript.flux",
					Source: "select = (column=\"_value\", fn=(column, tables=<-) => tables, as, tables=<-) => {\n    _column = column\n    _as = as\n\n    return tables\n        |> fn(column: _column)\n        |> rename(fn: (column) => if column == _column then _as else column)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   103,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// select selects a column and optionally computes aggregated value.\n"}, ast.Comment{Text: "// It is meant to be a convenience function to be used for:\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   query(\"SELECT x AS y\")\n"}, ast.Comment{Text: "//   query(\"SELECT f(x) AS y\") without time grouping\n"}, ast.Comment{Text: "//\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   103,
						},
						File:   "tickscript.flux",
						Source: "select",
						Start: ast.Position{
							Column: 1,
							Line:   103,
						},
					},
				},
				Name: "select",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   110,
						},
						File:   "tickscript.flux",
						Source: "(column=\"_value\", fn=(column, tables=<-) => tables, as, tables=<-) => {\n    _column = column\n    _as = as\n\n    return tables\n        |> fn(column: _column)\n        |> rename(fn: (column) => if column == _column then _as else column)\n}",
						Start: ast.Position{
							Column: 10,
							Line:   103,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   110,
							},
							File:   "tickscript.flux",
							Source: "{\n    _column = column\n    _as = as\n\n    return tables\n        |> fn(column: _column)\n        |> rename(fn: (column) => if column == _column then _as else column)\n}",
							Start: ast.Position{
								Column: 80,
								Line:   103,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   104,
								},
								File:   "tickscript.flux",
								Source: "_column = column",
								Start: ast.Position{
									Column: 5,
									Line:   104,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   104,
									},
									File:   "tickscript.flux",
									Source: "_column",
									Start: ast.Position{
										Column: 5,
										Line:   104,
									},
								},
							},
							Name: "_column",
						},
						Init: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   104,
									},
									File:   "tickscript.flux",
									Source: "column",
									Start: ast.Position{
										Column: 15,
										Line:   104,
									},
								},
							},
							Name: "column",
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   105,
								},
								File:   "tickscript.flux",
								Source: "_as = as",
								Start: ast.Position{
									Column: 5,
									Line:   105,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   105,
									},
									File:   "tickscript.flux",
									Source: "_as",
									Start: ast.Position{
										Column: 5,
										Line:   105,
									},
								},
							},
							Name: "_as",
						},
						Init: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   105,
									},
									File:   "tickscript.flux",
									Source: "as",
									Start: ast.Position{
										Column: 11,
										Line:   105,
									},
								},
							},
							Name: "as",
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   107,
											},
											File:   "tickscript.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 12,
												Line:   107,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   108,
										},
										File:   "tickscript.flux",
										Source: "tables\n        |> fn(column: _column)",
										Start: ast.Position{
											Column: 12,
											Line:   107,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   108,
												},
												File:   "tickscript.flux",
												Source: "column: _column",
												Start: ast.Position{
													Column: 15,
													Line:   108,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   108,
													},
													File:   "tickscript.flux",
													Source: "column: _column",
													Start: ast.Position{
														Column: 15,
														Line:   108,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   108,
														},
														File:   "tickscript.flux",
														Source: "column",
														Start: ast.Position{
															Column: 15,
															Line:   108,
														},
													},
												},
												Name: "column",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   108,
														},
														File:   "tickscript.flux",
														Source: "_column",
														Start: ast.Position{
															Column: 23,
															Line:   108,
														},
													},
												},
												Name: "_column",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   108,
											},
											File:   "tickscript.flux",
											Source: "fn(column: _column)",
											Start: ast.Position{
												Column: 12,
												Line:   108,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   108,
												},
												File:   "tickscript.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 12,
													Line:   108,
												},
											},
										},
										Name: "fn",
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 77,
										Line:   109,
									},
									File:   "tickscript.flux",
									Source: "tables\n        |> fn(column: _column)\n        |> rename(fn: (column) => if column == _column then _as else column)",
									Start: ast.Position{
										Column: 12,
										Line:   107,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 76,
												Line:   109,
											},
											File:   "tickscript.flux",
											Source: "fn: (column) => if column == _column then _as else column",
											Start: ast.Position{
												Column: 19,
												Line:   109,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 76,
													Line:   109,
												},
												File:   "tickscript.flux",
												Source: "fn: (column) => if column == _column then _as else column",
												Start: ast.Position{
													Column: 19,
													Line:   109,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   109,
													},
													File:   "tickscript.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 19,
														Line:   109,
													},
												},
											},
											Name: "fn",
										},
										Separator: nil,
										Value: &ast.FunctionExpression{
											Arrow: nil,
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 76,
														Line:   109,
													},
													File:   "tickscript.flux",
													Source: "(column) => if column == _column then _as else column",
													Start: ast.Position{
														Column: 23,
														Line:   109,
													},
												},
											},
											Body: &ast.ConditionalExpression{
												Alternate: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 76,
																Line:   109,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 70,
																Line:   109,
															},
														},
													},
													Name: "column",
												},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 76,
															Line:   109,
														},
														File:   "tickscript.flux",
														Source: "if column == _column then _as else column",
														Start: ast.Position{
															Column: 35,
															Line:   109,
														},
													},
												},
												Consequent: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 64,
																Line:   109,
															},
															File:   "tickscript.flux",
															Source: "_as",
															Start: ast.Position{
																Column: 61,
																Line:   109,
															},
														},
													},
													Name: "_as",
												},
												Test: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   109,
															},
															File:   "tickscript.flux",
															Source: "column == _column",
															Start: ast.Position{
																Column: 38,
																Line:   109,
															},
														},
													},
													Left: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   109,
																},
																File:   "tickscript.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 38,
																	Line:   109,
																},
															},
														},
														Name: "column",
													},
													Operator: 17,
													Right: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 55,
																	Line:   109,
																},
																File:   "tickscript.flux",
																Source: "_column",
																Start: ast.Position{
																	Column: 48,
																	Line:   109,
																},
															},
														},
														Name: "_column",
													},
												},
												Tk_else: nil,
												Tk_if:   nil,
												Tk_then: nil,
											},
											Lparen: nil,
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   109,
														},
														File:   "tickscript.flux",
														Source: "column",
														Start: ast.Position{
															Column: 24,
															Line:   109,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 30,
																Line:   109,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 24,
																Line:   109,
															},
														},
													},
													Name: "column",
												},
												Separator: nil,
												Value:     nil,
											}},
											Rparan: nil,
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 77,
											Line:   109,
										},
										File:   "tickscript.flux",
										Source: "rename(fn: (column) => if column == _column then _as else column)",
										Start: ast.Position{
											Column: 12,
											Line:   109,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   109,
											},
											File:   "tickscript.flux",
											Source: "rename",
											Start: ast.Position{
												Column: 12,
												Line:   109,
											},
										},
									},
									Name: "rename",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 77,
									Line:   109,
								},
								File:   "tickscript.flux",
								Source: "return tables\n        |> fn(column: _column)\n        |> rename(fn: (column) => if column == _column then _as else column)",
								Start: ast.Position{
									Column: 5,
									Line:   107,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   103,
							},
							File:   "tickscript.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 11,
								Line:   103,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   103,
								},
								File:   "tickscript.flux",
								Source: "column",
								Start: ast.Position{
									Column: 11,
									Line:   103,
								},
							},
						},
						Name: "column",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   103,
								},
								File:   "tickscript.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 18,
									Line:   103,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 60,
								Line:   103,
							},
							File:   "tickscript.flux",
							Source: "fn=(column, tables=<-) => tables",
							Start: ast.Position{
								Column: 28,
								Line:   103,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   103,
								},
								File:   "tickscript.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 28,
									Line:   103,
								},
							},
						},
						Name: "fn",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 60,
									Line:   103,
								},
								File:   "tickscript.flux",
								Source: "(column, tables=<-) => tables",
								Start: ast.Position{
									Column: 31,
									Line:   103,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   103,
									},
									File:   "tickscript.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 54,
										Line:   103,
									},
								},
							},
							Name: "tables",
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   103,
									},
									File:   "tickscript.flux",
									Source: "column",
									Start: ast.Position{
										Column: 32,
										Line:   103,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   103,
										},
										File:   "tickscript.flux",
										Source: "column",
										Start: ast.Position{
											Column: 32,
											Line:   103,
										},
									},
								},
								Name: "column",
							},
							Separator: nil,
							Value:     nil,
						}, &ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   103,
									},
									File:   "tickscript.flux",
									Source: "tables=<-",
									Start: ast.Position{
										Column: 40,
										Line:   103,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   103,
										},
										File:   "tickscript.flux",
										Source: "tables",
										Start: ast.Position{
											Column: 40,
											Line:   103,
										},
									},
								},
								Name: "tables",
							},
							Separator: nil,
							Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   103,
									},
									File:   "tickscript.flux",
									Source: "<-",
									Start: ast.Position{
										Column: 47,
										Line:   103,
									},
								},
							}},
						}},
						Rparan: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 64,
								Line:   103,
							},
							File:   "tickscript.flux",
							Source: "as",
							Start: ast.Position{
								Column: 62,
								Line:   103,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   103,
								},
								File:   "tickscript.flux",
								Source: "as",
								Start: ast.Position{
									Column: 62,
									Line:   103,
								},
							},
						},
						Name: "as",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 75,
								Line:   103,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 66,
								Line:   103,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   103,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 66,
									Line:   103,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 75,
								Line:   103,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 73,
								Line:   103,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   126,
					},
					File:   "tickscript.flux",
					Source: "selectWindow = (column=\"_value\", fn, as, every, defaultValue, tables=<-) => {\n    _column = column\n    _as = as\n\n    return tables\n        |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n        |> fill(column: _column, value: defaultValue)\n        |> rename(fn: (column) => if column == _column then _as else column)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   118,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// selectWindow selects a column with time grouping and computes aggregated values.\n"}, ast.Comment{Text: "// It is a convenience function to be used as\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   query(\"SELECT f(x) AS y\")\n"}, ast.Comment{Text: "//     .groupBy(time(t), ...)\n"}, ast.Comment{Text: "//\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   118,
						},
						File:   "tickscript.flux",
						Source: "selectWindow",
						Start: ast.Position{
							Column: 1,
							Line:   118,
						},
					},
				},
				Name: "selectWindow",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   126,
						},
						File:   "tickscript.flux",
						Source: "(column=\"_value\", fn, as, every, defaultValue, tables=<-) => {\n    _column = column\n    _as = as\n\n    return tables\n        |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n        |> fill(column: _column, value: defaultValue)\n        |> rename(fn: (column) => if column == _column then _as else column)\n}",
						Start: ast.Position{
							Column: 16,
							Line:   118,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   126,
							},
							File:   "tickscript.flux",
							Source: "{\n    _column = column\n    _as = as\n\n    return tables\n        |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n        |> fill(column: _column, value: defaultValue)\n        |> rename(fn: (column) => if column == _column then _as else column)\n}",
							Start: ast.Position{
								Column: 77,
								Line:   118,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   119,
								},
								File:   "tickscript.flux",
								Source: "_column = column",
								Start: ast.Position{
									Column: 5,
									Line:   119,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   119,
									},
									File:   "tickscript.flux",
									Source: "_column",
									Start: ast.Position{
										Column: 5,
										Line:   119,
									},
								},
							},
							Name: "_column",
						},
						Init: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   119,
									},
									File:   "tickscript.flux",
									Source: "column",
									Start: ast.Position{
										Column: 15,
										Line:   119,
									},
								},
							},
							Name: "column",
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   120,
								},
								File:   "tickscript.flux",
								Source: "_as = as",
								Start: ast.Position{
									Column: 5,
									Line:   120,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   120,
									},
									File:   "tickscript.flux",
									Source: "_as",
									Start: ast.Position{
										Column: 5,
										Line:   120,
									},
								},
							},
							Name: "_as",
						},
						Init: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   120,
									},
									File:   "tickscript.flux",
									Source: "as",
									Start: ast.Position{
										Column: 11,
										Line:   120,
									},
								},
							},
							Name: "as",
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   122,
												},
												File:   "tickscript.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 12,
													Line:   122,
												},
											},
										},
										Name: "tables",
									},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 85,
												Line:   123,
											},
											File:   "tickscript.flux",
											Source: "tables\n        |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)",
											Start: ast.Position{
												Column: 12,
												Line:   122,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 84,
														Line:   123,
													},
													File:   "tickscript.flux",
													Source: "every: every, fn: fn, column: _column, createEmpty: true",
													Start: ast.Position{
														Column: 28,
														Line:   123,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   123,
														},
														File:   "tickscript.flux",
														Source: "every: every",
														Start: ast.Position{
															Column: 28,
															Line:   123,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   123,
															},
															File:   "tickscript.flux",
															Source: "every",
															Start: ast.Position{
																Column: 28,
																Line:   123,
															},
														},
													},
													Name: "every",
												},
												Separator: nil,
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   123,
															},
															File:   "tickscript.flux",
															Source: "every",
															Start: ast.Position{
																Column: 35,
																Line:   123,
															},
														},
													},
													Name: "every",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   123,
														},
														File:   "tickscript.flux",
														Source: "fn: fn",
														Start: ast.Position{
															Column: 42,
															Line:   123,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   123,
															},
															File:   "tickscript.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 42,
																Line:   123,
															},
														},
													},
													Name: "fn",
												},
												Separator: nil,
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   123,
															},
															File:   "tickscript.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 46,
																Line:   123,
															},
														},
													},
													Name: "fn",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 65,
															Line:   123,
														},
														File:   "tickscript.flux",
														Source: "column: _column",
														Start: ast.Position{
															Column: 50,
															Line:   123,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 56,
																Line:   123,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 50,
																Line:   123,
															},
														},
													},
													Name: "column",
												},
												Separator: nil,
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 65,
																Line:   123,
															},
															File:   "tickscript.flux",
															Source: "_column",
															Start: ast.Position{
																Column: 58,
																Line:   123,
															},
														},
													},
													Name: "_column",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 84,
															Line:   123,
														},
														File:   "tickscript.flux",
														Source: "createEmpty: true",
														Start: ast.Position{
															Column: 67,
															Line:   123,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 78,
																Line:   123,
															},
															File:   "tickscript.flux",
															Source: "createEmpty",
															Start: ast.Position{
																Column: 67,
																Line:   123,
															},
														},
													},
													Name: "createEmpty",
												},
												Separator: nil,
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 84,
																Line:   123,
															},
															File:   "tickscript.flux",
															Source: "true",
															Start: ast.Position{
																Column: 80,
																Line:   123,
															},
														},
													},
													Name: "true",
												},
											}},
											Rbrace: nil,
											With:   nil,
										}},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 85,
													Line:   123,
												},
												File:   "tickscript.flux",
												Source: "aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)",
												Start: ast.Position{
													Column: 12,
													Line:   123,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   123,
													},
													File:   "tickscript.flux",
													Source: "aggregateWindow",
													Start: ast.Position{
														Column: 12,
														Line:   123,
													},
												},
											},
											Name: "aggregateWindow",
										},
										Lparen: nil,
										Rparen: nil,
									},
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   124,
										},
										File:   "tickscript.flux",
										Source: "tables\n        |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n        |> fill(column: _column, value: defaultValue)",
										Start: ast.Position{
											Column: 12,
											Line:   122,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   124,
												},
												File:   "tickscript.flux",
												Source: "column: _column, value: defaultValue",
												Start: ast.Position{
													Column: 17,
													Line:   124,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   124,
													},
													File:   "tickscript.flux",
													Source: "column: _column",
													Start: ast.Position{
														Column: 17,
														Line:   124,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 23,
															Line:   124,
														},
														File:   "tickscript.flux",
														Source: "column",
														Start: ast.Position{
															Column: 17,
															Line:   124,
														},
													},
												},
												Name: "column",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   124,
														},
														File:   "tickscript.flux",
														Source: "_column",
														Start: ast.Position{
															Column: 25,
															Line:   124,
														},
													},
												},
												Name: "_column",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 53,
														Line:   124,
													},
													File:   "tickscript.flux",
													Source: "value: defaultValue",
													Start: ast.Position{
														Column: 34,
														Line:   124,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 39,
															Line:   124,
														},
														File:   "tickscript.flux",
														Source: "value",
														Start: ast.Position{
															Column: 34,
															Line:   124,
														},
													},
												},
												Name: "value",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 53,
															Line:   124,
														},
														File:   "tickscript.flux",
														Source: "defaultValue",
														Start: ast.Position{
															Column: 41,
															Line:   124,
														},
													},
												},
												Name: "defaultValue",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   124,
											},
											File:   "tickscript.flux",
											Source: "fill(column: _column, value: defaultValue)",
											Start: ast.Position{
												Column: 12,
												Line:   124,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   124,
												},
												File:   "tickscript.flux",
												Source: "fill",
												Start: ast.Position{
													Column: 12,
													Line:   124,
												},
											},
										},
										Name: "fill",
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 77,
										Line:   125,
									},
									File:   "tickscript.flux",
									Source: "tables\n        |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n        |> fill(column: _column, value: defaultValue)\n        |> rename(fn: (column) => if column == _column then _as else column)",
									Start: ast.Position{
										Column: 12,
										Line:   122,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 76,
												Line:   125,
											},
											File:   "tickscript.flux",
											Source: "fn: (column) => if column == _column then _as else column",
											Start: ast.Position{
												Column: 19,
												Line:   125,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 76,
													Line:   125,
												},
												File:   "tickscript.flux",
												Source: "fn: (column) => if column == _column then _as else column",
												Start: ast.Position{
													Column: 19,
													Line:   125,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   125,
													},
													File:   "tickscript.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 19,
														Line:   125,
													},
												},
											},
											Name: "fn",
										},
										Separator: nil,
										Value: &ast.FunctionExpression{
											Arrow: nil,
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 76,
														Line:   125,
													},
													File:   "tickscript.flux",
													Source: "(column) => if column == _column then _as else column",
													Start: ast.Position{
														Column: 23,
														Line:   125,
													},
												},
											},
											Body: &ast.ConditionalExpression{
												Alternate: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 76,
																Line:   125,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 70,
																Line:   125,
															},
														},
													},
													Name: "column",
												},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 76,
															Line:   125,
														},
														File:   "tickscript.flux",
														Source: "if column == _column then _as else column",
														Start: ast.Position{
															Column: 35,
															Line:   125,
														},
													},
												},
												Consequent: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 64,
																Line:   125,
															},
															File:   "tickscript.flux",
															Source: "_as",
															Start: ast.Position{
																Column: 61,
																Line:   125,
															},
														},
													},
													Name: "_as",
												},
												Test: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   125,
															},
															File:   "tickscript.flux",
															Source: "column == _column",
															Start: ast.Position{
																Column: 38,
																Line:   125,
															},
														},
													},
													Left: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   125,
																},
																File:   "tickscript.flux",
																Source: "column",
																Start: ast.Position{
																	Column: 38,
																	Line:   125,
																},
															},
														},
														Name: "column",
													},
													Operator: 17,
													Right: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 55,
																	Line:   125,
																},
																File:   "tickscript.flux",
																Source: "_column",
																Start: ast.Position{
																	Column: 48,
																	Line:   125,
																},
															},
														},
														Name: "_column",
													},
												},
												Tk_else: nil,
												Tk_if:   nil,
												Tk_then: nil,
											},
											Lparen: nil,
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   125,
														},
														File:   "tickscript.flux",
														Source: "column",
														Start: ast.Position{
															Column: 24,
															Line:   125,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 30,
																Line:   125,
															},
															File:   "tickscript.flux",
															Source: "column",
															Start: ast.Position{
																Column: 24,
																Line:   125,
															},
														},
													},
													Name: "column",
												},
												Separator: nil,
												Value:     nil,
											}},
											Rparan: nil,
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 77,
											Line:   125,
										},
										File:   "tickscript.flux",
										Source: "rename(fn: (column) => if column == _column then _as else column)",
										Start: ast.Position{
											Column: 12,
											Line:   125,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   125,
											},
											File:   "tickscript.flux",
											Source: "rename",
											Start: ast.Position{
												Column: 12,
												Line:   125,
											},
										},
									},
									Name: "rename",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 77,
									Line:   125,
								},
								File:   "tickscript.flux",
								Source: "return tables\n        |> aggregateWindow(every: every, fn: fn, column: _column, createEmpty: true)\n        |> fill(column: _column, value: defaultValue)\n        |> rename(fn: (column) => if column == _column then _as else column)",
								Start: ast.Position{
									Column: 5,
									Line:   122,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   118,
							},
							File:   "tickscript.flux",
							Source: "column=\"_value\"",
							Start: ast.Position{
								Column: 17,
								Line:   118,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   118,
								},
								File:   "tickscript.flux",
								Source: "column",
								Start: ast.Position{
									Column: 17,
									Line:   118,
								},
							},
						},
						Name: "column",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   118,
								},
								File:   "tickscript.flux",
								Source: "\"_value\"",
								Start: ast.Position{
									Column: 24,
									Line:   118,
								},
							},
						},
						Value: "_value",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   118,
							},
							File:   "tickscript.flux",
							Source: "fn",
							Start: ast.Position{
								Column: 34,
								Line:   118,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   118,
								},
								File:   "tickscript.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 34,
									Line:   118,
								},
							},
						},
						Name: "fn",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   118,
							},
							File:   "tickscript.flux",
							Source: "as",
							Start: ast.Position{
								Column: 38,
								Line:   118,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   118,
								},
								File:   "tickscript.flux",
								Source: "as",
								Start: ast.Position{
									Column: 38,
									Line:   118,
								},
							},
						},
						Name: "as",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 47,
								Line:   118,
							},
							File:   "tickscript.flux",
							Source: "every",
							Start: ast.Position{
								Column: 42,
								Line:   118,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   118,
								},
								File:   "tickscript.flux",
								Source: "every",
								Start: ast.Position{
									Column: 42,
									Line:   118,
								},
							},
						},
						Name: "every",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 61,
								Line:   118,
							},
							File:   "tickscript.flux",
							Source: "defaultValue",
							Start: ast.Position{
								Column: 49,
								Line:   118,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   118,
								},
								File:   "tickscript.flux",
								Source: "defaultValue",
								Start: ast.Position{
									Column: 49,
									Line:   118,
								},
							},
						},
						Name: "defaultValue",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   118,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 63,
								Line:   118,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 69,
									Line:   118,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 63,
									Line:   118,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   118,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 70,
								Line:   118,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   134,
					},
					File:   "tickscript.flux",
					Source: "compute = select",
					Start: ast.Position{
						Column: 1,
						Line:   134,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// compute computes aggregated value of the input data.\n"}, ast.Comment{Text: "// It is a convenience function to be used as\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "//   |median('x)'\n"}, ast.Comment{Text: "//      .as(y)\n"}, ast.Comment{Text: "//\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   134,
						},
						File:   "tickscript.flux",
						Source: "compute",
						Start: ast.Position{
							Column: 1,
							Line:   134,
						},
					},
				},
				Name: "compute",
			},
			Init: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   134,
						},
						File:   "tickscript.flux",
						Source: "select",
						Start: ast.Position{
							Column: 11,
							Line:   134,
						},
					},
				},
				Name: "select",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 69,
						Line:   141,
					},
					File:   "tickscript.flux",
					Source: "groupBy = (columns, tables=<-) => tables\n    |> group(columns: columns)\n    // required by monitor.check\n    |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
					Start: ast.Position{
						Column: 1,
						Line:   138,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// groupBy groups by specified columns.\n"}, ast.Comment{Text: "// It is a convenience function, it adds _measurement column which is required by monitor.check().\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   138,
						},
						File:   "tickscript.flux",
						Source: "groupBy",
						Start: ast.Position{
							Column: 1,
							Line:   138,
						},
					},
				},
				Name: "groupBy",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 69,
							Line:   141,
						},
						File:   "tickscript.flux",
						Source: "(columns, tables=<-) => tables\n    |> group(columns: columns)\n    // required by monitor.check\n    |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
						Start: ast.Position{
							Column: 11,
							Line:   138,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   138,
									},
									File:   "tickscript.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 35,
										Line:   138,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   139,
								},
								File:   "tickscript.flux",
								Source: "tables\n    |> group(columns: columns)",
								Start: ast.Position{
									Column: 35,
									Line:   138,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   139,
										},
										File:   "tickscript.flux",
										Source: "columns: columns",
										Start: ast.Position{
											Column: 14,
											Line:   139,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   139,
											},
											File:   "tickscript.flux",
											Source: "columns: columns",
											Start: ast.Position{
												Column: 14,
												Line:   139,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   139,
												},
												File:   "tickscript.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 14,
													Line:   139,
												},
											},
										},
										Name: "columns",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   139,
												},
												File:   "tickscript.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 23,
													Line:   139,
												},
											},
										},
										Name: "columns",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   139,
									},
									File:   "tickscript.flux",
									Source: "group(columns: columns)",
									Start: ast.Position{
										Column: 8,
										Line:   139,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   139,
										},
										File:   "tickscript.flux",
										Source: "group",
										Start: ast.Position{
											Column: 8,
											Line:   139,
										},
									},
								},
								Name: "group",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: []ast.Comment{ast.Comment{Text: "// required by monitor.check\n"}},
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 69,
								Line:   141,
							},
							File:   "tickscript.flux",
							Source: "tables\n    |> group(columns: columns)\n    // required by monitor.check\n    |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
							Start: ast.Position{
								Column: 35,
								Line:   138,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   141,
									},
									File:   "tickscript.flux",
									Source: "columns: [\"_measurement\"], mode: \"extend\"",
									Start: ast.Position{
										Column: 27,
										Line:   141,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   141,
										},
										File:   "tickscript.flux",
										Source: "columns: [\"_measurement\"]",
										Start: ast.Position{
											Column: 27,
											Line:   141,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   141,
											},
											File:   "tickscript.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 27,
												Line:   141,
											},
										},
									},
									Name: "columns",
								},
								Separator: nil,
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 52,
												Line:   141,
											},
											File:   "tickscript.flux",
											Source: "[\"_measurement\"]",
											Start: ast.Position{
												Column: 36,
												Line:   141,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   141,
												},
												File:   "tickscript.flux",
												Source: "\"_measurement\"",
												Start: ast.Position{
													Column: 37,
													Line:   141,
												},
											},
										},
										Value: "_measurement",
									}},
									Lbrack: nil,
									Rbrack: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   141,
										},
										File:   "tickscript.flux",
										Source: "mode: \"extend\"",
										Start: ast.Position{
											Column: 54,
											Line:   141,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   141,
											},
											File:   "tickscript.flux",
											Source: "mode",
											Start: ast.Position{
												Column: 54,
												Line:   141,
											},
										},
									},
									Name: "mode",
								},
								Separator: nil,
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 68,
												Line:   141,
											},
											File:   "tickscript.flux",
											Source: "\"extend\"",
											Start: ast.Position{
												Column: 60,
												Line:   141,
											},
										},
									},
									Value: "extend",
								},
							}},
							Rbrace: nil,
							With:   nil,
						}},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 69,
									Line:   141,
								},
								File:   "tickscript.flux",
								Source: "experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
								Start: ast.Position{
									Column: 8,
									Line:   141,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   141,
									},
									File:   "tickscript.flux",
									Source: "experimental.group",
									Start: ast.Position{
										Column: 8,
										Line:   141,
									},
								},
							},
							Lbrack: nil,
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   141,
										},
										File:   "tickscript.flux",
										Source: "experimental",
										Start: ast.Position{
											Column: 8,
											Line:   141,
										},
									},
								},
								Name: "experimental",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   141,
										},
										File:   "tickscript.flux",
										Source: "group",
										Start: ast.Position{
											Column: 21,
											Line:   141,
										},
									},
								},
								Name: "group",
							},
							Rbrack: nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   138,
							},
							File:   "tickscript.flux",
							Source: "columns",
							Start: ast.Position{
								Column: 12,
								Line:   138,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   138,
								},
								File:   "tickscript.flux",
								Source: "columns",
								Start: ast.Position{
									Column: 12,
									Line:   138,
								},
							},
						},
						Name: "columns",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   138,
							},
							File:   "tickscript.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 21,
								Line:   138,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   138,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 21,
									Line:   138,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   138,
							},
							File:   "tickscript.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 28,
								Line:   138,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 69,
						Line:   148,
					},
					File:   "tickscript.flux",
					Source: "join = (tables, on=[\"_time\"], measurement) => universe.join(tables: tables, on: on)\n    |> map(fn: (r) => ({r with _measurement: measurement}))\n    // required by monitor.check\n    |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
					Start: ast.Position{
						Column: 1,
						Line:   145,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// join merges two streams using standard join().\n"}, ast.Comment{Text: "// It is meant a convenience function, it ensures _measurement column exists and is in the group key.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   145,
						},
						File:   "tickscript.flux",
						Source: "join",
						Start: ast.Position{
							Column: 1,
							Line:   145,
						},
					},
				},
				Name: "join",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 69,
							Line:   148,
						},
						File:   "tickscript.flux",
						Source: "(tables, on=[\"_time\"], measurement) => universe.join(tables: tables, on: on)\n    |> map(fn: (r) => ({r with _measurement: measurement}))\n    // required by monitor.check\n    |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
						Start: ast.Position{
							Column: 8,
							Line:   145,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 83,
											Line:   145,
										},
										File:   "tickscript.flux",
										Source: "tables: tables, on: on",
										Start: ast.Position{
											Column: 61,
											Line:   145,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 75,
												Line:   145,
											},
											File:   "tickscript.flux",
											Source: "tables: tables",
											Start: ast.Position{
												Column: 61,
												Line:   145,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 67,
													Line:   145,
												},
												File:   "tickscript.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 61,
													Line:   145,
												},
											},
										},
										Name: "tables",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 75,
													Line:   145,
												},
												File:   "tickscript.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 69,
													Line:   145,
												},
											},
										},
										Name: "tables",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 83,
												Line:   145,
											},
											File:   "tickscript.flux",
											Source: "on: on",
											Start: ast.Position{
												Column: 77,
												Line:   145,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 79,
													Line:   145,
												},
												File:   "tickscript.flux",
												Source: "on",
												Start: ast.Position{
													Column: 77,
													Line:   145,
												},
											},
										},
										Name: "on",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 83,
													Line:   145,
												},
												File:   "tickscript.flux",
												Source: "on",
												Start: ast.Position{
													Column: 81,
													Line:   145,
												},
											},
										},
										Name: "on",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 84,
										Line:   145,
									},
									File:   "tickscript.flux",
									Source: "universe.join(tables: tables, on: on)",
									Start: ast.Position{
										Column: 47,
										Line:   145,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 60,
											Line:   145,
										},
										File:   "tickscript.flux",
										Source: "universe.join",
										Start: ast.Position{
											Column: 47,
											Line:   145,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   145,
											},
											File:   "tickscript.flux",
											Source: "universe",
											Start: ast.Position{
												Column: 47,
												Line:   145,
											},
										},
									},
									Name: "universe",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 60,
												Line:   145,
											},
											File:   "tickscript.flux",
											Source: "join",
											Start: ast.Position{
												Column: 56,
												Line:   145,
											},
										},
									},
									Name: "join",
								},
								Rbrack: nil,
							},
							Lparen: nil,
							Rparen: nil,
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 60,
									Line:   146,
								},
								File:   "tickscript.flux",
								Source: "universe.join(tables: tables, on: on)\n    |> map(fn: (r) => ({r with _measurement: measurement}))",
								Start: ast.Position{
									Column: 47,
									Line:   145,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   146,
										},
										File:   "tickscript.flux",
										Source: "fn: (r) => ({r with _measurement: measurement})",
										Start: ast.Position{
											Column: 12,
											Line:   146,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   146,
											},
											File:   "tickscript.flux",
											Source: "fn: (r) => ({r with _measurement: measurement})",
											Start: ast.Position{
												Column: 12,
												Line:   146,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   146,
												},
												File:   "tickscript.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 12,
													Line:   146,
												},
											},
										},
										Name: "fn",
									},
									Separator: nil,
									Value: &ast.FunctionExpression{
										Arrow: nil,
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   146,
												},
												File:   "tickscript.flux",
												Source: "(r) => ({r with _measurement: measurement})",
												Start: ast.Position{
													Column: 16,
													Line:   146,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 59,
														Line:   146,
													},
													File:   "tickscript.flux",
													Source: "({r with _measurement: measurement})",
													Start: ast.Position{
														Column: 23,
														Line:   146,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   146,
														},
														File:   "tickscript.flux",
														Source: "{r with _measurement: measurement}",
														Start: ast.Position{
															Column: 24,
															Line:   146,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 57,
																Line:   146,
															},
															File:   "tickscript.flux",
															Source: "_measurement: measurement",
															Start: ast.Position{
																Column: 32,
																Line:   146,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   146,
																},
																File:   "tickscript.flux",
																Source: "_measurement",
																Start: ast.Position{
																	Column: 32,
																	Line:   146,
																},
															},
														},
														Name: "_measurement",
													},
													Separator: nil,
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 57,
																	Line:   146,
																},
																File:   "tickscript.flux",
																Source: "measurement",
																Start: ast.Position{
																	Column: 46,
																	Line:   146,
																},
															},
														},
														Name: "measurement",
													},
												}},
												Rbrace: nil,
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 26,
																Line:   146,
															},
															File:   "tickscript.flux",
															Source: "r",
															Start: ast.Position{
																Column: 25,
																Line:   146,
															},
														},
													},
													Name: "r",
												},
											},
											Lparen: nil,
											Rparen: nil,
										},
										Lparen: nil,
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   146,
													},
													File:   "tickscript.flux",
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   146,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   146,
														},
														File:   "tickscript.flux",
														Source: "r",
														Start: ast.Position{
															Column: 17,
															Line:   146,
														},
													},
												},
												Name: "r",
											},
											Separator: nil,
											Value:     nil,
										}},
										Rparan: nil,
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   146,
									},
									File:   "tickscript.flux",
									Source: "map(fn: (r) => ({r with _measurement: measurement}))",
									Start: ast.Position{
										Column: 8,
										Line:   146,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   146,
										},
										File:   "tickscript.flux",
										Source: "map",
										Start: ast.Position{
											Column: 8,
											Line:   146,
										},
									},
								},
								Name: "map",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: []ast.Comment{ast.Comment{Text: "// required by monitor.check\n"}},
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 69,
								Line:   148,
							},
							File:   "tickscript.flux",
							Source: "universe.join(tables: tables, on: on)\n    |> map(fn: (r) => ({r with _measurement: measurement}))\n    // required by monitor.check\n    |> experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
							Start: ast.Position{
								Column: 47,
								Line:   145,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   148,
									},
									File:   "tickscript.flux",
									Source: "columns: [\"_measurement\"], mode: \"extend\"",
									Start: ast.Position{
										Column: 27,
										Line:   148,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   148,
										},
										File:   "tickscript.flux",
										Source: "columns: [\"_measurement\"]",
										Start: ast.Position{
											Column: 27,
											Line:   148,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   148,
											},
											File:   "tickscript.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 27,
												Line:   148,
											},
										},
									},
									Name: "columns",
								},
								Separator: nil,
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 52,
												Line:   148,
											},
											File:   "tickscript.flux",
											Source: "[\"_measurement\"]",
											Start: ast.Position{
												Column: 36,
												Line:   148,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   148,
												},
												File:   "tickscript.flux",
												Source: "\"_measurement\"",
												Start: ast.Position{
													Column: 37,
													Line:   148,
												},
											},
										},
										Value: "_measurement",
									}},
									Lbrack: nil,
									Rbrack: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   148,
										},
										File:   "tickscript.flux",
										Source: "mode: \"extend\"",
										Start: ast.Position{
											Column: 54,
											Line:   148,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   148,
											},
											File:   "tickscript.flux",
											Source: "mode",
											Start: ast.Position{
												Column: 54,
												Line:   148,
											},
										},
									},
									Name: "mode",
								},
								Separator: nil,
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 68,
												Line:   148,
											},
											File:   "tickscript.flux",
											Source: "\"extend\"",
											Start: ast.Position{
												Column: 60,
												Line:   148,
											},
										},
									},
									Value: "extend",
								},
							}},
							Rbrace: nil,
							With:   nil,
						}},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 69,
									Line:   148,
								},
								File:   "tickscript.flux",
								Source: "experimental.group(columns: [\"_measurement\"], mode: \"extend\")",
								Start: ast.Position{
									Column: 8,
									Line:   148,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   148,
									},
									File:   "tickscript.flux",
									Source: "experimental.group",
									Start: ast.Position{
										Column: 8,
										Line:   148,
									},
								},
							},
							Lbrack: nil,
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   148,
										},
										File:   "tickscript.flux",
										Source: "experimental",
										Start: ast.Position{
											Column: 8,
											Line:   148,
										},
									},
								},
								Name: "experimental",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   148,
										},
										File:   "tickscript.flux",
										Source: "group",
										Start: ast.Position{
											Column: 21,
											Line:   148,
										},
									},
								},
								Name: "group",
							},
							Rbrack: nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   145,
							},
							File:   "tickscript.flux",
							Source: "tables",
							Start: ast.Position{
								Column: 9,
								Line:   145,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   145,
								},
								File:   "tickscript.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 9,
									Line:   145,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   145,
							},
							File:   "tickscript.flux",
							Source: "on=[\"_time\"]",
							Start: ast.Position{
								Column: 17,
								Line:   145,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   145,
								},
								File:   "tickscript.flux",
								Source: "on",
								Start: ast.Position{
									Column: 17,
									Line:   145,
								},
							},
						},
						Name: "on",
					},
					Separator: nil,
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   145,
								},
								File:   "tickscript.flux",
								Source: "[\"_time\"]",
								Start: ast.Position{
									Column: 20,
									Line:   145,
								},
							},
						},
						Elements: []ast.Expression{&ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   145,
									},
									File:   "tickscript.flux",
									Source: "\"_time\"",
									Start: ast.Position{
										Column: 21,
										Line:   145,
									},
								},
							},
							Value: "_time",
						}},
						Lbrack: nil,
						Rbrack: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   145,
							},
							File:   "tickscript.flux",
							Source: "measurement",
							Start: ast.Position{
								Column: 31,
								Line:   145,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   145,
								},
								File:   "tickscript.flux",
								Source: "measurement",
								Start: ast.Position{
									Column: 31,
									Line:   145,
								},
							},
						},
						Name: "measurement",
					},
					Separator: nil,
					Value:     nil,
				}},
				Rparan: nil,
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   4,
					},
					File:   "tickscript.flux",
					Source: "import \"experimental\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   4,
						},
						File:   "tickscript.flux",
						Source: "\"experimental\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "experimental",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 28,
						Line:   5,
					},
					File:   "tickscript.flux",
					Source: "import \"experimental/array\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 28,
							Line:   5,
						},
						File:   "tickscript.flux",
						Source: "\"experimental/array\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "experimental/array",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   6,
					},
					File:   "tickscript.flux",
					Source: "import \"influxdata/influxdb\"",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   6,
						},
						File:   "tickscript.flux",
						Source: "\"influxdata/influxdb\"",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				Value: "influxdata/influxdb",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 37,
						Line:   7,
					},
					File:   "tickscript.flux",
					Source: "import \"influxdata/influxdb/monitor\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 37,
							Line:   7,
						},
						File:   "tickscript.flux",
						Source: "\"influxdata/influxdb/monitor\"",
						Start: ast.Position{
							Column: 8,
							Line:   7,
						},
					},
				},
				Value: "influxdata/influxdb/monitor",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 36,
						Line:   8,
					},
					File:   "tickscript.flux",
					Source: "import \"influxdata/influxdb/schema\"",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 36,
							Line:   8,
						},
						File:   "tickscript.flux",
						Source: "\"influxdata/influxdb/schema\"",
						Start: ast.Position{
							Column: 8,
							Line:   8,
						},
					},
				},
				Value: "influxdata/influxdb/schema",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   9,
					},
					File:   "tickscript.flux",
					Source: "import \"universe\"",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   9,
						},
						File:   "tickscript.flux",
						Source: "\"universe\"",
						Start: ast.Position{
							Column: 8,
							Line:   9,
						},
					},
				},
				Value: "universe",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "tickscript.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   1,
					},
					File:   "tickscript.flux",
					Source: "package tickscript",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   1,
						},
						File:   "tickscript.flux",
						Source: "tickscript",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "tickscript",
			},
		},
	}},
	Package: "tickscript",
	Path:    "contrib/bonitoo-io/tickscript",
}
