// DO NOT EDIT: This file is autogenerated via the builtin command.

package multirow

import ast "github.com/influxdata/flux/ast"

var FluxTestPackages = []*ast.Package{&ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 110,
					Line:   53,
				},
				File:   "map_fibonacci_gen_test.flux",
				Source: "package multirow_test\n\n\nimport \"testing\"\nimport \"contrib/lazarenkovegor/multirow\"\n\ninData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,_time,_measurement\n,,,test1,test10,,\n,,,test1,test11,,\n,,,test2,test12,,\n,,,test2,test13,,\n,,,test2,test14,,\n,,,test2,test15,,\n,,,test2,test16,,\n,,,test2,test17,,\n,,,test2,test18,,\n\"\n\noutData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,string,long\n#group,false,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,,\n,result,table,_field,_measurement,_time,_value,fibonacci\n,,,test1,,,test10,0\n,,,test1,,,test11,1\n,,,test2,,,test12,1\n,,,test2,,,test13,2\n,,,test2,,,test14,3\n,,,test2,,,test15,5\n,,,test2,,,test16,8\n,,,test2,,,test17,13\n,,,test2,,,test18,21\n\"\n\nt_map = (table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(\n            fn: (previous, index, row) =>\n                ({row with fibonacci: if index == 1 then 1 else previous.fibonacci + previous.prev,\n                    prev: previous.fibonacci,\n                }),\n            init: {prev: 0, fibonacci: 0},\n            virtual: [\"prev\"],\n        )\n\ntest _map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   22,
					},
					File:   "map_fibonacci_gen_test.flux",
					Source: "inData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,_time,_measurement\n,,,test1,test10,,\n,,,test1,test11,,\n,,,test2,test12,,\n,,,test2,test13,,\n,,,test2,test14,,\n,,,test2,test15,,\n,,,test2,test16,,\n,,,test2,test17,,\n,,,test2,test18,,\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   7,
						},
						File:   "map_fibonacci_gen_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   22,
						},
						File:   "map_fibonacci_gen_test.flux",
						Source: "\"\n#datatype,string,long,string,string,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,_time,_measurement\n,,,test1,test10,,\n,,,test1,test11,,\n,,,test2,test12,,\n,,,test2,test13,,\n,,,test2,test14,,\n,,,test2,test15,,\n,,,test2,test16,,\n,,,test2,test17,,\n,,,test2,test18,,\n\"",
						Start: ast.Position{
							Column: 5,
							Line:   8,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,_time,_measurement\n,,,test1,test10,,\n,,,test1,test11,,\n,,,test2,test12,,\n,,,test2,test13,,\n,,,test2,test14,,\n,,,test2,test15,,\n,,,test2,test16,,\n,,,test2,test17,,\n,,,test2,test18,,\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   39,
					},
					File:   "map_fibonacci_gen_test.flux",
					Source: "outData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,string,long\n#group,false,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,,\n,result,table,_field,_measurement,_time,_value,fibonacci\n,,,test1,,,test10,0\n,,,test1,,,test11,1\n,,,test2,,,test12,1\n,,,test2,,,test13,2\n,,,test2,,,test14,3\n,,,test2,,,test15,5\n,,,test2,,,test16,8\n,,,test2,,,test17,13\n,,,test2,,,test18,21\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   24,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   24,
						},
						File:   "map_fibonacci_gen_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   24,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   39,
						},
						File:   "map_fibonacci_gen_test.flux",
						Source: "\"\n#datatype,string,long,string,string,dateTime:RFC3339,string,long\n#group,false,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,,\n,result,table,_field,_measurement,_time,_value,fibonacci\n,,,test1,,,test10,0\n,,,test1,,,test11,1\n,,,test2,,,test12,1\n,,,test2,,,test13,2\n,,,test2,,,test14,3\n,,,test2,,,test15,5\n,,,test2,,,test16,8\n,,,test2,,,test17,13\n,,,test2,,,test18,21\n\"",
						Start: ast.Position{
							Column: 5,
							Line:   25,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,dateTime:RFC3339,string,long\n#group,false,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,,\n,result,table,_field,_measurement,_time,_value,fibonacci\n,,,test1,,,test10,0\n,,,test1,,,test11,1\n,,,test2,,,test12,1\n,,,test2,,,test13,2\n,,,test2,,,test14,3\n,,,test2,,,test15,5\n,,,test2,,,test16,8\n,,,test2,,,test17,13\n,,,test2,,,test18,21\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 10,
						Line:   51,
					},
					File:   "map_fibonacci_gen_test.flux",
					Source: "t_map = (table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(\n            fn: (previous, index, row) =>\n                ({row with fibonacci: if index == 1 then 1 else previous.fibonacci + previous.prev,\n                    prev: previous.fibonacci,\n                }),\n            init: {prev: 0, fibonacci: 0},\n            virtual: [\"prev\"],\n        )",
					Start: ast.Position{
						Column: 1,
						Line:   41,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   41,
						},
						File:   "map_fibonacci_gen_test.flux",
						Source: "t_map",
						Start: ast.Position{
							Column: 1,
							Line:   41,
						},
					},
				},
				Name: "t_map",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   51,
						},
						File:   "map_fibonacci_gen_test.flux",
						Source: "(table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(\n            fn: (previous, index, row) =>\n                ({row with fibonacci: if index == 1 then 1 else previous.fibonacci + previous.prev,\n                    prev: previous.fibonacci,\n                }),\n            init: {prev: 0, fibonacci: 0},\n            virtual: [\"prev\"],\n        )",
						Start: ast.Position{
							Column: 9,
							Line:   41,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   42,
									},
									File:   "map_fibonacci_gen_test.flux",
									Source: "table",
									Start: ast.Position{
										Column: 5,
										Line:   42,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   43,
								},
								File:   "map_fibonacci_gen_test.flux",
								Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])",
								Start: ast.Position{
									Column: 5,
									Line:   42,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   43,
										},
										File:   "map_fibonacci_gen_test.flux",
										Source: "columns: [\"_start\", \"_stop\"]",
										Start: ast.Position{
											Column: 17,
											Line:   43,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   43,
											},
											File:   "map_fibonacci_gen_test.flux",
											Source: "columns: [\"_start\", \"_stop\"]",
											Start: ast.Position{
												Column: 17,
												Line:   43,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   43,
												},
												File:   "map_fibonacci_gen_test.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 17,
													Line:   43,
												},
											},
										},
										Name: "columns",
									},
									Separator: nil,
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   43,
												},
												File:   "map_fibonacci_gen_test.flux",
												Source: "[\"_start\", \"_stop\"]",
												Start: ast.Position{
													Column: 26,
													Line:   43,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   43,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "\"_start\"",
													Start: ast.Position{
														Column: 27,
														Line:   43,
													},
												},
											},
											Value: "_start",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   43,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "\"_stop\"",
													Start: ast.Position{
														Column: 37,
														Line:   43,
													},
												},
											},
											Value: "_stop",
										}},
										Lbrack: nil,
										Rbrack: nil,
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   43,
									},
									File:   "map_fibonacci_gen_test.flux",
									Source: "drop(columns: [\"_start\", \"_stop\"])",
									Start: ast.Position{
										Column: 12,
										Line:   43,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   43,
										},
										File:   "map_fibonacci_gen_test.flux",
										Source: "drop",
										Start: ast.Position{
											Column: 12,
											Line:   43,
										},
									},
								},
								Name: "drop",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   51,
							},
							File:   "map_fibonacci_gen_test.flux",
							Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(\n            fn: (previous, index, row) =>\n                ({row with fibonacci: if index == 1 then 1 else previous.fibonacci + previous.prev,\n                    prev: previous.fibonacci,\n                }),\n            init: {prev: 0, fibonacci: 0},\n            virtual: [\"prev\"],\n        )",
							Start: ast.Position{
								Column: 5,
								Line:   42,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   50,
									},
									File:   "map_fibonacci_gen_test.flux",
									Source: "fn: (previous, index, row) =>\n                ({row with fibonacci: if index == 1 then 1 else previous.fibonacci + previous.prev,\n                    prev: previous.fibonacci,\n                }),\n            init: {prev: 0, fibonacci: 0},\n            virtual: [\"prev\"]",
									Start: ast.Position{
										Column: 13,
										Line:   45,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   48,
										},
										File:   "map_fibonacci_gen_test.flux",
										Source: "fn: (previous, index, row) =>\n                ({row with fibonacci: if index == 1 then 1 else previous.fibonacci + previous.prev,\n                    prev: previous.fibonacci,\n                })",
										Start: ast.Position{
											Column: 13,
											Line:   45,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   45,
											},
											File:   "map_fibonacci_gen_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 13,
												Line:   45,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.FunctionExpression{
									Arrow: nil,
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   48,
											},
											File:   "map_fibonacci_gen_test.flux",
											Source: "(previous, index, row) =>\n                ({row with fibonacci: if index == 1 then 1 else previous.fibonacci + previous.prev,\n                    prev: previous.fibonacci,\n                })",
											Start: ast.Position{
												Column: 17,
												Line:   45,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   48,
												},
												File:   "map_fibonacci_gen_test.flux",
												Source: "({row with fibonacci: if index == 1 then 1 else previous.fibonacci + previous.prev,\n                    prev: previous.fibonacci,\n                })",
												Start: ast.Position{
													Column: 17,
													Line:   46,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   48,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "{row with fibonacci: if index == 1 then 1 else previous.fibonacci + previous.prev,\n                    prev: previous.fibonacci,\n                }",
													Start: ast.Position{
														Column: 18,
														Line:   46,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 99,
															Line:   46,
														},
														File:   "map_fibonacci_gen_test.flux",
														Source: "fibonacci: if index == 1 then 1 else previous.fibonacci + previous.prev",
														Start: ast.Position{
															Column: 28,
															Line:   46,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   46,
															},
															File:   "map_fibonacci_gen_test.flux",
															Source: "fibonacci",
															Start: ast.Position{
																Column: 28,
																Line:   46,
															},
														},
													},
													Name: "fibonacci",
												},
												Separator: nil,
												Value: &ast.ConditionalExpression{
													Alternate: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 99,
																	Line:   46,
																},
																File:   "map_fibonacci_gen_test.flux",
																Source: "previous.fibonacci + previous.prev",
																Start: ast.Position{
																	Column: 65,
																	Line:   46,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 83,
																		Line:   46,
																	},
																	File:   "map_fibonacci_gen_test.flux",
																	Source: "previous.fibonacci",
																	Start: ast.Position{
																		Column: 65,
																		Line:   46,
																	},
																},
															},
															Lbrack: nil,
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 73,
																			Line:   46,
																		},
																		File:   "map_fibonacci_gen_test.flux",
																		Source: "previous",
																		Start: ast.Position{
																			Column: 65,
																			Line:   46,
																		},
																	},
																},
																Name: "previous",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 83,
																			Line:   46,
																		},
																		File:   "map_fibonacci_gen_test.flux",
																		Source: "fibonacci",
																		Start: ast.Position{
																			Column: 74,
																			Line:   46,
																		},
																	},
																},
																Name: "fibonacci",
															},
															Rbrack: nil,
														},
														Operator: 5,
														Right: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 99,
																		Line:   46,
																	},
																	File:   "map_fibonacci_gen_test.flux",
																	Source: "previous.prev",
																	Start: ast.Position{
																		Column: 86,
																		Line:   46,
																	},
																},
															},
															Lbrack: nil,
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 94,
																			Line:   46,
																		},
																		File:   "map_fibonacci_gen_test.flux",
																		Source: "previous",
																		Start: ast.Position{
																			Column: 86,
																			Line:   46,
																		},
																	},
																},
																Name: "previous",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 99,
																			Line:   46,
																		},
																		File:   "map_fibonacci_gen_test.flux",
																		Source: "prev",
																		Start: ast.Position{
																			Column: 95,
																			Line:   46,
																		},
																	},
																},
																Name: "prev",
															},
															Rbrack: nil,
														},
													},
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 99,
																Line:   46,
															},
															File:   "map_fibonacci_gen_test.flux",
															Source: "if index == 1 then 1 else previous.fibonacci + previous.prev",
															Start: ast.Position{
																Column: 39,
																Line:   46,
															},
														},
													},
													Consequent: &ast.IntegerLiteral{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 59,
																	Line:   46,
																},
																File:   "map_fibonacci_gen_test.flux",
																Source: "1",
																Start: ast.Position{
																	Column: 58,
																	Line:   46,
																},
															},
														},
														Value: int64(1),
													},
													Test: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 52,
																	Line:   46,
																},
																File:   "map_fibonacci_gen_test.flux",
																Source: "index == 1",
																Start: ast.Position{
																	Column: 42,
																	Line:   46,
																},
															},
														},
														Left: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   46,
																	},
																	File:   "map_fibonacci_gen_test.flux",
																	Source: "index",
																	Start: ast.Position{
																		Column: 42,
																		Line:   46,
																	},
																},
															},
															Name: "index",
														},
														Operator: 17,
														Right: &ast.IntegerLiteral{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 52,
																		Line:   46,
																	},
																	File:   "map_fibonacci_gen_test.flux",
																	Source: "1",
																	Start: ast.Position{
																		Column: 51,
																		Line:   46,
																	},
																},
															},
															Value: int64(1),
														},
													},
													Tk_else: nil,
													Tk_if:   nil,
													Tk_then: nil,
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   47,
														},
														File:   "map_fibonacci_gen_test.flux",
														Source: "prev: previous.fibonacci",
														Start: ast.Position{
															Column: 21,
															Line:   47,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 25,
																Line:   47,
															},
															File:   "map_fibonacci_gen_test.flux",
															Source: "prev",
															Start: ast.Position{
																Column: 21,
																Line:   47,
															},
														},
													},
													Name: "prev",
												},
												Separator: nil,
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   47,
															},
															File:   "map_fibonacci_gen_test.flux",
															Source: "previous.fibonacci",
															Start: ast.Position{
																Column: 27,
																Line:   47,
															},
														},
													},
													Lbrack: nil,
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 35,
																	Line:   47,
																},
																File:   "map_fibonacci_gen_test.flux",
																Source: "previous",
																Start: ast.Position{
																	Column: 27,
																	Line:   47,
																},
															},
														},
														Name: "previous",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 45,
																	Line:   47,
																},
																File:   "map_fibonacci_gen_test.flux",
																Source: "fibonacci",
																Start: ast.Position{
																	Column: 36,
																	Line:   47,
																},
															},
														},
														Name: "fibonacci",
													},
													Rbrack: nil,
												},
											}},
											Rbrace: nil,
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   46,
														},
														File:   "map_fibonacci_gen_test.flux",
														Source: "row",
														Start: ast.Position{
															Column: 19,
															Line:   46,
														},
													},
												},
												Name: "row",
											},
										},
										Lparen: nil,
										Rparen: nil,
									},
									Lparen: nil,
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   45,
												},
												File:   "map_fibonacci_gen_test.flux",
												Source: "previous",
												Start: ast.Position{
													Column: 18,
													Line:   45,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   45,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "previous",
													Start: ast.Position{
														Column: 18,
														Line:   45,
													},
												},
											},
											Name: "previous",
										},
										Separator: nil,
										Value:     nil,
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   45,
												},
												File:   "map_fibonacci_gen_test.flux",
												Source: "index",
												Start: ast.Position{
													Column: 28,
													Line:   45,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   45,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "index",
													Start: ast.Position{
														Column: 28,
														Line:   45,
													},
												},
											},
											Name: "index",
										},
										Separator: nil,
										Value:     nil,
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   45,
												},
												File:   "map_fibonacci_gen_test.flux",
												Source: "row",
												Start: ast.Position{
													Column: 35,
													Line:   45,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   45,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "row",
													Start: ast.Position{
														Column: 35,
														Line:   45,
													},
												},
											},
											Name: "row",
										},
										Separator: nil,
										Value:     nil,
									}},
									Rparan: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   49,
										},
										File:   "map_fibonacci_gen_test.flux",
										Source: "init: {prev: 0, fibonacci: 0}",
										Start: ast.Position{
											Column: 13,
											Line:   49,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   49,
											},
											File:   "map_fibonacci_gen_test.flux",
											Source: "init",
											Start: ast.Position{
												Column: 13,
												Line:   49,
											},
										},
									},
									Name: "init",
								},
								Separator: nil,
								Value: &ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   49,
											},
											File:   "map_fibonacci_gen_test.flux",
											Source: "{prev: 0, fibonacci: 0}",
											Start: ast.Position{
												Column: 19,
												Line:   49,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   49,
												},
												File:   "map_fibonacci_gen_test.flux",
												Source: "prev: 0",
												Start: ast.Position{
													Column: 20,
													Line:   49,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   49,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "prev",
													Start: ast.Position{
														Column: 20,
														Line:   49,
													},
												},
											},
											Name: "prev",
										},
										Separator: nil,
										Value: &ast.IntegerLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   49,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "0",
													Start: ast.Position{
														Column: 26,
														Line:   49,
													},
												},
											},
											Value: int64(0),
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   49,
												},
												File:   "map_fibonacci_gen_test.flux",
												Source: "fibonacci: 0",
												Start: ast.Position{
													Column: 29,
													Line:   49,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   49,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "fibonacci",
													Start: ast.Position{
														Column: 29,
														Line:   49,
													},
												},
											},
											Name: "fibonacci",
										},
										Separator: nil,
										Value: &ast.IntegerLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   49,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "0",
													Start: ast.Position{
														Column: 40,
														Line:   49,
													},
												},
											},
											Value: int64(0),
										},
									}},
									Rbrace: nil,
									With:   nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   50,
										},
										File:   "map_fibonacci_gen_test.flux",
										Source: "virtual: [\"prev\"]",
										Start: ast.Position{
											Column: 13,
											Line:   50,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   50,
											},
											File:   "map_fibonacci_gen_test.flux",
											Source: "virtual",
											Start: ast.Position{
												Column: 13,
												Line:   50,
											},
										},
									},
									Name: "virtual",
								},
								Separator: nil,
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   50,
											},
											File:   "map_fibonacci_gen_test.flux",
											Source: "[\"prev\"]",
											Start: ast.Position{
												Column: 22,
												Line:   50,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   50,
												},
												File:   "map_fibonacci_gen_test.flux",
												Source: "\"prev\"",
												Start: ast.Position{
													Column: 23,
													Line:   50,
												},
											},
										},
										Value: "prev",
									}},
									Lbrack: nil,
									Rbrack: nil,
								},
							}},
							Rbrace: nil,
							With:   nil,
						}},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   51,
								},
								File:   "map_fibonacci_gen_test.flux",
								Source: "multirow.map(\n            fn: (previous, index, row) =>\n                ({row with fibonacci: if index == 1 then 1 else previous.fibonacci + previous.prev,\n                    prev: previous.fibonacci,\n                }),\n            init: {prev: 0, fibonacci: 0},\n            virtual: [\"prev\"],\n        )",
								Start: ast.Position{
									Column: 12,
									Line:   44,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   44,
									},
									File:   "map_fibonacci_gen_test.flux",
									Source: "multirow.map",
									Start: ast.Position{
										Column: 12,
										Line:   44,
									},
								},
							},
							Lbrack: nil,
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   44,
										},
										File:   "map_fibonacci_gen_test.flux",
										Source: "multirow",
										Start: ast.Position{
											Column: 12,
											Line:   44,
										},
									},
								},
								Name: "multirow",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   44,
										},
										File:   "map_fibonacci_gen_test.flux",
										Source: "map",
										Start: ast.Position{
											Column: 21,
											Line:   44,
										},
									},
								},
								Name: "map",
							},
							Rbrack: nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   41,
							},
							File:   "map_fibonacci_gen_test.flux",
							Source: "table=<-",
							Start: ast.Position{
								Column: 10,
								Line:   41,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   41,
								},
								File:   "map_fibonacci_gen_test.flux",
								Source: "table",
								Start: ast.Position{
									Column: 10,
									Line:   41,
								},
							},
						},
						Name: "table",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   41,
							},
							File:   "map_fibonacci_gen_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 16,
								Line:   41,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 110,
							Line:   53,
						},
						File:   "map_fibonacci_gen_test.flux",
						Source: "_map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
						Start: ast.Position{
							Column: 6,
							Line:   53,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   53,
							},
							File:   "map_fibonacci_gen_test.flux",
							Source: "_map",
							Start: ast.Position{
								Column: 6,
								Line:   53,
							},
						},
					},
					Name: "_map",
				},
				Init: &ast.FunctionExpression{
					Arrow: nil,
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 110,
								Line:   53,
							},
							File:   "map_fibonacci_gen_test.flux",
							Source: "() => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
							Start: ast.Position{
								Column: 13,
								Line:   53,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 110,
									Line:   53,
								},
								File:   "map_fibonacci_gen_test.flux",
								Source: "({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
								Start: ast.Position{
									Column: 19,
									Line:   53,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 109,
										Line:   53,
									},
									File:   "map_fibonacci_gen_test.flux",
									Source: "{input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map}",
									Start: ast.Position{
										Column: 20,
										Line:   53,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 60,
											Line:   53,
										},
										File:   "map_fibonacci_gen_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 21,
											Line:   53,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   53,
											},
											File:   "map_fibonacci_gen_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 21,
												Line:   53,
											},
										},
									},
									Name: "input",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   53,
												},
												File:   "map_fibonacci_gen_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 48,
													Line:   53,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 59,
														Line:   53,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 48,
														Line:   53,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   53,
														},
														File:   "map_fibonacci_gen_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 48,
															Line:   53,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   53,
														},
														File:   "map_fibonacci_gen_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 53,
															Line:   53,
														},
													},
												},
												Name: "inData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 60,
												Line:   53,
											},
											File:   "map_fibonacci_gen_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 28,
												Line:   53,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   53,
												},
												File:   "map_fibonacci_gen_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 28,
													Line:   53,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   53,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 28,
														Line:   53,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   53,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 36,
														Line:   53,
													},
												},
											},
											Name: "loadStorage",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 97,
											Line:   53,
										},
										File:   "map_fibonacci_gen_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 62,
											Line:   53,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   53,
											},
											File:   "map_fibonacci_gen_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 62,
												Line:   53,
											},
										},
									},
									Name: "want",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 96,
													Line:   53,
												},
												File:   "map_fibonacci_gen_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 84,
													Line:   53,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 96,
														Line:   53,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 84,
														Line:   53,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 87,
															Line:   53,
														},
														File:   "map_fibonacci_gen_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 84,
															Line:   53,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 96,
															Line:   53,
														},
														File:   "map_fibonacci_gen_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 89,
															Line:   53,
														},
													},
												},
												Name: "outData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 97,
												Line:   53,
											},
											File:   "map_fibonacci_gen_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 68,
												Line:   53,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 83,
													Line:   53,
												},
												File:   "map_fibonacci_gen_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 68,
													Line:   53,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 75,
														Line:   53,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 68,
														Line:   53,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 83,
														Line:   53,
													},
													File:   "map_fibonacci_gen_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 76,
														Line:   53,
													},
												},
											},
											Name: "loadMem",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 108,
											Line:   53,
										},
										File:   "map_fibonacci_gen_test.flux",
										Source: "fn: t_map",
										Start: ast.Position{
											Column: 99,
											Line:   53,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 101,
												Line:   53,
											},
											File:   "map_fibonacci_gen_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 99,
												Line:   53,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 108,
												Line:   53,
											},
											File:   "map_fibonacci_gen_test.flux",
											Source: "t_map",
											Start: ast.Position{
												Column: 103,
												Line:   53,
											},
										},
									},
									Name: "t_map",
								},
							}},
							Rbrace: nil,
							With:   nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
					Lparen: nil,
					Params: []*ast.Property{},
					Rparan: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 110,
						Line:   53,
					},
					File:   "map_fibonacci_gen_test.flux",
					Source: "test _map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
					Start: ast.Position{
						Column: 1,
						Line:   53,
					},
				},
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   4,
					},
					File:   "map_fibonacci_gen_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   4,
						},
						File:   "map_fibonacci_gen_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 41,
						Line:   5,
					},
					File:   "map_fibonacci_gen_test.flux",
					Source: "import \"contrib/lazarenkovegor/multirow\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 41,
							Line:   5,
						},
						File:   "map_fibonacci_gen_test.flux",
						Source: "\"contrib/lazarenkovegor/multirow\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "contrib/lazarenkovegor/multirow",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "map_fibonacci_gen_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "map_fibonacci_gen_test.flux",
					Source: "package multirow_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "map_fibonacci_gen_test.flux",
						Source: "multirow_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "multirow_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 110,
					Line:   34,
				},
				File:   "map_filter_even_rows_test.flux",
				Source: "package multirow_test\n\n\nimport \"testing\"\nimport \"contrib/lazarenkovegor/multirow\"\n\ninData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,_time,_measurement\n,,,test1,test10,,\n,,,test1,test11,,\n,,,test2,test12,,\n,,,test2,test13,,\n\"\n\noutData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,\n,result,table,_field,_measurement,_time,_value\n,,,test1,,,test11\n,,,test2,,,test13\n\"\n\nt_map = (table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(fn: (index, row) => if index % 2 > 0 then [row] else [])\n\ntest _map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   17,
					},
					File:   "map_filter_even_rows_test.flux",
					Source: "inData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,_time,_measurement\n,,,test1,test10,,\n,,,test1,test11,,\n,,,test2,test12,,\n,,,test2,test13,,\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   7,
						},
						File:   "map_filter_even_rows_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   17,
						},
						File:   "map_filter_even_rows_test.flux",
						Source: "\"\n#datatype,string,long,string,string,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,_time,_measurement\n,,,test1,test10,,\n,,,test1,test11,,\n,,,test2,test12,,\n,,,test2,test13,,\n\"",
						Start: ast.Position{
							Column: 5,
							Line:   8,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,_time,_measurement\n,,,test1,test10,,\n,,,test1,test11,,\n,,,test2,test12,,\n,,,test2,test13,,\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   27,
					},
					File:   "map_filter_even_rows_test.flux",
					Source: "outData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,\n,result,table,_field,_measurement,_time,_value\n,,,test1,,,test11\n,,,test2,,,test13\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   19,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   19,
						},
						File:   "map_filter_even_rows_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   19,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   27,
						},
						File:   "map_filter_even_rows_test.flux",
						Source: "\"\n#datatype,string,long,string,string,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,\n,result,table,_field,_measurement,_time,_value\n,,,test1,,,test11\n,,,test2,,,test13\n\"",
						Start: ast.Position{
							Column: 5,
							Line:   20,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,\n,result,table,_field,_measurement,_time,_value\n,,,test1,,,test11\n,,,test2,,,test13\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 81,
						Line:   32,
					},
					File:   "map_filter_even_rows_test.flux",
					Source: "t_map = (table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(fn: (index, row) => if index % 2 > 0 then [row] else [])",
					Start: ast.Position{
						Column: 1,
						Line:   29,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   29,
						},
						File:   "map_filter_even_rows_test.flux",
						Source: "t_map",
						Start: ast.Position{
							Column: 1,
							Line:   29,
						},
					},
				},
				Name: "t_map",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 81,
							Line:   32,
						},
						File:   "map_filter_even_rows_test.flux",
						Source: "(table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(fn: (index, row) => if index % 2 > 0 then [row] else [])",
						Start: ast.Position{
							Column: 9,
							Line:   29,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   30,
									},
									File:   "map_filter_even_rows_test.flux",
									Source: "table",
									Start: ast.Position{
										Column: 5,
										Line:   30,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   31,
								},
								File:   "map_filter_even_rows_test.flux",
								Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])",
								Start: ast.Position{
									Column: 5,
									Line:   30,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   31,
										},
										File:   "map_filter_even_rows_test.flux",
										Source: "columns: [\"_start\", \"_stop\"]",
										Start: ast.Position{
											Column: 17,
											Line:   31,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   31,
											},
											File:   "map_filter_even_rows_test.flux",
											Source: "columns: [\"_start\", \"_stop\"]",
											Start: ast.Position{
												Column: 17,
												Line:   31,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   31,
												},
												File:   "map_filter_even_rows_test.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 17,
													Line:   31,
												},
											},
										},
										Name: "columns",
									},
									Separator: nil,
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   31,
												},
												File:   "map_filter_even_rows_test.flux",
												Source: "[\"_start\", \"_stop\"]",
												Start: ast.Position{
													Column: 26,
													Line:   31,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   31,
													},
													File:   "map_filter_even_rows_test.flux",
													Source: "\"_start\"",
													Start: ast.Position{
														Column: 27,
														Line:   31,
													},
												},
											},
											Value: "_start",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   31,
													},
													File:   "map_filter_even_rows_test.flux",
													Source: "\"_stop\"",
													Start: ast.Position{
														Column: 37,
														Line:   31,
													},
												},
											},
											Value: "_stop",
										}},
										Lbrack: nil,
										Rbrack: nil,
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   31,
									},
									File:   "map_filter_even_rows_test.flux",
									Source: "drop(columns: [\"_start\", \"_stop\"])",
									Start: ast.Position{
										Column: 12,
										Line:   31,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   31,
										},
										File:   "map_filter_even_rows_test.flux",
										Source: "drop",
										Start: ast.Position{
											Column: 12,
											Line:   31,
										},
									},
								},
								Name: "drop",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 81,
								Line:   32,
							},
							File:   "map_filter_even_rows_test.flux",
							Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(fn: (index, row) => if index % 2 > 0 then [row] else [])",
							Start: ast.Position{
								Column: 5,
								Line:   30,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 80,
										Line:   32,
									},
									File:   "map_filter_even_rows_test.flux",
									Source: "fn: (index, row) => if index % 2 > 0 then [row] else []",
									Start: ast.Position{
										Column: 25,
										Line:   32,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 80,
											Line:   32,
										},
										File:   "map_filter_even_rows_test.flux",
										Source: "fn: (index, row) => if index % 2 > 0 then [row] else []",
										Start: ast.Position{
											Column: 25,
											Line:   32,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   32,
											},
											File:   "map_filter_even_rows_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 25,
												Line:   32,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.FunctionExpression{
									Arrow: nil,
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 80,
												Line:   32,
											},
											File:   "map_filter_even_rows_test.flux",
											Source: "(index, row) => if index % 2 > 0 then [row] else []",
											Start: ast.Position{
												Column: 29,
												Line:   32,
											},
										},
									},
									Body: &ast.ConditionalExpression{
										Alternate: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 80,
														Line:   32,
													},
													File:   "map_filter_even_rows_test.flux",
													Source: "[]",
													Start: ast.Position{
														Column: 78,
														Line:   32,
													},
												},
											},
											Elements: []ast.Expression{},
											Lbrack:   nil,
											Rbrack:   nil,
										},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 80,
													Line:   32,
												},
												File:   "map_filter_even_rows_test.flux",
												Source: "if index % 2 > 0 then [row] else []",
												Start: ast.Position{
													Column: 45,
													Line:   32,
												},
											},
										},
										Consequent: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 72,
														Line:   32,
													},
													File:   "map_filter_even_rows_test.flux",
													Source: "[row]",
													Start: ast.Position{
														Column: 67,
														Line:   32,
													},
												},
											},
											Elements: []ast.Expression{&ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 71,
															Line:   32,
														},
														File:   "map_filter_even_rows_test.flux",
														Source: "row",
														Start: ast.Position{
															Column: 68,
															Line:   32,
														},
													},
												},
												Name: "row",
											}},
											Lbrack: nil,
											Rbrack: nil,
										},
										Test: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 61,
														Line:   32,
													},
													File:   "map_filter_even_rows_test.flux",
													Source: "index % 2 > 0",
													Start: ast.Position{
														Column: 48,
														Line:   32,
													},
												},
											},
											Left: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 57,
															Line:   32,
														},
														File:   "map_filter_even_rows_test.flux",
														Source: "index % 2",
														Start: ast.Position{
															Column: 48,
															Line:   32,
														},
													},
												},
												Left: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   32,
															},
															File:   "map_filter_even_rows_test.flux",
															Source: "index",
															Start: ast.Position{
																Column: 48,
																Line:   32,
															},
														},
													},
													Name: "index",
												},
												Operator: 3,
												Right: &ast.IntegerLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 57,
																Line:   32,
															},
															File:   "map_filter_even_rows_test.flux",
															Source: "2",
															Start: ast.Position{
																Column: 56,
																Line:   32,
															},
														},
													},
													Value: int64(2),
												},
											},
											Operator: 10,
											Right: &ast.IntegerLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 61,
															Line:   32,
														},
														File:   "map_filter_even_rows_test.flux",
														Source: "0",
														Start: ast.Position{
															Column: 60,
															Line:   32,
														},
													},
												},
												Value: int64(0),
											},
										},
										Tk_else: nil,
										Tk_if:   nil,
										Tk_then: nil,
									},
									Lparen: nil,
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   32,
												},
												File:   "map_filter_even_rows_test.flux",
												Source: "index",
												Start: ast.Position{
													Column: 30,
													Line:   32,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   32,
													},
													File:   "map_filter_even_rows_test.flux",
													Source: "index",
													Start: ast.Position{
														Column: 30,
														Line:   32,
													},
												},
											},
											Name: "index",
										},
										Separator: nil,
										Value:     nil,
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   32,
												},
												File:   "map_filter_even_rows_test.flux",
												Source: "row",
												Start: ast.Position{
													Column: 37,
													Line:   32,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   32,
													},
													File:   "map_filter_even_rows_test.flux",
													Source: "row",
													Start: ast.Position{
														Column: 37,
														Line:   32,
													},
												},
											},
											Name: "row",
										},
										Separator: nil,
										Value:     nil,
									}},
									Rparan: nil,
								},
							}},
							Rbrace: nil,
							With:   nil,
						}},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   32,
								},
								File:   "map_filter_even_rows_test.flux",
								Source: "multirow.map(fn: (index, row) => if index % 2 > 0 then [row] else [])",
								Start: ast.Position{
									Column: 12,
									Line:   32,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   32,
									},
									File:   "map_filter_even_rows_test.flux",
									Source: "multirow.map",
									Start: ast.Position{
										Column: 12,
										Line:   32,
									},
								},
							},
							Lbrack: nil,
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   32,
										},
										File:   "map_filter_even_rows_test.flux",
										Source: "multirow",
										Start: ast.Position{
											Column: 12,
											Line:   32,
										},
									},
								},
								Name: "multirow",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   32,
										},
										File:   "map_filter_even_rows_test.flux",
										Source: "map",
										Start: ast.Position{
											Column: 21,
											Line:   32,
										},
									},
								},
								Name: "map",
							},
							Rbrack: nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   29,
							},
							File:   "map_filter_even_rows_test.flux",
							Source: "table=<-",
							Start: ast.Position{
								Column: 10,
								Line:   29,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   29,
								},
								File:   "map_filter_even_rows_test.flux",
								Source: "table",
								Start: ast.Position{
									Column: 10,
									Line:   29,
								},
							},
						},
						Name: "table",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   29,
							},
							File:   "map_filter_even_rows_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 16,
								Line:   29,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 110,
							Line:   34,
						},
						File:   "map_filter_even_rows_test.flux",
						Source: "_map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
						Start: ast.Position{
							Column: 6,
							Line:   34,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   34,
							},
							File:   "map_filter_even_rows_test.flux",
							Source: "_map",
							Start: ast.Position{
								Column: 6,
								Line:   34,
							},
						},
					},
					Name: "_map",
				},
				Init: &ast.FunctionExpression{
					Arrow: nil,
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 110,
								Line:   34,
							},
							File:   "map_filter_even_rows_test.flux",
							Source: "() => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
							Start: ast.Position{
								Column: 13,
								Line:   34,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 110,
									Line:   34,
								},
								File:   "map_filter_even_rows_test.flux",
								Source: "({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
								Start: ast.Position{
									Column: 19,
									Line:   34,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 109,
										Line:   34,
									},
									File:   "map_filter_even_rows_test.flux",
									Source: "{input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map}",
									Start: ast.Position{
										Column: 20,
										Line:   34,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 60,
											Line:   34,
										},
										File:   "map_filter_even_rows_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 21,
											Line:   34,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   34,
											},
											File:   "map_filter_even_rows_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 21,
												Line:   34,
											},
										},
									},
									Name: "input",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   34,
												},
												File:   "map_filter_even_rows_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 48,
													Line:   34,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 59,
														Line:   34,
													},
													File:   "map_filter_even_rows_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 48,
														Line:   34,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   34,
														},
														File:   "map_filter_even_rows_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 48,
															Line:   34,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   34,
														},
														File:   "map_filter_even_rows_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 53,
															Line:   34,
														},
													},
												},
												Name: "inData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 60,
												Line:   34,
											},
											File:   "map_filter_even_rows_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 28,
												Line:   34,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   34,
												},
												File:   "map_filter_even_rows_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 28,
													Line:   34,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   34,
													},
													File:   "map_filter_even_rows_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 28,
														Line:   34,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   34,
													},
													File:   "map_filter_even_rows_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 36,
														Line:   34,
													},
												},
											},
											Name: "loadStorage",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 97,
											Line:   34,
										},
										File:   "map_filter_even_rows_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 62,
											Line:   34,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   34,
											},
											File:   "map_filter_even_rows_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 62,
												Line:   34,
											},
										},
									},
									Name: "want",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 96,
													Line:   34,
												},
												File:   "map_filter_even_rows_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 84,
													Line:   34,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 96,
														Line:   34,
													},
													File:   "map_filter_even_rows_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 84,
														Line:   34,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 87,
															Line:   34,
														},
														File:   "map_filter_even_rows_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 84,
															Line:   34,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 96,
															Line:   34,
														},
														File:   "map_filter_even_rows_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 89,
															Line:   34,
														},
													},
												},
												Name: "outData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 97,
												Line:   34,
											},
											File:   "map_filter_even_rows_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 68,
												Line:   34,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 83,
													Line:   34,
												},
												File:   "map_filter_even_rows_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 68,
													Line:   34,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 75,
														Line:   34,
													},
													File:   "map_filter_even_rows_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 68,
														Line:   34,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 83,
														Line:   34,
													},
													File:   "map_filter_even_rows_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 76,
														Line:   34,
													},
												},
											},
											Name: "loadMem",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 108,
											Line:   34,
										},
										File:   "map_filter_even_rows_test.flux",
										Source: "fn: t_map",
										Start: ast.Position{
											Column: 99,
											Line:   34,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 101,
												Line:   34,
											},
											File:   "map_filter_even_rows_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 99,
												Line:   34,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 108,
												Line:   34,
											},
											File:   "map_filter_even_rows_test.flux",
											Source: "t_map",
											Start: ast.Position{
												Column: 103,
												Line:   34,
											},
										},
									},
									Name: "t_map",
								},
							}},
							Rbrace: nil,
							With:   nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
					Lparen: nil,
					Params: []*ast.Property{},
					Rparan: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 110,
						Line:   34,
					},
					File:   "map_filter_even_rows_test.flux",
					Source: "test _map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
					Start: ast.Position{
						Column: 1,
						Line:   34,
					},
				},
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   4,
					},
					File:   "map_filter_even_rows_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   4,
						},
						File:   "map_filter_even_rows_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 41,
						Line:   5,
					},
					File:   "map_filter_even_rows_test.flux",
					Source: "import \"contrib/lazarenkovegor/multirow\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 41,
							Line:   5,
						},
						File:   "map_filter_even_rows_test.flux",
						Source: "\"contrib/lazarenkovegor/multirow\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "contrib/lazarenkovegor/multirow",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "map_filter_even_rows_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "map_filter_even_rows_test.flux",
					Source: "package multirow_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "map_filter_even_rows_test.flux",
						Source: "multirow_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "multirow_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 110,
					Line:   50,
				},
				File:   "map_mixwindow_test.flux",
				Source: "package multirow_test\n\n\nimport \"testing\"\nimport \"contrib/lazarenkovegor/multirow\"\n\ninData =\n    \"\n#datatype,string,long,string,long,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,_time,_measurement\n,,,test1,1,2020-08-02T17:22:00Z,\n,,,test1,2,2020-08-02T17:22:00Z,\n,,,test2,3,2020-08-02T17:22:01Z,\n,,,test2,4,2020-08-02T17:22:01Z,\n,,,test2,5,2020-08-02T17:22:01Z,\n,,,test2,6,2020-08-02T17:22:02Z,\n,,,test2,7,2020-08-02T17:22:03Z,\n,,,test2,8,2020-08-02T17:22:03Z,\n,,,test2,9,2020-08-02T17:22:04Z,\n\"\n\noutData =\n    \"\n#datatype,string,long,string,long,dateTime:RFC3339\n#group,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z\n,result,table,_field,_value,_time\n,,,test1,2,2020-08-02T17:22:00Z\n,,,test1,3,2020-08-02T17:22:00Z\n,,,test2,4,2020-08-02T17:22:01Z\n,,,test2,5,2020-08-02T17:22:01Z\n,,,test2,6,2020-08-02T17:22:01Z\n,,,test2,5,2020-08-02T17:22:02Z\n,,,test2,3,2020-08-02T17:22:03Z\n,,,test2,4,2020-08-02T17:22:03Z\n,,,test2,3,2020-08-02T17:22:04Z\n\"\n\nt_map = (table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(\n            left: 1s,\n            right: 1,\n            fn: (window, row) => window |> count() |> map(fn: (r) => ({r with _time: row._time, _field: row._field})),\n        )\n\ntest _map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   22,
					},
					File:   "map_mixwindow_test.flux",
					Source: "inData =\n    \"\n#datatype,string,long,string,long,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,_time,_measurement\n,,,test1,1,2020-08-02T17:22:00Z,\n,,,test1,2,2020-08-02T17:22:00Z,\n,,,test2,3,2020-08-02T17:22:01Z,\n,,,test2,4,2020-08-02T17:22:01Z,\n,,,test2,5,2020-08-02T17:22:01Z,\n,,,test2,6,2020-08-02T17:22:02Z,\n,,,test2,7,2020-08-02T17:22:03Z,\n,,,test2,8,2020-08-02T17:22:03Z,\n,,,test2,9,2020-08-02T17:22:04Z,\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   7,
						},
						File:   "map_mixwindow_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   22,
						},
						File:   "map_mixwindow_test.flux",
						Source: "\"\n#datatype,string,long,string,long,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,_time,_measurement\n,,,test1,1,2020-08-02T17:22:00Z,\n,,,test1,2,2020-08-02T17:22:00Z,\n,,,test2,3,2020-08-02T17:22:01Z,\n,,,test2,4,2020-08-02T17:22:01Z,\n,,,test2,5,2020-08-02T17:22:01Z,\n,,,test2,6,2020-08-02T17:22:02Z,\n,,,test2,7,2020-08-02T17:22:03Z,\n,,,test2,8,2020-08-02T17:22:03Z,\n,,,test2,9,2020-08-02T17:22:04Z,\n\"",
						Start: ast.Position{
							Column: 5,
							Line:   8,
						},
					},
				},
				Value: "\n#datatype,string,long,string,long,dateTime:RFC3339,string\n#group,false,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,_time,_measurement\n,,,test1,1,2020-08-02T17:22:00Z,\n,,,test1,2,2020-08-02T17:22:00Z,\n,,,test2,3,2020-08-02T17:22:01Z,\n,,,test2,4,2020-08-02T17:22:01Z,\n,,,test2,5,2020-08-02T17:22:01Z,\n,,,test2,6,2020-08-02T17:22:02Z,\n,,,test2,7,2020-08-02T17:22:03Z,\n,,,test2,8,2020-08-02T17:22:03Z,\n,,,test2,9,2020-08-02T17:22:04Z,\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   39,
					},
					File:   "map_mixwindow_test.flux",
					Source: "outData =\n    \"\n#datatype,string,long,string,long,dateTime:RFC3339\n#group,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z\n,result,table,_field,_value,_time\n,,,test1,2,2020-08-02T17:22:00Z\n,,,test1,3,2020-08-02T17:22:00Z\n,,,test2,4,2020-08-02T17:22:01Z\n,,,test2,5,2020-08-02T17:22:01Z\n,,,test2,6,2020-08-02T17:22:01Z\n,,,test2,5,2020-08-02T17:22:02Z\n,,,test2,3,2020-08-02T17:22:03Z\n,,,test2,4,2020-08-02T17:22:03Z\n,,,test2,3,2020-08-02T17:22:04Z\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   24,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   24,
						},
						File:   "map_mixwindow_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   24,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   39,
						},
						File:   "map_mixwindow_test.flux",
						Source: "\"\n#datatype,string,long,string,long,dateTime:RFC3339\n#group,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z\n,result,table,_field,_value,_time\n,,,test1,2,2020-08-02T17:22:00Z\n,,,test1,3,2020-08-02T17:22:00Z\n,,,test2,4,2020-08-02T17:22:01Z\n,,,test2,5,2020-08-02T17:22:01Z\n,,,test2,6,2020-08-02T17:22:01Z\n,,,test2,5,2020-08-02T17:22:02Z\n,,,test2,3,2020-08-02T17:22:03Z\n,,,test2,4,2020-08-02T17:22:03Z\n,,,test2,3,2020-08-02T17:22:04Z\n\"",
						Start: ast.Position{
							Column: 5,
							Line:   25,
						},
					},
				},
				Value: "\n#datatype,string,long,string,long,dateTime:RFC3339\n#group,false,false,false,false,false\n#default,_result,0,,,2000-01-01T00:00:00Z\n,result,table,_field,_value,_time\n,,,test1,2,2020-08-02T17:22:00Z\n,,,test1,3,2020-08-02T17:22:00Z\n,,,test2,4,2020-08-02T17:22:01Z\n,,,test2,5,2020-08-02T17:22:01Z\n,,,test2,6,2020-08-02T17:22:01Z\n,,,test2,5,2020-08-02T17:22:02Z\n,,,test2,3,2020-08-02T17:22:03Z\n,,,test2,4,2020-08-02T17:22:03Z\n,,,test2,3,2020-08-02T17:22:04Z\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 10,
						Line:   48,
					},
					File:   "map_mixwindow_test.flux",
					Source: "t_map = (table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(\n            left: 1s,\n            right: 1,\n            fn: (window, row) => window |> count() |> map(fn: (r) => ({r with _time: row._time, _field: row._field})),\n        )",
					Start: ast.Position{
						Column: 1,
						Line:   41,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   41,
						},
						File:   "map_mixwindow_test.flux",
						Source: "t_map",
						Start: ast.Position{
							Column: 1,
							Line:   41,
						},
					},
				},
				Name: "t_map",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   48,
						},
						File:   "map_mixwindow_test.flux",
						Source: "(table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(\n            left: 1s,\n            right: 1,\n            fn: (window, row) => window |> count() |> map(fn: (r) => ({r with _time: row._time, _field: row._field})),\n        )",
						Start: ast.Position{
							Column: 9,
							Line:   41,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   42,
									},
									File:   "map_mixwindow_test.flux",
									Source: "table",
									Start: ast.Position{
										Column: 5,
										Line:   42,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   43,
								},
								File:   "map_mixwindow_test.flux",
								Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])",
								Start: ast.Position{
									Column: 5,
									Line:   42,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   43,
										},
										File:   "map_mixwindow_test.flux",
										Source: "columns: [\"_start\", \"_stop\"]",
										Start: ast.Position{
											Column: 17,
											Line:   43,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   43,
											},
											File:   "map_mixwindow_test.flux",
											Source: "columns: [\"_start\", \"_stop\"]",
											Start: ast.Position{
												Column: 17,
												Line:   43,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   43,
												},
												File:   "map_mixwindow_test.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 17,
													Line:   43,
												},
											},
										},
										Name: "columns",
									},
									Separator: nil,
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   43,
												},
												File:   "map_mixwindow_test.flux",
												Source: "[\"_start\", \"_stop\"]",
												Start: ast.Position{
													Column: 26,
													Line:   43,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   43,
													},
													File:   "map_mixwindow_test.flux",
													Source: "\"_start\"",
													Start: ast.Position{
														Column: 27,
														Line:   43,
													},
												},
											},
											Value: "_start",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   43,
													},
													File:   "map_mixwindow_test.flux",
													Source: "\"_stop\"",
													Start: ast.Position{
														Column: 37,
														Line:   43,
													},
												},
											},
											Value: "_stop",
										}},
										Lbrack: nil,
										Rbrack: nil,
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   43,
									},
									File:   "map_mixwindow_test.flux",
									Source: "drop(columns: [\"_start\", \"_stop\"])",
									Start: ast.Position{
										Column: 12,
										Line:   43,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   43,
										},
										File:   "map_mixwindow_test.flux",
										Source: "drop",
										Start: ast.Position{
											Column: 12,
											Line:   43,
										},
									},
								},
								Name: "drop",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   48,
							},
							File:   "map_mixwindow_test.flux",
							Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(\n            left: 1s,\n            right: 1,\n            fn: (window, row) => window |> count() |> map(fn: (r) => ({r with _time: row._time, _field: row._field})),\n        )",
							Start: ast.Position{
								Column: 5,
								Line:   42,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 118,
										Line:   47,
									},
									File:   "map_mixwindow_test.flux",
									Source: "left: 1s,\n            right: 1,\n            fn: (window, row) => window |> count() |> map(fn: (r) => ({r with _time: row._time, _field: row._field}))",
									Start: ast.Position{
										Column: 13,
										Line:   45,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   45,
										},
										File:   "map_mixwindow_test.flux",
										Source: "left: 1s",
										Start: ast.Position{
											Column: 13,
											Line:   45,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   45,
											},
											File:   "map_mixwindow_test.flux",
											Source: "left",
											Start: ast.Position{
												Column: 13,
												Line:   45,
											},
										},
									},
									Name: "left",
								},
								Separator: nil,
								Value: &ast.DurationLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   45,
											},
											File:   "map_mixwindow_test.flux",
											Source: "1s",
											Start: ast.Position{
												Column: 19,
												Line:   45,
											},
										},
									},
									Values: []ast.Duration{ast.Duration{
										Magnitude: int64(1),
										Unit:      "s",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   46,
										},
										File:   "map_mixwindow_test.flux",
										Source: "right: 1",
										Start: ast.Position{
											Column: 13,
											Line:   46,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   46,
											},
											File:   "map_mixwindow_test.flux",
											Source: "right",
											Start: ast.Position{
												Column: 13,
												Line:   46,
											},
										},
									},
									Name: "right",
								},
								Separator: nil,
								Value: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   46,
											},
											File:   "map_mixwindow_test.flux",
											Source: "1",
											Start: ast.Position{
												Column: 20,
												Line:   46,
											},
										},
									},
									Value: int64(1),
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 118,
											Line:   47,
										},
										File:   "map_mixwindow_test.flux",
										Source: "fn: (window, row) => window |> count() |> map(fn: (r) => ({r with _time: row._time, _field: row._field}))",
										Start: ast.Position{
											Column: 13,
											Line:   47,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   47,
											},
											File:   "map_mixwindow_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 13,
												Line:   47,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.FunctionExpression{
									Arrow: nil,
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 118,
												Line:   47,
											},
											File:   "map_mixwindow_test.flux",
											Source: "(window, row) => window |> count() |> map(fn: (r) => ({r with _time: row._time, _field: row._field}))",
											Start: ast.Position{
												Column: 17,
												Line:   47,
											},
										},
									},
									Body: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   47,
														},
														File:   "map_mixwindow_test.flux",
														Source: "window",
														Start: ast.Position{
															Column: 34,
															Line:   47,
														},
													},
												},
												Name: "window",
											},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   47,
													},
													File:   "map_mixwindow_test.flux",
													Source: "window |> count()",
													Start: ast.Position{
														Column: 34,
														Line:   47,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: nil,
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   47,
														},
														File:   "map_mixwindow_test.flux",
														Source: "count()",
														Start: ast.Position{
															Column: 44,
															Line:   47,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 49,
																Line:   47,
															},
															File:   "map_mixwindow_test.flux",
															Source: "count",
															Start: ast.Position{
																Column: 44,
																Line:   47,
															},
														},
													},
													Name: "count",
												},
												Lparen: nil,
												Rparen: nil,
											},
										},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 118,
													Line:   47,
												},
												File:   "map_mixwindow_test.flux",
												Source: "window |> count() |> map(fn: (r) => ({r with _time: row._time, _field: row._field}))",
												Start: ast.Position{
													Column: 34,
													Line:   47,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 117,
															Line:   47,
														},
														File:   "map_mixwindow_test.flux",
														Source: "fn: (r) => ({r with _time: row._time, _field: row._field})",
														Start: ast.Position{
															Column: 59,
															Line:   47,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 117,
																Line:   47,
															},
															File:   "map_mixwindow_test.flux",
															Source: "fn: (r) => ({r with _time: row._time, _field: row._field})",
															Start: ast.Position{
																Column: 59,
																Line:   47,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 61,
																	Line:   47,
																},
																File:   "map_mixwindow_test.flux",
																Source: "fn",
																Start: ast.Position{
																	Column: 59,
																	Line:   47,
																},
															},
														},
														Name: "fn",
													},
													Separator: nil,
													Value: &ast.FunctionExpression{
														Arrow: nil,
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 117,
																	Line:   47,
																},
																File:   "map_mixwindow_test.flux",
																Source: "(r) => ({r with _time: row._time, _field: row._field})",
																Start: ast.Position{
																	Column: 63,
																	Line:   47,
																},
															},
														},
														Body: &ast.ParenExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 117,
																		Line:   47,
																	},
																	File:   "map_mixwindow_test.flux",
																	Source: "({r with _time: row._time, _field: row._field})",
																	Start: ast.Position{
																		Column: 70,
																		Line:   47,
																	},
																},
															},
															Expression: &ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 116,
																			Line:   47,
																		},
																		File:   "map_mixwindow_test.flux",
																		Source: "{r with _time: row._time, _field: row._field}",
																		Start: ast.Position{
																			Column: 71,
																			Line:   47,
																		},
																	},
																},
																Lbrace: nil,
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 95,
																				Line:   47,
																			},
																			File:   "map_mixwindow_test.flux",
																			Source: "_time: row._time",
																			Start: ast.Position{
																				Column: 79,
																				Line:   47,
																			},
																		},
																	},
																	Comma: nil,
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 84,
																					Line:   47,
																				},
																				File:   "map_mixwindow_test.flux",
																				Source: "_time",
																				Start: ast.Position{
																					Column: 79,
																					Line:   47,
																				},
																			},
																		},
																		Name: "_time",
																	},
																	Separator: nil,
																	Value: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 95,
																					Line:   47,
																				},
																				File:   "map_mixwindow_test.flux",
																				Source: "row._time",
																				Start: ast.Position{
																					Column: 86,
																					Line:   47,
																				},
																			},
																		},
																		Lbrack: nil,
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 89,
																						Line:   47,
																					},
																					File:   "map_mixwindow_test.flux",
																					Source: "row",
																					Start: ast.Position{
																						Column: 86,
																						Line:   47,
																					},
																				},
																			},
																			Name: "row",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 95,
																						Line:   47,
																					},
																					File:   "map_mixwindow_test.flux",
																					Source: "_time",
																					Start: ast.Position{
																						Column: 90,
																						Line:   47,
																					},
																				},
																			},
																			Name: "_time",
																		},
																		Rbrack: nil,
																	},
																}, &ast.Property{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 115,
																				Line:   47,
																			},
																			File:   "map_mixwindow_test.flux",
																			Source: "_field: row._field",
																			Start: ast.Position{
																				Column: 97,
																				Line:   47,
																			},
																		},
																	},
																	Comma: nil,
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 103,
																					Line:   47,
																				},
																				File:   "map_mixwindow_test.flux",
																				Source: "_field",
																				Start: ast.Position{
																					Column: 97,
																					Line:   47,
																				},
																			},
																		},
																		Name: "_field",
																	},
																	Separator: nil,
																	Value: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 115,
																					Line:   47,
																				},
																				File:   "map_mixwindow_test.flux",
																				Source: "row._field",
																				Start: ast.Position{
																					Column: 105,
																					Line:   47,
																				},
																			},
																		},
																		Lbrack: nil,
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 108,
																						Line:   47,
																					},
																					File:   "map_mixwindow_test.flux",
																					Source: "row",
																					Start: ast.Position{
																						Column: 105,
																						Line:   47,
																					},
																				},
																			},
																			Name: "row",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 115,
																						Line:   47,
																					},
																					File:   "map_mixwindow_test.flux",
																					Source: "_field",
																					Start: ast.Position{
																						Column: 109,
																						Line:   47,
																					},
																				},
																			},
																			Name: "_field",
																		},
																		Rbrack: nil,
																	},
																}},
																Rbrace: nil,
																With: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 73,
																				Line:   47,
																			},
																			File:   "map_mixwindow_test.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 72,
																				Line:   47,
																			},
																		},
																	},
																	Name: "r",
																},
															},
															Lparen: nil,
															Rparen: nil,
														},
														Lparen: nil,
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 65,
																		Line:   47,
																	},
																	File:   "map_mixwindow_test.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 64,
																		Line:   47,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 65,
																			Line:   47,
																		},
																		File:   "map_mixwindow_test.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 64,
																			Line:   47,
																		},
																	},
																},
																Name: "r",
															},
															Separator: nil,
															Value:     nil,
														}},
														Rparan: nil,
													},
												}},
												Rbrace: nil,
												With:   nil,
											}},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 118,
														Line:   47,
													},
													File:   "map_mixwindow_test.flux",
													Source: "map(fn: (r) => ({r with _time: row._time, _field: row._field}))",
													Start: ast.Position{
														Column: 55,
														Line:   47,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   47,
														},
														File:   "map_mixwindow_test.flux",
														Source: "map",
														Start: ast.Position{
															Column: 55,
															Line:   47,
														},
													},
												},
												Name: "map",
											},
											Lparen: nil,
											Rparen: nil,
										},
									},
									Lparen: nil,
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   47,
												},
												File:   "map_mixwindow_test.flux",
												Source: "window",
												Start: ast.Position{
													Column: 18,
													Line:   47,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   47,
													},
													File:   "map_mixwindow_test.flux",
													Source: "window",
													Start: ast.Position{
														Column: 18,
														Line:   47,
													},
												},
											},
											Name: "window",
										},
										Separator: nil,
										Value:     nil,
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   47,
												},
												File:   "map_mixwindow_test.flux",
												Source: "row",
												Start: ast.Position{
													Column: 26,
													Line:   47,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   47,
													},
													File:   "map_mixwindow_test.flux",
													Source: "row",
													Start: ast.Position{
														Column: 26,
														Line:   47,
													},
												},
											},
											Name: "row",
										},
										Separator: nil,
										Value:     nil,
									}},
									Rparan: nil,
								},
							}},
							Rbrace: nil,
							With:   nil,
						}},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   48,
								},
								File:   "map_mixwindow_test.flux",
								Source: "multirow.map(\n            left: 1s,\n            right: 1,\n            fn: (window, row) => window |> count() |> map(fn: (r) => ({r with _time: row._time, _field: row._field})),\n        )",
								Start: ast.Position{
									Column: 12,
									Line:   44,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   44,
									},
									File:   "map_mixwindow_test.flux",
									Source: "multirow.map",
									Start: ast.Position{
										Column: 12,
										Line:   44,
									},
								},
							},
							Lbrack: nil,
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   44,
										},
										File:   "map_mixwindow_test.flux",
										Source: "multirow",
										Start: ast.Position{
											Column: 12,
											Line:   44,
										},
									},
								},
								Name: "multirow",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   44,
										},
										File:   "map_mixwindow_test.flux",
										Source: "map",
										Start: ast.Position{
											Column: 21,
											Line:   44,
										},
									},
								},
								Name: "map",
							},
							Rbrack: nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   41,
							},
							File:   "map_mixwindow_test.flux",
							Source: "table=<-",
							Start: ast.Position{
								Column: 10,
								Line:   41,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   41,
								},
								File:   "map_mixwindow_test.flux",
								Source: "table",
								Start: ast.Position{
									Column: 10,
									Line:   41,
								},
							},
						},
						Name: "table",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   41,
							},
							File:   "map_mixwindow_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 16,
								Line:   41,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 110,
							Line:   50,
						},
						File:   "map_mixwindow_test.flux",
						Source: "_map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
						Start: ast.Position{
							Column: 6,
							Line:   50,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   50,
							},
							File:   "map_mixwindow_test.flux",
							Source: "_map",
							Start: ast.Position{
								Column: 6,
								Line:   50,
							},
						},
					},
					Name: "_map",
				},
				Init: &ast.FunctionExpression{
					Arrow: nil,
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 110,
								Line:   50,
							},
							File:   "map_mixwindow_test.flux",
							Source: "() => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
							Start: ast.Position{
								Column: 13,
								Line:   50,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 110,
									Line:   50,
								},
								File:   "map_mixwindow_test.flux",
								Source: "({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
								Start: ast.Position{
									Column: 19,
									Line:   50,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 109,
										Line:   50,
									},
									File:   "map_mixwindow_test.flux",
									Source: "{input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map}",
									Start: ast.Position{
										Column: 20,
										Line:   50,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 60,
											Line:   50,
										},
										File:   "map_mixwindow_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 21,
											Line:   50,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   50,
											},
											File:   "map_mixwindow_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 21,
												Line:   50,
											},
										},
									},
									Name: "input",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   50,
												},
												File:   "map_mixwindow_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 48,
													Line:   50,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 59,
														Line:   50,
													},
													File:   "map_mixwindow_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 48,
														Line:   50,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   50,
														},
														File:   "map_mixwindow_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 48,
															Line:   50,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   50,
														},
														File:   "map_mixwindow_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 53,
															Line:   50,
														},
													},
												},
												Name: "inData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 60,
												Line:   50,
											},
											File:   "map_mixwindow_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 28,
												Line:   50,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   50,
												},
												File:   "map_mixwindow_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 28,
													Line:   50,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   50,
													},
													File:   "map_mixwindow_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 28,
														Line:   50,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   50,
													},
													File:   "map_mixwindow_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 36,
														Line:   50,
													},
												},
											},
											Name: "loadStorage",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 97,
											Line:   50,
										},
										File:   "map_mixwindow_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 62,
											Line:   50,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   50,
											},
											File:   "map_mixwindow_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 62,
												Line:   50,
											},
										},
									},
									Name: "want",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 96,
													Line:   50,
												},
												File:   "map_mixwindow_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 84,
													Line:   50,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 96,
														Line:   50,
													},
													File:   "map_mixwindow_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 84,
														Line:   50,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 87,
															Line:   50,
														},
														File:   "map_mixwindow_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 84,
															Line:   50,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 96,
															Line:   50,
														},
														File:   "map_mixwindow_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 89,
															Line:   50,
														},
													},
												},
												Name: "outData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 97,
												Line:   50,
											},
											File:   "map_mixwindow_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 68,
												Line:   50,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 83,
													Line:   50,
												},
												File:   "map_mixwindow_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 68,
													Line:   50,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 75,
														Line:   50,
													},
													File:   "map_mixwindow_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 68,
														Line:   50,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 83,
														Line:   50,
													},
													File:   "map_mixwindow_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 76,
														Line:   50,
													},
												},
											},
											Name: "loadMem",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 108,
											Line:   50,
										},
										File:   "map_mixwindow_test.flux",
										Source: "fn: t_map",
										Start: ast.Position{
											Column: 99,
											Line:   50,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 101,
												Line:   50,
											},
											File:   "map_mixwindow_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 99,
												Line:   50,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 108,
												Line:   50,
											},
											File:   "map_mixwindow_test.flux",
											Source: "t_map",
											Start: ast.Position{
												Column: 103,
												Line:   50,
											},
										},
									},
									Name: "t_map",
								},
							}},
							Rbrace: nil,
							With:   nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
					Lparen: nil,
					Params: []*ast.Property{},
					Rparan: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 110,
						Line:   50,
					},
					File:   "map_mixwindow_test.flux",
					Source: "test _map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
					Start: ast.Position{
						Column: 1,
						Line:   50,
					},
				},
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   4,
					},
					File:   "map_mixwindow_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   4,
						},
						File:   "map_mixwindow_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 41,
						Line:   5,
					},
					File:   "map_mixwindow_test.flux",
					Source: "import \"contrib/lazarenkovegor/multirow\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 41,
							Line:   5,
						},
						File:   "map_mixwindow_test.flux",
						Source: "\"contrib/lazarenkovegor/multirow\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "contrib/lazarenkovegor/multirow",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "map_mixwindow_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "map_mixwindow_test.flux",
					Source: "package multirow_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "map_mixwindow_test.flux",
						Source: "multirow_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "multirow_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 110,
					Line:   46,
				},
				File:   "map_rownumber_test.flux",
				Source: "package multirow_test\n\n\nimport \"testing\"\nimport \"contrib/lazarenkovegor/multirow\"\n\ninData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,\n,result,table,_field,_measurement,_time,_value\n,,,test1,,,0\n,,,test1,,,1\n,,,test1,,,1\n,,,test1,,,2\n,,,test1,,,3\n,,,test1,,,5\n,,,test2,,,8\n,,,test2,,,13\n,,,test2,,,21\n\"\n\noutData =\n    \"\n#datatype,string,long,string,long\n#group,false,false,true,false\n#default,_result,0,,\n,result,table,_field,row_number\n,,0,test1,0\n,,0,test1,1\n,,0,test1,2\n,,0,test1,3\n,,0,test1,4\n,,0,test1,5\n,,1,test2,0\n,,1,test2,1\n,,1,test2,2\n\"\n\nt_map = (table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(fn: (index) => index, column: \"row_number\")\n\ntest _map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   22,
					},
					File:   "map_rownumber_test.flux",
					Source: "inData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,\n,result,table,_field,_measurement,_time,_value\n,,,test1,,,0\n,,,test1,,,1\n,,,test1,,,1\n,,,test1,,,2\n,,,test1,,,3\n,,,test1,,,5\n,,,test2,,,8\n,,,test2,,,13\n,,,test2,,,21\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   7,
						},
						File:   "map_rownumber_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   22,
						},
						File:   "map_rownumber_test.flux",
						Source: "\"\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,\n,result,table,_field,_measurement,_time,_value\n,,,test1,,,0\n,,,test1,,,1\n,,,test1,,,1\n,,,test1,,,2\n,,,test1,,,3\n,,,test1,,,5\n,,,test2,,,8\n,,,test2,,,13\n,,,test2,,,21\n\"",
						Start: ast.Position{
							Column: 5,
							Line:   8,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,\n,result,table,_field,_measurement,_time,_value\n,,,test1,,,0\n,,,test1,,,1\n,,,test1,,,1\n,,,test1,,,2\n,,,test1,,,3\n,,,test1,,,5\n,,,test2,,,8\n,,,test2,,,13\n,,,test2,,,21\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   39,
					},
					File:   "map_rownumber_test.flux",
					Source: "outData =\n    \"\n#datatype,string,long,string,long\n#group,false,false,true,false\n#default,_result,0,,\n,result,table,_field,row_number\n,,0,test1,0\n,,0,test1,1\n,,0,test1,2\n,,0,test1,3\n,,0,test1,4\n,,0,test1,5\n,,1,test2,0\n,,1,test2,1\n,,1,test2,2\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   24,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   24,
						},
						File:   "map_rownumber_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   24,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   39,
						},
						File:   "map_rownumber_test.flux",
						Source: "\"\n#datatype,string,long,string,long\n#group,false,false,true,false\n#default,_result,0,,\n,result,table,_field,row_number\n,,0,test1,0\n,,0,test1,1\n,,0,test1,2\n,,0,test1,3\n,,0,test1,4\n,,0,test1,5\n,,1,test2,0\n,,1,test2,1\n,,1,test2,2\n\"",
						Start: ast.Position{
							Column: 5,
							Line:   25,
						},
					},
				},
				Value: "\n#datatype,string,long,string,long\n#group,false,false,true,false\n#default,_result,0,,\n,result,table,_field,row_number\n,,0,test1,0\n,,0,test1,1\n,,0,test1,2\n,,0,test1,3\n,,0,test1,4\n,,0,test1,5\n,,1,test2,0\n,,1,test2,1\n,,1,test2,2\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 68,
						Line:   44,
					},
					File:   "map_rownumber_test.flux",
					Source: "t_map = (table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(fn: (index) => index, column: \"row_number\")",
					Start: ast.Position{
						Column: 1,
						Line:   41,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   41,
						},
						File:   "map_rownumber_test.flux",
						Source: "t_map",
						Start: ast.Position{
							Column: 1,
							Line:   41,
						},
					},
				},
				Name: "t_map",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 68,
							Line:   44,
						},
						File:   "map_rownumber_test.flux",
						Source: "(table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(fn: (index) => index, column: \"row_number\")",
						Start: ast.Position{
							Column: 9,
							Line:   41,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   42,
									},
									File:   "map_rownumber_test.flux",
									Source: "table",
									Start: ast.Position{
										Column: 5,
										Line:   42,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   43,
								},
								File:   "map_rownumber_test.flux",
								Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])",
								Start: ast.Position{
									Column: 5,
									Line:   42,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   43,
										},
										File:   "map_rownumber_test.flux",
										Source: "columns: [\"_start\", \"_stop\"]",
										Start: ast.Position{
											Column: 17,
											Line:   43,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   43,
											},
											File:   "map_rownumber_test.flux",
											Source: "columns: [\"_start\", \"_stop\"]",
											Start: ast.Position{
												Column: 17,
												Line:   43,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   43,
												},
												File:   "map_rownumber_test.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 17,
													Line:   43,
												},
											},
										},
										Name: "columns",
									},
									Separator: nil,
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   43,
												},
												File:   "map_rownumber_test.flux",
												Source: "[\"_start\", \"_stop\"]",
												Start: ast.Position{
													Column: 26,
													Line:   43,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   43,
													},
													File:   "map_rownumber_test.flux",
													Source: "\"_start\"",
													Start: ast.Position{
														Column: 27,
														Line:   43,
													},
												},
											},
											Value: "_start",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   43,
													},
													File:   "map_rownumber_test.flux",
													Source: "\"_stop\"",
													Start: ast.Position{
														Column: 37,
														Line:   43,
													},
												},
											},
											Value: "_stop",
										}},
										Lbrack: nil,
										Rbrack: nil,
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   43,
									},
									File:   "map_rownumber_test.flux",
									Source: "drop(columns: [\"_start\", \"_stop\"])",
									Start: ast.Position{
										Column: 12,
										Line:   43,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   43,
										},
										File:   "map_rownumber_test.flux",
										Source: "drop",
										Start: ast.Position{
											Column: 12,
											Line:   43,
										},
									},
								},
								Name: "drop",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   44,
							},
							File:   "map_rownumber_test.flux",
							Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(fn: (index) => index, column: \"row_number\")",
							Start: ast.Position{
								Column: 5,
								Line:   42,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   44,
									},
									File:   "map_rownumber_test.flux",
									Source: "fn: (index) => index, column: \"row_number\"",
									Start: ast.Position{
										Column: 25,
										Line:   44,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   44,
										},
										File:   "map_rownumber_test.flux",
										Source: "fn: (index) => index",
										Start: ast.Position{
											Column: 25,
											Line:   44,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   44,
											},
											File:   "map_rownumber_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 25,
												Line:   44,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.FunctionExpression{
									Arrow: nil,
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   44,
											},
											File:   "map_rownumber_test.flux",
											Source: "(index) => index",
											Start: ast.Position{
												Column: 29,
												Line:   44,
											},
										},
									},
									Body: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   44,
												},
												File:   "map_rownumber_test.flux",
												Source: "index",
												Start: ast.Position{
													Column: 40,
													Line:   44,
												},
											},
										},
										Name: "index",
									},
									Lparen: nil,
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   44,
												},
												File:   "map_rownumber_test.flux",
												Source: "index",
												Start: ast.Position{
													Column: 30,
													Line:   44,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   44,
													},
													File:   "map_rownumber_test.flux",
													Source: "index",
													Start: ast.Position{
														Column: 30,
														Line:   44,
													},
												},
											},
											Name: "index",
										},
										Separator: nil,
										Value:     nil,
									}},
									Rparan: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   44,
										},
										File:   "map_rownumber_test.flux",
										Source: "column: \"row_number\"",
										Start: ast.Position{
											Column: 47,
											Line:   44,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   44,
											},
											File:   "map_rownumber_test.flux",
											Source: "column",
											Start: ast.Position{
												Column: 47,
												Line:   44,
											},
										},
									},
									Name: "column",
								},
								Separator: nil,
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   44,
											},
											File:   "map_rownumber_test.flux",
											Source: "\"row_number\"",
											Start: ast.Position{
												Column: 55,
												Line:   44,
											},
										},
									},
									Value: "row_number",
								},
							}},
							Rbrace: nil,
							With:   nil,
						}},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   44,
								},
								File:   "map_rownumber_test.flux",
								Source: "multirow.map(fn: (index) => index, column: \"row_number\")",
								Start: ast.Position{
									Column: 12,
									Line:   44,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   44,
									},
									File:   "map_rownumber_test.flux",
									Source: "multirow.map",
									Start: ast.Position{
										Column: 12,
										Line:   44,
									},
								},
							},
							Lbrack: nil,
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   44,
										},
										File:   "map_rownumber_test.flux",
										Source: "multirow",
										Start: ast.Position{
											Column: 12,
											Line:   44,
										},
									},
								},
								Name: "multirow",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   44,
										},
										File:   "map_rownumber_test.flux",
										Source: "map",
										Start: ast.Position{
											Column: 21,
											Line:   44,
										},
									},
								},
								Name: "map",
							},
							Rbrack: nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   41,
							},
							File:   "map_rownumber_test.flux",
							Source: "table=<-",
							Start: ast.Position{
								Column: 10,
								Line:   41,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   41,
								},
								File:   "map_rownumber_test.flux",
								Source: "table",
								Start: ast.Position{
									Column: 10,
									Line:   41,
								},
							},
						},
						Name: "table",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   41,
							},
							File:   "map_rownumber_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 16,
								Line:   41,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 110,
							Line:   46,
						},
						File:   "map_rownumber_test.flux",
						Source: "_map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
						Start: ast.Position{
							Column: 6,
							Line:   46,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   46,
							},
							File:   "map_rownumber_test.flux",
							Source: "_map",
							Start: ast.Position{
								Column: 6,
								Line:   46,
							},
						},
					},
					Name: "_map",
				},
				Init: &ast.FunctionExpression{
					Arrow: nil,
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 110,
								Line:   46,
							},
							File:   "map_rownumber_test.flux",
							Source: "() => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
							Start: ast.Position{
								Column: 13,
								Line:   46,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 110,
									Line:   46,
								},
								File:   "map_rownumber_test.flux",
								Source: "({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
								Start: ast.Position{
									Column: 19,
									Line:   46,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 109,
										Line:   46,
									},
									File:   "map_rownumber_test.flux",
									Source: "{input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map}",
									Start: ast.Position{
										Column: 20,
										Line:   46,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 60,
											Line:   46,
										},
										File:   "map_rownumber_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 21,
											Line:   46,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   46,
											},
											File:   "map_rownumber_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 21,
												Line:   46,
											},
										},
									},
									Name: "input",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   46,
												},
												File:   "map_rownumber_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 48,
													Line:   46,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 59,
														Line:   46,
													},
													File:   "map_rownumber_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 48,
														Line:   46,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   46,
														},
														File:   "map_rownumber_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 48,
															Line:   46,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   46,
														},
														File:   "map_rownumber_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 53,
															Line:   46,
														},
													},
												},
												Name: "inData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 60,
												Line:   46,
											},
											File:   "map_rownumber_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 28,
												Line:   46,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   46,
												},
												File:   "map_rownumber_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 28,
													Line:   46,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   46,
													},
													File:   "map_rownumber_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 28,
														Line:   46,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   46,
													},
													File:   "map_rownumber_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 36,
														Line:   46,
													},
												},
											},
											Name: "loadStorage",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 97,
											Line:   46,
										},
										File:   "map_rownumber_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 62,
											Line:   46,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   46,
											},
											File:   "map_rownumber_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 62,
												Line:   46,
											},
										},
									},
									Name: "want",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 96,
													Line:   46,
												},
												File:   "map_rownumber_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 84,
													Line:   46,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 96,
														Line:   46,
													},
													File:   "map_rownumber_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 84,
														Line:   46,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 87,
															Line:   46,
														},
														File:   "map_rownumber_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 84,
															Line:   46,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 96,
															Line:   46,
														},
														File:   "map_rownumber_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 89,
															Line:   46,
														},
													},
												},
												Name: "outData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 97,
												Line:   46,
											},
											File:   "map_rownumber_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 68,
												Line:   46,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 83,
													Line:   46,
												},
												File:   "map_rownumber_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 68,
													Line:   46,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 75,
														Line:   46,
													},
													File:   "map_rownumber_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 68,
														Line:   46,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 83,
														Line:   46,
													},
													File:   "map_rownumber_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 76,
														Line:   46,
													},
												},
											},
											Name: "loadMem",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 108,
											Line:   46,
										},
										File:   "map_rownumber_test.flux",
										Source: "fn: t_map",
										Start: ast.Position{
											Column: 99,
											Line:   46,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 101,
												Line:   46,
											},
											File:   "map_rownumber_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 99,
												Line:   46,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 108,
												Line:   46,
											},
											File:   "map_rownumber_test.flux",
											Source: "t_map",
											Start: ast.Position{
												Column: 103,
												Line:   46,
											},
										},
									},
									Name: "t_map",
								},
							}},
							Rbrace: nil,
							With:   nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
					Lparen: nil,
					Params: []*ast.Property{},
					Rparan: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 110,
						Line:   46,
					},
					File:   "map_rownumber_test.flux",
					Source: "test _map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
					Start: ast.Position{
						Column: 1,
						Line:   46,
					},
				},
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   4,
					},
					File:   "map_rownumber_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   4,
						},
						File:   "map_rownumber_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 41,
						Line:   5,
					},
					File:   "map_rownumber_test.flux",
					Source: "import \"contrib/lazarenkovegor/multirow\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 41,
							Line:   5,
						},
						File:   "map_rownumber_test.flux",
						Source: "\"contrib/lazarenkovegor/multirow\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "contrib/lazarenkovegor/multirow",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "map_rownumber_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "map_rownumber_test.flux",
					Source: "package multirow_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "map_rownumber_test.flux",
						Source: "multirow_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "multirow_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 110,
					Line:   49,
				},
				File:   "map_string_concat_test.flux",
				Source: "package multirow_test\n\n\nimport \"testing\"\nimport \"contrib/lazarenkovegor/multirow\"\n\ninData =\n    \"\n#datatype,string,long,string,string,long,dateTime:RFC3339,string\n#group,false,false,false,false,false,false,false\n#default,_result,0,,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,intcol3,_time,_measurement\n,,,test1,test10,1,,\n,,,test1,test11,,,\n,,,test2,test12,3,,\n,,,test2,test13,4,,\n\"\n\noutData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,string,string,long,long\n#group,false,false,true,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,,,,\n,result,table,_field,_measurement,_time,concat,_value,intcol3,val\n,,,newGroup,,,test10,test10,1,99\n,,,newGroup,,,test10->test11,test11,,97\n,,,newGroup,,,test12,test12,3,99\n,,,newGroup,,,test12->test13,test13,4,97\n\"\n\nt_map = (table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> group(columns: [\"_field\"])\n        |> multirow.map(\n            fn: (previous, row) => {\n                x = previous.x_col * 2 - 1\n\n                return {row with _field: \"newGroup\",\n                    concat: (if exists previous.concat then previous.concat + \"->\" else \"\") + row._value,\n                    x_col: x,\n                    val: x % 100,\n                }\n            },\n            init: {x_col: 100},\n            virtual: [\"x_col\"],\n        )\n\ntest _map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   17,
					},
					File:   "map_string_concat_test.flux",
					Source: "inData =\n    \"\n#datatype,string,long,string,string,long,dateTime:RFC3339,string\n#group,false,false,false,false,false,false,false\n#default,_result,0,,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,intcol3,_time,_measurement\n,,,test1,test10,1,,\n,,,test1,test11,,,\n,,,test2,test12,3,,\n,,,test2,test13,4,,\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   7,
						},
						File:   "map_string_concat_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   17,
						},
						File:   "map_string_concat_test.flux",
						Source: "\"\n#datatype,string,long,string,string,long,dateTime:RFC3339,string\n#group,false,false,false,false,false,false,false\n#default,_result,0,,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,intcol3,_time,_measurement\n,,,test1,test10,1,,\n,,,test1,test11,,,\n,,,test2,test12,3,,\n,,,test2,test13,4,,\n\"",
						Start: ast.Position{
							Column: 5,
							Line:   8,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,long,dateTime:RFC3339,string\n#group,false,false,false,false,false,false,false\n#default,_result,0,,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,intcol3,_time,_measurement\n,,,test1,test10,1,,\n,,,test1,test11,,,\n,,,test2,test12,3,,\n,,,test2,test13,4,,\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   29,
					},
					File:   "map_string_concat_test.flux",
					Source: "outData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,string,string,long,long\n#group,false,false,true,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,,,,\n,result,table,_field,_measurement,_time,concat,_value,intcol3,val\n,,,newGroup,,,test10,test10,1,99\n,,,newGroup,,,test10->test11,test11,,97\n,,,newGroup,,,test12,test12,3,99\n,,,newGroup,,,test12->test13,test13,4,97\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   19,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   19,
						},
						File:   "map_string_concat_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   19,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   29,
						},
						File:   "map_string_concat_test.flux",
						Source: "\"\n#datatype,string,long,string,string,dateTime:RFC3339,string,string,long,long\n#group,false,false,true,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,,,,\n,result,table,_field,_measurement,_time,concat,_value,intcol3,val\n,,,newGroup,,,test10,test10,1,99\n,,,newGroup,,,test10->test11,test11,,97\n,,,newGroup,,,test12,test12,3,99\n,,,newGroup,,,test12->test13,test13,4,97\n\"",
						Start: ast.Position{
							Column: 5,
							Line:   20,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,dateTime:RFC3339,string,string,long,long\n#group,false,false,true,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,,,,\n,result,table,_field,_measurement,_time,concat,_value,intcol3,val\n,,,newGroup,,,test10,test10,1,99\n,,,newGroup,,,test10->test11,test11,,97\n,,,newGroup,,,test12,test12,3,99\n,,,newGroup,,,test12->test13,test13,4,97\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 10,
						Line:   47,
					},
					File:   "map_string_concat_test.flux",
					Source: "t_map = (table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> group(columns: [\"_field\"])\n        |> multirow.map(\n            fn: (previous, row) => {\n                x = previous.x_col * 2 - 1\n\n                return {row with _field: \"newGroup\",\n                    concat: (if exists previous.concat then previous.concat + \"->\" else \"\") + row._value,\n                    x_col: x,\n                    val: x % 100,\n                }\n            },\n            init: {x_col: 100},\n            virtual: [\"x_col\"],\n        )",
					Start: ast.Position{
						Column: 1,
						Line:   31,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   31,
						},
						File:   "map_string_concat_test.flux",
						Source: "t_map",
						Start: ast.Position{
							Column: 1,
							Line:   31,
						},
					},
				},
				Name: "t_map",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   47,
						},
						File:   "map_string_concat_test.flux",
						Source: "(table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> group(columns: [\"_field\"])\n        |> multirow.map(\n            fn: (previous, row) => {\n                x = previous.x_col * 2 - 1\n\n                return {row with _field: \"newGroup\",\n                    concat: (if exists previous.concat then previous.concat + \"->\" else \"\") + row._value,\n                    x_col: x,\n                    val: x % 100,\n                }\n            },\n            init: {x_col: 100},\n            virtual: [\"x_col\"],\n        )",
						Start: ast.Position{
							Column: 9,
							Line:   31,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   32,
										},
										File:   "map_string_concat_test.flux",
										Source: "table",
										Start: ast.Position{
											Column: 5,
											Line:   32,
										},
									},
								},
								Name: "table",
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   33,
									},
									File:   "map_string_concat_test.flux",
									Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])",
									Start: ast.Position{
										Column: 5,
										Line:   32,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   33,
											},
											File:   "map_string_concat_test.flux",
											Source: "columns: [\"_start\", \"_stop\"]",
											Start: ast.Position{
												Column: 17,
												Line:   33,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   33,
												},
												File:   "map_string_concat_test.flux",
												Source: "columns: [\"_start\", \"_stop\"]",
												Start: ast.Position{
													Column: 17,
													Line:   33,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   33,
													},
													File:   "map_string_concat_test.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 17,
														Line:   33,
													},
												},
											},
											Name: "columns",
										},
										Separator: nil,
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   33,
													},
													File:   "map_string_concat_test.flux",
													Source: "[\"_start\", \"_stop\"]",
													Start: ast.Position{
														Column: 26,
														Line:   33,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 35,
															Line:   33,
														},
														File:   "map_string_concat_test.flux",
														Source: "\"_start\"",
														Start: ast.Position{
															Column: 27,
															Line:   33,
														},
													},
												},
												Value: "_start",
											}, &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   33,
														},
														File:   "map_string_concat_test.flux",
														Source: "\"_stop\"",
														Start: ast.Position{
															Column: 37,
															Line:   33,
														},
													},
												},
												Value: "_stop",
											}},
											Lbrack: nil,
											Rbrack: nil,
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   33,
										},
										File:   "map_string_concat_test.flux",
										Source: "drop(columns: [\"_start\", \"_stop\"])",
										Start: ast.Position{
											Column: 12,
											Line:   33,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   33,
											},
											File:   "map_string_concat_test.flux",
											Source: "drop",
											Start: ast.Position{
												Column: 12,
												Line:   33,
											},
										},
									},
									Name: "drop",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   34,
								},
								File:   "map_string_concat_test.flux",
								Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> group(columns: [\"_field\"])",
								Start: ast.Position{
									Column: 5,
									Line:   32,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   34,
										},
										File:   "map_string_concat_test.flux",
										Source: "columns: [\"_field\"]",
										Start: ast.Position{
											Column: 18,
											Line:   34,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   34,
											},
											File:   "map_string_concat_test.flux",
											Source: "columns: [\"_field\"]",
											Start: ast.Position{
												Column: 18,
												Line:   34,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   34,
												},
												File:   "map_string_concat_test.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 18,
													Line:   34,
												},
											},
										},
										Name: "columns",
									},
									Separator: nil,
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   34,
												},
												File:   "map_string_concat_test.flux",
												Source: "[\"_field\"]",
												Start: ast.Position{
													Column: 27,
													Line:   34,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   34,
													},
													File:   "map_string_concat_test.flux",
													Source: "\"_field\"",
													Start: ast.Position{
														Column: 28,
														Line:   34,
													},
												},
											},
											Value: "_field",
										}},
										Lbrack: nil,
										Rbrack: nil,
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   34,
									},
									File:   "map_string_concat_test.flux",
									Source: "group(columns: [\"_field\"])",
									Start: ast.Position{
										Column: 12,
										Line:   34,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   34,
										},
										File:   "map_string_concat_test.flux",
										Source: "group",
										Start: ast.Position{
											Column: 12,
											Line:   34,
										},
									},
								},
								Name: "group",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   47,
							},
							File:   "map_string_concat_test.flux",
							Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> group(columns: [\"_field\"])\n        |> multirow.map(\n            fn: (previous, row) => {\n                x = previous.x_col * 2 - 1\n\n                return {row with _field: \"newGroup\",\n                    concat: (if exists previous.concat then previous.concat + \"->\" else \"\") + row._value,\n                    x_col: x,\n                    val: x % 100,\n                }\n            },\n            init: {x_col: 100},\n            virtual: [\"x_col\"],\n        )",
							Start: ast.Position{
								Column: 5,
								Line:   32,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   46,
									},
									File:   "map_string_concat_test.flux",
									Source: "fn: (previous, row) => {\n                x = previous.x_col * 2 - 1\n\n                return {row with _field: \"newGroup\",\n                    concat: (if exists previous.concat then previous.concat + \"->\" else \"\") + row._value,\n                    x_col: x,\n                    val: x % 100,\n                }\n            },\n            init: {x_col: 100},\n            virtual: [\"x_col\"]",
									Start: ast.Position{
										Column: 13,
										Line:   36,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   44,
										},
										File:   "map_string_concat_test.flux",
										Source: "fn: (previous, row) => {\n                x = previous.x_col * 2 - 1\n\n                return {row with _field: \"newGroup\",\n                    concat: (if exists previous.concat then previous.concat + \"->\" else \"\") + row._value,\n                    x_col: x,\n                    val: x % 100,\n                }\n            }",
										Start: ast.Position{
											Column: 13,
											Line:   36,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   36,
											},
											File:   "map_string_concat_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 13,
												Line:   36,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.FunctionExpression{
									Arrow: nil,
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   44,
											},
											File:   "map_string_concat_test.flux",
											Source: "(previous, row) => {\n                x = previous.x_col * 2 - 1\n\n                return {row with _field: \"newGroup\",\n                    concat: (if exists previous.concat then previous.concat + \"->\" else \"\") + row._value,\n                    x_col: x,\n                    val: x % 100,\n                }\n            }",
											Start: ast.Position{
												Column: 17,
												Line:   36,
											},
										},
									},
									Body: &ast.Block{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   44,
												},
												File:   "map_string_concat_test.flux",
												Source: "{\n                x = previous.x_col * 2 - 1\n\n                return {row with _field: \"newGroup\",\n                    concat: (if exists previous.concat then previous.concat + \"->\" else \"\") + row._value,\n                    x_col: x,\n                    val: x % 100,\n                }\n            }",
												Start: ast.Position{
													Column: 36,
													Line:   36,
												},
											},
										},
										Body: []ast.Statement{&ast.VariableAssignment{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 43,
														Line:   37,
													},
													File:   "map_string_concat_test.flux",
													Source: "x = previous.x_col * 2 - 1",
													Start: ast.Position{
														Column: 17,
														Line:   37,
													},
												},
											},
											ID: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   37,
														},
														File:   "map_string_concat_test.flux",
														Source: "x",
														Start: ast.Position{
															Column: 17,
															Line:   37,
														},
													},
												},
												Name: "x",
											},
											Init: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   37,
														},
														File:   "map_string_concat_test.flux",
														Source: "previous.x_col * 2 - 1",
														Start: ast.Position{
															Column: 21,
															Line:   37,
														},
													},
												},
												Left: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 39,
																Line:   37,
															},
															File:   "map_string_concat_test.flux",
															Source: "previous.x_col * 2",
															Start: ast.Position{
																Column: 21,
																Line:   37,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 35,
																	Line:   37,
																},
																File:   "map_string_concat_test.flux",
																Source: "previous.x_col",
																Start: ast.Position{
																	Column: 21,
																	Line:   37,
																},
															},
														},
														Lbrack: nil,
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 29,
																		Line:   37,
																	},
																	File:   "map_string_concat_test.flux",
																	Source: "previous",
																	Start: ast.Position{
																		Column: 21,
																		Line:   37,
																	},
																},
															},
															Name: "previous",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 35,
																		Line:   37,
																	},
																	File:   "map_string_concat_test.flux",
																	Source: "x_col",
																	Start: ast.Position{
																		Column: 30,
																		Line:   37,
																	},
																},
															},
															Name: "x_col",
														},
														Rbrack: nil,
													},
													Operator: 1,
													Right: &ast.IntegerLiteral{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 39,
																	Line:   37,
																},
																File:   "map_string_concat_test.flux",
																Source: "2",
																Start: ast.Position{
																	Column: 38,
																	Line:   37,
																},
															},
														},
														Value: int64(2),
													},
												},
												Operator: 6,
												Right: &ast.IntegerLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   37,
															},
															File:   "map_string_concat_test.flux",
															Source: "1",
															Start: ast.Position{
																Column: 42,
																Line:   37,
															},
														},
													},
													Value: int64(1),
												},
											},
										}, &ast.ReturnStatement{
											Argument: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   43,
														},
														File:   "map_string_concat_test.flux",
														Source: "{row with _field: \"newGroup\",\n                    concat: (if exists previous.concat then previous.concat + \"->\" else \"\") + row._value,\n                    x_col: x,\n                    val: x % 100,\n                }",
														Start: ast.Position{
															Column: 24,
															Line:   39,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 52,
																Line:   39,
															},
															File:   "map_string_concat_test.flux",
															Source: "_field: \"newGroup\"",
															Start: ast.Position{
																Column: 34,
																Line:   39,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   39,
																},
																File:   "map_string_concat_test.flux",
																Source: "_field",
																Start: ast.Position{
																	Column: 34,
																	Line:   39,
																},
															},
														},
														Name: "_field",
													},
													Separator: nil,
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 52,
																	Line:   39,
																},
																File:   "map_string_concat_test.flux",
																Source: "\"newGroup\"",
																Start: ast.Position{
																	Column: 42,
																	Line:   39,
																},
															},
														},
														Value: "newGroup",
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 105,
																Line:   40,
															},
															File:   "map_string_concat_test.flux",
															Source: "concat: (if exists previous.concat then previous.concat + \"->\" else \"\") + row._value",
															Start: ast.Position{
																Column: 21,
																Line:   40,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 27,
																	Line:   40,
																},
																File:   "map_string_concat_test.flux",
																Source: "concat",
																Start: ast.Position{
																	Column: 21,
																	Line:   40,
																},
															},
														},
														Name: "concat",
													},
													Separator: nil,
													Value: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 105,
																	Line:   40,
																},
																File:   "map_string_concat_test.flux",
																Source: "(if exists previous.concat then previous.concat + \"->\" else \"\") + row._value",
																Start: ast.Position{
																	Column: 29,
																	Line:   40,
																},
															},
														},
														Left: &ast.ParenExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 92,
																		Line:   40,
																	},
																	File:   "map_string_concat_test.flux",
																	Source: "(if exists previous.concat then previous.concat + \"->\" else \"\")",
																	Start: ast.Position{
																		Column: 29,
																		Line:   40,
																	},
																},
															},
															Expression: &ast.ConditionalExpression{
																Alternate: &ast.StringLiteral{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 91,
																				Line:   40,
																			},
																			File:   "map_string_concat_test.flux",
																			Source: "\"\"",
																			Start: ast.Position{
																				Column: 89,
																				Line:   40,
																			},
																		},
																	},
																	Value: "",
																},
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 91,
																			Line:   40,
																		},
																		File:   "map_string_concat_test.flux",
																		Source: "if exists previous.concat then previous.concat + \"->\" else \"\"",
																		Start: ast.Position{
																			Column: 30,
																			Line:   40,
																		},
																	},
																},
																Consequent: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 83,
																				Line:   40,
																			},
																			File:   "map_string_concat_test.flux",
																			Source: "previous.concat + \"->\"",
																			Start: ast.Position{
																				Column: 61,
																				Line:   40,
																			},
																		},
																	},
																	Left: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 76,
																					Line:   40,
																				},
																				File:   "map_string_concat_test.flux",
																				Source: "previous.concat",
																				Start: ast.Position{
																					Column: 61,
																					Line:   40,
																				},
																			},
																		},
																		Lbrack: nil,
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 69,
																						Line:   40,
																					},
																					File:   "map_string_concat_test.flux",
																					Source: "previous",
																					Start: ast.Position{
																						Column: 61,
																						Line:   40,
																					},
																				},
																			},
																			Name: "previous",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 76,
																						Line:   40,
																					},
																					File:   "map_string_concat_test.flux",
																					Source: "concat",
																					Start: ast.Position{
																						Column: 70,
																						Line:   40,
																					},
																				},
																			},
																			Name: "concat",
																		},
																		Rbrack: nil,
																	},
																	Operator: 5,
																	Right: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 83,
																					Line:   40,
																				},
																				File:   "map_string_concat_test.flux",
																				Source: "\"->\"",
																				Start: ast.Position{
																					Column: 79,
																					Line:   40,
																				},
																			},
																		},
																		Value: "->",
																	},
																},
																Test: &ast.UnaryExpression{
																	Argument: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 55,
																					Line:   40,
																				},
																				File:   "map_string_concat_test.flux",
																				Source: "previous.concat",
																				Start: ast.Position{
																					Column: 40,
																					Line:   40,
																				},
																			},
																		},
																		Lbrack: nil,
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 48,
																						Line:   40,
																					},
																					File:   "map_string_concat_test.flux",
																					Source: "previous",
																					Start: ast.Position{
																						Column: 40,
																						Line:   40,
																					},
																				},
																			},
																			Name: "previous",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 55,
																						Line:   40,
																					},
																					File:   "map_string_concat_test.flux",
																					Source: "concat",
																					Start: ast.Position{
																						Column: 49,
																						Line:   40,
																					},
																				},
																			},
																			Name: "concat",
																		},
																		Rbrack: nil,
																	},
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 55,
																				Line:   40,
																			},
																			File:   "map_string_concat_test.flux",
																			Source: "exists previous.concat",
																			Start: ast.Position{
																				Column: 33,
																				Line:   40,
																			},
																		},
																	},
																	Operator: 14,
																},
																Tk_else: nil,
																Tk_if:   nil,
																Tk_then: nil,
															},
															Lparen: nil,
															Rparen: nil,
														},
														Operator: 5,
														Right: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 105,
																		Line:   40,
																	},
																	File:   "map_string_concat_test.flux",
																	Source: "row._value",
																	Start: ast.Position{
																		Column: 95,
																		Line:   40,
																	},
																},
															},
															Lbrack: nil,
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 98,
																			Line:   40,
																		},
																		File:   "map_string_concat_test.flux",
																		Source: "row",
																		Start: ast.Position{
																			Column: 95,
																			Line:   40,
																		},
																	},
																},
																Name: "row",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 105,
																			Line:   40,
																		},
																		File:   "map_string_concat_test.flux",
																		Source: "_value",
																		Start: ast.Position{
																			Column: 99,
																			Line:   40,
																		},
																	},
																},
																Name: "_value",
															},
															Rbrack: nil,
														},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 29,
																Line:   41,
															},
															File:   "map_string_concat_test.flux",
															Source: "x_col: x",
															Start: ast.Position{
																Column: 21,
																Line:   41,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 26,
																	Line:   41,
																},
																File:   "map_string_concat_test.flux",
																Source: "x_col",
																Start: ast.Position{
																	Column: 21,
																	Line:   41,
																},
															},
														},
														Name: "x_col",
													},
													Separator: nil,
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 29,
																	Line:   41,
																},
																File:   "map_string_concat_test.flux",
																Source: "x",
																Start: ast.Position{
																	Column: 28,
																	Line:   41,
																},
															},
														},
														Name: "x",
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   42,
															},
															File:   "map_string_concat_test.flux",
															Source: "val: x % 100",
															Start: ast.Position{
																Column: 21,
																Line:   42,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 24,
																	Line:   42,
																},
																File:   "map_string_concat_test.flux",
																Source: "val",
																Start: ast.Position{
																	Column: 21,
																	Line:   42,
																},
															},
														},
														Name: "val",
													},
													Separator: nil,
													Value: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   42,
																},
																File:   "map_string_concat_test.flux",
																Source: "x % 100",
																Start: ast.Position{
																	Column: 26,
																	Line:   42,
																},
															},
														},
														Left: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 27,
																		Line:   42,
																	},
																	File:   "map_string_concat_test.flux",
																	Source: "x",
																	Start: ast.Position{
																		Column: 26,
																		Line:   42,
																	},
																},
															},
															Name: "x",
														},
														Operator: 3,
														Right: &ast.IntegerLiteral{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 33,
																		Line:   42,
																	},
																	File:   "map_string_concat_test.flux",
																	Source: "100",
																	Start: ast.Position{
																		Column: 30,
																		Line:   42,
																	},
																},
															},
															Value: int64(100),
														},
													},
												}},
												Rbrace: nil,
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   39,
															},
															File:   "map_string_concat_test.flux",
															Source: "row",
															Start: ast.Position{
																Column: 25,
																Line:   39,
															},
														},
													},
													Name: "row",
												},
											},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   43,
													},
													File:   "map_string_concat_test.flux",
													Source: "return {row with _field: \"newGroup\",\n                    concat: (if exists previous.concat then previous.concat + \"->\" else \"\") + row._value,\n                    x_col: x,\n                    val: x % 100,\n                }",
													Start: ast.Position{
														Column: 17,
														Line:   39,
													},
												},
											},
										}},
										Lbrace: nil,
										Rbrace: nil,
									},
									Lparen: nil,
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   36,
												},
												File:   "map_string_concat_test.flux",
												Source: "previous",
												Start: ast.Position{
													Column: 18,
													Line:   36,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   36,
													},
													File:   "map_string_concat_test.flux",
													Source: "previous",
													Start: ast.Position{
														Column: 18,
														Line:   36,
													},
												},
											},
											Name: "previous",
										},
										Separator: nil,
										Value:     nil,
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   36,
												},
												File:   "map_string_concat_test.flux",
												Source: "row",
												Start: ast.Position{
													Column: 28,
													Line:   36,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   36,
													},
													File:   "map_string_concat_test.flux",
													Source: "row",
													Start: ast.Position{
														Column: 28,
														Line:   36,
													},
												},
											},
											Name: "row",
										},
										Separator: nil,
										Value:     nil,
									}},
									Rparan: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   45,
										},
										File:   "map_string_concat_test.flux",
										Source: "init: {x_col: 100}",
										Start: ast.Position{
											Column: 13,
											Line:   45,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   45,
											},
											File:   "map_string_concat_test.flux",
											Source: "init",
											Start: ast.Position{
												Column: 13,
												Line:   45,
											},
										},
									},
									Name: "init",
								},
								Separator: nil,
								Value: &ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   45,
											},
											File:   "map_string_concat_test.flux",
											Source: "{x_col: 100}",
											Start: ast.Position{
												Column: 19,
												Line:   45,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   45,
												},
												File:   "map_string_concat_test.flux",
												Source: "x_col: 100",
												Start: ast.Position{
													Column: 20,
													Line:   45,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   45,
													},
													File:   "map_string_concat_test.flux",
													Source: "x_col",
													Start: ast.Position{
														Column: 20,
														Line:   45,
													},
												},
											},
											Name: "x_col",
										},
										Separator: nil,
										Value: &ast.IntegerLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   45,
													},
													File:   "map_string_concat_test.flux",
													Source: "100",
													Start: ast.Position{
														Column: 27,
														Line:   45,
													},
												},
											},
											Value: int64(100),
										},
									}},
									Rbrace: nil,
									With:   nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   46,
										},
										File:   "map_string_concat_test.flux",
										Source: "virtual: [\"x_col\"]",
										Start: ast.Position{
											Column: 13,
											Line:   46,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   46,
											},
											File:   "map_string_concat_test.flux",
											Source: "virtual",
											Start: ast.Position{
												Column: 13,
												Line:   46,
											},
										},
									},
									Name: "virtual",
								},
								Separator: nil,
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   46,
											},
											File:   "map_string_concat_test.flux",
											Source: "[\"x_col\"]",
											Start: ast.Position{
												Column: 22,
												Line:   46,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   46,
												},
												File:   "map_string_concat_test.flux",
												Source: "\"x_col\"",
												Start: ast.Position{
													Column: 23,
													Line:   46,
												},
											},
										},
										Value: "x_col",
									}},
									Lbrack: nil,
									Rbrack: nil,
								},
							}},
							Rbrace: nil,
							With:   nil,
						}},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   47,
								},
								File:   "map_string_concat_test.flux",
								Source: "multirow.map(\n            fn: (previous, row) => {\n                x = previous.x_col * 2 - 1\n\n                return {row with _field: \"newGroup\",\n                    concat: (if exists previous.concat then previous.concat + \"->\" else \"\") + row._value,\n                    x_col: x,\n                    val: x % 100,\n                }\n            },\n            init: {x_col: 100},\n            virtual: [\"x_col\"],\n        )",
								Start: ast.Position{
									Column: 12,
									Line:   35,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   35,
									},
									File:   "map_string_concat_test.flux",
									Source: "multirow.map",
									Start: ast.Position{
										Column: 12,
										Line:   35,
									},
								},
							},
							Lbrack: nil,
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   35,
										},
										File:   "map_string_concat_test.flux",
										Source: "multirow",
										Start: ast.Position{
											Column: 12,
											Line:   35,
										},
									},
								},
								Name: "multirow",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   35,
										},
										File:   "map_string_concat_test.flux",
										Source: "map",
										Start: ast.Position{
											Column: 21,
											Line:   35,
										},
									},
								},
								Name: "map",
							},
							Rbrack: nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   31,
							},
							File:   "map_string_concat_test.flux",
							Source: "table=<-",
							Start: ast.Position{
								Column: 10,
								Line:   31,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   31,
								},
								File:   "map_string_concat_test.flux",
								Source: "table",
								Start: ast.Position{
									Column: 10,
									Line:   31,
								},
							},
						},
						Name: "table",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   31,
							},
							File:   "map_string_concat_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 16,
								Line:   31,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 110,
							Line:   49,
						},
						File:   "map_string_concat_test.flux",
						Source: "_map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
						Start: ast.Position{
							Column: 6,
							Line:   49,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   49,
							},
							File:   "map_string_concat_test.flux",
							Source: "_map",
							Start: ast.Position{
								Column: 6,
								Line:   49,
							},
						},
					},
					Name: "_map",
				},
				Init: &ast.FunctionExpression{
					Arrow: nil,
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 110,
								Line:   49,
							},
							File:   "map_string_concat_test.flux",
							Source: "() => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
							Start: ast.Position{
								Column: 13,
								Line:   49,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 110,
									Line:   49,
								},
								File:   "map_string_concat_test.flux",
								Source: "({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
								Start: ast.Position{
									Column: 19,
									Line:   49,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 109,
										Line:   49,
									},
									File:   "map_string_concat_test.flux",
									Source: "{input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map}",
									Start: ast.Position{
										Column: 20,
										Line:   49,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 60,
											Line:   49,
										},
										File:   "map_string_concat_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 21,
											Line:   49,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   49,
											},
											File:   "map_string_concat_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 21,
												Line:   49,
											},
										},
									},
									Name: "input",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   49,
												},
												File:   "map_string_concat_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 48,
													Line:   49,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 59,
														Line:   49,
													},
													File:   "map_string_concat_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 48,
														Line:   49,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   49,
														},
														File:   "map_string_concat_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 48,
															Line:   49,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   49,
														},
														File:   "map_string_concat_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 53,
															Line:   49,
														},
													},
												},
												Name: "inData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 60,
												Line:   49,
											},
											File:   "map_string_concat_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 28,
												Line:   49,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   49,
												},
												File:   "map_string_concat_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 28,
													Line:   49,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   49,
													},
													File:   "map_string_concat_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 28,
														Line:   49,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   49,
													},
													File:   "map_string_concat_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 36,
														Line:   49,
													},
												},
											},
											Name: "loadStorage",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 97,
											Line:   49,
										},
										File:   "map_string_concat_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 62,
											Line:   49,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   49,
											},
											File:   "map_string_concat_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 62,
												Line:   49,
											},
										},
									},
									Name: "want",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 96,
													Line:   49,
												},
												File:   "map_string_concat_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 84,
													Line:   49,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 96,
														Line:   49,
													},
													File:   "map_string_concat_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 84,
														Line:   49,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 87,
															Line:   49,
														},
														File:   "map_string_concat_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 84,
															Line:   49,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 96,
															Line:   49,
														},
														File:   "map_string_concat_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 89,
															Line:   49,
														},
													},
												},
												Name: "outData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 97,
												Line:   49,
											},
											File:   "map_string_concat_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 68,
												Line:   49,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 83,
													Line:   49,
												},
												File:   "map_string_concat_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 68,
													Line:   49,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 75,
														Line:   49,
													},
													File:   "map_string_concat_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 68,
														Line:   49,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 83,
														Line:   49,
													},
													File:   "map_string_concat_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 76,
														Line:   49,
													},
												},
											},
											Name: "loadMem",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 108,
											Line:   49,
										},
										File:   "map_string_concat_test.flux",
										Source: "fn: t_map",
										Start: ast.Position{
											Column: 99,
											Line:   49,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 101,
												Line:   49,
											},
											File:   "map_string_concat_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 99,
												Line:   49,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 108,
												Line:   49,
											},
											File:   "map_string_concat_test.flux",
											Source: "t_map",
											Start: ast.Position{
												Column: 103,
												Line:   49,
											},
										},
									},
									Name: "t_map",
								},
							}},
							Rbrace: nil,
							With:   nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
					Lparen: nil,
					Params: []*ast.Property{},
					Rparan: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 110,
						Line:   49,
					},
					File:   "map_string_concat_test.flux",
					Source: "test _map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
					Start: ast.Position{
						Column: 1,
						Line:   49,
					},
				},
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   4,
					},
					File:   "map_string_concat_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   4,
						},
						File:   "map_string_concat_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 41,
						Line:   5,
					},
					File:   "map_string_concat_test.flux",
					Source: "import \"contrib/lazarenkovegor/multirow\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 41,
							Line:   5,
						},
						File:   "map_string_concat_test.flux",
						Source: "\"contrib/lazarenkovegor/multirow\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "contrib/lazarenkovegor/multirow",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "map_string_concat_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "map_string_concat_test.flux",
					Source: "package multirow_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "map_string_concat_test.flux",
						Source: "multirow_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "multirow_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 110,
					Line:   58,
				},
				File:   "map_unpivot_test.flux",
				Source: "package multirow_test\n\n\nimport \"testing\"\nimport \"contrib/lazarenkovegor/multirow\"\n\ninData =\n    \"\n#datatype,string,long,string,string,long,dateTime:RFC3339,string\n#group,false,false,false,false,false,false,false\n#default,_result,0,,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,intcol3,_time,_measurement\n,,,test1,test10,1,,\n,,,test1,test11,,,\n,,,test2,test12,3,,\n,,,test2,test13,4,,\n\"\n\noutData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,string,long\n#group,false,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,,\n,result,table,_field,_measurement,_time,_value,group_id\n,,,test1,,,test10,0\n,,,intcol3,,,1,0\n,,,test1,,,test11,1\n,,,intcol3,,,,1\n,,,test2,,,test12,2\n,,,intcol3,,,3,2\n,,,test2,,,test13,3\n,,,intcol3,,,4,3\n\"\n\nt_map = (table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(\n            fn: (row, index) =>\n                [\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: row._field,\n                        _value: row._value,\n                        group_id: index,\n                    },\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: \"intcol3\",\n                        _value: string(v: row.intcol3),\n                        group_id: index,\n                    },\n                ],\n        )\n\ntest _map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   17,
					},
					File:   "map_unpivot_test.flux",
					Source: "inData =\n    \"\n#datatype,string,long,string,string,long,dateTime:RFC3339,string\n#group,false,false,false,false,false,false,false\n#default,_result,0,,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,intcol3,_time,_measurement\n,,,test1,test10,1,,\n,,,test1,test11,,,\n,,,test2,test12,3,,\n,,,test2,test13,4,,\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   7,
						},
						File:   "map_unpivot_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   17,
						},
						File:   "map_unpivot_test.flux",
						Source: "\"\n#datatype,string,long,string,string,long,dateTime:RFC3339,string\n#group,false,false,false,false,false,false,false\n#default,_result,0,,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,intcol3,_time,_measurement\n,,,test1,test10,1,,\n,,,test1,test11,,,\n,,,test2,test12,3,,\n,,,test2,test13,4,,\n\"",
						Start: ast.Position{
							Column: 5,
							Line:   8,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,long,dateTime:RFC3339,string\n#group,false,false,false,false,false,false,false\n#default,_result,0,,,,2000-01-01T00:00:00Z,m0\n,result,table,_field,_value,intcol3,_time,_measurement\n,,,test1,test10,1,,\n,,,test1,test11,,,\n,,,test2,test12,3,,\n,,,test2,test13,4,,\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   33,
					},
					File:   "map_unpivot_test.flux",
					Source: "outData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,string,long\n#group,false,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,,\n,result,table,_field,_measurement,_time,_value,group_id\n,,,test1,,,test10,0\n,,,intcol3,,,1,0\n,,,test1,,,test11,1\n,,,intcol3,,,,1\n,,,test2,,,test12,2\n,,,intcol3,,,3,2\n,,,test2,,,test13,3\n,,,intcol3,,,4,3\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   19,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   19,
						},
						File:   "map_unpivot_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   19,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   33,
						},
						File:   "map_unpivot_test.flux",
						Source: "\"\n#datatype,string,long,string,string,dateTime:RFC3339,string,long\n#group,false,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,,\n,result,table,_field,_measurement,_time,_value,group_id\n,,,test1,,,test10,0\n,,,intcol3,,,1,0\n,,,test1,,,test11,1\n,,,intcol3,,,,1\n,,,test2,,,test12,2\n,,,intcol3,,,3,2\n,,,test2,,,test13,3\n,,,intcol3,,,4,3\n\"",
						Start: ast.Position{
							Column: 5,
							Line:   20,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,dateTime:RFC3339,string,long\n#group,false,false,false,false,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,,\n,result,table,_field,_measurement,_time,_value,group_id\n,,,test1,,,test10,0\n,,,intcol3,,,1,0\n,,,test1,,,test11,1\n,,,intcol3,,,,1\n,,,test2,,,test12,2\n,,,intcol3,,,3,2\n,,,test2,,,test13,3\n,,,intcol3,,,4,3\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 10,
						Line:   56,
					},
					File:   "map_unpivot_test.flux",
					Source: "t_map = (table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(\n            fn: (row, index) =>\n                [\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: row._field,\n                        _value: row._value,\n                        group_id: index,\n                    },\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: \"intcol3\",\n                        _value: string(v: row.intcol3),\n                        group_id: index,\n                    },\n                ],\n        )",
					Start: ast.Position{
						Column: 1,
						Line:   35,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   35,
						},
						File:   "map_unpivot_test.flux",
						Source: "t_map",
						Start: ast.Position{
							Column: 1,
							Line:   35,
						},
					},
				},
				Name: "t_map",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   56,
						},
						File:   "map_unpivot_test.flux",
						Source: "(table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(\n            fn: (row, index) =>\n                [\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: row._field,\n                        _value: row._value,\n                        group_id: index,\n                    },\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: \"intcol3\",\n                        _value: string(v: row.intcol3),\n                        group_id: index,\n                    },\n                ],\n        )",
						Start: ast.Position{
							Column: 9,
							Line:   35,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   36,
									},
									File:   "map_unpivot_test.flux",
									Source: "table",
									Start: ast.Position{
										Column: 5,
										Line:   36,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   37,
								},
								File:   "map_unpivot_test.flux",
								Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])",
								Start: ast.Position{
									Column: 5,
									Line:   36,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   37,
										},
										File:   "map_unpivot_test.flux",
										Source: "columns: [\"_start\", \"_stop\"]",
										Start: ast.Position{
											Column: 17,
											Line:   37,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   37,
											},
											File:   "map_unpivot_test.flux",
											Source: "columns: [\"_start\", \"_stop\"]",
											Start: ast.Position{
												Column: 17,
												Line:   37,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   37,
												},
												File:   "map_unpivot_test.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 17,
													Line:   37,
												},
											},
										},
										Name: "columns",
									},
									Separator: nil,
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   37,
												},
												File:   "map_unpivot_test.flux",
												Source: "[\"_start\", \"_stop\"]",
												Start: ast.Position{
													Column: 26,
													Line:   37,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   37,
													},
													File:   "map_unpivot_test.flux",
													Source: "\"_start\"",
													Start: ast.Position{
														Column: 27,
														Line:   37,
													},
												},
											},
											Value: "_start",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   37,
													},
													File:   "map_unpivot_test.flux",
													Source: "\"_stop\"",
													Start: ast.Position{
														Column: 37,
														Line:   37,
													},
												},
											},
											Value: "_stop",
										}},
										Lbrack: nil,
										Rbrack: nil,
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   37,
									},
									File:   "map_unpivot_test.flux",
									Source: "drop(columns: [\"_start\", \"_stop\"])",
									Start: ast.Position{
										Column: 12,
										Line:   37,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   37,
										},
										File:   "map_unpivot_test.flux",
										Source: "drop",
										Start: ast.Position{
											Column: 12,
											Line:   37,
										},
									},
								},
								Name: "drop",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   56,
							},
							File:   "map_unpivot_test.flux",
							Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(\n            fn: (row, index) =>\n                [\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: row._field,\n                        _value: row._value,\n                        group_id: index,\n                    },\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: \"intcol3\",\n                        _value: string(v: row.intcol3),\n                        group_id: index,\n                    },\n                ],\n        )",
							Start: ast.Position{
								Column: 5,
								Line:   36,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   55,
									},
									File:   "map_unpivot_test.flux",
									Source: "fn: (row, index) =>\n                [\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: row._field,\n                        _value: row._value,\n                        group_id: index,\n                    },\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: \"intcol3\",\n                        _value: string(v: row.intcol3),\n                        group_id: index,\n                    },\n                ]",
									Start: ast.Position{
										Column: 13,
										Line:   39,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   55,
										},
										File:   "map_unpivot_test.flux",
										Source: "fn: (row, index) =>\n                [\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: row._field,\n                        _value: row._value,\n                        group_id: index,\n                    },\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: \"intcol3\",\n                        _value: string(v: row.intcol3),\n                        group_id: index,\n                    },\n                ]",
										Start: ast.Position{
											Column: 13,
											Line:   39,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   39,
											},
											File:   "map_unpivot_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 13,
												Line:   39,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.FunctionExpression{
									Arrow: nil,
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   55,
											},
											File:   "map_unpivot_test.flux",
											Source: "(row, index) =>\n                [\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: row._field,\n                        _value: row._value,\n                        group_id: index,\n                    },\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: \"intcol3\",\n                        _value: string(v: row.intcol3),\n                        group_id: index,\n                    },\n                ]",
											Start: ast.Position{
												Column: 17,
												Line:   39,
											},
										},
									},
									Body: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   55,
												},
												File:   "map_unpivot_test.flux",
												Source: "[\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: row._field,\n                        _value: row._value,\n                        group_id: index,\n                    },\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: \"intcol3\",\n                        _value: string(v: row.intcol3),\n                        group_id: index,\n                    },\n                ]",
												Start: ast.Position{
													Column: 17,
													Line:   40,
												},
											},
										},
										Elements: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   47,
													},
													File:   "map_unpivot_test.flux",
													Source: "{\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: row._field,\n                        _value: row._value,\n                        group_id: index,\n                    }",
													Start: ast.Position{
														Column: 21,
														Line:   41,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   42,
														},
														File:   "map_unpivot_test.flux",
														Source: "_time: row._time",
														Start: ast.Position{
															Column: 25,
															Line:   42,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 30,
																Line:   42,
															},
															File:   "map_unpivot_test.flux",
															Source: "_time",
															Start: ast.Position{
																Column: 25,
																Line:   42,
															},
														},
													},
													Name: "_time",
												},
												Separator: nil,
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 41,
																Line:   42,
															},
															File:   "map_unpivot_test.flux",
															Source: "row._time",
															Start: ast.Position{
																Column: 32,
																Line:   42,
															},
														},
													},
													Lbrack: nil,
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 35,
																	Line:   42,
																},
																File:   "map_unpivot_test.flux",
																Source: "row",
																Start: ast.Position{
																	Column: 32,
																	Line:   42,
																},
															},
														},
														Name: "row",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 41,
																	Line:   42,
																},
																File:   "map_unpivot_test.flux",
																Source: "_time",
																Start: ast.Position{
																	Column: 36,
																	Line:   42,
																},
															},
														},
														Name: "_time",
													},
													Rbrack: nil,
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   43,
														},
														File:   "map_unpivot_test.flux",
														Source: "_measurement: row._measurement",
														Start: ast.Position{
															Column: 25,
															Line:   43,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   43,
															},
															File:   "map_unpivot_test.flux",
															Source: "_measurement",
															Start: ast.Position{
																Column: 25,
																Line:   43,
															},
														},
													},
													Name: "_measurement",
												},
												Separator: nil,
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   43,
															},
															File:   "map_unpivot_test.flux",
															Source: "row._measurement",
															Start: ast.Position{
																Column: 39,
																Line:   43,
															},
														},
													},
													Lbrack: nil,
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   43,
																},
																File:   "map_unpivot_test.flux",
																Source: "row",
																Start: ast.Position{
																	Column: 39,
																	Line:   43,
																},
															},
														},
														Name: "row",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 55,
																	Line:   43,
																},
																File:   "map_unpivot_test.flux",
																Source: "_measurement",
																Start: ast.Position{
																	Column: 43,
																	Line:   43,
																},
															},
														},
														Name: "_measurement",
													},
													Rbrack: nil,
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   44,
														},
														File:   "map_unpivot_test.flux",
														Source: "_field: row._field",
														Start: ast.Position{
															Column: 25,
															Line:   44,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   44,
															},
															File:   "map_unpivot_test.flux",
															Source: "_field",
															Start: ast.Position{
																Column: 25,
																Line:   44,
															},
														},
													},
													Name: "_field",
												},
												Separator: nil,
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   44,
															},
															File:   "map_unpivot_test.flux",
															Source: "row._field",
															Start: ast.Position{
																Column: 33,
																Line:   44,
															},
														},
													},
													Lbrack: nil,
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   44,
																},
																File:   "map_unpivot_test.flux",
																Source: "row",
																Start: ast.Position{
																	Column: 33,
																	Line:   44,
																},
															},
														},
														Name: "row",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   44,
																},
																File:   "map_unpivot_test.flux",
																Source: "_field",
																Start: ast.Position{
																	Column: 37,
																	Line:   44,
																},
															},
														},
														Name: "_field",
													},
													Rbrack: nil,
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   45,
														},
														File:   "map_unpivot_test.flux",
														Source: "_value: row._value",
														Start: ast.Position{
															Column: 25,
															Line:   45,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   45,
															},
															File:   "map_unpivot_test.flux",
															Source: "_value",
															Start: ast.Position{
																Column: 25,
																Line:   45,
															},
														},
													},
													Name: "_value",
												},
												Separator: nil,
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   45,
															},
															File:   "map_unpivot_test.flux",
															Source: "row._value",
															Start: ast.Position{
																Column: 33,
																Line:   45,
															},
														},
													},
													Lbrack: nil,
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   45,
																},
																File:   "map_unpivot_test.flux",
																Source: "row",
																Start: ast.Position{
																	Column: 33,
																	Line:   45,
																},
															},
														},
														Name: "row",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   45,
																},
																File:   "map_unpivot_test.flux",
																Source: "_value",
																Start: ast.Position{
																	Column: 37,
																	Line:   45,
																},
															},
														},
														Name: "_value",
													},
													Rbrack: nil,
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   46,
														},
														File:   "map_unpivot_test.flux",
														Source: "group_id: index",
														Start: ast.Position{
															Column: 25,
															Line:   46,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   46,
															},
															File:   "map_unpivot_test.flux",
															Source: "group_id",
															Start: ast.Position{
																Column: 25,
																Line:   46,
															},
														},
													},
													Name: "group_id",
												},
												Separator: nil,
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   46,
															},
															File:   "map_unpivot_test.flux",
															Source: "index",
															Start: ast.Position{
																Column: 35,
																Line:   46,
															},
														},
													},
													Name: "index",
												},
											}},
											Rbrace: nil,
											With:   nil,
										}, &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   54,
													},
													File:   "map_unpivot_test.flux",
													Source: "{\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: \"intcol3\",\n                        _value: string(v: row.intcol3),\n                        group_id: index,\n                    }",
													Start: ast.Position{
														Column: 21,
														Line:   48,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   49,
														},
														File:   "map_unpivot_test.flux",
														Source: "_time: row._time",
														Start: ast.Position{
															Column: 25,
															Line:   49,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 30,
																Line:   49,
															},
															File:   "map_unpivot_test.flux",
															Source: "_time",
															Start: ast.Position{
																Column: 25,
																Line:   49,
															},
														},
													},
													Name: "_time",
												},
												Separator: nil,
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 41,
																Line:   49,
															},
															File:   "map_unpivot_test.flux",
															Source: "row._time",
															Start: ast.Position{
																Column: 32,
																Line:   49,
															},
														},
													},
													Lbrack: nil,
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 35,
																	Line:   49,
																},
																File:   "map_unpivot_test.flux",
																Source: "row",
																Start: ast.Position{
																	Column: 32,
																	Line:   49,
																},
															},
														},
														Name: "row",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 41,
																	Line:   49,
																},
																File:   "map_unpivot_test.flux",
																Source: "_time",
																Start: ast.Position{
																	Column: 36,
																	Line:   49,
																},
															},
														},
														Name: "_time",
													},
													Rbrack: nil,
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   50,
														},
														File:   "map_unpivot_test.flux",
														Source: "_measurement: row._measurement",
														Start: ast.Position{
															Column: 25,
															Line:   50,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   50,
															},
															File:   "map_unpivot_test.flux",
															Source: "_measurement",
															Start: ast.Position{
																Column: 25,
																Line:   50,
															},
														},
													},
													Name: "_measurement",
												},
												Separator: nil,
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   50,
															},
															File:   "map_unpivot_test.flux",
															Source: "row._measurement",
															Start: ast.Position{
																Column: 39,
																Line:   50,
															},
														},
													},
													Lbrack: nil,
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   50,
																},
																File:   "map_unpivot_test.flux",
																Source: "row",
																Start: ast.Position{
																	Column: 39,
																	Line:   50,
																},
															},
														},
														Name: "row",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 55,
																	Line:   50,
																},
																File:   "map_unpivot_test.flux",
																Source: "_measurement",
																Start: ast.Position{
																	Column: 43,
																	Line:   50,
																},
															},
														},
														Name: "_measurement",
													},
													Rbrack: nil,
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   51,
														},
														File:   "map_unpivot_test.flux",
														Source: "_field: \"intcol3\"",
														Start: ast.Position{
															Column: 25,
															Line:   51,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   51,
															},
															File:   "map_unpivot_test.flux",
															Source: "_field",
															Start: ast.Position{
																Column: 25,
																Line:   51,
															},
														},
													},
													Name: "_field",
												},
												Separator: nil,
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   51,
															},
															File:   "map_unpivot_test.flux",
															Source: "\"intcol3\"",
															Start: ast.Position{
																Column: 33,
																Line:   51,
															},
														},
													},
													Value: "intcol3",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   52,
														},
														File:   "map_unpivot_test.flux",
														Source: "_value: string(v: row.intcol3)",
														Start: ast.Position{
															Column: 25,
															Line:   52,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   52,
															},
															File:   "map_unpivot_test.flux",
															Source: "_value",
															Start: ast.Position{
																Column: 25,
																Line:   52,
															},
														},
													},
													Name: "_value",
												},
												Separator: nil,
												Value: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 54,
																	Line:   52,
																},
																File:   "map_unpivot_test.flux",
																Source: "v: row.intcol3",
																Start: ast.Position{
																	Column: 40,
																	Line:   52,
																},
															},
														},
														Lbrace: nil,
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 54,
																		Line:   52,
																	},
																	File:   "map_unpivot_test.flux",
																	Source: "v: row.intcol3",
																	Start: ast.Position{
																		Column: 40,
																		Line:   52,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 41,
																			Line:   52,
																		},
																		File:   "map_unpivot_test.flux",
																		Source: "v",
																		Start: ast.Position{
																			Column: 40,
																			Line:   52,
																		},
																	},
																},
																Name: "v",
															},
															Separator: nil,
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 54,
																			Line:   52,
																		},
																		File:   "map_unpivot_test.flux",
																		Source: "row.intcol3",
																		Start: ast.Position{
																			Column: 43,
																			Line:   52,
																		},
																	},
																},
																Lbrack: nil,
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 46,
																				Line:   52,
																			},
																			File:   "map_unpivot_test.flux",
																			Source: "row",
																			Start: ast.Position{
																				Column: 43,
																				Line:   52,
																			},
																		},
																	},
																	Name: "row",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 54,
																				Line:   52,
																			},
																			File:   "map_unpivot_test.flux",
																			Source: "intcol3",
																			Start: ast.Position{
																				Column: 47,
																				Line:   52,
																			},
																		},
																	},
																	Name: "intcol3",
																},
																Rbrack: nil,
															},
														}},
														Rbrace: nil,
														With:   nil,
													}},
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   52,
															},
															File:   "map_unpivot_test.flux",
															Source: "string(v: row.intcol3)",
															Start: ast.Position{
																Column: 33,
																Line:   52,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 39,
																	Line:   52,
																},
																File:   "map_unpivot_test.flux",
																Source: "string",
																Start: ast.Position{
																	Column: 33,
																	Line:   52,
																},
															},
														},
														Name: "string",
													},
													Lparen: nil,
													Rparen: nil,
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   53,
														},
														File:   "map_unpivot_test.flux",
														Source: "group_id: index",
														Start: ast.Position{
															Column: 25,
															Line:   53,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   53,
															},
															File:   "map_unpivot_test.flux",
															Source: "group_id",
															Start: ast.Position{
																Column: 25,
																Line:   53,
															},
														},
													},
													Name: "group_id",
												},
												Separator: nil,
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   53,
															},
															File:   "map_unpivot_test.flux",
															Source: "index",
															Start: ast.Position{
																Column: 35,
																Line:   53,
															},
														},
													},
													Name: "index",
												},
											}},
											Rbrace: nil,
											With:   nil,
										}},
										Lbrack: nil,
										Rbrack: nil,
									},
									Lparen: nil,
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   39,
												},
												File:   "map_unpivot_test.flux",
												Source: "row",
												Start: ast.Position{
													Column: 18,
													Line:   39,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   39,
													},
													File:   "map_unpivot_test.flux",
													Source: "row",
													Start: ast.Position{
														Column: 18,
														Line:   39,
													},
												},
											},
											Name: "row",
										},
										Separator: nil,
										Value:     nil,
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   39,
												},
												File:   "map_unpivot_test.flux",
												Source: "index",
												Start: ast.Position{
													Column: 23,
													Line:   39,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   39,
													},
													File:   "map_unpivot_test.flux",
													Source: "index",
													Start: ast.Position{
														Column: 23,
														Line:   39,
													},
												},
											},
											Name: "index",
										},
										Separator: nil,
										Value:     nil,
									}},
									Rparan: nil,
								},
							}},
							Rbrace: nil,
							With:   nil,
						}},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   56,
								},
								File:   "map_unpivot_test.flux",
								Source: "multirow.map(\n            fn: (row, index) =>\n                [\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: row._field,\n                        _value: row._value,\n                        group_id: index,\n                    },\n                    {\n                        _time: row._time,\n                        _measurement: row._measurement,\n                        _field: \"intcol3\",\n                        _value: string(v: row.intcol3),\n                        group_id: index,\n                    },\n                ],\n        )",
								Start: ast.Position{
									Column: 12,
									Line:   38,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   38,
									},
									File:   "map_unpivot_test.flux",
									Source: "multirow.map",
									Start: ast.Position{
										Column: 12,
										Line:   38,
									},
								},
							},
							Lbrack: nil,
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   38,
										},
										File:   "map_unpivot_test.flux",
										Source: "multirow",
										Start: ast.Position{
											Column: 12,
											Line:   38,
										},
									},
								},
								Name: "multirow",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   38,
										},
										File:   "map_unpivot_test.flux",
										Source: "map",
										Start: ast.Position{
											Column: 21,
											Line:   38,
										},
									},
								},
								Name: "map",
							},
							Rbrack: nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   35,
							},
							File:   "map_unpivot_test.flux",
							Source: "table=<-",
							Start: ast.Position{
								Column: 10,
								Line:   35,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   35,
								},
								File:   "map_unpivot_test.flux",
								Source: "table",
								Start: ast.Position{
									Column: 10,
									Line:   35,
								},
							},
						},
						Name: "table",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   35,
							},
							File:   "map_unpivot_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 16,
								Line:   35,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 110,
							Line:   58,
						},
						File:   "map_unpivot_test.flux",
						Source: "_map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
						Start: ast.Position{
							Column: 6,
							Line:   58,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   58,
							},
							File:   "map_unpivot_test.flux",
							Source: "_map",
							Start: ast.Position{
								Column: 6,
								Line:   58,
							},
						},
					},
					Name: "_map",
				},
				Init: &ast.FunctionExpression{
					Arrow: nil,
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 110,
								Line:   58,
							},
							File:   "map_unpivot_test.flux",
							Source: "() => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
							Start: ast.Position{
								Column: 13,
								Line:   58,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 110,
									Line:   58,
								},
								File:   "map_unpivot_test.flux",
								Source: "({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
								Start: ast.Position{
									Column: 19,
									Line:   58,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 109,
										Line:   58,
									},
									File:   "map_unpivot_test.flux",
									Source: "{input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map}",
									Start: ast.Position{
										Column: 20,
										Line:   58,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 60,
											Line:   58,
										},
										File:   "map_unpivot_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 21,
											Line:   58,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   58,
											},
											File:   "map_unpivot_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 21,
												Line:   58,
											},
										},
									},
									Name: "input",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   58,
												},
												File:   "map_unpivot_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 48,
													Line:   58,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 59,
														Line:   58,
													},
													File:   "map_unpivot_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 48,
														Line:   58,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   58,
														},
														File:   "map_unpivot_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 48,
															Line:   58,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   58,
														},
														File:   "map_unpivot_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 53,
															Line:   58,
														},
													},
												},
												Name: "inData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 60,
												Line:   58,
											},
											File:   "map_unpivot_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 28,
												Line:   58,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   58,
												},
												File:   "map_unpivot_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 28,
													Line:   58,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   58,
													},
													File:   "map_unpivot_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 28,
														Line:   58,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   58,
													},
													File:   "map_unpivot_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 36,
														Line:   58,
													},
												},
											},
											Name: "loadStorage",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 97,
											Line:   58,
										},
										File:   "map_unpivot_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 62,
											Line:   58,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   58,
											},
											File:   "map_unpivot_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 62,
												Line:   58,
											},
										},
									},
									Name: "want",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 96,
													Line:   58,
												},
												File:   "map_unpivot_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 84,
													Line:   58,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 96,
														Line:   58,
													},
													File:   "map_unpivot_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 84,
														Line:   58,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 87,
															Line:   58,
														},
														File:   "map_unpivot_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 84,
															Line:   58,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 96,
															Line:   58,
														},
														File:   "map_unpivot_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 89,
															Line:   58,
														},
													},
												},
												Name: "outData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 97,
												Line:   58,
											},
											File:   "map_unpivot_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 68,
												Line:   58,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 83,
													Line:   58,
												},
												File:   "map_unpivot_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 68,
													Line:   58,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 75,
														Line:   58,
													},
													File:   "map_unpivot_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 68,
														Line:   58,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 83,
														Line:   58,
													},
													File:   "map_unpivot_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 76,
														Line:   58,
													},
												},
											},
											Name: "loadMem",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 108,
											Line:   58,
										},
										File:   "map_unpivot_test.flux",
										Source: "fn: t_map",
										Start: ast.Position{
											Column: 99,
											Line:   58,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 101,
												Line:   58,
											},
											File:   "map_unpivot_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 99,
												Line:   58,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 108,
												Line:   58,
											},
											File:   "map_unpivot_test.flux",
											Source: "t_map",
											Start: ast.Position{
												Column: 103,
												Line:   58,
											},
										},
									},
									Name: "t_map",
								},
							}},
							Rbrace: nil,
							With:   nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
					Lparen: nil,
					Params: []*ast.Property{},
					Rparan: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 110,
						Line:   58,
					},
					File:   "map_unpivot_test.flux",
					Source: "test _map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
					Start: ast.Position{
						Column: 1,
						Line:   58,
					},
				},
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   4,
					},
					File:   "map_unpivot_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   4,
						},
						File:   "map_unpivot_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 41,
						Line:   5,
					},
					File:   "map_unpivot_test.flux",
					Source: "import \"contrib/lazarenkovegor/multirow\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 41,
							Line:   5,
						},
						File:   "map_unpivot_test.flux",
						Source: "\"contrib/lazarenkovegor/multirow\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "contrib/lazarenkovegor/multirow",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "map_unpivot_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "map_unpivot_test.flux",
					Source: "package multirow_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "map_unpivot_test.flux",
						Source: "multirow_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "multirow_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 110,
					Line:   46,
				},
				File:   "map_window_test.flux",
				Source: "package multirow_test\n\n\nimport \"testing\"\nimport \"contrib/lazarenkovegor/multirow\"\n\ninData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,\n,result,table,_field,_measurement,_time,_value\n,,,test1,,,0\n,,,test1,,,1\n,,,test1,,,1\n,,,test1,,,2\n,,,test1,,,3\n,,,test1,,,5\n,,,test2,,,8\n,,,test2,,,13\n,,,test2,,,21\n\"\n\noutData =\n    \"\n#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,0,,\n,result,table,_field,_value\n,,0,test1,0.5\n,,0,test1,0.6666666666666666\n,,0,test1,1.3333333333333333\n,,0,test1,2\n,,0,test1,3.3333333333333335\n,,0,test1,4\n,,1,test2,10.5\n,,1,test2,14\n,,1,test2,17\n\"\n\nt_map = (table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(left: 1, right: 1, fn: (window) => window |> mean())\n\ntest _map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   22,
					},
					File:   "map_window_test.flux",
					Source: "inData =\n    \"\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,\n,result,table,_field,_measurement,_time,_value\n,,,test1,,,0\n,,,test1,,,1\n,,,test1,,,1\n,,,test1,,,2\n,,,test1,,,3\n,,,test1,,,5\n,,,test2,,,8\n,,,test2,,,13\n,,,test2,,,21\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   7,
						},
						File:   "map_window_test.flux",
						Source: "inData",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "inData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   22,
						},
						File:   "map_window_test.flux",
						Source: "\"\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,\n,result,table,_field,_measurement,_time,_value\n,,,test1,,,0\n,,,test1,,,1\n,,,test1,,,1\n,,,test1,,,2\n,,,test1,,,3\n,,,test1,,,5\n,,,test2,,,8\n,,,test2,,,13\n,,,test2,,,21\n\"",
						Start: ast.Position{
							Column: 5,
							Line:   8,
						},
					},
				},
				Value: "\n#datatype,string,long,string,string,dateTime:RFC3339,long\n#group,false,false,true,false,false,false\n#default,_result,0,,m0,2000-01-01T00:00:00Z,\n,result,table,_field,_measurement,_time,_value\n,,,test1,,,0\n,,,test1,,,1\n,,,test1,,,1\n,,,test1,,,2\n,,,test1,,,3\n,,,test1,,,5\n,,,test2,,,8\n,,,test2,,,13\n,,,test2,,,21\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   39,
					},
					File:   "map_window_test.flux",
					Source: "outData =\n    \"\n#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,0,,\n,result,table,_field,_value\n,,0,test1,0.5\n,,0,test1,0.6666666666666666\n,,0,test1,1.3333333333333333\n,,0,test1,2\n,,0,test1,3.3333333333333335\n,,0,test1,4\n,,1,test2,10.5\n,,1,test2,14\n,,1,test2,17\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   24,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   24,
						},
						File:   "map_window_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   24,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   39,
						},
						File:   "map_window_test.flux",
						Source: "\"\n#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,0,,\n,result,table,_field,_value\n,,0,test1,0.5\n,,0,test1,0.6666666666666666\n,,0,test1,1.3333333333333333\n,,0,test1,2\n,,0,test1,3.3333333333333335\n,,0,test1,4\n,,1,test2,10.5\n,,1,test2,14\n,,1,test2,17\n\"",
						Start: ast.Position{
							Column: 5,
							Line:   25,
						},
					},
				},
				Value: "\n#datatype,string,long,string,double\n#group,false,false,true,false\n#default,_result,0,,\n,result,table,_field,_value\n,,0,test1,0.5\n,,0,test1,0.6666666666666666\n,,0,test1,1.3333333333333333\n,,0,test1,2\n,,0,test1,3.3333333333333335\n,,0,test1,4\n,,1,test2,10.5\n,,1,test2,14\n,,1,test2,17\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 77,
						Line:   44,
					},
					File:   "map_window_test.flux",
					Source: "t_map = (table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(left: 1, right: 1, fn: (window) => window |> mean())",
					Start: ast.Position{
						Column: 1,
						Line:   41,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   41,
						},
						File:   "map_window_test.flux",
						Source: "t_map",
						Start: ast.Position{
							Column: 1,
							Line:   41,
						},
					},
				},
				Name: "t_map",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 77,
							Line:   44,
						},
						File:   "map_window_test.flux",
						Source: "(table=<-) =>\n    table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(left: 1, right: 1, fn: (window) => window |> mean())",
						Start: ast.Position{
							Column: 9,
							Line:   41,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   42,
									},
									File:   "map_window_test.flux",
									Source: "table",
									Start: ast.Position{
										Column: 5,
										Line:   42,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   43,
								},
								File:   "map_window_test.flux",
								Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])",
								Start: ast.Position{
									Column: 5,
									Line:   42,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   43,
										},
										File:   "map_window_test.flux",
										Source: "columns: [\"_start\", \"_stop\"]",
										Start: ast.Position{
											Column: 17,
											Line:   43,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   43,
											},
											File:   "map_window_test.flux",
											Source: "columns: [\"_start\", \"_stop\"]",
											Start: ast.Position{
												Column: 17,
												Line:   43,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   43,
												},
												File:   "map_window_test.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 17,
													Line:   43,
												},
											},
										},
										Name: "columns",
									},
									Separator: nil,
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   43,
												},
												File:   "map_window_test.flux",
												Source: "[\"_start\", \"_stop\"]",
												Start: ast.Position{
													Column: 26,
													Line:   43,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   43,
													},
													File:   "map_window_test.flux",
													Source: "\"_start\"",
													Start: ast.Position{
														Column: 27,
														Line:   43,
													},
												},
											},
											Value: "_start",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   43,
													},
													File:   "map_window_test.flux",
													Source: "\"_stop\"",
													Start: ast.Position{
														Column: 37,
														Line:   43,
													},
												},
											},
											Value: "_stop",
										}},
										Lbrack: nil,
										Rbrack: nil,
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   43,
									},
									File:   "map_window_test.flux",
									Source: "drop(columns: [\"_start\", \"_stop\"])",
									Start: ast.Position{
										Column: 12,
										Line:   43,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   43,
										},
										File:   "map_window_test.flux",
										Source: "drop",
										Start: ast.Position{
											Column: 12,
											Line:   43,
										},
									},
								},
								Name: "drop",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 77,
								Line:   44,
							},
							File:   "map_window_test.flux",
							Source: "table\n        |> drop(columns: [\"_start\", \"_stop\"])\n        |> multirow.map(left: 1, right: 1, fn: (window) => window |> mean())",
							Start: ast.Position{
								Column: 5,
								Line:   42,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 76,
										Line:   44,
									},
									File:   "map_window_test.flux",
									Source: "left: 1, right: 1, fn: (window) => window |> mean()",
									Start: ast.Position{
										Column: 25,
										Line:   44,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   44,
										},
										File:   "map_window_test.flux",
										Source: "left: 1",
										Start: ast.Position{
											Column: 25,
											Line:   44,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   44,
											},
											File:   "map_window_test.flux",
											Source: "left",
											Start: ast.Position{
												Column: 25,
												Line:   44,
											},
										},
									},
									Name: "left",
								},
								Separator: nil,
								Value: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   44,
											},
											File:   "map_window_test.flux",
											Source: "1",
											Start: ast.Position{
												Column: 31,
												Line:   44,
											},
										},
									},
									Value: int64(1),
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   44,
										},
										File:   "map_window_test.flux",
										Source: "right: 1",
										Start: ast.Position{
											Column: 34,
											Line:   44,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   44,
											},
											File:   "map_window_test.flux",
											Source: "right",
											Start: ast.Position{
												Column: 34,
												Line:   44,
											},
										},
									},
									Name: "right",
								},
								Separator: nil,
								Value: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   44,
											},
											File:   "map_window_test.flux",
											Source: "1",
											Start: ast.Position{
												Column: 41,
												Line:   44,
											},
										},
									},
									Value: int64(1),
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 76,
											Line:   44,
										},
										File:   "map_window_test.flux",
										Source: "fn: (window) => window |> mean()",
										Start: ast.Position{
											Column: 44,
											Line:   44,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   44,
											},
											File:   "map_window_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 44,
												Line:   44,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.FunctionExpression{
									Arrow: nil,
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 76,
												Line:   44,
											},
											File:   "map_window_test.flux",
											Source: "(window) => window |> mean()",
											Start: ast.Position{
												Column: 48,
												Line:   44,
											},
										},
									},
									Body: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 66,
														Line:   44,
													},
													File:   "map_window_test.flux",
													Source: "window",
													Start: ast.Position{
														Column: 60,
														Line:   44,
													},
												},
											},
											Name: "window",
										},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 76,
													Line:   44,
												},
												File:   "map_window_test.flux",
												Source: "window |> mean()",
												Start: ast.Position{
													Column: 60,
													Line:   44,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: nil,
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 76,
														Line:   44,
													},
													File:   "map_window_test.flux",
													Source: "mean()",
													Start: ast.Position{
														Column: 70,
														Line:   44,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 74,
															Line:   44,
														},
														File:   "map_window_test.flux",
														Source: "mean",
														Start: ast.Position{
															Column: 70,
															Line:   44,
														},
													},
												},
												Name: "mean",
											},
											Lparen: nil,
											Rparen: nil,
										},
									},
									Lparen: nil,
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 55,
													Line:   44,
												},
												File:   "map_window_test.flux",
												Source: "window",
												Start: ast.Position{
													Column: 49,
													Line:   44,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 55,
														Line:   44,
													},
													File:   "map_window_test.flux",
													Source: "window",
													Start: ast.Position{
														Column: 49,
														Line:   44,
													},
												},
											},
											Name: "window",
										},
										Separator: nil,
										Value:     nil,
									}},
									Rparan: nil,
								},
							}},
							Rbrace: nil,
							With:   nil,
						}},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 77,
									Line:   44,
								},
								File:   "map_window_test.flux",
								Source: "multirow.map(left: 1, right: 1, fn: (window) => window |> mean())",
								Start: ast.Position{
									Column: 12,
									Line:   44,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   44,
									},
									File:   "map_window_test.flux",
									Source: "multirow.map",
									Start: ast.Position{
										Column: 12,
										Line:   44,
									},
								},
							},
							Lbrack: nil,
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   44,
										},
										File:   "map_window_test.flux",
										Source: "multirow",
										Start: ast.Position{
											Column: 12,
											Line:   44,
										},
									},
								},
								Name: "multirow",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   44,
										},
										File:   "map_window_test.flux",
										Source: "map",
										Start: ast.Position{
											Column: 21,
											Line:   44,
										},
									},
								},
								Name: "map",
							},
							Rbrack: nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   41,
							},
							File:   "map_window_test.flux",
							Source: "table=<-",
							Start: ast.Position{
								Column: 10,
								Line:   41,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   41,
								},
								File:   "map_window_test.flux",
								Source: "table",
								Start: ast.Position{
									Column: 10,
									Line:   41,
								},
							},
						},
						Name: "table",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   41,
							},
							File:   "map_window_test.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 16,
								Line:   41,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 110,
							Line:   46,
						},
						File:   "map_window_test.flux",
						Source: "_map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
						Start: ast.Position{
							Column: 6,
							Line:   46,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   46,
							},
							File:   "map_window_test.flux",
							Source: "_map",
							Start: ast.Position{
								Column: 6,
								Line:   46,
							},
						},
					},
					Name: "_map",
				},
				Init: &ast.FunctionExpression{
					Arrow: nil,
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 110,
								Line:   46,
							},
							File:   "map_window_test.flux",
							Source: "() => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
							Start: ast.Position{
								Column: 13,
								Line:   46,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 110,
									Line:   46,
								},
								File:   "map_window_test.flux",
								Source: "({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
								Start: ast.Position{
									Column: 19,
									Line:   46,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 109,
										Line:   46,
									},
									File:   "map_window_test.flux",
									Source: "{input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map}",
									Start: ast.Position{
										Column: 20,
										Line:   46,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 60,
											Line:   46,
										},
										File:   "map_window_test.flux",
										Source: "input: testing.loadStorage(csv: inData)",
										Start: ast.Position{
											Column: 21,
											Line:   46,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   46,
											},
											File:   "map_window_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 21,
												Line:   46,
											},
										},
									},
									Name: "input",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   46,
												},
												File:   "map_window_test.flux",
												Source: "csv: inData",
												Start: ast.Position{
													Column: 48,
													Line:   46,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 59,
														Line:   46,
													},
													File:   "map_window_test.flux",
													Source: "csv: inData",
													Start: ast.Position{
														Column: 48,
														Line:   46,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 51,
															Line:   46,
														},
														File:   "map_window_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 48,
															Line:   46,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   46,
														},
														File:   "map_window_test.flux",
														Source: "inData",
														Start: ast.Position{
															Column: 53,
															Line:   46,
														},
													},
												},
												Name: "inData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 60,
												Line:   46,
											},
											File:   "map_window_test.flux",
											Source: "testing.loadStorage(csv: inData)",
											Start: ast.Position{
												Column: 28,
												Line:   46,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 47,
													Line:   46,
												},
												File:   "map_window_test.flux",
												Source: "testing.loadStorage",
												Start: ast.Position{
													Column: 28,
													Line:   46,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   46,
													},
													File:   "map_window_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 28,
														Line:   46,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   46,
													},
													File:   "map_window_test.flux",
													Source: "loadStorage",
													Start: ast.Position{
														Column: 36,
														Line:   46,
													},
												},
											},
											Name: "loadStorage",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 97,
											Line:   46,
										},
										File:   "map_window_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 62,
											Line:   46,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   46,
											},
											File:   "map_window_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 62,
												Line:   46,
											},
										},
									},
									Name: "want",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 96,
													Line:   46,
												},
												File:   "map_window_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 84,
													Line:   46,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 96,
														Line:   46,
													},
													File:   "map_window_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 84,
														Line:   46,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 87,
															Line:   46,
														},
														File:   "map_window_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 84,
															Line:   46,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 96,
															Line:   46,
														},
														File:   "map_window_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 89,
															Line:   46,
														},
													},
												},
												Name: "outData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 97,
												Line:   46,
											},
											File:   "map_window_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 68,
												Line:   46,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 83,
													Line:   46,
												},
												File:   "map_window_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 68,
													Line:   46,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 75,
														Line:   46,
													},
													File:   "map_window_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 68,
														Line:   46,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 83,
														Line:   46,
													},
													File:   "map_window_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 76,
														Line:   46,
													},
												},
											},
											Name: "loadMem",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 108,
											Line:   46,
										},
										File:   "map_window_test.flux",
										Source: "fn: t_map",
										Start: ast.Position{
											Column: 99,
											Line:   46,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 101,
												Line:   46,
											},
											File:   "map_window_test.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 99,
												Line:   46,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 108,
												Line:   46,
											},
											File:   "map_window_test.flux",
											Source: "t_map",
											Start: ast.Position{
												Column: 103,
												Line:   46,
											},
										},
									},
									Name: "t_map",
								},
							}},
							Rbrace: nil,
							With:   nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
					Lparen: nil,
					Params: []*ast.Property{},
					Rparan: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 110,
						Line:   46,
					},
					File:   "map_window_test.flux",
					Source: "test _map = () => ({input: testing.loadStorage(csv: inData), want: testing.loadMem(csv: outData), fn: t_map})",
					Start: ast.Position{
						Column: 1,
						Line:   46,
					},
				},
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   4,
					},
					File:   "map_window_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   4,
						},
						File:   "map_window_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 41,
						Line:   5,
					},
					File:   "map_window_test.flux",
					Source: "import \"contrib/lazarenkovegor/multirow\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 41,
							Line:   5,
						},
						File:   "map_window_test.flux",
						Source: "\"contrib/lazarenkovegor/multirow\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "contrib/lazarenkovegor/multirow",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "map_window_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   1,
					},
					File:   "map_window_test.flux",
					Source: "package multirow_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   1,
						},
						File:   "map_window_test.flux",
						Source: "multirow_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "multirow_test",
			},
		},
	}},
	Package: "multirow_test",
	Path:    "contrib/lazarenkovegor/multirow",
}}
