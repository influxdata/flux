// DO NOT EDIT: This file is autogenerated via the builtin command.

package math

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 12,
					Line:   15,
				},
				File:   "math.flux",
				Source: "package math\n\nbuiltin minIndex : (values: [A]) => int where A: Numeric\nmin = (values) => {\n    index = minIndex(values)\n    return values[index]\n}\n\nbuiltin maxIndex : (values: [A]) => int where A: Numeric\nmax = (values) => {\n\tindex = maxIndex(values)\n\treturn values[index]\n}\n\nbuiltin sum",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   3,
					},
					File:   "math.flux",
					Source: "builtin minIndex",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   3,
						},
						File:   "math.flux",
						Source: "minIndex",
						Start: ast.Position{
							Column: 9,
							Line:   3,
						},
					},
				},
				Name: "minIndex",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 57,
							Line:   3,
						},
						File:   "math.flux",
						Source: "(values: [A]) => int where A: Numeric",
						Start: ast.Position{
							Column: 20,
							Line:   3,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 57,
								Line:   3,
							},
							File:   "math.flux",
							Source: "A: Numeric",
							Start: ast.Position{
								Column: 47,
								Line:   3,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   3,
								},
								File:   "math.flux",
								Source: "Numeric",
								Start: ast.Position{
									Column: 50,
									Line:   3,
								},
							},
						},
						Name: "Numeric",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   3,
								},
								File:   "math.flux",
								Source: "A",
								Start: ast.Position{
									Column: 47,
									Line:   3,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   3,
							},
							File:   "math.flux",
							Source: "(values: [A]) => int",
							Start: ast.Position{
								Column: 20,
								Line:   3,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   3,
								},
								File:   "math.flux",
								Source: "values: [A]",
								Start: ast.Position{
									Column: 21,
									Line:   3,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   3,
									},
									File:   "math.flux",
									Source: "values",
									Start: ast.Position{
										Column: 21,
										Line:   3,
									},
								},
							},
							Name: "values",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   3,
									},
									File:   "math.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 29,
										Line:   3,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   3,
										},
										File:   "math.flux",
										Source: "A",
										Start: ast.Position{
											Column: 30,
											Line:   3,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   3,
											},
											File:   "math.flux",
											Source: "A",
											Start: ast.Position{
												Column: 30,
												Line:   3,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   3,
								},
								File:   "math.flux",
								Source: "int",
								Start: ast.Position{
									Column: 37,
									Line:   3,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   3,
									},
									File:   "math.flux",
									Source: "int",
									Start: ast.Position{
										Column: 37,
										Line:   3,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   7,
					},
					File:   "math.flux",
					Source: "min = (values) => {\n    index = minIndex(values)\n    return values[index]\n}",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   4,
						},
						File:   "math.flux",
						Source: "min",
						Start: ast.Position{
							Column: 1,
							Line:   4,
						},
					},
				},
				Name: "min",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   7,
						},
						File:   "math.flux",
						Source: "(values) => {\n    index = minIndex(values)\n    return values[index]\n}",
						Start: ast.Position{
							Column: 7,
							Line:   4,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   7,
							},
							File:   "math.flux",
							Source: "{\n    index = minIndex(values)\n    return values[index]\n}",
							Start: ast.Position{
								Column: 19,
								Line:   4,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   5,
								},
								File:   "math.flux",
								Source: "index = minIndex(values)",
								Start: ast.Position{
									Column: 5,
									Line:   5,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   5,
									},
									File:   "math.flux",
									Source: "index",
									Start: ast.Position{
										Column: 5,
										Line:   5,
									},
								},
							},
							Name: "index",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   5,
										},
										File:   "math.flux",
										Source: "values",
										Start: ast.Position{
											Column: 22,
											Line:   5,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   5,
											},
											File:   "math.flux",
											Source: "values",
											Start: ast.Position{
												Column: 22,
												Line:   5,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   5,
												},
												File:   "math.flux",
												Source: "values",
												Start: ast.Position{
													Column: 22,
													Line:   5,
												},
											},
										},
										Name: "values",
									},
									Value: nil,
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   5,
									},
									File:   "math.flux",
									Source: "minIndex(values)",
									Start: ast.Position{
										Column: 13,
										Line:   5,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   5,
										},
										File:   "math.flux",
										Source: "minIndex",
										Start: ast.Position{
											Column: 13,
											Line:   5,
										},
									},
								},
								Name: "minIndex",
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.IndexExpression{
							Array: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   6,
										},
										File:   "math.flux",
										Source: "values",
										Start: ast.Position{
											Column: 12,
											Line:   6,
										},
									},
								},
								Name: "values",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   6,
									},
									File:   "math.flux",
									Source: "values[index]",
									Start: ast.Position{
										Column: 12,
										Line:   6,
									},
								},
							},
							Index: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   6,
										},
										File:   "math.flux",
										Source: "index",
										Start: ast.Position{
											Column: 19,
											Line:   6,
										},
									},
								},
								Name: "index",
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   6,
								},
								File:   "math.flux",
								Source: "return values[index]",
								Start: ast.Position{
									Column: 5,
									Line:   6,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   4,
							},
							File:   "math.flux",
							Source: "values",
							Start: ast.Position{
								Column: 8,
								Line:   4,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   4,
								},
								File:   "math.flux",
								Source: "values",
								Start: ast.Position{
									Column: 8,
									Line:   4,
								},
							},
						},
						Name: "values",
					},
					Value: nil,
				}},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   9,
					},
					File:   "math.flux",
					Source: "builtin maxIndex",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   9,
						},
						File:   "math.flux",
						Source: "maxIndex",
						Start: ast.Position{
							Column: 9,
							Line:   9,
						},
					},
				},
				Name: "maxIndex",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 57,
							Line:   9,
						},
						File:   "math.flux",
						Source: "(values: [A]) => int where A: Numeric",
						Start: ast.Position{
							Column: 20,
							Line:   9,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 57,
								Line:   9,
							},
							File:   "math.flux",
							Source: "A: Numeric",
							Start: ast.Position{
								Column: 47,
								Line:   9,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   9,
								},
								File:   "math.flux",
								Source: "Numeric",
								Start: ast.Position{
									Column: 50,
									Line:   9,
								},
							},
						},
						Name: "Numeric",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   9,
								},
								File:   "math.flux",
								Source: "A",
								Start: ast.Position{
									Column: 47,
									Line:   9,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   9,
							},
							File:   "math.flux",
							Source: "(values: [A]) => int",
							Start: ast.Position{
								Column: 20,
								Line:   9,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   9,
								},
								File:   "math.flux",
								Source: "values: [A]",
								Start: ast.Position{
									Column: 21,
									Line:   9,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   9,
									},
									File:   "math.flux",
									Source: "values",
									Start: ast.Position{
										Column: 21,
										Line:   9,
									},
								},
							},
							Name: "values",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   9,
									},
									File:   "math.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 29,
										Line:   9,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   9,
										},
										File:   "math.flux",
										Source: "A",
										Start: ast.Position{
											Column: 30,
											Line:   9,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   9,
											},
											File:   "math.flux",
											Source: "A",
											Start: ast.Position{
												Column: 30,
												Line:   9,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   9,
								},
								File:   "math.flux",
								Source: "int",
								Start: ast.Position{
									Column: 37,
									Line:   9,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   9,
									},
									File:   "math.flux",
									Source: "int",
									Start: ast.Position{
										Column: 37,
										Line:   9,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   13,
					},
					File:   "math.flux",
					Source: "max = (values) => {\n\tindex = maxIndex(values)\n\treturn values[index]\n}",
					Start: ast.Position{
						Column: 1,
						Line:   10,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   10,
						},
						File:   "math.flux",
						Source: "max",
						Start: ast.Position{
							Column: 1,
							Line:   10,
						},
					},
				},
				Name: "max",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   13,
						},
						File:   "math.flux",
						Source: "(values) => {\n\tindex = maxIndex(values)\n\treturn values[index]\n}",
						Start: ast.Position{
							Column: 7,
							Line:   10,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   13,
							},
							File:   "math.flux",
							Source: "{\n\tindex = maxIndex(values)\n\treturn values[index]\n}",
							Start: ast.Position{
								Column: 19,
								Line:   10,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   11,
								},
								File:   "math.flux",
								Source: "index = maxIndex(values)",
								Start: ast.Position{
									Column: 2,
									Line:   11,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 7,
										Line:   11,
									},
									File:   "math.flux",
									Source: "index",
									Start: ast.Position{
										Column: 2,
										Line:   11,
									},
								},
							},
							Name: "index",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   11,
										},
										File:   "math.flux",
										Source: "values",
										Start: ast.Position{
											Column: 19,
											Line:   11,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   11,
											},
											File:   "math.flux",
											Source: "values",
											Start: ast.Position{
												Column: 19,
												Line:   11,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   11,
												},
												File:   "math.flux",
												Source: "values",
												Start: ast.Position{
													Column: 19,
													Line:   11,
												},
											},
										},
										Name: "values",
									},
									Value: nil,
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   11,
									},
									File:   "math.flux",
									Source: "maxIndex(values)",
									Start: ast.Position{
										Column: 10,
										Line:   11,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   11,
										},
										File:   "math.flux",
										Source: "maxIndex",
										Start: ast.Position{
											Column: 10,
											Line:   11,
										},
									},
								},
								Name: "maxIndex",
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.IndexExpression{
							Array: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   12,
										},
										File:   "math.flux",
										Source: "values",
										Start: ast.Position{
											Column: 9,
											Line:   12,
										},
									},
								},
								Name: "values",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   12,
									},
									File:   "math.flux",
									Source: "values[index]",
									Start: ast.Position{
										Column: 9,
										Line:   12,
									},
								},
							},
							Index: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   12,
										},
										File:   "math.flux",
										Source: "index",
										Start: ast.Position{
											Column: 16,
											Line:   12,
										},
									},
								},
								Name: "index",
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   12,
								},
								File:   "math.flux",
								Source: "return values[index]",
								Start: ast.Position{
									Column: 2,
									Line:   12,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   10,
							},
							File:   "math.flux",
							Source: "values",
							Start: ast.Position{
								Column: 8,
								Line:   10,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   10,
								},
								File:   "math.flux",
								Source: "values",
								Start: ast.Position{
									Column: 8,
									Line:   10,
								},
							},
						},
						Name: "values",
					},
					Value: nil,
				}},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   15,
					},
					File:   "math.flux",
					Source: "builtin sum",
					Start: ast.Position{
						Column: 1,
						Line:   15,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   15,
						},
						File:   "math.flux",
						Source: "sum",
						Start: ast.Position{
							Column: 9,
							Line:   15,
						},
					},
				},
				Name: "sum",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 50,
							Line:   15,
						},
						File:   "math.flux",
						Source: "(values: [A]) => A where A: Numeric",
						Start: ast.Position{
							Column: 15,
							Line:   15,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 50,
								Line:   15,
							},
							File:   "math.flux",
							Source: "A: Numeric",
							Start: ast.Position{
								Column: 40,
								Line:   15,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   15,
								},
								File:   "math.flux",
								Source: "Numeric",
								Start: ast.Position{
									Column: 43,
									Line:   15,
								},
							},
						},
						Name: "Numeric",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   15,
								},
								File:   "math.flux",
								Source: "A",
								Start: ast.Position{
									Column: 40,
									Line:   15,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   15,
							},
							File:   "math.flux",
							Source: "(values: [A]) => A",
							Start: ast.Position{
								Column: 15,
								Line:   15,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   15,
								},
								File:   "math.flux",
								Source: "values: [A]",
								Start: ast.Position{
									Column: 16,
									Line:   15,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   15,
									},
									File:   "math.flux",
									Source: "values",
									Start: ast.Position{
										Column: 16,
										Line:   15,
									},
								},
							},
							Name: "values",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   15,
									},
									File:   "math.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 24,
										Line:   15,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   15,
										},
										File:   "math.flux",
										Source: "A",
										Start: ast.Position{
											Column: 25,
											Line:   15,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   15,
											},
											File:   "math.flux",
											Source: "A",
											Start: ast.Position{
												Column: 25,
												Line:   15,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}},
					Return: &ast.TvarType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   15,
								},
								File:   "math.flux",
								Source: "A",
								Start: ast.Position{
									Column: 32,
									Line:   15,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   15,
									},
									File:   "math.flux",
									Source: "A",
									Start: ast.Position{
										Column: 32,
										Line:   15,
									},
								},
							},
							Name: "A",
						},
					},
				},
			},
		}},
		Imports:  nil,
		Metadata: "parser-type=rust",
		Name:     "math.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   1,
					},
					File:   "math.flux",
					Source: "package math",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   1,
						},
						File:   "math.flux",
						Source: "math",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "math",
			},
		},
	}},
	Package: "math",
	Path:    "contrib/jsternberg/math",
}
