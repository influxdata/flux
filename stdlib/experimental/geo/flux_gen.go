// DO NOT EDIT: This file is autogenerated via the builtin command.

package geo

import (
	flux "github.com/influxdata/flux"
	ast "github.com/influxdata/flux/ast"
)

func init() {
	flux.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 30,
					Line:   143,
				},
				File:   "geo.flux",
				Source: "package geo\n\n//\n// None of the builtin functions are intended to be used by end users.\n//\n\n// Check whether lat/lon is in specified region.\nbuiltin containsLatLon\n\n// Calculates grid (set of cell ID tokens) for given region and according to options.\nbuiltin getGrid\n\n// Returns level of specified cell ID token.\nbuiltin getLevel\n\n// Returns cell ID token for given cell or lat/lon point at specified level.\nbuiltin s2CellIDToken\n\n//\n// Flux\n//\n\n// Gets level of cell ID tag `s2cellID` from the first record from the first table from the stream.\n_detectLevel = (tables=<-) => {\n  _r0 =\n    tables\n      |> tableFind(fn: (key) => exists key.s2_cell_id)\n      |> getRecord(idx: 0)\n  _level =\n    if exists _r0 then\n      getLevel(token: _r0.s2_cell_id)\n    else\n       666\n  return _level\n}\n\n//\n// Convenience functions\n//\n\n// Collects values to row-wise sets.\ntoRows = (tables=<-, correlationKey=[\"_time\"]) =>\n  tables\n    |> pivot(\n      rowKey: correlationKey,\n      columnKey: [\"_field\"],\n      valueColumn: \"_value\"\n    )\n\n//\n// Filtering functions\n//\n\n// Filters records by a box, a circle or a polygon area using S2 cell ID tag.\n// It is a coarse filter, as the grid always overlays the region, the result will likely contain records\n// with lat/lon outside the specified region.\ngridFilter = (tables=<-, region, minSize=24, maxSize=-1, level=-1, s2cellIDLevel=-1) => {\n  _s2cellIDLevel =\n    if s2cellIDLevel == -1 then\n      tables\n        |> _detectLevel()\n    else\n      s2cellIDLevel\n  _grid = getGrid(region: region, minSize: minSize, maxSize: maxSize, level: level, maxLevel: _s2cellIDLevel)\n  return\n    tables\n      |> filter(fn: (r) =>\n        if _grid.level == _s2cellIDLevel then\n          contains(value: r.s2_cell_id, set: _grid.set)\n        else\n          contains(value: s2CellIDToken(token: r.s2_cell_id, level: _grid.level), set: _grid.set)\n      )\n}\n\n// Filters records by specified region.\n// It is an exact filter and must be used after `toRows()` because it requires `lat` and `lon` columns in input row sets.\nstrictFilter = (tables=<-, region) =>\n  tables\n    |> filter(fn: (r) =>\n      containsLatLon(region: region, lat: r.lat, lon: r.lon)\n    )\n\n// Two-phase filtering by speficied region.\n// Returns rows of fields correlated by `correlationKey`.\nfilterRows = (tables=<-, region, minSize=24, maxSize=-1, level=-1, s2cellIDLevel=-1, correlationKey=[\"_time\"], strict=true) => {\n  _columns =\n    tables\n      |> columns()\n      |> tableFind(fn: (key) => true )\n      |> getColumn(column: \"_value\")\n  _rows =\n    if contains(value: \"lat\", set: _columns) then\n      tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)\n    else\n      tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)\n        |> toRows(correlationKey)\n  _result =\n    if strict then\n      _rows\n        |> strictFilter(region)\n    else\n      _rows\n  return _result\n}\n\n//\n// Grouping functions\n//\n// intended to be used row-wise sets (i.e after `toRows()`)\n\n// Groups data by area of size specified by level. Result is grouped by `newColumn`.\n// Grouping levels: https://s2geometry.io/resources/s2cell_statistics.html\ngroupByArea = (tables=<-, newColumn, level, s2cellIDLevel=-1) => {\n  _s2cellIDLevel =\n    if s2cellIDLevel == -1 then\n      tables\n        |> _detectLevel()\n    else\n      s2cellIDLevel\n  _prepared =\n    if level == _s2cellIDLevel then\n      tables\n\t    |> duplicate(column: \"s2_cell_id\", as: newColumn)\n    else\n      tables\n        |> map(fn: (r) => ({\n             r with\n               _s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)\n           }))\n        |> rename(columns: { _s2_cell_id_xxx: newColumn })\n  return\n    _prepared\n      |> group(columns: [newColumn])\n}\n\n// Groups rows into tracks.\nasTracks = (tables=<-, groupBy=[\"id\",\"tid\"], orderBy=[\"_time\"]) =>\n  tables\n    |> group(columns: groupBy)\n    |> sort(columns: orderBy)",
				Start: ast.Position{
					Column: 1,
					Line:   2,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 23,
						Line:   9,
					},
					File:   "geo.flux",
					Source: "builtin containsLatLon",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 23,
							Line:   9,
						},
						File:   "geo.flux",
						Source: "containsLatLon",
						Start: ast.Position{
							Column: 9,
							Line:   9,
						},
					},
				},
				Name: "containsLatLon",
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   12,
					},
					File:   "geo.flux",
					Source: "builtin getGrid",
					Start: ast.Position{
						Column: 1,
						Line:   12,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   12,
						},
						File:   "geo.flux",
						Source: "getGrid",
						Start: ast.Position{
							Column: 9,
							Line:   12,
						},
					},
				},
				Name: "getGrid",
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   15,
					},
					File:   "geo.flux",
					Source: "builtin getLevel",
					Start: ast.Position{
						Column: 1,
						Line:   15,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   15,
						},
						File:   "geo.flux",
						Source: "getLevel",
						Start: ast.Position{
							Column: 9,
							Line:   15,
						},
					},
				},
				Name: "getLevel",
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   18,
					},
					File:   "geo.flux",
					Source: "builtin s2CellIDToken",
					Start: ast.Position{
						Column: 1,
						Line:   18,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   18,
						},
						File:   "geo.flux",
						Source: "s2CellIDToken",
						Start: ast.Position{
							Column: 9,
							Line:   18,
						},
					},
				},
				Name: "s2CellIDToken",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   36,
					},
					File:   "geo.flux",
					Source: "_detectLevel = (tables=<-) => {\n  _r0 =\n    tables\n      |> tableFind(fn: (key) => exists key.s2_cell_id)\n      |> getRecord(idx: 0)\n  _level =\n    if exists _r0 then\n      getLevel(token: _r0.s2_cell_id)\n    else\n       666\n  return _level\n}",
					Start: ast.Position{
						Column: 1,
						Line:   25,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   25,
						},
						File:   "geo.flux",
						Source: "_detectLevel",
						Start: ast.Position{
							Column: 1,
							Line:   25,
						},
					},
				},
				Name: "_detectLevel",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   36,
						},
						File:   "geo.flux",
						Source: "(tables=<-) => {\n  _r0 =\n    tables\n      |> tableFind(fn: (key) => exists key.s2_cell_id)\n      |> getRecord(idx: 0)\n  _level =\n    if exists _r0 then\n      getLevel(token: _r0.s2_cell_id)\n    else\n       666\n  return _level\n}",
						Start: ast.Position{
							Column: 16,
							Line:   25,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   36,
							},
							File:   "geo.flux",
							Source: "{\n  _r0 =\n    tables\n      |> tableFind(fn: (key) => exists key.s2_cell_id)\n      |> getRecord(idx: 0)\n  _level =\n    if exists _r0 then\n      getLevel(token: _r0.s2_cell_id)\n    else\n       666\n  return _level\n}",
							Start: ast.Position{
								Column: 31,
								Line:   25,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   29,
								},
								File:   "geo.flux",
								Source: "_r0 =\n    tables\n      |> tableFind(fn: (key) => exists key.s2_cell_id)\n      |> getRecord(idx: 0)",
								Start: ast.Position{
									Column: 3,
									Line:   26,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   26,
									},
									File:   "geo.flux",
									Source: "_r0",
									Start: ast.Position{
										Column: 3,
										Line:   26,
									},
								},
							},
							Name: "_r0",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   27,
											},
											File:   "geo.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 5,
												Line:   27,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   28,
										},
										File:   "geo.flux",
										Source: "tables\n      |> tableFind(fn: (key) => exists key.s2_cell_id)",
										Start: ast.Position{
											Column: 5,
											Line:   27,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   28,
												},
												File:   "geo.flux",
												Source: "fn: (key) => exists key.s2_cell_id",
												Start: ast.Position{
													Column: 20,
													Line:   28,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 54,
														Line:   28,
													},
													File:   "geo.flux",
													Source: "fn: (key) => exists key.s2_cell_id",
													Start: ast.Position{
														Column: 20,
														Line:   28,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   28,
														},
														File:   "geo.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 20,
															Line:   28,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 54,
															Line:   28,
														},
														File:   "geo.flux",
														Source: "(key) => exists key.s2_cell_id",
														Start: ast.Position{
															Column: 24,
															Line:   28,
														},
													},
												},
												Body: &ast.UnaryExpression{
													Argument: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 54,
																	Line:   28,
																},
																File:   "geo.flux",
																Source: "key.s2_cell_id",
																Start: ast.Position{
																	Column: 40,
																	Line:   28,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   28,
																	},
																	File:   "geo.flux",
																	Source: "key",
																	Start: ast.Position{
																		Column: 40,
																		Line:   28,
																	},
																},
															},
															Name: "key",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 54,
																		Line:   28,
																	},
																	File:   "geo.flux",
																	Source: "s2_cell_id",
																	Start: ast.Position{
																		Column: 44,
																		Line:   28,
																	},
																},
															},
															Name: "s2_cell_id",
														},
													},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 54,
																Line:   28,
															},
															File:   "geo.flux",
															Source: "exists key.s2_cell_id",
															Start: ast.Position{
																Column: 33,
																Line:   28,
															},
														},
													},
													Operator: 14,
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   28,
															},
															File:   "geo.flux",
															Source: "key",
															Start: ast.Position{
																Column: 25,
																Line:   28,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 28,
																	Line:   28,
																},
																File:   "geo.flux",
																Source: "key",
																Start: ast.Position{
																	Column: 25,
																	Line:   28,
																},
															},
														},
														Name: "key",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   28,
											},
											File:   "geo.flux",
											Source: "tableFind(fn: (key) => exists key.s2_cell_id)",
											Start: ast.Position{
												Column: 10,
												Line:   28,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   28,
												},
												File:   "geo.flux",
												Source: "tableFind",
												Start: ast.Position{
													Column: 10,
													Line:   28,
												},
											},
										},
										Name: "tableFind",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   29,
									},
									File:   "geo.flux",
									Source: "tables\n      |> tableFind(fn: (key) => exists key.s2_cell_id)\n      |> getRecord(idx: 0)",
									Start: ast.Position{
										Column: 5,
										Line:   27,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   29,
											},
											File:   "geo.flux",
											Source: "idx: 0",
											Start: ast.Position{
												Column: 20,
												Line:   29,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   29,
												},
												File:   "geo.flux",
												Source: "idx: 0",
												Start: ast.Position{
													Column: 20,
													Line:   29,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   29,
													},
													File:   "geo.flux",
													Source: "idx",
													Start: ast.Position{
														Column: 20,
														Line:   29,
													},
												},
											},
											Name: "idx",
										},
										Value: &ast.IntegerLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   29,
													},
													File:   "geo.flux",
													Source: "0",
													Start: ast.Position{
														Column: 25,
														Line:   29,
													},
												},
											},
											Value: int64(0),
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   29,
										},
										File:   "geo.flux",
										Source: "getRecord(idx: 0)",
										Start: ast.Position{
											Column: 10,
											Line:   29,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   29,
											},
											File:   "geo.flux",
											Source: "getRecord",
											Start: ast.Position{
												Column: 10,
												Line:   29,
											},
										},
									},
									Name: "getRecord",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   34,
								},
								File:   "geo.flux",
								Source: "_level =\n    if exists _r0 then\n      getLevel(token: _r0.s2_cell_id)\n    else\n       666",
								Start: ast.Position{
									Column: 3,
									Line:   30,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   30,
									},
									File:   "geo.flux",
									Source: "_level",
									Start: ast.Position{
										Column: 3,
										Line:   30,
									},
								},
							},
							Name: "_level",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.IntegerLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   34,
										},
										File:   "geo.flux",
										Source: "666",
										Start: ast.Position{
											Column: 8,
											Line:   34,
										},
									},
								},
								Value: int64(666),
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   34,
									},
									File:   "geo.flux",
									Source: "if exists _r0 then\n      getLevel(token: _r0.s2_cell_id)\n    else\n       666",
									Start: ast.Position{
										Column: 5,
										Line:   31,
									},
								},
							},
							Consequent: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   32,
											},
											File:   "geo.flux",
											Source: "token: _r0.s2_cell_id",
											Start: ast.Position{
												Column: 16,
												Line:   32,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   32,
												},
												File:   "geo.flux",
												Source: "token: _r0.s2_cell_id",
												Start: ast.Position{
													Column: 16,
													Line:   32,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   32,
													},
													File:   "geo.flux",
													Source: "token",
													Start: ast.Position{
														Column: 16,
														Line:   32,
													},
												},
											},
											Name: "token",
										},
										Value: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   32,
													},
													File:   "geo.flux",
													Source: "_r0.s2_cell_id",
													Start: ast.Position{
														Column: 23,
														Line:   32,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 26,
															Line:   32,
														},
														File:   "geo.flux",
														Source: "_r0",
														Start: ast.Position{
															Column: 23,
															Line:   32,
														},
													},
												},
												Name: "_r0",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   32,
														},
														File:   "geo.flux",
														Source: "s2_cell_id",
														Start: ast.Position{
															Column: 27,
															Line:   32,
														},
													},
												},
												Name: "s2_cell_id",
											},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 38,
											Line:   32,
										},
										File:   "geo.flux",
										Source: "getLevel(token: _r0.s2_cell_id)",
										Start: ast.Position{
											Column: 7,
											Line:   32,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   32,
											},
											File:   "geo.flux",
											Source: "getLevel",
											Start: ast.Position{
												Column: 7,
												Line:   32,
											},
										},
									},
									Name: "getLevel",
								},
							},
							Test: &ast.UnaryExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   31,
											},
											File:   "geo.flux",
											Source: "_r0",
											Start: ast.Position{
												Column: 15,
												Line:   31,
											},
										},
									},
									Name: "_r0",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   31,
										},
										File:   "geo.flux",
										Source: "exists _r0",
										Start: ast.Position{
											Column: 8,
											Line:   31,
										},
									},
								},
								Operator: 14,
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   35,
									},
									File:   "geo.flux",
									Source: "_level",
									Start: ast.Position{
										Column: 10,
										Line:   35,
									},
								},
							},
							Name: "_level",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   35,
								},
								File:   "geo.flux",
								Source: "return _level",
								Start: ast.Position{
									Column: 3,
									Line:   35,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   25,
							},
							File:   "geo.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 17,
								Line:   25,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   25,
								},
								File:   "geo.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 17,
									Line:   25,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   25,
							},
							File:   "geo.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 24,
								Line:   25,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 6,
						Line:   49,
					},
					File:   "geo.flux",
					Source: "toRows = (tables=<-, correlationKey=[\"_time\"]) =>\n  tables\n    |> pivot(\n      rowKey: correlationKey,\n      columnKey: [\"_field\"],\n      valueColumn: \"_value\"\n    )",
					Start: ast.Position{
						Column: 1,
						Line:   43,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   43,
						},
						File:   "geo.flux",
						Source: "toRows",
						Start: ast.Position{
							Column: 1,
							Line:   43,
						},
					},
				},
				Name: "toRows",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   49,
						},
						File:   "geo.flux",
						Source: "(tables=<-, correlationKey=[\"_time\"]) =>\n  tables\n    |> pivot(\n      rowKey: correlationKey,\n      columnKey: [\"_field\"],\n      valueColumn: \"_value\"\n    )",
						Start: ast.Position{
							Column: 10,
							Line:   43,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   44,
								},
								File:   "geo.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 3,
									Line:   44,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 6,
								Line:   49,
							},
							File:   "geo.flux",
							Source: "tables\n    |> pivot(\n      rowKey: correlationKey,\n      columnKey: [\"_field\"],\n      valueColumn: \"_value\"\n    )",
							Start: ast.Position{
								Column: 3,
								Line:   44,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   48,
									},
									File:   "geo.flux",
									Source: "rowKey: correlationKey,\n      columnKey: [\"_field\"],\n      valueColumn: \"_value\"",
									Start: ast.Position{
										Column: 7,
										Line:   46,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   46,
										},
										File:   "geo.flux",
										Source: "rowKey: correlationKey",
										Start: ast.Position{
											Column: 7,
											Line:   46,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   46,
											},
											File:   "geo.flux",
											Source: "rowKey",
											Start: ast.Position{
												Column: 7,
												Line:   46,
											},
										},
									},
									Name: "rowKey",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   46,
											},
											File:   "geo.flux",
											Source: "correlationKey",
											Start: ast.Position{
												Column: 15,
												Line:   46,
											},
										},
									},
									Name: "correlationKey",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   47,
										},
										File:   "geo.flux",
										Source: "columnKey: [\"_field\"]",
										Start: ast.Position{
											Column: 7,
											Line:   47,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   47,
											},
											File:   "geo.flux",
											Source: "columnKey",
											Start: ast.Position{
												Column: 7,
												Line:   47,
											},
										},
									},
									Name: "columnKey",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   47,
											},
											File:   "geo.flux",
											Source: "[\"_field\"]",
											Start: ast.Position{
												Column: 18,
												Line:   47,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   47,
												},
												File:   "geo.flux",
												Source: "\"_field\"",
												Start: ast.Position{
													Column: 19,
													Line:   47,
												},
											},
										},
										Value: "_field",
									}},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   48,
										},
										File:   "geo.flux",
										Source: "valueColumn: \"_value\"",
										Start: ast.Position{
											Column: 7,
											Line:   48,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   48,
											},
											File:   "geo.flux",
											Source: "valueColumn",
											Start: ast.Position{
												Column: 7,
												Line:   48,
											},
										},
									},
									Name: "valueColumn",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   48,
											},
											File:   "geo.flux",
											Source: "\"_value\"",
											Start: ast.Position{
												Column: 20,
												Line:   48,
											},
										},
									},
									Value: "_value",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   49,
								},
								File:   "geo.flux",
								Source: "pivot(\n      rowKey: correlationKey,\n      columnKey: [\"_field\"],\n      valueColumn: \"_value\"\n    )",
								Start: ast.Position{
									Column: 8,
									Line:   45,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   45,
									},
									File:   "geo.flux",
									Source: "pivot",
									Start: ast.Position{
										Column: 8,
										Line:   45,
									},
								},
							},
							Name: "pivot",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   43,
							},
							File:   "geo.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 11,
								Line:   43,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   43,
								},
								File:   "geo.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 11,
									Line:   43,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   43,
							},
							File:   "geo.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 18,
								Line:   43,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 46,
								Line:   43,
							},
							File:   "geo.flux",
							Source: "correlationKey=[\"_time\"]",
							Start: ast.Position{
								Column: 22,
								Line:   43,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   43,
								},
								File:   "geo.flux",
								Source: "correlationKey",
								Start: ast.Position{
									Column: 22,
									Line:   43,
								},
							},
						},
						Name: "correlationKey",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   43,
								},
								File:   "geo.flux",
								Source: "[\"_time\"]",
								Start: ast.Position{
									Column: 37,
									Line:   43,
								},
							},
						},
						Elements: []ast.Expression{&ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   43,
									},
									File:   "geo.flux",
									Source: "\"_time\"",
									Start: ast.Position{
										Column: 38,
										Line:   43,
									},
								},
							},
							Value: "_time",
						}},
					},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   74,
					},
					File:   "geo.flux",
					Source: "gridFilter = (tables=<-, region, minSize=24, maxSize=-1, level=-1, s2cellIDLevel=-1) => {\n  _s2cellIDLevel =\n    if s2cellIDLevel == -1 then\n      tables\n        |> _detectLevel()\n    else\n      s2cellIDLevel\n  _grid = getGrid(region: region, minSize: minSize, maxSize: maxSize, level: level, maxLevel: _s2cellIDLevel)\n  return\n    tables\n      |> filter(fn: (r) =>\n        if _grid.level == _s2cellIDLevel then\n          contains(value: r.s2_cell_id, set: _grid.set)\n        else\n          contains(value: s2CellIDToken(token: r.s2_cell_id, level: _grid.level), set: _grid.set)\n      )\n}",
					Start: ast.Position{
						Column: 1,
						Line:   58,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   58,
						},
						File:   "geo.flux",
						Source: "gridFilter",
						Start: ast.Position{
							Column: 1,
							Line:   58,
						},
					},
				},
				Name: "gridFilter",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   74,
						},
						File:   "geo.flux",
						Source: "(tables=<-, region, minSize=24, maxSize=-1, level=-1, s2cellIDLevel=-1) => {\n  _s2cellIDLevel =\n    if s2cellIDLevel == -1 then\n      tables\n        |> _detectLevel()\n    else\n      s2cellIDLevel\n  _grid = getGrid(region: region, minSize: minSize, maxSize: maxSize, level: level, maxLevel: _s2cellIDLevel)\n  return\n    tables\n      |> filter(fn: (r) =>\n        if _grid.level == _s2cellIDLevel then\n          contains(value: r.s2_cell_id, set: _grid.set)\n        else\n          contains(value: s2CellIDToken(token: r.s2_cell_id, level: _grid.level), set: _grid.set)\n      )\n}",
						Start: ast.Position{
							Column: 14,
							Line:   58,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   74,
							},
							File:   "geo.flux",
							Source: "{\n  _s2cellIDLevel =\n    if s2cellIDLevel == -1 then\n      tables\n        |> _detectLevel()\n    else\n      s2cellIDLevel\n  _grid = getGrid(region: region, minSize: minSize, maxSize: maxSize, level: level, maxLevel: _s2cellIDLevel)\n  return\n    tables\n      |> filter(fn: (r) =>\n        if _grid.level == _s2cellIDLevel then\n          contains(value: r.s2_cell_id, set: _grid.set)\n        else\n          contains(value: s2CellIDToken(token: r.s2_cell_id, level: _grid.level), set: _grid.set)\n      )\n}",
							Start: ast.Position{
								Column: 89,
								Line:   58,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   64,
								},
								File:   "geo.flux",
								Source: "_s2cellIDLevel =\n    if s2cellIDLevel == -1 then\n      tables\n        |> _detectLevel()\n    else\n      s2cellIDLevel",
								Start: ast.Position{
									Column: 3,
									Line:   59,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   59,
									},
									File:   "geo.flux",
									Source: "_s2cellIDLevel",
									Start: ast.Position{
										Column: 3,
										Line:   59,
									},
								},
							},
							Name: "_s2cellIDLevel",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   64,
										},
										File:   "geo.flux",
										Source: "s2cellIDLevel",
										Start: ast.Position{
											Column: 7,
											Line:   64,
										},
									},
								},
								Name: "s2cellIDLevel",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   64,
									},
									File:   "geo.flux",
									Source: "if s2cellIDLevel == -1 then\n      tables\n        |> _detectLevel()\n    else\n      s2cellIDLevel",
									Start: ast.Position{
										Column: 5,
										Line:   60,
									},
								},
							},
							Consequent: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   61,
											},
											File:   "geo.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 7,
												Line:   61,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   62,
										},
										File:   "geo.flux",
										Source: "tables\n        |> _detectLevel()",
										Start: ast.Position{
											Column: 7,
											Line:   61,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: nil,
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   62,
											},
											File:   "geo.flux",
											Source: "_detectLevel()",
											Start: ast.Position{
												Column: 12,
												Line:   62,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   62,
												},
												File:   "geo.flux",
												Source: "_detectLevel",
												Start: ast.Position{
													Column: 12,
													Line:   62,
												},
											},
										},
										Name: "_detectLevel",
									},
								},
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   60,
										},
										File:   "geo.flux",
										Source: "s2cellIDLevel == -1",
										Start: ast.Position{
											Column: 8,
											Line:   60,
										},
									},
								},
								Left: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   60,
											},
											File:   "geo.flux",
											Source: "s2cellIDLevel",
											Start: ast.Position{
												Column: 8,
												Line:   60,
											},
										},
									},
									Name: "s2cellIDLevel",
								},
								Operator: 17,
								Right: &ast.UnaryExpression{
									Argument: &ast.IntegerLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   60,
												},
												File:   "geo.flux",
												Source: "1",
												Start: ast.Position{
													Column: 26,
													Line:   60,
												},
											},
										},
										Value: int64(1),
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   60,
											},
											File:   "geo.flux",
											Source: "-1",
											Start: ast.Position{
												Column: 25,
												Line:   60,
											},
										},
									},
									Operator: 6,
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 110,
									Line:   65,
								},
								File:   "geo.flux",
								Source: "_grid = getGrid(region: region, minSize: minSize, maxSize: maxSize, level: level, maxLevel: _s2cellIDLevel)",
								Start: ast.Position{
									Column: 3,
									Line:   65,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   65,
									},
									File:   "geo.flux",
									Source: "_grid",
									Start: ast.Position{
										Column: 3,
										Line:   65,
									},
								},
							},
							Name: "_grid",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 109,
											Line:   65,
										},
										File:   "geo.flux",
										Source: "region: region, minSize: minSize, maxSize: maxSize, level: level, maxLevel: _s2cellIDLevel",
										Start: ast.Position{
											Column: 19,
											Line:   65,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   65,
											},
											File:   "geo.flux",
											Source: "region: region",
											Start: ast.Position{
												Column: 19,
												Line:   65,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   65,
												},
												File:   "geo.flux",
												Source: "region",
												Start: ast.Position{
													Column: 19,
													Line:   65,
												},
											},
										},
										Name: "region",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   65,
												},
												File:   "geo.flux",
												Source: "region",
												Start: ast.Position{
													Column: 27,
													Line:   65,
												},
											},
										},
										Name: "region",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   65,
											},
											File:   "geo.flux",
											Source: "minSize: minSize",
											Start: ast.Position{
												Column: 35,
												Line:   65,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   65,
												},
												File:   "geo.flux",
												Source: "minSize",
												Start: ast.Position{
													Column: 35,
													Line:   65,
												},
											},
										},
										Name: "minSize",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   65,
												},
												File:   "geo.flux",
												Source: "minSize",
												Start: ast.Position{
													Column: 44,
													Line:   65,
												},
											},
										},
										Name: "minSize",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   65,
											},
											File:   "geo.flux",
											Source: "maxSize: maxSize",
											Start: ast.Position{
												Column: 53,
												Line:   65,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 60,
													Line:   65,
												},
												File:   "geo.flux",
												Source: "maxSize",
												Start: ast.Position{
													Column: 53,
													Line:   65,
												},
											},
										},
										Name: "maxSize",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   65,
												},
												File:   "geo.flux",
												Source: "maxSize",
												Start: ast.Position{
													Column: 62,
													Line:   65,
												},
											},
										},
										Name: "maxSize",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 83,
												Line:   65,
											},
											File:   "geo.flux",
											Source: "level: level",
											Start: ast.Position{
												Column: 71,
												Line:   65,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 76,
													Line:   65,
												},
												File:   "geo.flux",
												Source: "level",
												Start: ast.Position{
													Column: 71,
													Line:   65,
												},
											},
										},
										Name: "level",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 83,
													Line:   65,
												},
												File:   "geo.flux",
												Source: "level",
												Start: ast.Position{
													Column: 78,
													Line:   65,
												},
											},
										},
										Name: "level",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 109,
												Line:   65,
											},
											File:   "geo.flux",
											Source: "maxLevel: _s2cellIDLevel",
											Start: ast.Position{
												Column: 85,
												Line:   65,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 93,
													Line:   65,
												},
												File:   "geo.flux",
												Source: "maxLevel",
												Start: ast.Position{
													Column: 85,
													Line:   65,
												},
											},
										},
										Name: "maxLevel",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 109,
													Line:   65,
												},
												File:   "geo.flux",
												Source: "_s2cellIDLevel",
												Start: ast.Position{
													Column: 95,
													Line:   65,
												},
											},
										},
										Name: "_s2cellIDLevel",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 110,
										Line:   65,
									},
									File:   "geo.flux",
									Source: "getGrid(region: region, minSize: minSize, maxSize: maxSize, level: level, maxLevel: _s2cellIDLevel)",
									Start: ast.Position{
										Column: 11,
										Line:   65,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   65,
										},
										File:   "geo.flux",
										Source: "getGrid",
										Start: ast.Position{
											Column: 11,
											Line:   65,
										},
									},
								},
								Name: "getGrid",
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   67,
										},
										File:   "geo.flux",
										Source: "tables",
										Start: ast.Position{
											Column: 5,
											Line:   67,
										},
									},
								},
								Name: "tables",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   73,
									},
									File:   "geo.flux",
									Source: "tables\n      |> filter(fn: (r) =>\n        if _grid.level == _s2cellIDLevel then\n          contains(value: r.s2_cell_id, set: _grid.set)\n        else\n          contains(value: s2CellIDToken(token: r.s2_cell_id, level: _grid.level), set: _grid.set)\n      )",
									Start: ast.Position{
										Column: 5,
										Line:   67,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 98,
												Line:   72,
											},
											File:   "geo.flux",
											Source: "fn: (r) =>\n        if _grid.level == _s2cellIDLevel then\n          contains(value: r.s2_cell_id, set: _grid.set)\n        else\n          contains(value: s2CellIDToken(token: r.s2_cell_id, level: _grid.level), set: _grid.set)",
											Start: ast.Position{
												Column: 17,
												Line:   68,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 98,
													Line:   72,
												},
												File:   "geo.flux",
												Source: "fn: (r) =>\n        if _grid.level == _s2cellIDLevel then\n          contains(value: r.s2_cell_id, set: _grid.set)\n        else\n          contains(value: s2CellIDToken(token: r.s2_cell_id, level: _grid.level), set: _grid.set)",
												Start: ast.Position{
													Column: 17,
													Line:   68,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   68,
													},
													File:   "geo.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 17,
														Line:   68,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 98,
														Line:   72,
													},
													File:   "geo.flux",
													Source: "(r) =>\n        if _grid.level == _s2cellIDLevel then\n          contains(value: r.s2_cell_id, set: _grid.set)\n        else\n          contains(value: s2CellIDToken(token: r.s2_cell_id, level: _grid.level), set: _grid.set)",
													Start: ast.Position{
														Column: 21,
														Line:   68,
													},
												},
											},
											Body: &ast.ConditionalExpression{
												Alternate: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 97,
																	Line:   72,
																},
																File:   "geo.flux",
																Source: "value: s2CellIDToken(token: r.s2_cell_id, level: _grid.level), set: _grid.set",
																Start: ast.Position{
																	Column: 20,
																	Line:   72,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 81,
																		Line:   72,
																	},
																	File:   "geo.flux",
																	Source: "value: s2CellIDToken(token: r.s2_cell_id, level: _grid.level)",
																	Start: ast.Position{
																		Column: 20,
																		Line:   72,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   72,
																		},
																		File:   "geo.flux",
																		Source: "value",
																		Start: ast.Position{
																			Column: 20,
																			Line:   72,
																		},
																	},
																},
																Name: "value",
															},
															Value: &ast.CallExpression{
																Arguments: []ast.Expression{&ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 80,
																				Line:   72,
																			},
																			File:   "geo.flux",
																			Source: "token: r.s2_cell_id, level: _grid.level",
																			Start: ast.Position{
																				Column: 41,
																				Line:   72,
																			},
																		},
																	},
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 60,
																					Line:   72,
																				},
																				File:   "geo.flux",
																				Source: "token: r.s2_cell_id",
																				Start: ast.Position{
																					Column: 41,
																					Line:   72,
																				},
																			},
																		},
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 46,
																						Line:   72,
																					},
																					File:   "geo.flux",
																					Source: "token",
																					Start: ast.Position{
																						Column: 41,
																						Line:   72,
																					},
																				},
																			},
																			Name: "token",
																		},
																		Value: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 60,
																						Line:   72,
																					},
																					File:   "geo.flux",
																					Source: "r.s2_cell_id",
																					Start: ast.Position{
																						Column: 48,
																						Line:   72,
																					},
																				},
																			},
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 49,
																							Line:   72,
																						},
																						File:   "geo.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 48,
																							Line:   72,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 60,
																							Line:   72,
																						},
																						File:   "geo.flux",
																						Source: "s2_cell_id",
																						Start: ast.Position{
																							Column: 50,
																							Line:   72,
																						},
																					},
																				},
																				Name: "s2_cell_id",
																			},
																		},
																	}, &ast.Property{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 80,
																					Line:   72,
																				},
																				File:   "geo.flux",
																				Source: "level: _grid.level",
																				Start: ast.Position{
																					Column: 62,
																					Line:   72,
																				},
																			},
																		},
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 67,
																						Line:   72,
																					},
																					File:   "geo.flux",
																					Source: "level",
																					Start: ast.Position{
																						Column: 62,
																						Line:   72,
																					},
																				},
																			},
																			Name: "level",
																		},
																		Value: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 80,
																						Line:   72,
																					},
																					File:   "geo.flux",
																					Source: "_grid.level",
																					Start: ast.Position{
																						Column: 69,
																						Line:   72,
																					},
																				},
																			},
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 74,
																							Line:   72,
																						},
																						File:   "geo.flux",
																						Source: "_grid",
																						Start: ast.Position{
																							Column: 69,
																							Line:   72,
																						},
																					},
																				},
																				Name: "_grid",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 80,
																							Line:   72,
																						},
																						File:   "geo.flux",
																						Source: "level",
																						Start: ast.Position{
																							Column: 75,
																							Line:   72,
																						},
																					},
																				},
																				Name: "level",
																			},
																		},
																	}},
																	With: nil,
																}},
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 81,
																			Line:   72,
																		},
																		File:   "geo.flux",
																		Source: "s2CellIDToken(token: r.s2_cell_id, level: _grid.level)",
																		Start: ast.Position{
																			Column: 27,
																			Line:   72,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 40,
																				Line:   72,
																			},
																			File:   "geo.flux",
																			Source: "s2CellIDToken",
																			Start: ast.Position{
																				Column: 27,
																				Line:   72,
																			},
																		},
																	},
																	Name: "s2CellIDToken",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 97,
																		Line:   72,
																	},
																	File:   "geo.flux",
																	Source: "set: _grid.set",
																	Start: ast.Position{
																		Column: 83,
																		Line:   72,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 86,
																			Line:   72,
																		},
																		File:   "geo.flux",
																		Source: "set",
																		Start: ast.Position{
																			Column: 83,
																			Line:   72,
																		},
																	},
																},
																Name: "set",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 97,
																			Line:   72,
																		},
																		File:   "geo.flux",
																		Source: "_grid.set",
																		Start: ast.Position{
																			Column: 88,
																			Line:   72,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 93,
																				Line:   72,
																			},
																			File:   "geo.flux",
																			Source: "_grid",
																			Start: ast.Position{
																				Column: 88,
																				Line:   72,
																			},
																		},
																	},
																	Name: "_grid",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 97,
																				Line:   72,
																			},
																			File:   "geo.flux",
																			Source: "set",
																			Start: ast.Position{
																				Column: 94,
																				Line:   72,
																			},
																		},
																	},
																	Name: "set",
																},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 98,
																Line:   72,
															},
															File:   "geo.flux",
															Source: "contains(value: s2CellIDToken(token: r.s2_cell_id, level: _grid.level), set: _grid.set)",
															Start: ast.Position{
																Column: 11,
																Line:   72,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   72,
																},
																File:   "geo.flux",
																Source: "contains",
																Start: ast.Position{
																	Column: 11,
																	Line:   72,
																},
															},
														},
														Name: "contains",
													},
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 98,
															Line:   72,
														},
														File:   "geo.flux",
														Source: "if _grid.level == _s2cellIDLevel then\n          contains(value: r.s2_cell_id, set: _grid.set)\n        else\n          contains(value: s2CellIDToken(token: r.s2_cell_id, level: _grid.level), set: _grid.set)",
														Start: ast.Position{
															Column: 9,
															Line:   69,
														},
													},
												},
												Consequent: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 55,
																	Line:   70,
																},
																File:   "geo.flux",
																Source: "value: r.s2_cell_id, set: _grid.set",
																Start: ast.Position{
																	Column: 20,
																	Line:   70,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 39,
																		Line:   70,
																	},
																	File:   "geo.flux",
																	Source: "value: r.s2_cell_id",
																	Start: ast.Position{
																		Column: 20,
																		Line:   70,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   70,
																		},
																		File:   "geo.flux",
																		Source: "value",
																		Start: ast.Position{
																			Column: 20,
																			Line:   70,
																		},
																	},
																},
																Name: "value",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 39,
																			Line:   70,
																		},
																		File:   "geo.flux",
																		Source: "r.s2_cell_id",
																		Start: ast.Position{
																			Column: 27,
																			Line:   70,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 28,
																				Line:   70,
																			},
																			File:   "geo.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 27,
																				Line:   70,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 39,
																				Line:   70,
																			},
																			File:   "geo.flux",
																			Source: "s2_cell_id",
																			Start: ast.Position{
																				Column: 29,
																				Line:   70,
																			},
																		},
																	},
																	Name: "s2_cell_id",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 55,
																		Line:   70,
																	},
																	File:   "geo.flux",
																	Source: "set: _grid.set",
																	Start: ast.Position{
																		Column: 41,
																		Line:   70,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 44,
																			Line:   70,
																		},
																		File:   "geo.flux",
																		Source: "set",
																		Start: ast.Position{
																			Column: 41,
																			Line:   70,
																		},
																	},
																},
																Name: "set",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 55,
																			Line:   70,
																		},
																		File:   "geo.flux",
																		Source: "_grid.set",
																		Start: ast.Position{
																			Column: 46,
																			Line:   70,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 51,
																				Line:   70,
																			},
																			File:   "geo.flux",
																			Source: "_grid",
																			Start: ast.Position{
																				Column: 46,
																				Line:   70,
																			},
																		},
																	},
																	Name: "_grid",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 55,
																				Line:   70,
																			},
																			File:   "geo.flux",
																			Source: "set",
																			Start: ast.Position{
																				Column: 52,
																				Line:   70,
																			},
																		},
																	},
																	Name: "set",
																},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 56,
																Line:   70,
															},
															File:   "geo.flux",
															Source: "contains(value: r.s2_cell_id, set: _grid.set)",
															Start: ast.Position{
																Column: 11,
																Line:   70,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 19,
																	Line:   70,
																},
																File:   "geo.flux",
																Source: "contains",
																Start: ast.Position{
																	Column: 11,
																	Line:   70,
																},
															},
														},
														Name: "contains",
													},
												},
												Test: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 41,
																Line:   69,
															},
															File:   "geo.flux",
															Source: "_grid.level == _s2cellIDLevel",
															Start: ast.Position{
																Column: 12,
																Line:   69,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 23,
																	Line:   69,
																},
																File:   "geo.flux",
																Source: "_grid.level",
																Start: ast.Position{
																	Column: 12,
																	Line:   69,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 17,
																		Line:   69,
																	},
																	File:   "geo.flux",
																	Source: "_grid",
																	Start: ast.Position{
																		Column: 12,
																		Line:   69,
																	},
																},
															},
															Name: "_grid",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 23,
																		Line:   69,
																	},
																	File:   "geo.flux",
																	Source: "level",
																	Start: ast.Position{
																		Column: 18,
																		Line:   69,
																	},
																},
															},
															Name: "level",
														},
													},
													Operator: 17,
													Right: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 41,
																	Line:   69,
																},
																File:   "geo.flux",
																Source: "_s2cellIDLevel",
																Start: ast.Position{
																	Column: 27,
																	Line:   69,
																},
															},
														},
														Name: "_s2cellIDLevel",
													},
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 23,
															Line:   68,
														},
														File:   "geo.flux",
														Source: "r",
														Start: ast.Position{
															Column: 22,
															Line:   68,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 23,
																Line:   68,
															},
															File:   "geo.flux",
															Source: "r",
															Start: ast.Position{
																Column: 22,
																Line:   68,
															},
														},
													},
													Name: "r",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 8,
											Line:   73,
										},
										File:   "geo.flux",
										Source: "filter(fn: (r) =>\n        if _grid.level == _s2cellIDLevel then\n          contains(value: r.s2_cell_id, set: _grid.set)\n        else\n          contains(value: s2CellIDToken(token: r.s2_cell_id, level: _grid.level), set: _grid.set)\n      )",
										Start: ast.Position{
											Column: 10,
											Line:   68,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   68,
											},
											File:   "geo.flux",
											Source: "filter",
											Start: ast.Position{
												Column: 10,
												Line:   68,
											},
										},
									},
									Name: "filter",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   73,
								},
								File:   "geo.flux",
								Source: "return\n    tables\n      |> filter(fn: (r) =>\n        if _grid.level == _s2cellIDLevel then\n          contains(value: r.s2_cell_id, set: _grid.set)\n        else\n          contains(value: s2CellIDToken(token: r.s2_cell_id, level: _grid.level), set: _grid.set)\n      )",
								Start: ast.Position{
									Column: 3,
									Line:   66,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   58,
							},
							File:   "geo.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 15,
								Line:   58,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   58,
								},
								File:   "geo.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 15,
									Line:   58,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   58,
							},
							File:   "geo.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   58,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   58,
							},
							File:   "geo.flux",
							Source: "region",
							Start: ast.Position{
								Column: 26,
								Line:   58,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   58,
								},
								File:   "geo.flux",
								Source: "region",
								Start: ast.Position{
									Column: 26,
									Line:   58,
								},
							},
						},
						Name: "region",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 44,
								Line:   58,
							},
							File:   "geo.flux",
							Source: "minSize=24",
							Start: ast.Position{
								Column: 34,
								Line:   58,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   58,
								},
								File:   "geo.flux",
								Source: "minSize",
								Start: ast.Position{
									Column: 34,
									Line:   58,
								},
							},
						},
						Name: "minSize",
					},
					Value: &ast.IntegerLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   58,
								},
								File:   "geo.flux",
								Source: "24",
								Start: ast.Position{
									Column: 42,
									Line:   58,
								},
							},
						},
						Value: int64(24),
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 56,
								Line:   58,
							},
							File:   "geo.flux",
							Source: "maxSize=-1",
							Start: ast.Position{
								Column: 46,
								Line:   58,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   58,
								},
								File:   "geo.flux",
								Source: "maxSize",
								Start: ast.Position{
									Column: 46,
									Line:   58,
								},
							},
						},
						Name: "maxSize",
					},
					Value: &ast.UnaryExpression{
						Argument: &ast.IntegerLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   58,
									},
									File:   "geo.flux",
									Source: "1",
									Start: ast.Position{
										Column: 55,
										Line:   58,
									},
								},
							},
							Value: int64(1),
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   58,
								},
								File:   "geo.flux",
								Source: "-1",
								Start: ast.Position{
									Column: 54,
									Line:   58,
								},
							},
						},
						Operator: 6,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 66,
								Line:   58,
							},
							File:   "geo.flux",
							Source: "level=-1",
							Start: ast.Position{
								Column: 58,
								Line:   58,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   58,
								},
								File:   "geo.flux",
								Source: "level",
								Start: ast.Position{
									Column: 58,
									Line:   58,
								},
							},
						},
						Name: "level",
					},
					Value: &ast.UnaryExpression{
						Argument: &ast.IntegerLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   58,
									},
									File:   "geo.flux",
									Source: "1",
									Start: ast.Position{
										Column: 65,
										Line:   58,
									},
								},
							},
							Value: int64(1),
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   58,
								},
								File:   "geo.flux",
								Source: "-1",
								Start: ast.Position{
									Column: 64,
									Line:   58,
								},
							},
						},
						Operator: 6,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 84,
								Line:   58,
							},
							File:   "geo.flux",
							Source: "s2cellIDLevel=-1",
							Start: ast.Position{
								Column: 68,
								Line:   58,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   58,
								},
								File:   "geo.flux",
								Source: "s2cellIDLevel",
								Start: ast.Position{
									Column: 68,
									Line:   58,
								},
							},
						},
						Name: "s2cellIDLevel",
					},
					Value: &ast.UnaryExpression{
						Argument: &ast.IntegerLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 84,
										Line:   58,
									},
									File:   "geo.flux",
									Source: "1",
									Start: ast.Position{
										Column: 83,
										Line:   58,
									},
								},
							},
							Value: int64(1),
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 84,
									Line:   58,
								},
								File:   "geo.flux",
								Source: "-1",
								Start: ast.Position{
									Column: 82,
									Line:   58,
								},
							},
						},
						Operator: 6,
					},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 6,
						Line:   82,
					},
					File:   "geo.flux",
					Source: "strictFilter = (tables=<-, region) =>\n  tables\n    |> filter(fn: (r) =>\n      containsLatLon(region: region, lat: r.lat, lon: r.lon)\n    )",
					Start: ast.Position{
						Column: 1,
						Line:   78,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   78,
						},
						File:   "geo.flux",
						Source: "strictFilter",
						Start: ast.Position{
							Column: 1,
							Line:   78,
						},
					},
				},
				Name: "strictFilter",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   82,
						},
						File:   "geo.flux",
						Source: "(tables=<-, region) =>\n  tables\n    |> filter(fn: (r) =>\n      containsLatLon(region: region, lat: r.lat, lon: r.lon)\n    )",
						Start: ast.Position{
							Column: 16,
							Line:   78,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   79,
								},
								File:   "geo.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 3,
									Line:   79,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 6,
								Line:   82,
							},
							File:   "geo.flux",
							Source: "tables\n    |> filter(fn: (r) =>\n      containsLatLon(region: region, lat: r.lat, lon: r.lon)\n    )",
							Start: ast.Position{
								Column: 3,
								Line:   79,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   81,
									},
									File:   "geo.flux",
									Source: "fn: (r) =>\n      containsLatLon(region: region, lat: r.lat, lon: r.lon)",
									Start: ast.Position{
										Column: 15,
										Line:   80,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   81,
										},
										File:   "geo.flux",
										Source: "fn: (r) =>\n      containsLatLon(region: region, lat: r.lat, lon: r.lon)",
										Start: ast.Position{
											Column: 15,
											Line:   80,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   80,
											},
											File:   "geo.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 15,
												Line:   80,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 61,
												Line:   81,
											},
											File:   "geo.flux",
											Source: "(r) =>\n      containsLatLon(region: region, lat: r.lat, lon: r.lon)",
											Start: ast.Position{
												Column: 19,
												Line:   80,
											},
										},
									},
									Body: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 60,
														Line:   81,
													},
													File:   "geo.flux",
													Source: "region: region, lat: r.lat, lon: r.lon",
													Start: ast.Position{
														Column: 22,
														Line:   81,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   81,
														},
														File:   "geo.flux",
														Source: "region: region",
														Start: ast.Position{
															Column: 22,
															Line:   81,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   81,
															},
															File:   "geo.flux",
															Source: "region",
															Start: ast.Position{
																Column: 22,
																Line:   81,
															},
														},
													},
													Name: "region",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   81,
															},
															File:   "geo.flux",
															Source: "region",
															Start: ast.Position{
																Column: 30,
																Line:   81,
															},
														},
													},
													Name: "region",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   81,
														},
														File:   "geo.flux",
														Source: "lat: r.lat",
														Start: ast.Position{
															Column: 38,
															Line:   81,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 41,
																Line:   81,
															},
															File:   "geo.flux",
															Source: "lat",
															Start: ast.Position{
																Column: 38,
																Line:   81,
															},
														},
													},
													Name: "lat",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   81,
															},
															File:   "geo.flux",
															Source: "r.lat",
															Start: ast.Position{
																Column: 43,
																Line:   81,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   81,
																},
																File:   "geo.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 43,
																	Line:   81,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 48,
																	Line:   81,
																},
																File:   "geo.flux",
																Source: "lat",
																Start: ast.Position{
																	Column: 45,
																	Line:   81,
																},
															},
														},
														Name: "lat",
													},
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 60,
															Line:   81,
														},
														File:   "geo.flux",
														Source: "lon: r.lon",
														Start: ast.Position{
															Column: 50,
															Line:   81,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 53,
																Line:   81,
															},
															File:   "geo.flux",
															Source: "lon",
															Start: ast.Position{
																Column: 50,
																Line:   81,
															},
														},
													},
													Name: "lon",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   81,
															},
															File:   "geo.flux",
															Source: "r.lon",
															Start: ast.Position{
																Column: 55,
																Line:   81,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 56,
																	Line:   81,
																},
																File:   "geo.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 55,
																	Line:   81,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   81,
																},
																File:   "geo.flux",
																Source: "lon",
																Start: ast.Position{
																	Column: 57,
																	Line:   81,
																},
															},
														},
														Name: "lon",
													},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 61,
													Line:   81,
												},
												File:   "geo.flux",
												Source: "containsLatLon(region: region, lat: r.lat, lon: r.lon)",
												Start: ast.Position{
													Column: 7,
													Line:   81,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   81,
													},
													File:   "geo.flux",
													Source: "containsLatLon",
													Start: ast.Position{
														Column: 7,
														Line:   81,
													},
												},
											},
											Name: "containsLatLon",
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   80,
												},
												File:   "geo.flux",
												Source: "r",
												Start: ast.Position{
													Column: 20,
													Line:   80,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   80,
													},
													File:   "geo.flux",
													Source: "r",
													Start: ast.Position{
														Column: 20,
														Line:   80,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   82,
								},
								File:   "geo.flux",
								Source: "filter(fn: (r) =>\n      containsLatLon(region: region, lat: r.lat, lon: r.lon)\n    )",
								Start: ast.Position{
									Column: 8,
									Line:   80,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   80,
									},
									File:   "geo.flux",
									Source: "filter",
									Start: ast.Position{
										Column: 8,
										Line:   80,
									},
								},
							},
							Name: "filter",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   78,
							},
							File:   "geo.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 17,
								Line:   78,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   78,
								},
								File:   "geo.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 17,
									Line:   78,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   78,
							},
							File:   "geo.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 24,
								Line:   78,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 34,
								Line:   78,
							},
							File:   "geo.flux",
							Source: "region",
							Start: ast.Position{
								Column: 28,
								Line:   78,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   78,
								},
								File:   "geo.flux",
								Source: "region",
								Start: ast.Position{
									Column: 28,
									Line:   78,
								},
							},
						},
						Name: "region",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   107,
					},
					File:   "geo.flux",
					Source: "filterRows = (tables=<-, region, minSize=24, maxSize=-1, level=-1, s2cellIDLevel=-1, correlationKey=[\"_time\"], strict=true) => {\n  _columns =\n    tables\n      |> columns()\n      |> tableFind(fn: (key) => true )\n      |> getColumn(column: \"_value\")\n  _rows =\n    if contains(value: \"lat\", set: _columns) then\n      tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)\n    else\n      tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)\n        |> toRows(correlationKey)\n  _result =\n    if strict then\n      _rows\n        |> strictFilter(region)\n    else\n      _rows\n  return _result\n}",
					Start: ast.Position{
						Column: 1,
						Line:   86,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   86,
						},
						File:   "geo.flux",
						Source: "filterRows",
						Start: ast.Position{
							Column: 1,
							Line:   86,
						},
					},
				},
				Name: "filterRows",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   107,
						},
						File:   "geo.flux",
						Source: "(tables=<-, region, minSize=24, maxSize=-1, level=-1, s2cellIDLevel=-1, correlationKey=[\"_time\"], strict=true) => {\n  _columns =\n    tables\n      |> columns()\n      |> tableFind(fn: (key) => true )\n      |> getColumn(column: \"_value\")\n  _rows =\n    if contains(value: \"lat\", set: _columns) then\n      tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)\n    else\n      tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)\n        |> toRows(correlationKey)\n  _result =\n    if strict then\n      _rows\n        |> strictFilter(region)\n    else\n      _rows\n  return _result\n}",
						Start: ast.Position{
							Column: 14,
							Line:   86,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   107,
							},
							File:   "geo.flux",
							Source: "{\n  _columns =\n    tables\n      |> columns()\n      |> tableFind(fn: (key) => true )\n      |> getColumn(column: \"_value\")\n  _rows =\n    if contains(value: \"lat\", set: _columns) then\n      tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)\n    else\n      tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)\n        |> toRows(correlationKey)\n  _result =\n    if strict then\n      _rows\n        |> strictFilter(region)\n    else\n      _rows\n  return _result\n}",
							Start: ast.Position{
								Column: 128,
								Line:   86,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   91,
								},
								File:   "geo.flux",
								Source: "_columns =\n    tables\n      |> columns()\n      |> tableFind(fn: (key) => true )\n      |> getColumn(column: \"_value\")",
								Start: ast.Position{
									Column: 3,
									Line:   87,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   87,
									},
									File:   "geo.flux",
									Source: "_columns",
									Start: ast.Position{
										Column: 3,
										Line:   87,
									},
								},
							},
							Name: "_columns",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   88,
												},
												File:   "geo.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 5,
													Line:   88,
												},
											},
										},
										Name: "tables",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   89,
											},
											File:   "geo.flux",
											Source: "tables\n      |> columns()",
											Start: ast.Position{
												Column: 5,
												Line:   88,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: nil,
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   89,
												},
												File:   "geo.flux",
												Source: "columns()",
												Start: ast.Position{
													Column: 10,
													Line:   89,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   89,
													},
													File:   "geo.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 10,
														Line:   89,
													},
												},
											},
											Name: "columns",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   90,
										},
										File:   "geo.flux",
										Source: "tables\n      |> columns()\n      |> tableFind(fn: (key) => true )",
										Start: ast.Position{
											Column: 5,
											Line:   88,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   90,
												},
												File:   "geo.flux",
												Source: "fn: (key) => true",
												Start: ast.Position{
													Column: 20,
													Line:   90,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   90,
													},
													File:   "geo.flux",
													Source: "fn: (key) => true",
													Start: ast.Position{
														Column: 20,
														Line:   90,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   90,
														},
														File:   "geo.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 20,
															Line:   90,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   90,
														},
														File:   "geo.flux",
														Source: "(key) => true",
														Start: ast.Position{
															Column: 24,
															Line:   90,
														},
													},
												},
												Body: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   90,
															},
															File:   "geo.flux",
															Source: "true",
															Start: ast.Position{
																Column: 33,
																Line:   90,
															},
														},
													},
													Name: "true",
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   90,
															},
															File:   "geo.flux",
															Source: "key",
															Start: ast.Position{
																Column: 25,
																Line:   90,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 28,
																	Line:   90,
																},
																File:   "geo.flux",
																Source: "key",
																Start: ast.Position{
																	Column: 25,
																	Line:   90,
																},
															},
														},
														Name: "key",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   90,
											},
											File:   "geo.flux",
											Source: "tableFind(fn: (key) => true )",
											Start: ast.Position{
												Column: 10,
												Line:   90,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   90,
												},
												File:   "geo.flux",
												Source: "tableFind",
												Start: ast.Position{
													Column: 10,
													Line:   90,
												},
											},
										},
										Name: "tableFind",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   91,
									},
									File:   "geo.flux",
									Source: "tables\n      |> columns()\n      |> tableFind(fn: (key) => true )\n      |> getColumn(column: \"_value\")",
									Start: ast.Position{
										Column: 5,
										Line:   88,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   91,
											},
											File:   "geo.flux",
											Source: "column: \"_value\"",
											Start: ast.Position{
												Column: 20,
												Line:   91,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   91,
												},
												File:   "geo.flux",
												Source: "column: \"_value\"",
												Start: ast.Position{
													Column: 20,
													Line:   91,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   91,
													},
													File:   "geo.flux",
													Source: "column",
													Start: ast.Position{
														Column: 20,
														Line:   91,
													},
												},
											},
											Name: "column",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   91,
													},
													File:   "geo.flux",
													Source: "\"_value\"",
													Start: ast.Position{
														Column: 28,
														Line:   91,
													},
												},
											},
											Value: "_value",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   91,
										},
										File:   "geo.flux",
										Source: "getColumn(column: \"_value\")",
										Start: ast.Position{
											Column: 10,
											Line:   91,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   91,
											},
											File:   "geo.flux",
											Source: "getColumn",
											Start: ast.Position{
												Column: 10,
												Line:   91,
											},
										},
									},
									Name: "getColumn",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   99,
								},
								File:   "geo.flux",
								Source: "_rows =\n    if contains(value: \"lat\", set: _columns) then\n      tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)\n    else\n      tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)\n        |> toRows(correlationKey)",
								Start: ast.Position{
									Column: 3,
									Line:   92,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   92,
									},
									File:   "geo.flux",
									Source: "_rows",
									Start: ast.Position{
										Column: 3,
										Line:   92,
									},
								},
							},
							Name: "_rows",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   97,
												},
												File:   "geo.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 7,
													Line:   97,
												},
											},
										},
										Name: "tables",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 118,
												Line:   98,
											},
											File:   "geo.flux",
											Source: "tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)",
											Start: ast.Position{
												Column: 7,
												Line:   97,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 117,
														Line:   98,
													},
													File:   "geo.flux",
													Source: "region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel",
													Start: ast.Position{
														Column: 23,
														Line:   98,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   98,
														},
														File:   "geo.flux",
														Source: "region: region",
														Start: ast.Position{
															Column: 23,
															Line:   98,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 29,
																Line:   98,
															},
															File:   "geo.flux",
															Source: "region",
															Start: ast.Position{
																Column: 23,
																Line:   98,
															},
														},
													},
													Name: "region",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   98,
															},
															File:   "geo.flux",
															Source: "region",
															Start: ast.Position{
																Column: 31,
																Line:   98,
															},
														},
													},
													Name: "region",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   98,
														},
														File:   "geo.flux",
														Source: "minSize: minSize",
														Start: ast.Position{
															Column: 39,
															Line:   98,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 46,
																Line:   98,
															},
															File:   "geo.flux",
															Source: "minSize",
															Start: ast.Position{
																Column: 39,
																Line:   98,
															},
														},
													},
													Name: "minSize",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 55,
																Line:   98,
															},
															File:   "geo.flux",
															Source: "minSize",
															Start: ast.Position{
																Column: 48,
																Line:   98,
															},
														},
													},
													Name: "minSize",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 73,
															Line:   98,
														},
														File:   "geo.flux",
														Source: "maxSize: maxSize",
														Start: ast.Position{
															Column: 57,
															Line:   98,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 64,
																Line:   98,
															},
															File:   "geo.flux",
															Source: "maxSize",
															Start: ast.Position{
																Column: 57,
																Line:   98,
															},
														},
													},
													Name: "maxSize",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 73,
																Line:   98,
															},
															File:   "geo.flux",
															Source: "maxSize",
															Start: ast.Position{
																Column: 66,
																Line:   98,
															},
														},
													},
													Name: "maxSize",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 87,
															Line:   98,
														},
														File:   "geo.flux",
														Source: "level: level",
														Start: ast.Position{
															Column: 75,
															Line:   98,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 80,
																Line:   98,
															},
															File:   "geo.flux",
															Source: "level",
															Start: ast.Position{
																Column: 75,
																Line:   98,
															},
														},
													},
													Name: "level",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 87,
																Line:   98,
															},
															File:   "geo.flux",
															Source: "level",
															Start: ast.Position{
																Column: 82,
																Line:   98,
															},
														},
													},
													Name: "level",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 117,
															Line:   98,
														},
														File:   "geo.flux",
														Source: "s2cellIDLevel: s2cellIDLevel",
														Start: ast.Position{
															Column: 89,
															Line:   98,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 102,
																Line:   98,
															},
															File:   "geo.flux",
															Source: "s2cellIDLevel",
															Start: ast.Position{
																Column: 89,
																Line:   98,
															},
														},
													},
													Name: "s2cellIDLevel",
												},
												Value: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 117,
																Line:   98,
															},
															File:   "geo.flux",
															Source: "s2cellIDLevel",
															Start: ast.Position{
																Column: 104,
																Line:   98,
															},
														},
													},
													Name: "s2cellIDLevel",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 118,
													Line:   98,
												},
												File:   "geo.flux",
												Source: "gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)",
												Start: ast.Position{
													Column: 12,
													Line:   98,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   98,
													},
													File:   "geo.flux",
													Source: "gridFilter",
													Start: ast.Position{
														Column: 12,
														Line:   98,
													},
												},
											},
											Name: "gridFilter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   99,
										},
										File:   "geo.flux",
										Source: "tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)\n        |> toRows(correlationKey)",
										Start: ast.Position{
											Column: 7,
											Line:   97,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   99,
												},
												File:   "geo.flux",
												Source: "correlationKey",
												Start: ast.Position{
													Column: 19,
													Line:   99,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   99,
													},
													File:   "geo.flux",
													Source: "correlationKey",
													Start: ast.Position{
														Column: 19,
														Line:   99,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 33,
															Line:   99,
														},
														File:   "geo.flux",
														Source: "correlationKey",
														Start: ast.Position{
															Column: 19,
															Line:   99,
														},
													},
												},
												Name: "correlationKey",
											},
											Value: nil,
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   99,
											},
											File:   "geo.flux",
											Source: "toRows(correlationKey)",
											Start: ast.Position{
												Column: 12,
												Line:   99,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   99,
												},
												File:   "geo.flux",
												Source: "toRows",
												Start: ast.Position{
													Column: 12,
													Line:   99,
												},
											},
										},
										Name: "toRows",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   99,
									},
									File:   "geo.flux",
									Source: "if contains(value: \"lat\", set: _columns) then\n      tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)\n    else\n      tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)\n        |> toRows(correlationKey)",
									Start: ast.Position{
										Column: 5,
										Line:   93,
									},
								},
							},
							Consequent: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   94,
											},
											File:   "geo.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 7,
												Line:   94,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 118,
											Line:   95,
										},
										File:   "geo.flux",
										Source: "tables\n        |> gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)",
										Start: ast.Position{
											Column: 7,
											Line:   94,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 117,
													Line:   95,
												},
												File:   "geo.flux",
												Source: "region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel",
												Start: ast.Position{
													Column: 23,
													Line:   95,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   95,
													},
													File:   "geo.flux",
													Source: "region: region",
													Start: ast.Position{
														Column: 23,
														Line:   95,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   95,
														},
														File:   "geo.flux",
														Source: "region",
														Start: ast.Position{
															Column: 23,
															Line:   95,
														},
													},
												},
												Name: "region",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   95,
														},
														File:   "geo.flux",
														Source: "region",
														Start: ast.Position{
															Column: 31,
															Line:   95,
														},
													},
												},
												Name: "region",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 55,
														Line:   95,
													},
													File:   "geo.flux",
													Source: "minSize: minSize",
													Start: ast.Position{
														Column: 39,
														Line:   95,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 46,
															Line:   95,
														},
														File:   "geo.flux",
														Source: "minSize",
														Start: ast.Position{
															Column: 39,
															Line:   95,
														},
													},
												},
												Name: "minSize",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   95,
														},
														File:   "geo.flux",
														Source: "minSize",
														Start: ast.Position{
															Column: 48,
															Line:   95,
														},
													},
												},
												Name: "minSize",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 73,
														Line:   95,
													},
													File:   "geo.flux",
													Source: "maxSize: maxSize",
													Start: ast.Position{
														Column: 57,
														Line:   95,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 64,
															Line:   95,
														},
														File:   "geo.flux",
														Source: "maxSize",
														Start: ast.Position{
															Column: 57,
															Line:   95,
														},
													},
												},
												Name: "maxSize",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 73,
															Line:   95,
														},
														File:   "geo.flux",
														Source: "maxSize",
														Start: ast.Position{
															Column: 66,
															Line:   95,
														},
													},
												},
												Name: "maxSize",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 87,
														Line:   95,
													},
													File:   "geo.flux",
													Source: "level: level",
													Start: ast.Position{
														Column: 75,
														Line:   95,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 80,
															Line:   95,
														},
														File:   "geo.flux",
														Source: "level",
														Start: ast.Position{
															Column: 75,
															Line:   95,
														},
													},
												},
												Name: "level",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 87,
															Line:   95,
														},
														File:   "geo.flux",
														Source: "level",
														Start: ast.Position{
															Column: 82,
															Line:   95,
														},
													},
												},
												Name: "level",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 117,
														Line:   95,
													},
													File:   "geo.flux",
													Source: "s2cellIDLevel: s2cellIDLevel",
													Start: ast.Position{
														Column: 89,
														Line:   95,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 102,
															Line:   95,
														},
														File:   "geo.flux",
														Source: "s2cellIDLevel",
														Start: ast.Position{
															Column: 89,
															Line:   95,
														},
													},
												},
												Name: "s2cellIDLevel",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 117,
															Line:   95,
														},
														File:   "geo.flux",
														Source: "s2cellIDLevel",
														Start: ast.Position{
															Column: 104,
															Line:   95,
														},
													},
												},
												Name: "s2cellIDLevel",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 118,
												Line:   95,
											},
											File:   "geo.flux",
											Source: "gridFilter(region: region, minSize: minSize, maxSize: maxSize, level: level, s2cellIDLevel: s2cellIDLevel)",
											Start: ast.Position{
												Column: 12,
												Line:   95,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   95,
												},
												File:   "geo.flux",
												Source: "gridFilter",
												Start: ast.Position{
													Column: 12,
													Line:   95,
												},
											},
										},
										Name: "gridFilter",
									},
								},
							},
							Test: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   93,
											},
											File:   "geo.flux",
											Source: "value: \"lat\", set: _columns",
											Start: ast.Position{
												Column: 17,
												Line:   93,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   93,
												},
												File:   "geo.flux",
												Source: "value: \"lat\"",
												Start: ast.Position{
													Column: 17,
													Line:   93,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   93,
													},
													File:   "geo.flux",
													Source: "value",
													Start: ast.Position{
														Column: 17,
														Line:   93,
													},
												},
											},
											Name: "value",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   93,
													},
													File:   "geo.flux",
													Source: "\"lat\"",
													Start: ast.Position{
														Column: 24,
														Line:   93,
													},
												},
											},
											Value: "lat",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   93,
												},
												File:   "geo.flux",
												Source: "set: _columns",
												Start: ast.Position{
													Column: 31,
													Line:   93,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   93,
													},
													File:   "geo.flux",
													Source: "set",
													Start: ast.Position{
														Column: 31,
														Line:   93,
													},
												},
											},
											Name: "set",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   93,
													},
													File:   "geo.flux",
													Source: "_columns",
													Start: ast.Position{
														Column: 36,
														Line:   93,
													},
												},
											},
											Name: "_columns",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   93,
										},
										File:   "geo.flux",
										Source: "contains(value: \"lat\", set: _columns)",
										Start: ast.Position{
											Column: 8,
											Line:   93,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   93,
											},
											File:   "geo.flux",
											Source: "contains",
											Start: ast.Position{
												Column: 8,
												Line:   93,
											},
										},
									},
									Name: "contains",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   105,
								},
								File:   "geo.flux",
								Source: "_result =\n    if strict then\n      _rows\n        |> strictFilter(region)\n    else\n      _rows",
								Start: ast.Position{
									Column: 3,
									Line:   100,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   100,
									},
									File:   "geo.flux",
									Source: "_result",
									Start: ast.Position{
										Column: 3,
										Line:   100,
									},
								},
							},
							Name: "_result",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   105,
										},
										File:   "geo.flux",
										Source: "_rows",
										Start: ast.Position{
											Column: 7,
											Line:   105,
										},
									},
								},
								Name: "_rows",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   105,
									},
									File:   "geo.flux",
									Source: "if strict then\n      _rows\n        |> strictFilter(region)\n    else\n      _rows",
									Start: ast.Position{
										Column: 5,
										Line:   101,
									},
								},
							},
							Consequent: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   102,
											},
											File:   "geo.flux",
											Source: "_rows",
											Start: ast.Position{
												Column: 7,
												Line:   102,
											},
										},
									},
									Name: "_rows",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   103,
										},
										File:   "geo.flux",
										Source: "_rows\n        |> strictFilter(region)",
										Start: ast.Position{
											Column: 7,
											Line:   102,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   103,
												},
												File:   "geo.flux",
												Source: "region",
												Start: ast.Position{
													Column: 25,
													Line:   103,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   103,
													},
													File:   "geo.flux",
													Source: "region",
													Start: ast.Position{
														Column: 25,
														Line:   103,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   103,
														},
														File:   "geo.flux",
														Source: "region",
														Start: ast.Position{
															Column: 25,
															Line:   103,
														},
													},
												},
												Name: "region",
											},
											Value: nil,
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   103,
											},
											File:   "geo.flux",
											Source: "strictFilter(region)",
											Start: ast.Position{
												Column: 12,
												Line:   103,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   103,
												},
												File:   "geo.flux",
												Source: "strictFilter",
												Start: ast.Position{
													Column: 12,
													Line:   103,
												},
											},
										},
										Name: "strictFilter",
									},
								},
							},
							Test: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   101,
										},
										File:   "geo.flux",
										Source: "strict",
										Start: ast.Position{
											Column: 8,
											Line:   101,
										},
									},
								},
								Name: "strict",
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   106,
									},
									File:   "geo.flux",
									Source: "_result",
									Start: ast.Position{
										Column: 10,
										Line:   106,
									},
								},
							},
							Name: "_result",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   106,
								},
								File:   "geo.flux",
								Source: "return _result",
								Start: ast.Position{
									Column: 3,
									Line:   106,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   86,
							},
							File:   "geo.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 15,
								Line:   86,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   86,
								},
								File:   "geo.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 15,
									Line:   86,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   86,
							},
							File:   "geo.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   86,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   86,
							},
							File:   "geo.flux",
							Source: "region",
							Start: ast.Position{
								Column: 26,
								Line:   86,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   86,
								},
								File:   "geo.flux",
								Source: "region",
								Start: ast.Position{
									Column: 26,
									Line:   86,
								},
							},
						},
						Name: "region",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 44,
								Line:   86,
							},
							File:   "geo.flux",
							Source: "minSize=24",
							Start: ast.Position{
								Column: 34,
								Line:   86,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   86,
								},
								File:   "geo.flux",
								Source: "minSize",
								Start: ast.Position{
									Column: 34,
									Line:   86,
								},
							},
						},
						Name: "minSize",
					},
					Value: &ast.IntegerLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   86,
								},
								File:   "geo.flux",
								Source: "24",
								Start: ast.Position{
									Column: 42,
									Line:   86,
								},
							},
						},
						Value: int64(24),
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 56,
								Line:   86,
							},
							File:   "geo.flux",
							Source: "maxSize=-1",
							Start: ast.Position{
								Column: 46,
								Line:   86,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   86,
								},
								File:   "geo.flux",
								Source: "maxSize",
								Start: ast.Position{
									Column: 46,
									Line:   86,
								},
							},
						},
						Name: "maxSize",
					},
					Value: &ast.UnaryExpression{
						Argument: &ast.IntegerLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   86,
									},
									File:   "geo.flux",
									Source: "1",
									Start: ast.Position{
										Column: 55,
										Line:   86,
									},
								},
							},
							Value: int64(1),
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   86,
								},
								File:   "geo.flux",
								Source: "-1",
								Start: ast.Position{
									Column: 54,
									Line:   86,
								},
							},
						},
						Operator: 6,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 66,
								Line:   86,
							},
							File:   "geo.flux",
							Source: "level=-1",
							Start: ast.Position{
								Column: 58,
								Line:   86,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   86,
								},
								File:   "geo.flux",
								Source: "level",
								Start: ast.Position{
									Column: 58,
									Line:   86,
								},
							},
						},
						Name: "level",
					},
					Value: &ast.UnaryExpression{
						Argument: &ast.IntegerLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   86,
									},
									File:   "geo.flux",
									Source: "1",
									Start: ast.Position{
										Column: 65,
										Line:   86,
									},
								},
							},
							Value: int64(1),
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   86,
								},
								File:   "geo.flux",
								Source: "-1",
								Start: ast.Position{
									Column: 64,
									Line:   86,
								},
							},
						},
						Operator: 6,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 84,
								Line:   86,
							},
							File:   "geo.flux",
							Source: "s2cellIDLevel=-1",
							Start: ast.Position{
								Column: 68,
								Line:   86,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   86,
								},
								File:   "geo.flux",
								Source: "s2cellIDLevel",
								Start: ast.Position{
									Column: 68,
									Line:   86,
								},
							},
						},
						Name: "s2cellIDLevel",
					},
					Value: &ast.UnaryExpression{
						Argument: &ast.IntegerLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 84,
										Line:   86,
									},
									File:   "geo.flux",
									Source: "1",
									Start: ast.Position{
										Column: 83,
										Line:   86,
									},
								},
							},
							Value: int64(1),
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 84,
									Line:   86,
								},
								File:   "geo.flux",
								Source: "-1",
								Start: ast.Position{
									Column: 82,
									Line:   86,
								},
							},
						},
						Operator: 6,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 110,
								Line:   86,
							},
							File:   "geo.flux",
							Source: "correlationKey=[\"_time\"]",
							Start: ast.Position{
								Column: 86,
								Line:   86,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 100,
									Line:   86,
								},
								File:   "geo.flux",
								Source: "correlationKey",
								Start: ast.Position{
									Column: 86,
									Line:   86,
								},
							},
						},
						Name: "correlationKey",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 110,
									Line:   86,
								},
								File:   "geo.flux",
								Source: "[\"_time\"]",
								Start: ast.Position{
									Column: 101,
									Line:   86,
								},
							},
						},
						Elements: []ast.Expression{&ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 109,
										Line:   86,
									},
									File:   "geo.flux",
									Source: "\"_time\"",
									Start: ast.Position{
										Column: 102,
										Line:   86,
									},
								},
							},
							Value: "_time",
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 123,
								Line:   86,
							},
							File:   "geo.flux",
							Source: "strict=true",
							Start: ast.Position{
								Column: 112,
								Line:   86,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 118,
									Line:   86,
								},
								File:   "geo.flux",
								Source: "strict",
								Start: ast.Position{
									Column: 112,
									Line:   86,
								},
							},
						},
						Name: "strict",
					},
					Value: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 123,
									Line:   86,
								},
								File:   "geo.flux",
								Source: "true",
								Start: ast.Position{
									Column: 119,
									Line:   86,
								},
							},
						},
						Name: "true",
					},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   137,
					},
					File:   "geo.flux",
					Source: "groupByArea = (tables=<-, newColumn, level, s2cellIDLevel=-1) => {\n  _s2cellIDLevel =\n    if s2cellIDLevel == -1 then\n      tables\n        |> _detectLevel()\n    else\n      s2cellIDLevel\n  _prepared =\n    if level == _s2cellIDLevel then\n      tables\n\t    |> duplicate(column: \"s2_cell_id\", as: newColumn)\n    else\n      tables\n        |> map(fn: (r) => ({\n             r with\n               _s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)\n           }))\n        |> rename(columns: { _s2_cell_id_xxx: newColumn })\n  return\n    _prepared\n      |> group(columns: [newColumn])\n}",
					Start: ast.Position{
						Column: 1,
						Line:   116,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   116,
						},
						File:   "geo.flux",
						Source: "groupByArea",
						Start: ast.Position{
							Column: 1,
							Line:   116,
						},
					},
				},
				Name: "groupByArea",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   137,
						},
						File:   "geo.flux",
						Source: "(tables=<-, newColumn, level, s2cellIDLevel=-1) => {\n  _s2cellIDLevel =\n    if s2cellIDLevel == -1 then\n      tables\n        |> _detectLevel()\n    else\n      s2cellIDLevel\n  _prepared =\n    if level == _s2cellIDLevel then\n      tables\n\t    |> duplicate(column: \"s2_cell_id\", as: newColumn)\n    else\n      tables\n        |> map(fn: (r) => ({\n             r with\n               _s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)\n           }))\n        |> rename(columns: { _s2_cell_id_xxx: newColumn })\n  return\n    _prepared\n      |> group(columns: [newColumn])\n}",
						Start: ast.Position{
							Column: 15,
							Line:   116,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   137,
							},
							File:   "geo.flux",
							Source: "{\n  _s2cellIDLevel =\n    if s2cellIDLevel == -1 then\n      tables\n        |> _detectLevel()\n    else\n      s2cellIDLevel\n  _prepared =\n    if level == _s2cellIDLevel then\n      tables\n\t    |> duplicate(column: \"s2_cell_id\", as: newColumn)\n    else\n      tables\n        |> map(fn: (r) => ({\n             r with\n               _s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)\n           }))\n        |> rename(columns: { _s2_cell_id_xxx: newColumn })\n  return\n    _prepared\n      |> group(columns: [newColumn])\n}",
							Start: ast.Position{
								Column: 66,
								Line:   116,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   122,
								},
								File:   "geo.flux",
								Source: "_s2cellIDLevel =\n    if s2cellIDLevel == -1 then\n      tables\n        |> _detectLevel()\n    else\n      s2cellIDLevel",
								Start: ast.Position{
									Column: 3,
									Line:   117,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   117,
									},
									File:   "geo.flux",
									Source: "_s2cellIDLevel",
									Start: ast.Position{
										Column: 3,
										Line:   117,
									},
								},
							},
							Name: "_s2cellIDLevel",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   122,
										},
										File:   "geo.flux",
										Source: "s2cellIDLevel",
										Start: ast.Position{
											Column: 7,
											Line:   122,
										},
									},
								},
								Name: "s2cellIDLevel",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   122,
									},
									File:   "geo.flux",
									Source: "if s2cellIDLevel == -1 then\n      tables\n        |> _detectLevel()\n    else\n      s2cellIDLevel",
									Start: ast.Position{
										Column: 5,
										Line:   118,
									},
								},
							},
							Consequent: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   119,
											},
											File:   "geo.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 7,
												Line:   119,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   120,
										},
										File:   "geo.flux",
										Source: "tables\n        |> _detectLevel()",
										Start: ast.Position{
											Column: 7,
											Line:   119,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: nil,
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   120,
											},
											File:   "geo.flux",
											Source: "_detectLevel()",
											Start: ast.Position{
												Column: 12,
												Line:   120,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   120,
												},
												File:   "geo.flux",
												Source: "_detectLevel",
												Start: ast.Position{
													Column: 12,
													Line:   120,
												},
											},
										},
										Name: "_detectLevel",
									},
								},
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   118,
										},
										File:   "geo.flux",
										Source: "s2cellIDLevel == -1",
										Start: ast.Position{
											Column: 8,
											Line:   118,
										},
									},
								},
								Left: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   118,
											},
											File:   "geo.flux",
											Source: "s2cellIDLevel",
											Start: ast.Position{
												Column: 8,
												Line:   118,
											},
										},
									},
									Name: "s2cellIDLevel",
								},
								Operator: 17,
								Right: &ast.UnaryExpression{
									Argument: &ast.IntegerLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   118,
												},
												File:   "geo.flux",
												Source: "1",
												Start: ast.Position{
													Column: 26,
													Line:   118,
												},
											},
										},
										Value: int64(1),
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   118,
											},
											File:   "geo.flux",
											Source: "-1",
											Start: ast.Position{
												Column: 25,
												Line:   118,
											},
										},
									},
									Operator: 6,
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   133,
								},
								File:   "geo.flux",
								Source: "_prepared =\n    if level == _s2cellIDLevel then\n      tables\n\t    |> duplicate(column: \"s2_cell_id\", as: newColumn)\n    else\n      tables\n        |> map(fn: (r) => ({\n             r with\n               _s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)\n           }))\n        |> rename(columns: { _s2_cell_id_xxx: newColumn })",
								Start: ast.Position{
									Column: 3,
									Line:   123,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   123,
									},
									File:   "geo.flux",
									Source: "_prepared",
									Start: ast.Position{
										Column: 3,
										Line:   123,
									},
								},
							},
							Name: "_prepared",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   128,
												},
												File:   "geo.flux",
												Source: "tables",
												Start: ast.Position{
													Column: 7,
													Line:   128,
												},
											},
										},
										Name: "tables",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   132,
											},
											File:   "geo.flux",
											Source: "tables\n        |> map(fn: (r) => ({\n             r with\n               _s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)\n           }))",
											Start: ast.Position{
												Column: 7,
												Line:   128,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 14,
														Line:   132,
													},
													File:   "geo.flux",
													Source: "fn: (r) => ({\n             r with\n               _s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)\n           })",
													Start: ast.Position{
														Column: 16,
														Line:   129,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 14,
															Line:   132,
														},
														File:   "geo.flux",
														Source: "fn: (r) => ({\n             r with\n               _s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)\n           })",
														Start: ast.Position{
															Column: 16,
															Line:   129,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   129,
															},
															File:   "geo.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 16,
																Line:   129,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 14,
																Line:   132,
															},
															File:   "geo.flux",
															Source: "(r) => ({\n             r with\n               _s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)\n           })",
															Start: ast.Position{
																Column: 20,
																Line:   129,
															},
														},
													},
													Body: &ast.ParenExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 14,
																	Line:   132,
																},
																File:   "geo.flux",
																Source: "({\n             r with\n               _s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)\n           })",
																Start: ast.Position{
																	Column: 27,
																	Line:   129,
																},
															},
														},
														Expression: &ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 13,
																		Line:   132,
																	},
																	File:   "geo.flux",
																	Source: "{\n             r with\n               _s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)\n           }",
																	Start: ast.Position{
																		Column: 28,
																		Line:   129,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 93,
																			Line:   131,
																		},
																		File:   "geo.flux",
																		Source: "_s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)",
																		Start: ast.Position{
																			Column: 16,
																			Line:   131,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 31,
																				Line:   131,
																			},
																			File:   "geo.flux",
																			Source: "_s2_cell_id_xxx",
																			Start: ast.Position{
																				Column: 16,
																				Line:   131,
																			},
																		},
																	},
																	Name: "_s2_cell_id_xxx",
																},
																Value: &ast.CallExpression{
																	Arguments: []ast.Expression{&ast.ObjectExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 92,
																					Line:   131,
																				},
																				File:   "geo.flux",
																				Source: "point: {lat: r.lat, lon: r.lon}, level: level",
																				Start: ast.Position{
																					Column: 47,
																					Line:   131,
																				},
																			},
																		},
																		Properties: []*ast.Property{&ast.Property{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 78,
																						Line:   131,
																					},
																					File:   "geo.flux",
																					Source: "point: {lat: r.lat, lon: r.lon}",
																					Start: ast.Position{
																						Column: 47,
																						Line:   131,
																					},
																				},
																			},
																			Key: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 52,
																							Line:   131,
																						},
																						File:   "geo.flux",
																						Source: "point",
																						Start: ast.Position{
																							Column: 47,
																							Line:   131,
																						},
																					},
																				},
																				Name: "point",
																			},
																			Value: &ast.ObjectExpression{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 78,
																							Line:   131,
																						},
																						File:   "geo.flux",
																						Source: "{lat: r.lat, lon: r.lon}",
																						Start: ast.Position{
																							Column: 54,
																							Line:   131,
																						},
																					},
																				},
																				Properties: []*ast.Property{&ast.Property{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 65,
																								Line:   131,
																							},
																							File:   "geo.flux",
																							Source: "lat: r.lat",
																							Start: ast.Position{
																								Column: 55,
																								Line:   131,
																							},
																						},
																					},
																					Key: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 58,
																									Line:   131,
																								},
																								File:   "geo.flux",
																								Source: "lat",
																								Start: ast.Position{
																									Column: 55,
																									Line:   131,
																								},
																							},
																						},
																						Name: "lat",
																					},
																					Value: &ast.MemberExpression{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 65,
																									Line:   131,
																								},
																								File:   "geo.flux",
																								Source: "r.lat",
																								Start: ast.Position{
																									Column: 60,
																									Line:   131,
																								},
																							},
																						},
																						Object: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 61,
																										Line:   131,
																									},
																									File:   "geo.flux",
																									Source: "r",
																									Start: ast.Position{
																										Column: 60,
																										Line:   131,
																									},
																								},
																							},
																							Name: "r",
																						},
																						Property: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 65,
																										Line:   131,
																									},
																									File:   "geo.flux",
																									Source: "lat",
																									Start: ast.Position{
																										Column: 62,
																										Line:   131,
																									},
																								},
																							},
																							Name: "lat",
																						},
																					},
																				}, &ast.Property{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 77,
																								Line:   131,
																							},
																							File:   "geo.flux",
																							Source: "lon: r.lon",
																							Start: ast.Position{
																								Column: 67,
																								Line:   131,
																							},
																						},
																					},
																					Key: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 70,
																									Line:   131,
																								},
																								File:   "geo.flux",
																								Source: "lon",
																								Start: ast.Position{
																									Column: 67,
																									Line:   131,
																								},
																							},
																						},
																						Name: "lon",
																					},
																					Value: &ast.MemberExpression{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 77,
																									Line:   131,
																								},
																								File:   "geo.flux",
																								Source: "r.lon",
																								Start: ast.Position{
																									Column: 72,
																									Line:   131,
																								},
																							},
																						},
																						Object: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 73,
																										Line:   131,
																									},
																									File:   "geo.flux",
																									Source: "r",
																									Start: ast.Position{
																										Column: 72,
																										Line:   131,
																									},
																								},
																							},
																							Name: "r",
																						},
																						Property: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 77,
																										Line:   131,
																									},
																									File:   "geo.flux",
																									Source: "lon",
																									Start: ast.Position{
																										Column: 74,
																										Line:   131,
																									},
																								},
																							},
																							Name: "lon",
																						},
																					},
																				}},
																				With: nil,
																			},
																		}, &ast.Property{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 92,
																						Line:   131,
																					},
																					File:   "geo.flux",
																					Source: "level: level",
																					Start: ast.Position{
																						Column: 80,
																						Line:   131,
																					},
																				},
																			},
																			Key: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 85,
																							Line:   131,
																						},
																						File:   "geo.flux",
																						Source: "level",
																						Start: ast.Position{
																							Column: 80,
																							Line:   131,
																						},
																					},
																				},
																				Name: "level",
																			},
																			Value: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 92,
																							Line:   131,
																						},
																						File:   "geo.flux",
																						Source: "level",
																						Start: ast.Position{
																							Column: 87,
																							Line:   131,
																						},
																					},
																				},
																				Name: "level",
																			},
																		}},
																		With: nil,
																	}},
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 93,
																				Line:   131,
																			},
																			File:   "geo.flux",
																			Source: "s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)",
																			Start: ast.Position{
																				Column: 33,
																				Line:   131,
																			},
																		},
																	},
																	Callee: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 46,
																					Line:   131,
																				},
																				File:   "geo.flux",
																				Source: "s2CellIDToken",
																				Start: ast.Position{
																					Column: 33,
																					Line:   131,
																				},
																			},
																		},
																		Name: "s2CellIDToken",
																	},
																},
															}},
															With: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 15,
																			Line:   130,
																		},
																		File:   "geo.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 14,
																			Line:   130,
																		},
																	},
																},
																Name: "r",
															},
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   129,
																},
																File:   "geo.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 21,
																	Line:   129,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 22,
																		Line:   129,
																	},
																	File:   "geo.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 21,
																		Line:   129,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   132,
												},
												File:   "geo.flux",
												Source: "map(fn: (r) => ({\n             r with\n               _s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)\n           }))",
												Start: ast.Position{
													Column: 12,
													Line:   129,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 15,
														Line:   129,
													},
													File:   "geo.flux",
													Source: "map",
													Start: ast.Position{
														Column: 12,
														Line:   129,
													},
												},
											},
											Name: "map",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   133,
										},
										File:   "geo.flux",
										Source: "tables\n        |> map(fn: (r) => ({\n             r with\n               _s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)\n           }))\n        |> rename(columns: { _s2_cell_id_xxx: newColumn })",
										Start: ast.Position{
											Column: 7,
											Line:   128,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 58,
													Line:   133,
												},
												File:   "geo.flux",
												Source: "columns: { _s2_cell_id_xxx: newColumn }",
												Start: ast.Position{
													Column: 19,
													Line:   133,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 58,
														Line:   133,
													},
													File:   "geo.flux",
													Source: "columns: { _s2_cell_id_xxx: newColumn }",
													Start: ast.Position{
														Column: 19,
														Line:   133,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 26,
															Line:   133,
														},
														File:   "geo.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 19,
															Line:   133,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   133,
														},
														File:   "geo.flux",
														Source: "{ _s2_cell_id_xxx: newColumn }",
														Start: ast.Position{
															Column: 28,
															Line:   133,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 56,
																Line:   133,
															},
															File:   "geo.flux",
															Source: "_s2_cell_id_xxx: newColumn",
															Start: ast.Position{
																Column: 30,
																Line:   133,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 45,
																	Line:   133,
																},
																File:   "geo.flux",
																Source: "_s2_cell_id_xxx",
																Start: ast.Position{
																	Column: 30,
																	Line:   133,
																},
															},
														},
														Name: "_s2_cell_id_xxx",
													},
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 56,
																	Line:   133,
																},
																File:   "geo.flux",
																Source: "newColumn",
																Start: ast.Position{
																	Column: 47,
																	Line:   133,
																},
															},
														},
														Name: "newColumn",
													},
												}},
												With: nil,
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   133,
											},
											File:   "geo.flux",
											Source: "rename(columns: { _s2_cell_id_xxx: newColumn })",
											Start: ast.Position{
												Column: 12,
												Line:   133,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   133,
												},
												File:   "geo.flux",
												Source: "rename",
												Start: ast.Position{
													Column: 12,
													Line:   133,
												},
											},
										},
										Name: "rename",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   133,
									},
									File:   "geo.flux",
									Source: "if level == _s2cellIDLevel then\n      tables\n\t    |> duplicate(column: \"s2_cell_id\", as: newColumn)\n    else\n      tables\n        |> map(fn: (r) => ({\n             r with\n               _s2_cell_id_xxx: s2CellIDToken(point: {lat: r.lat, lon: r.lon}, level: level)\n           }))\n        |> rename(columns: { _s2_cell_id_xxx: newColumn })",
									Start: ast.Position{
										Column: 5,
										Line:   124,
									},
								},
							},
							Consequent: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   125,
											},
											File:   "geo.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 7,
												Line:   125,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   126,
										},
										File:   "geo.flux",
										Source: "tables\n\t    |> duplicate(column: \"s2_cell_id\", as: newColumn)",
										Start: ast.Position{
											Column: 7,
											Line:   125,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   126,
												},
												File:   "geo.flux",
												Source: "column: \"s2_cell_id\", as: newColumn",
												Start: ast.Position{
													Column: 19,
													Line:   126,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 39,
														Line:   126,
													},
													File:   "geo.flux",
													Source: "column: \"s2_cell_id\"",
													Start: ast.Position{
														Column: 19,
														Line:   126,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   126,
														},
														File:   "geo.flux",
														Source: "column",
														Start: ast.Position{
															Column: 19,
															Line:   126,
														},
													},
												},
												Name: "column",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 39,
															Line:   126,
														},
														File:   "geo.flux",
														Source: "\"s2_cell_id\"",
														Start: ast.Position{
															Column: 27,
															Line:   126,
														},
													},
												},
												Value: "s2_cell_id",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 54,
														Line:   126,
													},
													File:   "geo.flux",
													Source: "as: newColumn",
													Start: ast.Position{
														Column: 41,
														Line:   126,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   126,
														},
														File:   "geo.flux",
														Source: "as",
														Start: ast.Position{
															Column: 41,
															Line:   126,
														},
													},
												},
												Name: "as",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 54,
															Line:   126,
														},
														File:   "geo.flux",
														Source: "newColumn",
														Start: ast.Position{
															Column: 45,
															Line:   126,
														},
													},
												},
												Name: "newColumn",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   126,
											},
											File:   "geo.flux",
											Source: "duplicate(column: \"s2_cell_id\", as: newColumn)",
											Start: ast.Position{
												Column: 9,
												Line:   126,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   126,
												},
												File:   "geo.flux",
												Source: "duplicate",
												Start: ast.Position{
													Column: 9,
													Line:   126,
												},
											},
										},
										Name: "duplicate",
									},
								},
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   124,
										},
										File:   "geo.flux",
										Source: "level == _s2cellIDLevel",
										Start: ast.Position{
											Column: 8,
											Line:   124,
										},
									},
								},
								Left: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   124,
											},
											File:   "geo.flux",
											Source: "level",
											Start: ast.Position{
												Column: 8,
												Line:   124,
											},
										},
									},
									Name: "level",
								},
								Operator: 17,
								Right: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   124,
											},
											File:   "geo.flux",
											Source: "_s2cellIDLevel",
											Start: ast.Position{
												Column: 17,
												Line:   124,
											},
										},
									},
									Name: "_s2cellIDLevel",
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   135,
										},
										File:   "geo.flux",
										Source: "_prepared",
										Start: ast.Position{
											Column: 5,
											Line:   135,
										},
									},
								},
								Name: "_prepared",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   136,
									},
									File:   "geo.flux",
									Source: "_prepared\n      |> group(columns: [newColumn])",
									Start: ast.Position{
										Column: 5,
										Line:   135,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   136,
											},
											File:   "geo.flux",
											Source: "columns: [newColumn]",
											Start: ast.Position{
												Column: 16,
												Line:   136,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   136,
												},
												File:   "geo.flux",
												Source: "columns: [newColumn]",
												Start: ast.Position{
													Column: 16,
													Line:   136,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   136,
													},
													File:   "geo.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 16,
														Line:   136,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   136,
													},
													File:   "geo.flux",
													Source: "[newColumn]",
													Start: ast.Position{
														Column: 25,
														Line:   136,
													},
												},
											},
											Elements: []ast.Expression{&ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 35,
															Line:   136,
														},
														File:   "geo.flux",
														Source: "newColumn",
														Start: ast.Position{
															Column: 26,
															Line:   136,
														},
													},
												},
												Name: "newColumn",
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   136,
										},
										File:   "geo.flux",
										Source: "group(columns: [newColumn])",
										Start: ast.Position{
											Column: 10,
											Line:   136,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   136,
											},
											File:   "geo.flux",
											Source: "group",
											Start: ast.Position{
												Column: 10,
												Line:   136,
											},
										},
									},
									Name: "group",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   136,
								},
								File:   "geo.flux",
								Source: "return\n    _prepared\n      |> group(columns: [newColumn])",
								Start: ast.Position{
									Column: 3,
									Line:   134,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   116,
							},
							File:   "geo.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 16,
								Line:   116,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   116,
								},
								File:   "geo.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 16,
									Line:   116,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   116,
							},
							File:   "geo.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 23,
								Line:   116,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   116,
							},
							File:   "geo.flux",
							Source: "newColumn",
							Start: ast.Position{
								Column: 27,
								Line:   116,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   116,
								},
								File:   "geo.flux",
								Source: "newColumn",
								Start: ast.Position{
									Column: 27,
									Line:   116,
								},
							},
						},
						Name: "newColumn",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   116,
							},
							File:   "geo.flux",
							Source: "level",
							Start: ast.Position{
								Column: 38,
								Line:   116,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   116,
								},
								File:   "geo.flux",
								Source: "level",
								Start: ast.Position{
									Column: 38,
									Line:   116,
								},
							},
						},
						Name: "level",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 61,
								Line:   116,
							},
							File:   "geo.flux",
							Source: "s2cellIDLevel=-1",
							Start: ast.Position{
								Column: 45,
								Line:   116,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   116,
								},
								File:   "geo.flux",
								Source: "s2cellIDLevel",
								Start: ast.Position{
									Column: 45,
									Line:   116,
								},
							},
						},
						Name: "s2cellIDLevel",
					},
					Value: &ast.UnaryExpression{
						Argument: &ast.IntegerLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 61,
										Line:   116,
									},
									File:   "geo.flux",
									Source: "1",
									Start: ast.Position{
										Column: 60,
										Line:   116,
									},
								},
							},
							Value: int64(1),
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 61,
									Line:   116,
								},
								File:   "geo.flux",
								Source: "-1",
								Start: ast.Position{
									Column: 59,
									Line:   116,
								},
							},
						},
						Operator: 6,
					},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 30,
						Line:   143,
					},
					File:   "geo.flux",
					Source: "asTracks = (tables=<-, groupBy=[\"id\",\"tid\"], orderBy=[\"_time\"]) =>\n  tables\n    |> group(columns: groupBy)\n    |> sort(columns: orderBy)",
					Start: ast.Position{
						Column: 1,
						Line:   140,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   140,
						},
						File:   "geo.flux",
						Source: "asTracks",
						Start: ast.Position{
							Column: 1,
							Line:   140,
						},
					},
				},
				Name: "asTracks",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 30,
							Line:   143,
						},
						File:   "geo.flux",
						Source: "(tables=<-, groupBy=[\"id\",\"tid\"], orderBy=[\"_time\"]) =>\n  tables\n    |> group(columns: groupBy)\n    |> sort(columns: orderBy)",
						Start: ast.Position{
							Column: 12,
							Line:   140,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   141,
									},
									File:   "geo.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 3,
										Line:   141,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   142,
								},
								File:   "geo.flux",
								Source: "tables\n    |> group(columns: groupBy)",
								Start: ast.Position{
									Column: 3,
									Line:   141,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   142,
										},
										File:   "geo.flux",
										Source: "columns: groupBy",
										Start: ast.Position{
											Column: 14,
											Line:   142,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   142,
											},
											File:   "geo.flux",
											Source: "columns: groupBy",
											Start: ast.Position{
												Column: 14,
												Line:   142,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   142,
												},
												File:   "geo.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 14,
													Line:   142,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   142,
												},
												File:   "geo.flux",
												Source: "groupBy",
												Start: ast.Position{
													Column: 23,
													Line:   142,
												},
											},
										},
										Name: "groupBy",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   142,
									},
									File:   "geo.flux",
									Source: "group(columns: groupBy)",
									Start: ast.Position{
										Column: 8,
										Line:   142,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 13,
											Line:   142,
										},
										File:   "geo.flux",
										Source: "group",
										Start: ast.Position{
											Column: 8,
											Line:   142,
										},
									},
								},
								Name: "group",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   143,
							},
							File:   "geo.flux",
							Source: "tables\n    |> group(columns: groupBy)\n    |> sort(columns: orderBy)",
							Start: ast.Position{
								Column: 3,
								Line:   141,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   143,
									},
									File:   "geo.flux",
									Source: "columns: orderBy",
									Start: ast.Position{
										Column: 13,
										Line:   143,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   143,
										},
										File:   "geo.flux",
										Source: "columns: orderBy",
										Start: ast.Position{
											Column: 13,
											Line:   143,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   143,
											},
											File:   "geo.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 13,
												Line:   143,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   143,
											},
											File:   "geo.flux",
											Source: "orderBy",
											Start: ast.Position{
												Column: 22,
												Line:   143,
											},
										},
									},
									Name: "orderBy",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   143,
								},
								File:   "geo.flux",
								Source: "sort(columns: orderBy)",
								Start: ast.Position{
									Column: 8,
									Line:   143,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   143,
									},
									File:   "geo.flux",
									Source: "sort",
									Start: ast.Position{
										Column: 8,
										Line:   143,
									},
								},
							},
							Name: "sort",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   140,
							},
							File:   "geo.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 13,
								Line:   140,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   140,
								},
								File:   "geo.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 13,
									Line:   140,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   140,
							},
							File:   "geo.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 20,
								Line:   140,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 44,
								Line:   140,
							},
							File:   "geo.flux",
							Source: "groupBy=[\"id\",\"tid\"]",
							Start: ast.Position{
								Column: 24,
								Line:   140,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   140,
								},
								File:   "geo.flux",
								Source: "groupBy",
								Start: ast.Position{
									Column: 24,
									Line:   140,
								},
							},
						},
						Name: "groupBy",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   140,
								},
								File:   "geo.flux",
								Source: "[\"id\",\"tid\"]",
								Start: ast.Position{
									Column: 32,
									Line:   140,
								},
							},
						},
						Elements: []ast.Expression{&ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   140,
									},
									File:   "geo.flux",
									Source: "\"id\"",
									Start: ast.Position{
										Column: 33,
										Line:   140,
									},
								},
							},
							Value: "id",
						}, &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   140,
									},
									File:   "geo.flux",
									Source: "\"tid\"",
									Start: ast.Position{
										Column: 38,
										Line:   140,
									},
								},
							},
							Value: "tid",
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 63,
								Line:   140,
							},
							File:   "geo.flux",
							Source: "orderBy=[\"_time\"]",
							Start: ast.Position{
								Column: 46,
								Line:   140,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   140,
								},
								File:   "geo.flux",
								Source: "orderBy",
								Start: ast.Position{
									Column: 46,
									Line:   140,
								},
							},
						},
						Name: "orderBy",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 63,
									Line:   140,
								},
								File:   "geo.flux",
								Source: "[\"_time\"]",
								Start: ast.Position{
									Column: 54,
									Line:   140,
								},
							},
						},
						Elements: []ast.Expression{&ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   140,
									},
									File:   "geo.flux",
									Source: "\"_time\"",
									Start: ast.Position{
										Column: 55,
										Line:   140,
									},
								},
							},
							Value: "_time",
						}},
					},
				}},
			},
		}},
		Imports:  nil,
		Metadata: "parser-type=go",
		Name:     "geo.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   2,
					},
					File:   "geo.flux",
					Source: "package geo",
					Start: ast.Position{
						Column: 1,
						Line:   2,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   2,
						},
						File:   "geo.flux",
						Source: "geo",
						Start: ast.Position{
							Column: 9,
							Line:   2,
						},
					},
				},
				Name: "geo",
			},
		},
	}},
	Package: "geo",
	Path:    "experimental/geo",
}
