// DO NOT EDIT: This file is autogenerated via the builtin command.

package experimental

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 35,
					Line:   41,
				},
				File:   "experimental.flux",
				Source: "package experimental\n\nbuiltin addDuration : (d: duration, to: time) => time\nbuiltin subDuration : (d: duration, from: time) => time\n\n// An experimental version of group that has mode: \"extend\"\nbuiltin group : (<-tables: [A], mode: string, columns: [string]) => [A] where A: Record\n\n// objectKeys produces a list of the keys existing on the object\nbuiltin objectKeys : (o: A) => [string] where A: Record\n\n// set adds the values from the object onto each row of a table\nbuiltin set : (<-tables: [A], o: B) => [C] where A: Record, B: Record, C: Record\n\n// An experimental version of \"to\" that:\n// - Expects pivoted data\n// - Any column in the group key is made a tag in storage\n// - All other columns are fields\n// - An error will be thrown for incompatible data types\nbuiltin to : (<-tables: [A], ?bucket: string, ?bucketID: string, ?org: string, ?orgID: string, ?host: string, ?token: string) => [A] where A: Record\n\n// An experimental version of join.\nbuiltin join : (left: [A], right: [B], fn: (left: A, right: B) => C) => [C] where A: Record, B: Record, C: Record\n\nbuiltin chain : (first: [A], second: [B]) => [B] where A: Record, B: Record\n\n// Aligns all tables to a common start time by using the same _time value for\n// the first record in each table and incrementing all subsequent _time values\n// using time elapsed between input records.\n// By default, it aligns to tables to 1970-01-01T00:00:00Z UTC.\nalignTime = (tables=<-, alignTo=time(v: 0)) =>\n  tables\n    |> stateDuration(\n      fn: (r) => true,\n      column: \"timeDiff\",\n      unit: 1ns\n    )\n    |> map(fn: (r) =>\n      ({ r with _time: time(v: (int(v: alignTo ) + r.timeDiff)) })\n    )\n    |> drop(columns: [\"timeDiff\"])",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   3,
					},
					File:   "experimental.flux",
					Source: "builtin addDuration",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   3,
						},
						File:   "experimental.flux",
						Source: "addDuration",
						Start: ast.Position{
							Column: 9,
							Line:   3,
						},
					},
				},
				Name: "addDuration",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 54,
							Line:   3,
						},
						File:   "experimental.flux",
						Source: "(d: duration, to: time) => time",
						Start: ast.Position{
							Column: 23,
							Line:   3,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 54,
								Line:   3,
							},
							File:   "experimental.flux",
							Source: "(d: duration, to: time) => time",
							Start: ast.Position{
								Column: 23,
								Line:   3,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   3,
								},
								File:   "experimental.flux",
								Source: "d: duration",
								Start: ast.Position{
									Column: 24,
									Line:   3,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   3,
									},
									File:   "experimental.flux",
									Source: "d",
									Start: ast.Position{
										Column: 24,
										Line:   3,
									},
								},
							},
							Name: "d",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   3,
									},
									File:   "experimental.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 27,
										Line:   3,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   3,
										},
										File:   "experimental.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 27,
											Line:   3,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   3,
								},
								File:   "experimental.flux",
								Source: "to: time",
								Start: ast.Position{
									Column: 37,
									Line:   3,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   3,
									},
									File:   "experimental.flux",
									Source: "to",
									Start: ast.Position{
										Column: 37,
										Line:   3,
									},
								},
							},
							Name: "to",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   3,
									},
									File:   "experimental.flux",
									Source: "time",
									Start: ast.Position{
										Column: 41,
										Line:   3,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   3,
										},
										File:   "experimental.flux",
										Source: "time",
										Start: ast.Position{
											Column: 41,
											Line:   3,
										},
									},
								},
								Name: "time",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   3,
								},
								File:   "experimental.flux",
								Source: "time",
								Start: ast.Position{
									Column: 50,
									Line:   3,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   3,
									},
									File:   "experimental.flux",
									Source: "time",
									Start: ast.Position{
										Column: 50,
										Line:   3,
									},
								},
							},
							Name: "time",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   4,
					},
					File:   "experimental.flux",
					Source: "builtin subDuration",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   4,
						},
						File:   "experimental.flux",
						Source: "subDuration",
						Start: ast.Position{
							Column: 9,
							Line:   4,
						},
					},
				},
				Name: "subDuration",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 56,
							Line:   4,
						},
						File:   "experimental.flux",
						Source: "(d: duration, from: time) => time",
						Start: ast.Position{
							Column: 23,
							Line:   4,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 56,
								Line:   4,
							},
							File:   "experimental.flux",
							Source: "(d: duration, from: time) => time",
							Start: ast.Position{
								Column: 23,
								Line:   4,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   4,
								},
								File:   "experimental.flux",
								Source: "d: duration",
								Start: ast.Position{
									Column: 24,
									Line:   4,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   4,
									},
									File:   "experimental.flux",
									Source: "d",
									Start: ast.Position{
										Column: 24,
										Line:   4,
									},
								},
							},
							Name: "d",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   4,
									},
									File:   "experimental.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 27,
										Line:   4,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   4,
										},
										File:   "experimental.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 27,
											Line:   4,
										},
									},
								},
								Name: "duration",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   4,
								},
								File:   "experimental.flux",
								Source: "from: time",
								Start: ast.Position{
									Column: 37,
									Line:   4,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   4,
									},
									File:   "experimental.flux",
									Source: "from",
									Start: ast.Position{
										Column: 37,
										Line:   4,
									},
								},
							},
							Name: "from",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   4,
									},
									File:   "experimental.flux",
									Source: "time",
									Start: ast.Position{
										Column: 43,
										Line:   4,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   4,
										},
										File:   "experimental.flux",
										Source: "time",
										Start: ast.Position{
											Column: 43,
											Line:   4,
										},
									},
								},
								Name: "time",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   4,
								},
								File:   "experimental.flux",
								Source: "time",
								Start: ast.Position{
									Column: 52,
									Line:   4,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   4,
									},
									File:   "experimental.flux",
									Source: "time",
									Start: ast.Position{
										Column: 52,
										Line:   4,
									},
								},
							},
							Name: "time",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   7,
					},
					File:   "experimental.flux",
					Source: "builtin group",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   7,
						},
						File:   "experimental.flux",
						Source: "group",
						Start: ast.Position{
							Column: 9,
							Line:   7,
						},
					},
				},
				Name: "group",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 88,
							Line:   7,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [A], mode: string, columns: [string]) => [A] where A: Record",
						Start: ast.Position{
							Column: 17,
							Line:   7,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 88,
								Line:   7,
							},
							File:   "experimental.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 79,
								Line:   7,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   7,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 82,
									Line:   7,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   7,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 79,
									Line:   7,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   7,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [A], mode: string, columns: [string]) => [A]",
							Start: ast.Position{
								Column: 17,
								Line:   7,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   7,
								},
								File:   "experimental.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 18,
									Line:   7,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   7,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 20,
										Line:   7,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   7,
									},
									File:   "experimental.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 28,
										Line:   7,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   7,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 29,
											Line:   7,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   7,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 29,
												Line:   7,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   7,
								},
								File:   "experimental.flux",
								Source: "mode: string",
								Start: ast.Position{
									Column: 33,
									Line:   7,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   7,
									},
									File:   "experimental.flux",
									Source: "mode",
									Start: ast.Position{
										Column: 33,
										Line:   7,
									},
								},
							},
							Name: "mode",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   7,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 39,
										Line:   7,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   7,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 39,
											Line:   7,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   7,
								},
								File:   "experimental.flux",
								Source: "columns: [string]",
								Start: ast.Position{
									Column: 47,
									Line:   7,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 54,
										Line:   7,
									},
									File:   "experimental.flux",
									Source: "columns",
									Start: ast.Position{
										Column: 47,
										Line:   7,
									},
								},
							},
							Name: "columns",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   7,
									},
									File:   "experimental.flux",
									Source: "[string]",
									Start: ast.Position{
										Column: 56,
										Line:   7,
									},
								},
							},
							ElementType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 63,
											Line:   7,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 57,
											Line:   7,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 63,
												Line:   7,
											},
											File:   "experimental.flux",
											Source: "string",
											Start: ast.Position{
												Column: 57,
												Line:   7,
											},
										},
									},
									Name: "string",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   7,
								},
								File:   "experimental.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 69,
									Line:   7,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 71,
										Line:   7,
									},
									File:   "experimental.flux",
									Source: "A",
									Start: ast.Position{
										Column: 70,
										Line:   7,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 71,
											Line:   7,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 70,
											Line:   7,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   10,
					},
					File:   "experimental.flux",
					Source: "builtin objectKeys",
					Start: ast.Position{
						Column: 1,
						Line:   10,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   10,
						},
						File:   "experimental.flux",
						Source: "objectKeys",
						Start: ast.Position{
							Column: 9,
							Line:   10,
						},
					},
				},
				Name: "objectKeys",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 56,
							Line:   10,
						},
						File:   "experimental.flux",
						Source: "(o: A) => [string] where A: Record",
						Start: ast.Position{
							Column: 22,
							Line:   10,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 56,
								Line:   10,
							},
							File:   "experimental.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 47,
								Line:   10,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   10,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 50,
									Line:   10,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   10,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 47,
									Line:   10,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   10,
							},
							File:   "experimental.flux",
							Source: "(o: A) => [string]",
							Start: ast.Position{
								Column: 22,
								Line:   10,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   10,
								},
								File:   "experimental.flux",
								Source: "o: A",
								Start: ast.Position{
									Column: 23,
									Line:   10,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   10,
									},
									File:   "experimental.flux",
									Source: "o",
									Start: ast.Position{
										Column: 23,
										Line:   10,
									},
								},
							},
							Name: "o",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   10,
									},
									File:   "experimental.flux",
									Source: "A",
									Start: ast.Position{
										Column: 26,
										Line:   10,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   10,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 26,
											Line:   10,
										},
									},
								},
								Name: "A",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   10,
								},
								File:   "experimental.flux",
								Source: "[string]",
								Start: ast.Position{
									Column: 32,
									Line:   10,
								},
							},
						},
						ElementType: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   10,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 33,
										Line:   10,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   10,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 33,
											Line:   10,
										},
									},
								},
								Name: "string",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   13,
					},
					File:   "experimental.flux",
					Source: "builtin set",
					Start: ast.Position{
						Column: 1,
						Line:   13,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   13,
						},
						File:   "experimental.flux",
						Source: "set",
						Start: ast.Position{
							Column: 9,
							Line:   13,
						},
					},
				},
				Name: "set",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 81,
							Line:   13,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [A], o: B) => [C] where A: Record, B: Record, C: Record",
						Start: ast.Position{
							Column: 15,
							Line:   13,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 59,
								Line:   13,
							},
							File:   "experimental.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 50,
								Line:   13,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 59,
									Line:   13,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 53,
									Line:   13,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   13,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 50,
									Line:   13,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 70,
								Line:   13,
							},
							File:   "experimental.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 61,
								Line:   13,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   13,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 64,
									Line:   13,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   13,
								},
								File:   "experimental.flux",
								Source: "B",
								Start: ast.Position{
									Column: 61,
									Line:   13,
								},
							},
						},
						Name: "B",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 81,
								Line:   13,
							},
							File:   "experimental.flux",
							Source: "C: Record",
							Start: ast.Position{
								Column: 72,
								Line:   13,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 81,
									Line:   13,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 75,
									Line:   13,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 73,
									Line:   13,
								},
								File:   "experimental.flux",
								Source: "C",
								Start: ast.Position{
									Column: 72,
									Line:   13,
								},
							},
						},
						Name: "C",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   13,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [A], o: B) => [C]",
							Start: ast.Position{
								Column: 15,
								Line:   13,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   13,
								},
								File:   "experimental.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 16,
									Line:   13,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   13,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 18,
										Line:   13,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   13,
									},
									File:   "experimental.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 26,
										Line:   13,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   13,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 27,
											Line:   13,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   13,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 27,
												Line:   13,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   13,
								},
								File:   "experimental.flux",
								Source: "o: B",
								Start: ast.Position{
									Column: 31,
									Line:   13,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   13,
									},
									File:   "experimental.flux",
									Source: "o",
									Start: ast.Position{
										Column: 31,
										Line:   13,
									},
								},
							},
							Name: "o",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   13,
									},
									File:   "experimental.flux",
									Source: "B",
									Start: ast.Position{
										Column: 34,
										Line:   13,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   13,
										},
										File:   "experimental.flux",
										Source: "B",
										Start: ast.Position{
											Column: 34,
											Line:   13,
										},
									},
								},
								Name: "B",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   13,
								},
								File:   "experimental.flux",
								Source: "[C]",
								Start: ast.Position{
									Column: 40,
									Line:   13,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   13,
									},
									File:   "experimental.flux",
									Source: "C",
									Start: ast.Position{
										Column: 41,
										Line:   13,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   13,
										},
										File:   "experimental.flux",
										Source: "C",
										Start: ast.Position{
											Column: 41,
											Line:   13,
										},
									},
								},
								Name: "C",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 11,
						Line:   20,
					},
					File:   "experimental.flux",
					Source: "builtin to",
					Start: ast.Position{
						Column: 1,
						Line:   20,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   20,
						},
						File:   "experimental.flux",
						Source: "to",
						Start: ast.Position{
							Column: 9,
							Line:   20,
						},
					},
				},
				Name: "to",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 149,
							Line:   20,
						},
						File:   "experimental.flux",
						Source: "(<-tables: [A], ?bucket: string, ?bucketID: string, ?org: string, ?orgID: string, ?host: string, ?token: string) => [A] where A: Record",
						Start: ast.Position{
							Column: 14,
							Line:   20,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 149,
								Line:   20,
							},
							File:   "experimental.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 140,
								Line:   20,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 149,
									Line:   20,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 143,
									Line:   20,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 141,
									Line:   20,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 140,
									Line:   20,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 133,
								Line:   20,
							},
							File:   "experimental.flux",
							Source: "(<-tables: [A], ?bucket: string, ?bucketID: string, ?org: string, ?orgID: string, ?host: string, ?token: string) => [A]",
							Start: ast.Position{
								Column: 14,
								Line:   20,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   20,
								},
								File:   "experimental.flux",
								Source: "<-tables: [A]",
								Start: ast.Position{
									Column: 15,
									Line:   20,
								},
							},
						},
						Kind: "Pipe",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 17,
										Line:   20,
									},
								},
							},
							Name: "tables",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 25,
										Line:   20,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   20,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 26,
											Line:   20,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   20,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 26,
												Line:   20,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   20,
								},
								File:   "experimental.flux",
								Source: "?bucket: string",
								Start: ast.Position{
									Column: 30,
									Line:   20,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "bucket",
									Start: ast.Position{
										Column: 31,
										Line:   20,
									},
								},
							},
							Name: "bucket",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 39,
										Line:   20,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   20,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 39,
											Line:   20,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   20,
								},
								File:   "experimental.flux",
								Source: "?bucketID: string",
								Start: ast.Position{
									Column: 47,
									Line:   20,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "bucketID",
									Start: ast.Position{
										Column: 48,
										Line:   20,
									},
								},
							},
							Name: "bucketID",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 58,
										Line:   20,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 64,
											Line:   20,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 58,
											Line:   20,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 78,
									Line:   20,
								},
								File:   "experimental.flux",
								Source: "?org: string",
								Start: ast.Position{
									Column: 66,
									Line:   20,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "org",
									Start: ast.Position{
										Column: 67,
										Line:   20,
									},
								},
							},
							Name: "org",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 78,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 72,
										Line:   20,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 78,
											Line:   20,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 72,
											Line:   20,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 94,
									Line:   20,
								},
								File:   "experimental.flux",
								Source: "?orgID: string",
								Start: ast.Position{
									Column: 80,
									Line:   20,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 86,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "orgID",
									Start: ast.Position{
										Column: 81,
										Line:   20,
									},
								},
							},
							Name: "orgID",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 94,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 88,
										Line:   20,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 94,
											Line:   20,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 88,
											Line:   20,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 109,
									Line:   20,
								},
								File:   "experimental.flux",
								Source: "?host: string",
								Start: ast.Position{
									Column: 96,
									Line:   20,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 101,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "host",
									Start: ast.Position{
										Column: 97,
										Line:   20,
									},
								},
							},
							Name: "host",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 109,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 103,
										Line:   20,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 109,
											Line:   20,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 103,
											Line:   20,
										},
									},
								},
								Name: "string",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 125,
									Line:   20,
								},
								File:   "experimental.flux",
								Source: "?token: string",
								Start: ast.Position{
									Column: 111,
									Line:   20,
								},
							},
						},
						Kind: "Optional",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 117,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "token",
									Start: ast.Position{
										Column: 112,
										Line:   20,
									},
								},
							},
							Name: "token",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 125,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "string",
									Start: ast.Position{
										Column: 119,
										Line:   20,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 125,
											Line:   20,
										},
										File:   "experimental.flux",
										Source: "string",
										Start: ast.Position{
											Column: 119,
											Line:   20,
										},
									},
								},
								Name: "string",
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 133,
									Line:   20,
								},
								File:   "experimental.flux",
								Source: "[A]",
								Start: ast.Position{
									Column: 130,
									Line:   20,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 132,
										Line:   20,
									},
									File:   "experimental.flux",
									Source: "A",
									Start: ast.Position{
										Column: 131,
										Line:   20,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 132,
											Line:   20,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 131,
											Line:   20,
										},
									},
								},
								Name: "A",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   23,
					},
					File:   "experimental.flux",
					Source: "builtin join",
					Start: ast.Position{
						Column: 1,
						Line:   23,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   23,
						},
						File:   "experimental.flux",
						Source: "join",
						Start: ast.Position{
							Column: 9,
							Line:   23,
						},
					},
				},
				Name: "join",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 114,
							Line:   23,
						},
						File:   "experimental.flux",
						Source: "(left: [A], right: [B], fn: (left: A, right: B) => C) => [C] where A: Record, B: Record, C: Record",
						Start: ast.Position{
							Column: 16,
							Line:   23,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 92,
								Line:   23,
							},
							File:   "experimental.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 83,
								Line:   23,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 92,
									Line:   23,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 86,
									Line:   23,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 84,
									Line:   23,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 83,
									Line:   23,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 103,
								Line:   23,
							},
							File:   "experimental.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 94,
								Line:   23,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 103,
									Line:   23,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 97,
									Line:   23,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 95,
									Line:   23,
								},
								File:   "experimental.flux",
								Source: "B",
								Start: ast.Position{
									Column: 94,
									Line:   23,
								},
							},
						},
						Name: "B",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 114,
								Line:   23,
							},
							File:   "experimental.flux",
							Source: "C: Record",
							Start: ast.Position{
								Column: 105,
								Line:   23,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 114,
									Line:   23,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 108,
									Line:   23,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 106,
									Line:   23,
								},
								File:   "experimental.flux",
								Source: "C",
								Start: ast.Position{
									Column: 105,
									Line:   23,
								},
							},
						},
						Name: "C",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 76,
								Line:   23,
							},
							File:   "experimental.flux",
							Source: "(left: [A], right: [B], fn: (left: A, right: B) => C) => [C]",
							Start: ast.Position{
								Column: 16,
								Line:   23,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   23,
								},
								File:   "experimental.flux",
								Source: "left: [A]",
								Start: ast.Position{
									Column: 17,
									Line:   23,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   23,
									},
									File:   "experimental.flux",
									Source: "left",
									Start: ast.Position{
										Column: 17,
										Line:   23,
									},
								},
							},
							Name: "left",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   23,
									},
									File:   "experimental.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 23,
										Line:   23,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   23,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 24,
											Line:   23,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   23,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 24,
												Line:   23,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   23,
								},
								File:   "experimental.flux",
								Source: "right: [B]",
								Start: ast.Position{
									Column: 28,
									Line:   23,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   23,
									},
									File:   "experimental.flux",
									Source: "right",
									Start: ast.Position{
										Column: 28,
										Line:   23,
									},
								},
							},
							Name: "right",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 38,
										Line:   23,
									},
									File:   "experimental.flux",
									Source: "[B]",
									Start: ast.Position{
										Column: 35,
										Line:   23,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   23,
										},
										File:   "experimental.flux",
										Source: "B",
										Start: ast.Position{
											Column: 36,
											Line:   23,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   23,
											},
											File:   "experimental.flux",
											Source: "B",
											Start: ast.Position{
												Column: 36,
												Line:   23,
											},
										},
									},
									Name: "B",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   23,
								},
								File:   "experimental.flux",
								Source: "fn: (left: A, right: B) => C",
								Start: ast.Position{
									Column: 40,
									Line:   23,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   23,
									},
									File:   "experimental.flux",
									Source: "fn",
									Start: ast.Position{
										Column: 40,
										Line:   23,
									},
								},
							},
							Name: "fn",
						},
						Ty: &ast.FunctionType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 68,
										Line:   23,
									},
									File:   "experimental.flux",
									Source: "(left: A, right: B) => C",
									Start: ast.Position{
										Column: 44,
										Line:   23,
									},
								},
							},
							Parameters: []*ast.ParameterType{&ast.ParameterType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 52,
											Line:   23,
										},
										File:   "experimental.flux",
										Source: "left: A",
										Start: ast.Position{
											Column: 45,
											Line:   23,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   23,
											},
											File:   "experimental.flux",
											Source: "left",
											Start: ast.Position{
												Column: 45,
												Line:   23,
											},
										},
									},
									Name: "left",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 52,
												Line:   23,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 51,
												Line:   23,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 52,
													Line:   23,
												},
												File:   "experimental.flux",
												Source: "A",
												Start: ast.Position{
													Column: 51,
													Line:   23,
												},
											},
										},
										Name: "A",
									},
								},
							}, &ast.ParameterType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 62,
											Line:   23,
										},
										File:   "experimental.flux",
										Source: "right: B",
										Start: ast.Position{
											Column: 54,
											Line:   23,
										},
									},
								},
								Kind: "Required",
								Name: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   23,
											},
											File:   "experimental.flux",
											Source: "right",
											Start: ast.Position{
												Column: 54,
												Line:   23,
											},
										},
									},
									Name: "right",
								},
								Ty: &ast.TvarType{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 62,
												Line:   23,
											},
											File:   "experimental.flux",
											Source: "B",
											Start: ast.Position{
												Column: 61,
												Line:   23,
											},
										},
									},
									ID: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 62,
													Line:   23,
												},
												File:   "experimental.flux",
												Source: "B",
												Start: ast.Position{
													Column: 61,
													Line:   23,
												},
											},
										},
										Name: "B",
									},
								},
							}},
							Return: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   23,
										},
										File:   "experimental.flux",
										Source: "C",
										Start: ast.Position{
											Column: 67,
											Line:   23,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 68,
												Line:   23,
											},
											File:   "experimental.flux",
											Source: "C",
											Start: ast.Position{
												Column: 67,
												Line:   23,
											},
										},
									},
									Name: "C",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 76,
									Line:   23,
								},
								File:   "experimental.flux",
								Source: "[C]",
								Start: ast.Position{
									Column: 73,
									Line:   23,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   23,
									},
									File:   "experimental.flux",
									Source: "C",
									Start: ast.Position{
										Column: 74,
										Line:   23,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 75,
											Line:   23,
										},
										File:   "experimental.flux",
										Source: "C",
										Start: ast.Position{
											Column: 74,
											Line:   23,
										},
									},
								},
								Name: "C",
							},
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   25,
					},
					File:   "experimental.flux",
					Source: "builtin chain",
					Start: ast.Position{
						Column: 1,
						Line:   25,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   25,
						},
						File:   "experimental.flux",
						Source: "chain",
						Start: ast.Position{
							Column: 9,
							Line:   25,
						},
					},
				},
				Name: "chain",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 76,
							Line:   25,
						},
						File:   "experimental.flux",
						Source: "(first: [A], second: [B]) => [B] where A: Record, B: Record",
						Start: ast.Position{
							Column: 17,
							Line:   25,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 65,
								Line:   25,
							},
							File:   "experimental.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 56,
								Line:   25,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 65,
									Line:   25,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 59,
									Line:   25,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 57,
									Line:   25,
								},
								File:   "experimental.flux",
								Source: "A",
								Start: ast.Position{
									Column: 56,
									Line:   25,
								},
							},
						},
						Name: "A",
					},
				}, &ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 76,
								Line:   25,
							},
							File:   "experimental.flux",
							Source: "B: Record",
							Start: ast.Position{
								Column: 67,
								Line:   25,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 76,
									Line:   25,
								},
								File:   "experimental.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 70,
									Line:   25,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   25,
								},
								File:   "experimental.flux",
								Source: "B",
								Start: ast.Position{
									Column: 67,
									Line:   25,
								},
							},
						},
						Name: "B",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   25,
							},
							File:   "experimental.flux",
							Source: "(first: [A], second: [B]) => [B]",
							Start: ast.Position{
								Column: 17,
								Line:   25,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   25,
								},
								File:   "experimental.flux",
								Source: "first: [A]",
								Start: ast.Position{
									Column: 18,
									Line:   25,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   25,
									},
									File:   "experimental.flux",
									Source: "first",
									Start: ast.Position{
										Column: 18,
										Line:   25,
									},
								},
							},
							Name: "first",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   25,
									},
									File:   "experimental.flux",
									Source: "[A]",
									Start: ast.Position{
										Column: 25,
										Line:   25,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   25,
										},
										File:   "experimental.flux",
										Source: "A",
										Start: ast.Position{
											Column: 26,
											Line:   25,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   25,
											},
											File:   "experimental.flux",
											Source: "A",
											Start: ast.Position{
												Column: 26,
												Line:   25,
											},
										},
									},
									Name: "A",
								},
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   25,
								},
								File:   "experimental.flux",
								Source: "second: [B]",
								Start: ast.Position{
									Column: 30,
									Line:   25,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   25,
									},
									File:   "experimental.flux",
									Source: "second",
									Start: ast.Position{
										Column: 30,
										Line:   25,
									},
								},
							},
							Name: "second",
						},
						Ty: &ast.ArrayType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   25,
									},
									File:   "experimental.flux",
									Source: "[B]",
									Start: ast.Position{
										Column: 38,
										Line:   25,
									},
								},
							},
							ElementType: &ast.TvarType{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   25,
										},
										File:   "experimental.flux",
										Source: "B",
										Start: ast.Position{
											Column: 39,
											Line:   25,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   25,
											},
											File:   "experimental.flux",
											Source: "B",
											Start: ast.Position{
												Column: 39,
												Line:   25,
											},
										},
									},
									Name: "B",
								},
							},
						},
					}},
					Return: &ast.ArrayType{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   25,
								},
								File:   "experimental.flux",
								Source: "[B]",
								Start: ast.Position{
									Column: 46,
									Line:   25,
								},
							},
						},
						ElementType: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 48,
										Line:   25,
									},
									File:   "experimental.flux",
									Source: "B",
									Start: ast.Position{
										Column: 47,
										Line:   25,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   25,
										},
										File:   "experimental.flux",
										Source: "B",
										Start: ast.Position{
											Column: 47,
											Line:   25,
										},
									},
								},
								Name: "B",
							},
						},
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 35,
						Line:   41,
					},
					File:   "experimental.flux",
					Source: "alignTime = (tables=<-, alignTo=time(v: 0)) =>\n  tables\n    |> stateDuration(\n      fn: (r) => true,\n      column: \"timeDiff\",\n      unit: 1ns\n    )\n    |> map(fn: (r) =>\n      ({ r with _time: time(v: (int(v: alignTo ) + r.timeDiff)) })\n    )\n    |> drop(columns: [\"timeDiff\"])",
					Start: ast.Position{
						Column: 1,
						Line:   31,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   31,
						},
						File:   "experimental.flux",
						Source: "alignTime",
						Start: ast.Position{
							Column: 1,
							Line:   31,
						},
					},
				},
				Name: "alignTime",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 35,
							Line:   41,
						},
						File:   "experimental.flux",
						Source: "(tables=<-, alignTo=time(v: 0)) =>\n  tables\n    |> stateDuration(\n      fn: (r) => true,\n      column: \"timeDiff\",\n      unit: 1ns\n    )\n    |> map(fn: (r) =>\n      ({ r with _time: time(v: (int(v: alignTo ) + r.timeDiff)) })\n    )\n    |> drop(columns: [\"timeDiff\"])",
						Start: ast.Position{
							Column: 13,
							Line:   31,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 9,
											Line:   32,
										},
										File:   "experimental.flux",
										Source: "tables",
										Start: ast.Position{
											Column: 3,
											Line:   32,
										},
									},
								},
								Name: "tables",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   37,
									},
									File:   "experimental.flux",
									Source: "tables\n    |> stateDuration(\n      fn: (r) => true,\n      column: \"timeDiff\",\n      unit: 1ns\n    )",
									Start: ast.Position{
										Column: 3,
										Line:   32,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   36,
											},
											File:   "experimental.flux",
											Source: "fn: (r) => true,\n      column: \"timeDiff\",\n      unit: 1ns",
											Start: ast.Position{
												Column: 7,
												Line:   34,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   34,
												},
												File:   "experimental.flux",
												Source: "fn: (r) => true",
												Start: ast.Position{
													Column: 7,
													Line:   34,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 9,
														Line:   34,
													},
													File:   "experimental.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 7,
														Line:   34,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   34,
													},
													File:   "experimental.flux",
													Source: "(r) => true",
													Start: ast.Position{
														Column: 11,
														Line:   34,
													},
												},
											},
											Body: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   34,
														},
														File:   "experimental.flux",
														Source: "true",
														Start: ast.Position{
															Column: 18,
															Line:   34,
														},
													},
												},
												Name: "true",
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 13,
															Line:   34,
														},
														File:   "experimental.flux",
														Source: "r",
														Start: ast.Position{
															Column: 12,
															Line:   34,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 13,
																Line:   34,
															},
															File:   "experimental.flux",
															Source: "r",
															Start: ast.Position{
																Column: 12,
																Line:   34,
															},
														},
													},
													Name: "r",
												},
												Value: nil,
											}},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   35,
												},
												File:   "experimental.flux",
												Source: "column: \"timeDiff\"",
												Start: ast.Position{
													Column: 7,
													Line:   35,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   35,
													},
													File:   "experimental.flux",
													Source: "column",
													Start: ast.Position{
														Column: 7,
														Line:   35,
													},
												},
											},
											Name: "column",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 25,
														Line:   35,
													},
													File:   "experimental.flux",
													Source: "\"timeDiff\"",
													Start: ast.Position{
														Column: 15,
														Line:   35,
													},
												},
											},
											Value: "timeDiff",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   36,
												},
												File:   "experimental.flux",
												Source: "unit: 1ns",
												Start: ast.Position{
													Column: 7,
													Line:   36,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   36,
													},
													File:   "experimental.flux",
													Source: "unit",
													Start: ast.Position{
														Column: 7,
														Line:   36,
													},
												},
											},
											Name: "unit",
										},
										Value: &ast.DurationLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   36,
													},
													File:   "experimental.flux",
													Source: "1ns",
													Start: ast.Position{
														Column: 13,
														Line:   36,
													},
												},
											},
											Values: []ast.Duration{ast.Duration{
												Magnitude: int64(1),
												Unit:      "ns",
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   37,
										},
										File:   "experimental.flux",
										Source: "stateDuration(\n      fn: (r) => true,\n      column: \"timeDiff\",\n      unit: 1ns\n    )",
										Start: ast.Position{
											Column: 8,
											Line:   33,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   33,
											},
											File:   "experimental.flux",
											Source: "stateDuration",
											Start: ast.Position{
												Column: 8,
												Line:   33,
											},
										},
									},
									Name: "stateDuration",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   40,
								},
								File:   "experimental.flux",
								Source: "tables\n    |> stateDuration(\n      fn: (r) => true,\n      column: \"timeDiff\",\n      unit: 1ns\n    )\n    |> map(fn: (r) =>\n      ({ r with _time: time(v: (int(v: alignTo ) + r.timeDiff)) })\n    )",
								Start: ast.Position{
									Column: 3,
									Line:   32,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   39,
										},
										File:   "experimental.flux",
										Source: "fn: (r) =>\n      ({ r with _time: time(v: (int(v: alignTo ) + r.timeDiff)) })",
										Start: ast.Position{
											Column: 12,
											Line:   38,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 67,
												Line:   39,
											},
											File:   "experimental.flux",
											Source: "fn: (r) =>\n      ({ r with _time: time(v: (int(v: alignTo ) + r.timeDiff)) })",
											Start: ast.Position{
												Column: 12,
												Line:   38,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   38,
												},
												File:   "experimental.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 12,
													Line:   38,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 67,
													Line:   39,
												},
												File:   "experimental.flux",
												Source: "(r) =>\n      ({ r with _time: time(v: (int(v: alignTo ) + r.timeDiff)) })",
												Start: ast.Position{
													Column: 16,
													Line:   38,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 67,
														Line:   39,
													},
													File:   "experimental.flux",
													Source: "({ r with _time: time(v: (int(v: alignTo ) + r.timeDiff)) })",
													Start: ast.Position{
														Column: 7,
														Line:   39,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 66,
															Line:   39,
														},
														File:   "experimental.flux",
														Source: "{ r with _time: time(v: (int(v: alignTo ) + r.timeDiff)) }",
														Start: ast.Position{
															Column: 8,
															Line:   39,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 64,
																Line:   39,
															},
															File:   "experimental.flux",
															Source: "_time: time(v: (int(v: alignTo ) + r.timeDiff))",
															Start: ast.Position{
																Column: 17,
																Line:   39,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   39,
																},
																File:   "experimental.flux",
																Source: "_time",
																Start: ast.Position{
																	Column: 17,
																	Line:   39,
																},
															},
														},
														Name: "_time",
													},
													Value: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 63,
																		Line:   39,
																	},
																	File:   "experimental.flux",
																	Source: "v: (int(v: alignTo ) + r.timeDiff)",
																	Start: ast.Position{
																		Column: 29,
																		Line:   39,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 63,
																			Line:   39,
																		},
																		File:   "experimental.flux",
																		Source: "v: (int(v: alignTo ) + r.timeDiff)",
																		Start: ast.Position{
																			Column: 29,
																			Line:   39,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   39,
																			},
																			File:   "experimental.flux",
																			Source: "v",
																			Start: ast.Position{
																				Column: 29,
																				Line:   39,
																			},
																		},
																	},
																	Name: "v",
																},
																Value: &ast.ParenExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 63,
																				Line:   39,
																			},
																			File:   "experimental.flux",
																			Source: "(int(v: alignTo ) + r.timeDiff)",
																			Start: ast.Position{
																				Column: 32,
																				Line:   39,
																			},
																		},
																	},
																	Expression: &ast.BinaryExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 62,
																					Line:   39,
																				},
																				File:   "experimental.flux",
																				Source: "int(v: alignTo ) + r.timeDiff",
																				Start: ast.Position{
																					Column: 33,
																					Line:   39,
																				},
																			},
																		},
																		Left: &ast.CallExpression{
																			Arguments: []ast.Expression{&ast.ObjectExpression{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 47,
																							Line:   39,
																						},
																						File:   "experimental.flux",
																						Source: "v: alignTo",
																						Start: ast.Position{
																							Column: 37,
																							Line:   39,
																						},
																					},
																				},
																				Properties: []*ast.Property{&ast.Property{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 47,
																								Line:   39,
																							},
																							File:   "experimental.flux",
																							Source: "v: alignTo",
																							Start: ast.Position{
																								Column: 37,
																								Line:   39,
																							},
																						},
																					},
																					Key: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 38,
																									Line:   39,
																								},
																								File:   "experimental.flux",
																								Source: "v",
																								Start: ast.Position{
																									Column: 37,
																									Line:   39,
																								},
																							},
																						},
																						Name: "v",
																					},
																					Value: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 47,
																									Line:   39,
																								},
																								File:   "experimental.flux",
																								Source: "alignTo",
																								Start: ast.Position{
																									Column: 40,
																									Line:   39,
																								},
																							},
																						},
																						Name: "alignTo",
																					},
																				}},
																				With: nil,
																			}},
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 49,
																						Line:   39,
																					},
																					File:   "experimental.flux",
																					Source: "int(v: alignTo )",
																					Start: ast.Position{
																						Column: 33,
																						Line:   39,
																					},
																				},
																			},
																			Callee: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 36,
																							Line:   39,
																						},
																						File:   "experimental.flux",
																						Source: "int",
																						Start: ast.Position{
																							Column: 33,
																							Line:   39,
																						},
																					},
																				},
																				Name: "int",
																			},
																		},
																		Operator: 5,
																		Right: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 62,
																						Line:   39,
																					},
																					File:   "experimental.flux",
																					Source: "r.timeDiff",
																					Start: ast.Position{
																						Column: 52,
																						Line:   39,
																					},
																				},
																			},
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 53,
																							Line:   39,
																						},
																						File:   "experimental.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 52,
																							Line:   39,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 62,
																							Line:   39,
																						},
																						File:   "experimental.flux",
																						Source: "timeDiff",
																						Start: ast.Position{
																							Column: 54,
																							Line:   39,
																						},
																					},
																				},
																				Name: "timeDiff",
																			},
																		},
																	},
																},
															}},
															With: nil,
														}},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 64,
																	Line:   39,
																},
																File:   "experimental.flux",
																Source: "time(v: (int(v: alignTo ) + r.timeDiff))",
																Start: ast.Position{
																	Column: 24,
																	Line:   39,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 28,
																		Line:   39,
																	},
																	File:   "experimental.flux",
																	Source: "time",
																	Start: ast.Position{
																		Column: 24,
																		Line:   39,
																	},
																},
															},
															Name: "time",
														},
													},
												}},
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 11,
																Line:   39,
															},
															File:   "experimental.flux",
															Source: "r",
															Start: ast.Position{
																Column: 10,
																Line:   39,
															},
														},
													},
													Name: "r",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   38,
													},
													File:   "experimental.flux",
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   38,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   38,
														},
														File:   "experimental.flux",
														Source: "r",
														Start: ast.Position{
															Column: 17,
															Line:   38,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   40,
									},
									File:   "experimental.flux",
									Source: "map(fn: (r) =>\n      ({ r with _time: time(v: (int(v: alignTo ) + r.timeDiff)) })\n    )",
									Start: ast.Position{
										Column: 8,
										Line:   38,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   38,
										},
										File:   "experimental.flux",
										Source: "map",
										Start: ast.Position{
											Column: 8,
											Line:   38,
										},
									},
								},
								Name: "map",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   41,
							},
							File:   "experimental.flux",
							Source: "tables\n    |> stateDuration(\n      fn: (r) => true,\n      column: \"timeDiff\",\n      unit: 1ns\n    )\n    |> map(fn: (r) =>\n      ({ r with _time: time(v: (int(v: alignTo ) + r.timeDiff)) })\n    )\n    |> drop(columns: [\"timeDiff\"])",
							Start: ast.Position{
								Column: 3,
								Line:   32,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   41,
									},
									File:   "experimental.flux",
									Source: "columns: [\"timeDiff\"]",
									Start: ast.Position{
										Column: 13,
										Line:   41,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   41,
										},
										File:   "experimental.flux",
										Source: "columns: [\"timeDiff\"]",
										Start: ast.Position{
											Column: 13,
											Line:   41,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   41,
											},
											File:   "experimental.flux",
											Source: "columns",
											Start: ast.Position{
												Column: 13,
												Line:   41,
											},
										},
									},
									Name: "columns",
								},
								Value: &ast.ArrayExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   41,
											},
											File:   "experimental.flux",
											Source: "[\"timeDiff\"]",
											Start: ast.Position{
												Column: 22,
												Line:   41,
											},
										},
									},
									Elements: []ast.Expression{&ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   41,
												},
												File:   "experimental.flux",
												Source: "\"timeDiff\"",
												Start: ast.Position{
													Column: 23,
													Line:   41,
												},
											},
										},
										Value: "timeDiff",
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   41,
								},
								File:   "experimental.flux",
								Source: "drop(columns: [\"timeDiff\"])",
								Start: ast.Position{
									Column: 8,
									Line:   41,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   41,
									},
									File:   "experimental.flux",
									Source: "drop",
									Start: ast.Position{
										Column: 8,
										Line:   41,
									},
								},
							},
							Name: "drop",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   31,
							},
							File:   "experimental.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 14,
								Line:   31,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   31,
								},
								File:   "experimental.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 14,
									Line:   31,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   31,
							},
							File:   "experimental.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 21,
								Line:   31,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   31,
							},
							File:   "experimental.flux",
							Source: "alignTo=time(v: 0)",
							Start: ast.Position{
								Column: 25,
								Line:   31,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   31,
								},
								File:   "experimental.flux",
								Source: "alignTo",
								Start: ast.Position{
									Column: 25,
									Line:   31,
								},
							},
						},
						Name: "alignTo",
					},
					Value: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   31,
									},
									File:   "experimental.flux",
									Source: "v: 0",
									Start: ast.Position{
										Column: 38,
										Line:   31,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   31,
										},
										File:   "experimental.flux",
										Source: "v: 0",
										Start: ast.Position{
											Column: 38,
											Line:   31,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   31,
											},
											File:   "experimental.flux",
											Source: "v",
											Start: ast.Position{
												Column: 38,
												Line:   31,
											},
										},
									},
									Name: "v",
								},
								Value: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   31,
											},
											File:   "experimental.flux",
											Source: "0",
											Start: ast.Position{
												Column: 41,
												Line:   31,
											},
										},
									},
									Value: int64(0),
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   31,
								},
								File:   "experimental.flux",
								Source: "time(v: 0)",
								Start: ast.Position{
									Column: 33,
									Line:   31,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   31,
									},
									File:   "experimental.flux",
									Source: "time",
									Start: ast.Position{
										Column: 33,
										Line:   31,
									},
								},
							},
							Name: "time",
						},
					},
				}},
			},
		}},
		Imports:  nil,
		Metadata: "parser-type=rust",
		Name:     "experimental.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   1,
					},
					File:   "experimental.flux",
					Source: "package experimental",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   1,
						},
						File:   "experimental.flux",
						Source: "experimental",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "experimental",
			},
		},
	}},
	Package: "experimental",
	Path:    "experimental",
}
