// DO NOT EDIT: This file is autogenerated via the builtin command.

package usage

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   53,
				},
				File:   "usage.flux",
				Source: "package usage\n\nimport \"csv\"\nimport \"experimental/influxdb\"\nimport \"experimental/json\"\nimport \"http\"\n\n// from returns an organization's usage data. The time range to query is\n// bounded by start and stop arguments. Optional orgID, host and token arguments\n// allow cross-org and/or cross-cluster queries. Setting the raw parameter will\n// return raw usage data rather than the downsampled data returned by default.\n// Note that unlike the range function, the stop argument is required here,\n// pending implementation of https://github.com/influxdata/flux/issues/3629.\nfrom = (start, stop, host=\"\", orgID=\"\", token=\"\", raw=false) => {\n\n\tid = if orgID == \"\" then \"{orgID}\" else http.pathEscape(inputString: orgID)\n\n\tresponse = influxdb.api(\n        method: \"get\",\n\t\tpath: \"/api/v2/orgs/\" + id + \"/usage\",\n\t\thost: host,\n\t\ttoken: token,\n        query: [\n                \"start\": string(v: start),\n                \"stop\": string(v: stop),\n                \"raw\": string(v: raw),\n        ],\n\t)\n\n\treturn if response.statusCode > 299 then\n\t\tdie(msg: \"organization usage request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body))\n    else\n    \tcsv.from(csv: string(v: response.body))\n}\n\n// limits returns an organization's usage limits. Optional orgID, host\n// and token arguments allow cross-org and/or cross-cluster calls.\nlimits = (host=\"\", orgID=\"\", token=\"\") => {\n\n\tid = if orgID == \"\" then \"{orgID}\" else http.pathEscape(inputString: orgID)\n\n\tresponse = influxdb.api(\n\t\tmethod: \"get\",\n\t\tpath: \"/api/v2/orgs/\" + id + \"/limits\",\n\t\thost: host,\n\t\ttoken: token,\n\t)\n\n\treturn if response.statusCode > 299 then\n\t\tdie(msg: \"organization limits request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body))\n\telse\n\t\tjson.parse(data: response.body).limits\n}",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   34,
					},
					File:   "usage.flux",
					Source: "from = (start, stop, host=\"\", orgID=\"\", token=\"\", raw=false) => {\n\n\tid = if orgID == \"\" then \"{orgID}\" else http.pathEscape(inputString: orgID)\n\n\tresponse = influxdb.api(\n        method: \"get\",\n\t\tpath: \"/api/v2/orgs/\" + id + \"/usage\",\n\t\thost: host,\n\t\ttoken: token,\n        query: [\n                \"start\": string(v: start),\n                \"stop\": string(v: stop),\n                \"raw\": string(v: raw),\n        ],\n\t)\n\n\treturn if response.statusCode > 299 then\n\t\tdie(msg: \"organization usage request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body))\n    else\n    \tcsv.from(csv: string(v: response.body))\n}",
					Start: ast.Position{
						Column: 1,
						Line:   14,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// from returns an organization's usage data. The time range to query is\n"}, ast.Comment{Text: "// bounded by start and stop arguments. Optional orgID, host and token arguments\n"}, ast.Comment{Text: "// allow cross-org and/or cross-cluster queries. Setting the raw parameter will\n"}, ast.Comment{Text: "// return raw usage data rather than the downsampled data returned by default.\n"}, ast.Comment{Text: "// Note that unlike the range function, the stop argument is required here,\n"}, ast.Comment{Text: "// pending implementation of https://github.com/influxdata/flux/issues/3629.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   14,
						},
						File:   "usage.flux",
						Source: "from",
						Start: ast.Position{
							Column: 1,
							Line:   14,
						},
					},
				},
				Name: "from",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   34,
						},
						File:   "usage.flux",
						Source: "(start, stop, host=\"\", orgID=\"\", token=\"\", raw=false) => {\n\n\tid = if orgID == \"\" then \"{orgID}\" else http.pathEscape(inputString: orgID)\n\n\tresponse = influxdb.api(\n        method: \"get\",\n\t\tpath: \"/api/v2/orgs/\" + id + \"/usage\",\n\t\thost: host,\n\t\ttoken: token,\n        query: [\n                \"start\": string(v: start),\n                \"stop\": string(v: stop),\n                \"raw\": string(v: raw),\n        ],\n\t)\n\n\treturn if response.statusCode > 299 then\n\t\tdie(msg: \"organization usage request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body))\n    else\n    \tcsv.from(csv: string(v: response.body))\n}",
						Start: ast.Position{
							Column: 8,
							Line:   14,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   34,
							},
							File:   "usage.flux",
							Source: "{\n\n\tid = if orgID == \"\" then \"{orgID}\" else http.pathEscape(inputString: orgID)\n\n\tresponse = influxdb.api(\n        method: \"get\",\n\t\tpath: \"/api/v2/orgs/\" + id + \"/usage\",\n\t\thost: host,\n\t\ttoken: token,\n        query: [\n                \"start\": string(v: start),\n                \"stop\": string(v: stop),\n                \"raw\": string(v: raw),\n        ],\n\t)\n\n\treturn if response.statusCode > 299 then\n\t\tdie(msg: \"organization usage request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body))\n    else\n    \tcsv.from(csv: string(v: response.body))\n}",
							Start: ast.Position{
								Column: 65,
								Line:   14,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 77,
									Line:   16,
								},
								File:   "usage.flux",
								Source: "id = if orgID == \"\" then \"{orgID}\" else http.pathEscape(inputString: orgID)",
								Start: ast.Position{
									Column: 2,
									Line:   16,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 4,
										Line:   16,
									},
									File:   "usage.flux",
									Source: "id",
									Start: ast.Position{
										Column: 2,
										Line:   16,
									},
								},
							},
							Name: "id",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 76,
												Line:   16,
											},
											File:   "usage.flux",
											Source: "inputString: orgID",
											Start: ast.Position{
												Column: 58,
												Line:   16,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 76,
													Line:   16,
												},
												File:   "usage.flux",
												Source: "inputString: orgID",
												Start: ast.Position{
													Column: 58,
													Line:   16,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 69,
														Line:   16,
													},
													File:   "usage.flux",
													Source: "inputString",
													Start: ast.Position{
														Column: 58,
														Line:   16,
													},
												},
											},
											Name: "inputString",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 76,
														Line:   16,
													},
													File:   "usage.flux",
													Source: "orgID",
													Start: ast.Position{
														Column: 71,
														Line:   16,
													},
												},
											},
											Name: "orgID",
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 77,
											Line:   16,
										},
										File:   "usage.flux",
										Source: "http.pathEscape(inputString: orgID)",
										Start: ast.Position{
											Column: 42,
											Line:   16,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   16,
											},
											File:   "usage.flux",
											Source: "http.pathEscape",
											Start: ast.Position{
												Column: 42,
												Line:   16,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   16,
												},
												File:   "usage.flux",
												Source: "http",
												Start: ast.Position{
													Column: 42,
													Line:   16,
												},
											},
										},
										Name: "http",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   16,
												},
												File:   "usage.flux",
												Source: "pathEscape",
												Start: ast.Position{
													Column: 47,
													Line:   16,
												},
											},
										},
										Name: "pathEscape",
									},
									Rbrack: nil,
								},
								Lparen: nil,
								Rparen: nil,
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 77,
										Line:   16,
									},
									File:   "usage.flux",
									Source: "if orgID == \"\" then \"{orgID}\" else http.pathEscape(inputString: orgID)",
									Start: ast.Position{
										Column: 7,
										Line:   16,
									},
								},
							},
							Consequent: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   16,
										},
										File:   "usage.flux",
										Source: "\"{orgID}\"",
										Start: ast.Position{
											Column: 27,
											Line:   16,
										},
									},
								},
								Value: "{orgID}",
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   16,
										},
										File:   "usage.flux",
										Source: "orgID == \"\"",
										Start: ast.Position{
											Column: 10,
											Line:   16,
										},
									},
								},
								Left: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   16,
											},
											File:   "usage.flux",
											Source: "orgID",
											Start: ast.Position{
												Column: 10,
												Line:   16,
											},
										},
									},
									Name: "orgID",
								},
								Operator: 17,
								Right: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   16,
											},
											File:   "usage.flux",
											Source: "\"\"",
											Start: ast.Position{
												Column: 19,
												Line:   16,
											},
										},
									},
									Value: "",
								},
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   28,
								},
								File:   "usage.flux",
								Source: "response = influxdb.api(\n        method: \"get\",\n\t\tpath: \"/api/v2/orgs/\" + id + \"/usage\",\n\t\thost: host,\n\t\ttoken: token,\n        query: [\n                \"start\": string(v: start),\n                \"stop\": string(v: stop),\n                \"raw\": string(v: raw),\n        ],\n\t)",
								Start: ast.Position{
									Column: 2,
									Line:   18,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   18,
									},
									File:   "usage.flux",
									Source: "response",
									Start: ast.Position{
										Column: 2,
										Line:   18,
									},
								},
							},
							Name: "response",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   27,
										},
										File:   "usage.flux",
										Source: "method: \"get\",\n\t\tpath: \"/api/v2/orgs/\" + id + \"/usage\",\n\t\thost: host,\n\t\ttoken: token,\n        query: [\n                \"start\": string(v: start),\n                \"stop\": string(v: stop),\n                \"raw\": string(v: raw),\n        ]",
										Start: ast.Position{
											Column: 9,
											Line:   19,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   19,
											},
											File:   "usage.flux",
											Source: "method: \"get\"",
											Start: ast.Position{
												Column: 9,
												Line:   19,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   19,
												},
												File:   "usage.flux",
												Source: "method",
												Start: ast.Position{
													Column: 9,
													Line:   19,
												},
											},
										},
										Name: "method",
									},
									Separator: nil,
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 22,
													Line:   19,
												},
												File:   "usage.flux",
												Source: "\"get\"",
												Start: ast.Position{
													Column: 17,
													Line:   19,
												},
											},
										},
										Value: "get",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   20,
											},
											File:   "usage.flux",
											Source: "path: \"/api/v2/orgs/\" + id + \"/usage\"",
											Start: ast.Position{
												Column: 3,
												Line:   20,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 7,
													Line:   20,
												},
												File:   "usage.flux",
												Source: "path",
												Start: ast.Position{
													Column: 3,
													Line:   20,
												},
											},
										},
										Name: "path",
									},
									Separator: nil,
									Value: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   20,
												},
												File:   "usage.flux",
												Source: "\"/api/v2/orgs/\" + id + \"/usage\"",
												Start: ast.Position{
													Column: 9,
													Line:   20,
												},
											},
										},
										Left: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   20,
													},
													File:   "usage.flux",
													Source: "\"/api/v2/orgs/\" + id",
													Start: ast.Position{
														Column: 9,
														Line:   20,
													},
												},
											},
											Left: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   20,
														},
														File:   "usage.flux",
														Source: "\"/api/v2/orgs/\"",
														Start: ast.Position{
															Column: 9,
															Line:   20,
														},
													},
												},
												Value: "/api/v2/orgs/",
											},
											Operator: 5,
											Right: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   20,
														},
														File:   "usage.flux",
														Source: "id",
														Start: ast.Position{
															Column: 27,
															Line:   20,
														},
													},
												},
												Name: "id",
											},
										},
										Operator: 5,
										Right: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   20,
													},
													File:   "usage.flux",
													Source: "\"/usage\"",
													Start: ast.Position{
														Column: 32,
														Line:   20,
													},
												},
											},
											Value: "/usage",
										},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   21,
											},
											File:   "usage.flux",
											Source: "host: host",
											Start: ast.Position{
												Column: 3,
												Line:   21,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 7,
													Line:   21,
												},
												File:   "usage.flux",
												Source: "host",
												Start: ast.Position{
													Column: 3,
													Line:   21,
												},
											},
										},
										Name: "host",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   21,
												},
												File:   "usage.flux",
												Source: "host",
												Start: ast.Position{
													Column: 9,
													Line:   21,
												},
											},
										},
										Name: "host",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   22,
											},
											File:   "usage.flux",
											Source: "token: token",
											Start: ast.Position{
												Column: 3,
												Line:   22,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   22,
												},
												File:   "usage.flux",
												Source: "token",
												Start: ast.Position{
													Column: 3,
													Line:   22,
												},
											},
										},
										Name: "token",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   22,
												},
												File:   "usage.flux",
												Source: "token",
												Start: ast.Position{
													Column: 10,
													Line:   22,
												},
											},
										},
										Name: "token",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   27,
											},
											File:   "usage.flux",
											Source: "query: [\n                \"start\": string(v: start),\n                \"stop\": string(v: stop),\n                \"raw\": string(v: raw),\n        ]",
											Start: ast.Position{
												Column: 9,
												Line:   23,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   23,
												},
												File:   "usage.flux",
												Source: "query",
												Start: ast.Position{
													Column: 9,
													Line:   23,
												},
											},
										},
										Name: "query",
									},
									Separator: nil,
									Value: &ast.DictExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 10,
													Line:   27,
												},
												File:   "usage.flux",
												Source: "[\n                \"start\": string(v: start),\n                \"stop\": string(v: stop),\n                \"raw\": string(v: raw),\n        ]",
												Start: ast.Position{
													Column: 16,
													Line:   23,
												},
											},
										},
										Elements: []*ast.DictItem{&ast.DictItem{
											Comma: nil,
											Key: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   24,
														},
														File:   "usage.flux",
														Source: "\"start\"",
														Start: ast.Position{
															Column: 17,
															Line:   24,
														},
													},
												},
												Value: "start",
											},
											Val: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 41,
																Line:   24,
															},
															File:   "usage.flux",
															Source: "v: start",
															Start: ast.Position{
																Column: 33,
																Line:   24,
															},
														},
													},
													Lbrace: nil,
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 41,
																	Line:   24,
																},
																File:   "usage.flux",
																Source: "v: start",
																Start: ast.Position{
																	Column: 33,
																	Line:   24,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 34,
																		Line:   24,
																	},
																	File:   "usage.flux",
																	Source: "v",
																	Start: ast.Position{
																		Column: 33,
																		Line:   24,
																	},
																},
															},
															Name: "v",
														},
														Separator: nil,
														Value: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 41,
																		Line:   24,
																	},
																	File:   "usage.flux",
																	Source: "start",
																	Start: ast.Position{
																		Column: 36,
																		Line:   24,
																	},
																},
															},
															Name: "start",
														},
													}},
													Rbrace: nil,
													With:   nil,
												}},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   24,
														},
														File:   "usage.flux",
														Source: "string(v: start)",
														Start: ast.Position{
															Column: 26,
															Line:   24,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 32,
																Line:   24,
															},
															File:   "usage.flux",
															Source: "string",
															Start: ast.Position{
																Column: 26,
																Line:   24,
															},
														},
													},
													Name: "string",
												},
												Lparen: nil,
												Rparen: nil,
											},
										}, &ast.DictItem{
											Comma: nil,
											Key: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 23,
															Line:   25,
														},
														File:   "usage.flux",
														Source: "\"stop\"",
														Start: ast.Position{
															Column: 17,
															Line:   25,
														},
													},
												},
												Value: "stop",
											},
											Val: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 39,
																Line:   25,
															},
															File:   "usage.flux",
															Source: "v: stop",
															Start: ast.Position{
																Column: 32,
																Line:   25,
															},
														},
													},
													Lbrace: nil,
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 39,
																	Line:   25,
																},
																File:   "usage.flux",
																Source: "v: stop",
																Start: ast.Position{
																	Column: 32,
																	Line:   25,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 33,
																		Line:   25,
																	},
																	File:   "usage.flux",
																	Source: "v",
																	Start: ast.Position{
																		Column: 32,
																		Line:   25,
																	},
																},
															},
															Name: "v",
														},
														Separator: nil,
														Value: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 39,
																		Line:   25,
																	},
																	File:   "usage.flux",
																	Source: "stop",
																	Start: ast.Position{
																		Column: 35,
																		Line:   25,
																	},
																},
															},
															Name: "stop",
														},
													}},
													Rbrace: nil,
													With:   nil,
												}},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   25,
														},
														File:   "usage.flux",
														Source: "string(v: stop)",
														Start: ast.Position{
															Column: 25,
															Line:   25,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   25,
															},
															File:   "usage.flux",
															Source: "string",
															Start: ast.Position{
																Column: 25,
																Line:   25,
															},
														},
													},
													Name: "string",
												},
												Lparen: nil,
												Rparen: nil,
											},
										}, &ast.DictItem{
											Comma: nil,
											Key: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   26,
														},
														File:   "usage.flux",
														Source: "\"raw\"",
														Start: ast.Position{
															Column: 17,
															Line:   26,
														},
													},
												},
												Value: "raw",
											},
											Val: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   26,
															},
															File:   "usage.flux",
															Source: "v: raw",
															Start: ast.Position{
																Column: 31,
																Line:   26,
															},
														},
													},
													Lbrace: nil,
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   26,
																},
																File:   "usage.flux",
																Source: "v: raw",
																Start: ast.Position{
																	Column: 31,
																	Line:   26,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 32,
																		Line:   26,
																	},
																	File:   "usage.flux",
																	Source: "v",
																	Start: ast.Position{
																		Column: 31,
																		Line:   26,
																	},
																},
															},
															Name: "v",
														},
														Separator: nil,
														Value: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 37,
																		Line:   26,
																	},
																	File:   "usage.flux",
																	Source: "raw",
																	Start: ast.Position{
																		Column: 34,
																		Line:   26,
																	},
																},
															},
															Name: "raw",
														},
													}},
													Rbrace: nil,
													With:   nil,
												}},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   26,
														},
														File:   "usage.flux",
														Source: "string(v: raw)",
														Start: ast.Position{
															Column: 24,
															Line:   26,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 30,
																Line:   26,
															},
															File:   "usage.flux",
															Source: "string",
															Start: ast.Position{
																Column: 24,
																Line:   26,
															},
														},
													},
													Name: "string",
												},
												Lparen: nil,
												Rparen: nil,
											},
										}},
										Lbrack: nil,
										Rbrack: nil,
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 3,
										Line:   28,
									},
									File:   "usage.flux",
									Source: "influxdb.api(\n        method: \"get\",\n\t\tpath: \"/api/v2/orgs/\" + id + \"/usage\",\n\t\thost: host,\n\t\ttoken: token,\n        query: [\n                \"start\": string(v: start),\n                \"stop\": string(v: stop),\n                \"raw\": string(v: raw),\n        ],\n\t)",
									Start: ast.Position{
										Column: 13,
										Line:   18,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   18,
										},
										File:   "usage.flux",
										Source: "influxdb.api",
										Start: ast.Position{
											Column: 13,
											Line:   18,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   18,
											},
											File:   "usage.flux",
											Source: "influxdb",
											Start: ast.Position{
												Column: 13,
												Line:   18,
											},
										},
									},
									Name: "influxdb",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   18,
											},
											File:   "usage.flux",
											Source: "api",
											Start: ast.Position{
												Column: 22,
												Line:   18,
											},
										},
									},
									Name: "api",
								},
								Rbrack: nil,
							},
							Lparen: nil,
							Rparen: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.ConditionalExpression{
							Alternate: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   33,
											},
											File:   "usage.flux",
											Source: "csv: string(v: response.body)",
											Start: ast.Position{
												Column: 15,
												Line:   33,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   33,
												},
												File:   "usage.flux",
												Source: "csv: string(v: response.body)",
												Start: ast.Position{
													Column: 15,
													Line:   33,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   33,
													},
													File:   "usage.flux",
													Source: "csv",
													Start: ast.Position{
														Column: 15,
														Line:   33,
													},
												},
											},
											Name: "csv",
										},
										Separator: nil,
										Value: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   33,
														},
														File:   "usage.flux",
														Source: "v: response.body",
														Start: ast.Position{
															Column: 27,
															Line:   33,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   33,
															},
															File:   "usage.flux",
															Source: "v: response.body",
															Start: ast.Position{
																Column: 27,
																Line:   33,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 28,
																	Line:   33,
																},
																File:   "usage.flux",
																Source: "v",
																Start: ast.Position{
																	Column: 27,
																	Line:   33,
																},
															},
														},
														Name: "v",
													},
													Separator: nil,
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   33,
																},
																File:   "usage.flux",
																Source: "response.body",
																Start: ast.Position{
																	Column: 30,
																	Line:   33,
																},
															},
														},
														Lbrack: nil,
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 38,
																		Line:   33,
																	},
																	File:   "usage.flux",
																	Source: "response",
																	Start: ast.Position{
																		Column: 30,
																		Line:   33,
																	},
																},
															},
															Name: "response",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   33,
																	},
																	File:   "usage.flux",
																	Source: "body",
																	Start: ast.Position{
																		Column: 39,
																		Line:   33,
																	},
																},
															},
															Name: "body",
														},
														Rbrack: nil,
													},
												}},
												Rbrace: nil,
												With:   nil,
											}},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   33,
													},
													File:   "usage.flux",
													Source: "string(v: response.body)",
													Start: ast.Position{
														Column: 20,
														Line:   33,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 26,
															Line:   33,
														},
														File:   "usage.flux",
														Source: "string",
														Start: ast.Position{
															Column: 20,
															Line:   33,
														},
													},
												},
												Name: "string",
											},
											Lparen: nil,
											Rparen: nil,
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   33,
										},
										File:   "usage.flux",
										Source: "csv.from(csv: string(v: response.body))",
										Start: ast.Position{
											Column: 6,
											Line:   33,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   33,
											},
											File:   "usage.flux",
											Source: "csv.from",
											Start: ast.Position{
												Column: 6,
												Line:   33,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 9,
													Line:   33,
												},
												File:   "usage.flux",
												Source: "csv",
												Start: ast.Position{
													Column: 6,
													Line:   33,
												},
											},
										},
										Name: "csv",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   33,
												},
												File:   "usage.flux",
												Source: "from",
												Start: ast.Position{
													Column: 10,
													Line:   33,
												},
											},
										},
										Name: "from",
									},
									Rbrack: nil,
								},
								Lparen: nil,
								Rparen: nil,
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   33,
									},
									File:   "usage.flux",
									Source: "if response.statusCode > 299 then\n\t\tdie(msg: \"organization usage request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body))\n    else\n    \tcsv.from(csv: string(v: response.body))",
									Start: ast.Position{
										Column: 9,
										Line:   30,
									},
								},
							},
							Consequent: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 124,
												Line:   31,
											},
											File:   "usage.flux",
											Source: "msg: \"organization usage request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body)",
											Start: ast.Position{
												Column: 7,
												Line:   31,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 124,
													Line:   31,
												},
												File:   "usage.flux",
												Source: "msg: \"organization usage request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body)",
												Start: ast.Position{
													Column: 7,
													Line:   31,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 10,
														Line:   31,
													},
													File:   "usage.flux",
													Source: "msg",
													Start: ast.Position{
														Column: 7,
														Line:   31,
													},
												},
											},
											Name: "msg",
										},
										Separator: nil,
										Value: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 124,
														Line:   31,
													},
													File:   "usage.flux",
													Source: "\"organization usage request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body)",
													Start: ast.Position{
														Column: 12,
														Line:   31,
													},
												},
											},
											Left: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 97,
															Line:   31,
														},
														File:   "usage.flux",
														Source: "\"organization usage request returned status \" + string(v: response.statusCode) + \": \"",
														Start: ast.Position{
															Column: 12,
															Line:   31,
														},
													},
												},
												Left: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 90,
																Line:   31,
															},
															File:   "usage.flux",
															Source: "\"organization usage request returned status \" + string(v: response.statusCode)",
															Start: ast.Position{
																Column: 12,
																Line:   31,
															},
														},
													},
													Left: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 57,
																	Line:   31,
																},
																File:   "usage.flux",
																Source: "\"organization usage request returned status \"",
																Start: ast.Position{
																	Column: 12,
																	Line:   31,
																},
															},
														},
														Value: "organization usage request returned status ",
													},
													Operator: 5,
													Right: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 89,
																		Line:   31,
																	},
																	File:   "usage.flux",
																	Source: "v: response.statusCode",
																	Start: ast.Position{
																		Column: 67,
																		Line:   31,
																	},
																},
															},
															Lbrace: nil,
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 89,
																			Line:   31,
																		},
																		File:   "usage.flux",
																		Source: "v: response.statusCode",
																		Start: ast.Position{
																			Column: 67,
																			Line:   31,
																		},
																	},
																},
																Comma: nil,
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 68,
																				Line:   31,
																			},
																			File:   "usage.flux",
																			Source: "v",
																			Start: ast.Position{
																				Column: 67,
																				Line:   31,
																			},
																		},
																	},
																	Name: "v",
																},
																Separator: nil,
																Value: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 89,
																				Line:   31,
																			},
																			File:   "usage.flux",
																			Source: "response.statusCode",
																			Start: ast.Position{
																				Column: 70,
																				Line:   31,
																			},
																		},
																	},
																	Lbrack: nil,
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 78,
																					Line:   31,
																				},
																				File:   "usage.flux",
																				Source: "response",
																				Start: ast.Position{
																					Column: 70,
																					Line:   31,
																				},
																			},
																		},
																		Name: "response",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 89,
																					Line:   31,
																				},
																				File:   "usage.flux",
																				Source: "statusCode",
																				Start: ast.Position{
																					Column: 79,
																					Line:   31,
																				},
																			},
																		},
																		Name: "statusCode",
																	},
																	Rbrack: nil,
																},
															}},
															Rbrace: nil,
															With:   nil,
														}},
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 90,
																	Line:   31,
																},
																File:   "usage.flux",
																Source: "string(v: response.statusCode)",
																Start: ast.Position{
																	Column: 60,
																	Line:   31,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 66,
																		Line:   31,
																	},
																	File:   "usage.flux",
																	Source: "string",
																	Start: ast.Position{
																		Column: 60,
																		Line:   31,
																	},
																},
															},
															Name: "string",
														},
														Lparen: nil,
														Rparen: nil,
													},
												},
												Operator: 5,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 97,
																Line:   31,
															},
															File:   "usage.flux",
															Source: "\": \"",
															Start: ast.Position{
																Column: 93,
																Line:   31,
															},
														},
													},
													Value: ": ",
												},
											},
											Operator: 5,
											Right: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 123,
																Line:   31,
															},
															File:   "usage.flux",
															Source: "v: response.body",
															Start: ast.Position{
																Column: 107,
																Line:   31,
															},
														},
													},
													Lbrace: nil,
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 123,
																	Line:   31,
																},
																File:   "usage.flux",
																Source: "v: response.body",
																Start: ast.Position{
																	Column: 107,
																	Line:   31,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 108,
																		Line:   31,
																	},
																	File:   "usage.flux",
																	Source: "v",
																	Start: ast.Position{
																		Column: 107,
																		Line:   31,
																	},
																},
															},
															Name: "v",
														},
														Separator: nil,
														Value: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 123,
																		Line:   31,
																	},
																	File:   "usage.flux",
																	Source: "response.body",
																	Start: ast.Position{
																		Column: 110,
																		Line:   31,
																	},
																},
															},
															Lbrack: nil,
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 118,
																			Line:   31,
																		},
																		File:   "usage.flux",
																		Source: "response",
																		Start: ast.Position{
																			Column: 110,
																			Line:   31,
																		},
																	},
																},
																Name: "response",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 123,
																			Line:   31,
																		},
																		File:   "usage.flux",
																		Source: "body",
																		Start: ast.Position{
																			Column: 119,
																			Line:   31,
																		},
																	},
																},
																Name: "body",
															},
															Rbrack: nil,
														},
													}},
													Rbrace: nil,
													With:   nil,
												}},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 124,
															Line:   31,
														},
														File:   "usage.flux",
														Source: "string(v: response.body)",
														Start: ast.Position{
															Column: 100,
															Line:   31,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 106,
																Line:   31,
															},
															File:   "usage.flux",
															Source: "string",
															Start: ast.Position{
																Column: 100,
																Line:   31,
															},
														},
													},
													Name: "string",
												},
												Lparen: nil,
												Rparen: nil,
											},
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 125,
											Line:   31,
										},
										File:   "usage.flux",
										Source: "die(msg: \"organization usage request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body))",
										Start: ast.Position{
											Column: 3,
											Line:   31,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   31,
											},
											File:   "usage.flux",
											Source: "die",
											Start: ast.Position{
												Column: 3,
												Line:   31,
											},
										},
									},
									Name: "die",
								},
								Lparen: nil,
								Rparen: nil,
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   30,
										},
										File:   "usage.flux",
										Source: "response.statusCode > 299",
										Start: ast.Position{
											Column: 12,
											Line:   30,
										},
									},
								},
								Left: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   30,
											},
											File:   "usage.flux",
											Source: "response.statusCode",
											Start: ast.Position{
												Column: 12,
												Line:   30,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   30,
												},
												File:   "usage.flux",
												Source: "response",
												Start: ast.Position{
													Column: 12,
													Line:   30,
												},
											},
										},
										Name: "response",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   30,
												},
												File:   "usage.flux",
												Source: "statusCode",
												Start: ast.Position{
													Column: 21,
													Line:   30,
												},
											},
										},
										Name: "statusCode",
									},
									Rbrack: nil,
								},
								Operator: 10,
								Right: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   30,
											},
											File:   "usage.flux",
											Source: "299",
											Start: ast.Position{
												Column: 34,
												Line:   30,
											},
										},
									},
									Value: int64(299),
								},
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   33,
								},
								File:   "usage.flux",
								Source: "return if response.statusCode > 299 then\n\t\tdie(msg: \"organization usage request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body))\n    else\n    \tcsv.from(csv: string(v: response.body))",
								Start: ast.Position{
									Column: 2,
									Line:   30,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   14,
							},
							File:   "usage.flux",
							Source: "start",
							Start: ast.Position{
								Column: 9,
								Line:   14,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   14,
								},
								File:   "usage.flux",
								Source: "start",
								Start: ast.Position{
									Column: 9,
									Line:   14,
								},
							},
						},
						Name: "start",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   14,
							},
							File:   "usage.flux",
							Source: "stop",
							Start: ast.Position{
								Column: 16,
								Line:   14,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   14,
								},
								File:   "usage.flux",
								Source: "stop",
								Start: ast.Position{
									Column: 16,
									Line:   14,
								},
							},
						},
						Name: "stop",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   14,
							},
							File:   "usage.flux",
							Source: "host=\"\"",
							Start: ast.Position{
								Column: 22,
								Line:   14,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   14,
								},
								File:   "usage.flux",
								Source: "host",
								Start: ast.Position{
									Column: 22,
									Line:   14,
								},
							},
						},
						Name: "host",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   14,
								},
								File:   "usage.flux",
								Source: "\"\"",
								Start: ast.Position{
									Column: 27,
									Line:   14,
								},
							},
						},
						Value: "",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   14,
							},
							File:   "usage.flux",
							Source: "orgID=\"\"",
							Start: ast.Position{
								Column: 31,
								Line:   14,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   14,
								},
								File:   "usage.flux",
								Source: "orgID",
								Start: ast.Position{
									Column: 31,
									Line:   14,
								},
							},
						},
						Name: "orgID",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   14,
								},
								File:   "usage.flux",
								Source: "\"\"",
								Start: ast.Position{
									Column: 37,
									Line:   14,
								},
							},
						},
						Value: "",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   14,
							},
							File:   "usage.flux",
							Source: "token=\"\"",
							Start: ast.Position{
								Column: 41,
								Line:   14,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   14,
								},
								File:   "usage.flux",
								Source: "token",
								Start: ast.Position{
									Column: 41,
									Line:   14,
								},
							},
						},
						Name: "token",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   14,
								},
								File:   "usage.flux",
								Source: "\"\"",
								Start: ast.Position{
									Column: 47,
									Line:   14,
								},
							},
						},
						Value: "",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 60,
								Line:   14,
							},
							File:   "usage.flux",
							Source: "raw=false",
							Start: ast.Position{
								Column: 51,
								Line:   14,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   14,
								},
								File:   "usage.flux",
								Source: "raw",
								Start: ast.Position{
									Column: 51,
									Line:   14,
								},
							},
						},
						Name: "raw",
					},
					Separator: nil,
					Value: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 60,
									Line:   14,
								},
								File:   "usage.flux",
								Source: "false",
								Start: ast.Position{
									Column: 55,
									Line:   14,
								},
							},
						},
						Name: "false",
					},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   53,
					},
					File:   "usage.flux",
					Source: "limits = (host=\"\", orgID=\"\", token=\"\") => {\n\n\tid = if orgID == \"\" then \"{orgID}\" else http.pathEscape(inputString: orgID)\n\n\tresponse = influxdb.api(\n\t\tmethod: \"get\",\n\t\tpath: \"/api/v2/orgs/\" + id + \"/limits\",\n\t\thost: host,\n\t\ttoken: token,\n\t)\n\n\treturn if response.statusCode > 299 then\n\t\tdie(msg: \"organization limits request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body))\n\telse\n\t\tjson.parse(data: response.body).limits\n}",
					Start: ast.Position{
						Column: 1,
						Line:   38,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// limits returns an organization's usage limits. Optional orgID, host\n"}, ast.Comment{Text: "// and token arguments allow cross-org and/or cross-cluster calls.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   38,
						},
						File:   "usage.flux",
						Source: "limits",
						Start: ast.Position{
							Column: 1,
							Line:   38,
						},
					},
				},
				Name: "limits",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   53,
						},
						File:   "usage.flux",
						Source: "(host=\"\", orgID=\"\", token=\"\") => {\n\n\tid = if orgID == \"\" then \"{orgID}\" else http.pathEscape(inputString: orgID)\n\n\tresponse = influxdb.api(\n\t\tmethod: \"get\",\n\t\tpath: \"/api/v2/orgs/\" + id + \"/limits\",\n\t\thost: host,\n\t\ttoken: token,\n\t)\n\n\treturn if response.statusCode > 299 then\n\t\tdie(msg: \"organization limits request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body))\n\telse\n\t\tjson.parse(data: response.body).limits\n}",
						Start: ast.Position{
							Column: 10,
							Line:   38,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   53,
							},
							File:   "usage.flux",
							Source: "{\n\n\tid = if orgID == \"\" then \"{orgID}\" else http.pathEscape(inputString: orgID)\n\n\tresponse = influxdb.api(\n\t\tmethod: \"get\",\n\t\tpath: \"/api/v2/orgs/\" + id + \"/limits\",\n\t\thost: host,\n\t\ttoken: token,\n\t)\n\n\treturn if response.statusCode > 299 then\n\t\tdie(msg: \"organization limits request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body))\n\telse\n\t\tjson.parse(data: response.body).limits\n}",
							Start: ast.Position{
								Column: 43,
								Line:   38,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 77,
									Line:   40,
								},
								File:   "usage.flux",
								Source: "id = if orgID == \"\" then \"{orgID}\" else http.pathEscape(inputString: orgID)",
								Start: ast.Position{
									Column: 2,
									Line:   40,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 4,
										Line:   40,
									},
									File:   "usage.flux",
									Source: "id",
									Start: ast.Position{
										Column: 2,
										Line:   40,
									},
								},
							},
							Name: "id",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 76,
												Line:   40,
											},
											File:   "usage.flux",
											Source: "inputString: orgID",
											Start: ast.Position{
												Column: 58,
												Line:   40,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 76,
													Line:   40,
												},
												File:   "usage.flux",
												Source: "inputString: orgID",
												Start: ast.Position{
													Column: 58,
													Line:   40,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 69,
														Line:   40,
													},
													File:   "usage.flux",
													Source: "inputString",
													Start: ast.Position{
														Column: 58,
														Line:   40,
													},
												},
											},
											Name: "inputString",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 76,
														Line:   40,
													},
													File:   "usage.flux",
													Source: "orgID",
													Start: ast.Position{
														Column: 71,
														Line:   40,
													},
												},
											},
											Name: "orgID",
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 77,
											Line:   40,
										},
										File:   "usage.flux",
										Source: "http.pathEscape(inputString: orgID)",
										Start: ast.Position{
											Column: 42,
											Line:   40,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   40,
											},
											File:   "usage.flux",
											Source: "http.pathEscape",
											Start: ast.Position{
												Column: 42,
												Line:   40,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   40,
												},
												File:   "usage.flux",
												Source: "http",
												Start: ast.Position{
													Column: 42,
													Line:   40,
												},
											},
										},
										Name: "http",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   40,
												},
												File:   "usage.flux",
												Source: "pathEscape",
												Start: ast.Position{
													Column: 47,
													Line:   40,
												},
											},
										},
										Name: "pathEscape",
									},
									Rbrack: nil,
								},
								Lparen: nil,
								Rparen: nil,
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 77,
										Line:   40,
									},
									File:   "usage.flux",
									Source: "if orgID == \"\" then \"{orgID}\" else http.pathEscape(inputString: orgID)",
									Start: ast.Position{
										Column: 7,
										Line:   40,
									},
								},
							},
							Consequent: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   40,
										},
										File:   "usage.flux",
										Source: "\"{orgID}\"",
										Start: ast.Position{
											Column: 27,
											Line:   40,
										},
									},
								},
								Value: "{orgID}",
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   40,
										},
										File:   "usage.flux",
										Source: "orgID == \"\"",
										Start: ast.Position{
											Column: 10,
											Line:   40,
										},
									},
								},
								Left: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   40,
											},
											File:   "usage.flux",
											Source: "orgID",
											Start: ast.Position{
												Column: 10,
												Line:   40,
											},
										},
									},
									Name: "orgID",
								},
								Operator: 17,
								Right: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   40,
											},
											File:   "usage.flux",
											Source: "\"\"",
											Start: ast.Position{
												Column: 19,
												Line:   40,
											},
										},
									},
									Value: "",
								},
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 3,
									Line:   47,
								},
								File:   "usage.flux",
								Source: "response = influxdb.api(\n\t\tmethod: \"get\",\n\t\tpath: \"/api/v2/orgs/\" + id + \"/limits\",\n\t\thost: host,\n\t\ttoken: token,\n\t)",
								Start: ast.Position{
									Column: 2,
									Line:   42,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   42,
									},
									File:   "usage.flux",
									Source: "response",
									Start: ast.Position{
										Column: 2,
										Line:   42,
									},
								},
							},
							Name: "response",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   46,
										},
										File:   "usage.flux",
										Source: "method: \"get\",\n\t\tpath: \"/api/v2/orgs/\" + id + \"/limits\",\n\t\thost: host,\n\t\ttoken: token",
										Start: ast.Position{
											Column: 3,
											Line:   43,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   43,
											},
											File:   "usage.flux",
											Source: "method: \"get\"",
											Start: ast.Position{
												Column: 3,
												Line:   43,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 9,
													Line:   43,
												},
												File:   "usage.flux",
												Source: "method",
												Start: ast.Position{
													Column: 3,
													Line:   43,
												},
											},
										},
										Name: "method",
									},
									Separator: nil,
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   43,
												},
												File:   "usage.flux",
												Source: "\"get\"",
												Start: ast.Position{
													Column: 11,
													Line:   43,
												},
											},
										},
										Value: "get",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   44,
											},
											File:   "usage.flux",
											Source: "path: \"/api/v2/orgs/\" + id + \"/limits\"",
											Start: ast.Position{
												Column: 3,
												Line:   44,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 7,
													Line:   44,
												},
												File:   "usage.flux",
												Source: "path",
												Start: ast.Position{
													Column: 3,
													Line:   44,
												},
											},
										},
										Name: "path",
									},
									Separator: nil,
									Value: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   44,
												},
												File:   "usage.flux",
												Source: "\"/api/v2/orgs/\" + id + \"/limits\"",
												Start: ast.Position{
													Column: 9,
													Line:   44,
												},
											},
										},
										Left: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   44,
													},
													File:   "usage.flux",
													Source: "\"/api/v2/orgs/\" + id",
													Start: ast.Position{
														Column: 9,
														Line:   44,
													},
												},
											},
											Left: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   44,
														},
														File:   "usage.flux",
														Source: "\"/api/v2/orgs/\"",
														Start: ast.Position{
															Column: 9,
															Line:   44,
														},
													},
												},
												Value: "/api/v2/orgs/",
											},
											Operator: 5,
											Right: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   44,
														},
														File:   "usage.flux",
														Source: "id",
														Start: ast.Position{
															Column: 27,
															Line:   44,
														},
													},
												},
												Name: "id",
											},
										},
										Operator: 5,
										Right: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   44,
													},
													File:   "usage.flux",
													Source: "\"/limits\"",
													Start: ast.Position{
														Column: 32,
														Line:   44,
													},
												},
											},
											Value: "/limits",
										},
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   45,
											},
											File:   "usage.flux",
											Source: "host: host",
											Start: ast.Position{
												Column: 3,
												Line:   45,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 7,
													Line:   45,
												},
												File:   "usage.flux",
												Source: "host",
												Start: ast.Position{
													Column: 3,
													Line:   45,
												},
											},
										},
										Name: "host",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   45,
												},
												File:   "usage.flux",
												Source: "host",
												Start: ast.Position{
													Column: 9,
													Line:   45,
												},
											},
										},
										Name: "host",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   46,
											},
											File:   "usage.flux",
											Source: "token: token",
											Start: ast.Position{
												Column: 3,
												Line:   46,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 8,
													Line:   46,
												},
												File:   "usage.flux",
												Source: "token",
												Start: ast.Position{
													Column: 3,
													Line:   46,
												},
											},
										},
										Name: "token",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   46,
												},
												File:   "usage.flux",
												Source: "token",
												Start: ast.Position{
													Column: 10,
													Line:   46,
												},
											},
										},
										Name: "token",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 3,
										Line:   47,
									},
									File:   "usage.flux",
									Source: "influxdb.api(\n\t\tmethod: \"get\",\n\t\tpath: \"/api/v2/orgs/\" + id + \"/limits\",\n\t\thost: host,\n\t\ttoken: token,\n\t)",
									Start: ast.Position{
										Column: 13,
										Line:   42,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   42,
										},
										File:   "usage.flux",
										Source: "influxdb.api",
										Start: ast.Position{
											Column: 13,
											Line:   42,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   42,
											},
											File:   "usage.flux",
											Source: "influxdb",
											Start: ast.Position{
												Column: 13,
												Line:   42,
											},
										},
									},
									Name: "influxdb",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   42,
											},
											File:   "usage.flux",
											Source: "api",
											Start: ast.Position{
												Column: 22,
												Line:   42,
											},
										},
									},
									Name: "api",
								},
								Rbrack: nil,
							},
							Lparen: nil,
							Rparen: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.ConditionalExpression{
							Alternate: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   52,
										},
										File:   "usage.flux",
										Source: "json.parse(data: response.body).limits",
										Start: ast.Position{
											Column: 3,
											Line:   52,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   52,
												},
												File:   "usage.flux",
												Source: "data: response.body",
												Start: ast.Position{
													Column: 14,
													Line:   52,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   52,
													},
													File:   "usage.flux",
													Source: "data: response.body",
													Start: ast.Position{
														Column: 14,
														Line:   52,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   52,
														},
														File:   "usage.flux",
														Source: "data",
														Start: ast.Position{
															Column: 14,
															Line:   52,
														},
													},
												},
												Name: "data",
											},
											Separator: nil,
											Value: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 33,
															Line:   52,
														},
														File:   "usage.flux",
														Source: "response.body",
														Start: ast.Position{
															Column: 20,
															Line:   52,
														},
													},
												},
												Lbrack: nil,
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   52,
															},
															File:   "usage.flux",
															Source: "response",
															Start: ast.Position{
																Column: 20,
																Line:   52,
															},
														},
													},
													Name: "response",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   52,
															},
															File:   "usage.flux",
															Source: "body",
															Start: ast.Position{
																Column: 29,
																Line:   52,
															},
														},
													},
													Name: "body",
												},
												Rbrack: nil,
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   52,
											},
											File:   "usage.flux",
											Source: "json.parse(data: response.body)",
											Start: ast.Position{
												Column: 3,
												Line:   52,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   52,
												},
												File:   "usage.flux",
												Source: "json.parse",
												Start: ast.Position{
													Column: 3,
													Line:   52,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 7,
														Line:   52,
													},
													File:   "usage.flux",
													Source: "json",
													Start: ast.Position{
														Column: 3,
														Line:   52,
													},
												},
											},
											Name: "json",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   52,
													},
													File:   "usage.flux",
													Source: "parse",
													Start: ast.Position{
														Column: 8,
														Line:   52,
													},
												},
											},
											Name: "parse",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   52,
											},
											File:   "usage.flux",
											Source: "limits",
											Start: ast.Position{
												Column: 35,
												Line:   52,
											},
										},
									},
									Name: "limits",
								},
								Rbrack: nil,
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   52,
									},
									File:   "usage.flux",
									Source: "if response.statusCode > 299 then\n\t\tdie(msg: \"organization limits request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body))\n\telse\n\t\tjson.parse(data: response.body).limits",
									Start: ast.Position{
										Column: 9,
										Line:   49,
									},
								},
							},
							Consequent: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 125,
												Line:   50,
											},
											File:   "usage.flux",
											Source: "msg: \"organization limits request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body)",
											Start: ast.Position{
												Column: 7,
												Line:   50,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 125,
													Line:   50,
												},
												File:   "usage.flux",
												Source: "msg: \"organization limits request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body)",
												Start: ast.Position{
													Column: 7,
													Line:   50,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 10,
														Line:   50,
													},
													File:   "usage.flux",
													Source: "msg",
													Start: ast.Position{
														Column: 7,
														Line:   50,
													},
												},
											},
											Name: "msg",
										},
										Separator: nil,
										Value: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 125,
														Line:   50,
													},
													File:   "usage.flux",
													Source: "\"organization limits request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body)",
													Start: ast.Position{
														Column: 12,
														Line:   50,
													},
												},
											},
											Left: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 98,
															Line:   50,
														},
														File:   "usage.flux",
														Source: "\"organization limits request returned status \" + string(v: response.statusCode) + \": \"",
														Start: ast.Position{
															Column: 12,
															Line:   50,
														},
													},
												},
												Left: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 91,
																Line:   50,
															},
															File:   "usage.flux",
															Source: "\"organization limits request returned status \" + string(v: response.statusCode)",
															Start: ast.Position{
																Column: 12,
																Line:   50,
															},
														},
													},
													Left: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 58,
																	Line:   50,
																},
																File:   "usage.flux",
																Source: "\"organization limits request returned status \"",
																Start: ast.Position{
																	Column: 12,
																	Line:   50,
																},
															},
														},
														Value: "organization limits request returned status ",
													},
													Operator: 5,
													Right: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 90,
																		Line:   50,
																	},
																	File:   "usage.flux",
																	Source: "v: response.statusCode",
																	Start: ast.Position{
																		Column: 68,
																		Line:   50,
																	},
																},
															},
															Lbrace: nil,
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 90,
																			Line:   50,
																		},
																		File:   "usage.flux",
																		Source: "v: response.statusCode",
																		Start: ast.Position{
																			Column: 68,
																			Line:   50,
																		},
																	},
																},
																Comma: nil,
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 69,
																				Line:   50,
																			},
																			File:   "usage.flux",
																			Source: "v",
																			Start: ast.Position{
																				Column: 68,
																				Line:   50,
																			},
																		},
																	},
																	Name: "v",
																},
																Separator: nil,
																Value: &ast.MemberExpression{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 90,
																				Line:   50,
																			},
																			File:   "usage.flux",
																			Source: "response.statusCode",
																			Start: ast.Position{
																				Column: 71,
																				Line:   50,
																			},
																		},
																	},
																	Lbrack: nil,
																	Object: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 79,
																					Line:   50,
																				},
																				File:   "usage.flux",
																				Source: "response",
																				Start: ast.Position{
																					Column: 71,
																					Line:   50,
																				},
																			},
																		},
																		Name: "response",
																	},
																	Property: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 90,
																					Line:   50,
																				},
																				File:   "usage.flux",
																				Source: "statusCode",
																				Start: ast.Position{
																					Column: 80,
																					Line:   50,
																				},
																			},
																		},
																		Name: "statusCode",
																	},
																	Rbrack: nil,
																},
															}},
															Rbrace: nil,
															With:   nil,
														}},
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 91,
																	Line:   50,
																},
																File:   "usage.flux",
																Source: "string(v: response.statusCode)",
																Start: ast.Position{
																	Column: 61,
																	Line:   50,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 67,
																		Line:   50,
																	},
																	File:   "usage.flux",
																	Source: "string",
																	Start: ast.Position{
																		Column: 61,
																		Line:   50,
																	},
																},
															},
															Name: "string",
														},
														Lparen: nil,
														Rparen: nil,
													},
												},
												Operator: 5,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 98,
																Line:   50,
															},
															File:   "usage.flux",
															Source: "\": \"",
															Start: ast.Position{
																Column: 94,
																Line:   50,
															},
														},
													},
													Value: ": ",
												},
											},
											Operator: 5,
											Right: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 124,
																Line:   50,
															},
															File:   "usage.flux",
															Source: "v: response.body",
															Start: ast.Position{
																Column: 108,
																Line:   50,
															},
														},
													},
													Lbrace: nil,
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 124,
																	Line:   50,
																},
																File:   "usage.flux",
																Source: "v: response.body",
																Start: ast.Position{
																	Column: 108,
																	Line:   50,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 109,
																		Line:   50,
																	},
																	File:   "usage.flux",
																	Source: "v",
																	Start: ast.Position{
																		Column: 108,
																		Line:   50,
																	},
																},
															},
															Name: "v",
														},
														Separator: nil,
														Value: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 124,
																		Line:   50,
																	},
																	File:   "usage.flux",
																	Source: "response.body",
																	Start: ast.Position{
																		Column: 111,
																		Line:   50,
																	},
																},
															},
															Lbrack: nil,
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 119,
																			Line:   50,
																		},
																		File:   "usage.flux",
																		Source: "response",
																		Start: ast.Position{
																			Column: 111,
																			Line:   50,
																		},
																	},
																},
																Name: "response",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 124,
																			Line:   50,
																		},
																		File:   "usage.flux",
																		Source: "body",
																		Start: ast.Position{
																			Column: 120,
																			Line:   50,
																		},
																	},
																},
																Name: "body",
															},
															Rbrack: nil,
														},
													}},
													Rbrace: nil,
													With:   nil,
												}},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 125,
															Line:   50,
														},
														File:   "usage.flux",
														Source: "string(v: response.body)",
														Start: ast.Position{
															Column: 101,
															Line:   50,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 107,
																Line:   50,
															},
															File:   "usage.flux",
															Source: "string",
															Start: ast.Position{
																Column: 101,
																Line:   50,
															},
														},
													},
													Name: "string",
												},
												Lparen: nil,
												Rparen: nil,
											},
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 126,
											Line:   50,
										},
										File:   "usage.flux",
										Source: "die(msg: \"organization limits request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body))",
										Start: ast.Position{
											Column: 3,
											Line:   50,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   50,
											},
											File:   "usage.flux",
											Source: "die",
											Start: ast.Position{
												Column: 3,
												Line:   50,
											},
										},
									},
									Name: "die",
								},
								Lparen: nil,
								Rparen: nil,
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   49,
										},
										File:   "usage.flux",
										Source: "response.statusCode > 299",
										Start: ast.Position{
											Column: 12,
											Line:   49,
										},
									},
								},
								Left: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   49,
											},
											File:   "usage.flux",
											Source: "response.statusCode",
											Start: ast.Position{
												Column: 12,
												Line:   49,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   49,
												},
												File:   "usage.flux",
												Source: "response",
												Start: ast.Position{
													Column: 12,
													Line:   49,
												},
											},
										},
										Name: "response",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   49,
												},
												File:   "usage.flux",
												Source: "statusCode",
												Start: ast.Position{
													Column: 21,
													Line:   49,
												},
											},
										},
										Name: "statusCode",
									},
									Rbrack: nil,
								},
								Operator: 10,
								Right: &ast.IntegerLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   49,
											},
											File:   "usage.flux",
											Source: "299",
											Start: ast.Position{
												Column: 34,
												Line:   49,
											},
										},
									},
									Value: int64(299),
								},
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   52,
								},
								File:   "usage.flux",
								Source: "return if response.statusCode > 299 then\n\t\tdie(msg: \"organization limits request returned status \" + string(v: response.statusCode) + \": \" + string(v: response.body))\n\telse\n\t\tjson.parse(data: response.body).limits",
								Start: ast.Position{
									Column: 2,
									Line:   49,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   38,
							},
							File:   "usage.flux",
							Source: "host=\"\"",
							Start: ast.Position{
								Column: 11,
								Line:   38,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   38,
								},
								File:   "usage.flux",
								Source: "host",
								Start: ast.Position{
									Column: 11,
									Line:   38,
								},
							},
						},
						Name: "host",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   38,
								},
								File:   "usage.flux",
								Source: "\"\"",
								Start: ast.Position{
									Column: 16,
									Line:   38,
								},
							},
						},
						Value: "",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   38,
							},
							File:   "usage.flux",
							Source: "orgID=\"\"",
							Start: ast.Position{
								Column: 20,
								Line:   38,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   38,
								},
								File:   "usage.flux",
								Source: "orgID",
								Start: ast.Position{
									Column: 20,
									Line:   38,
								},
							},
						},
						Name: "orgID",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   38,
								},
								File:   "usage.flux",
								Source: "\"\"",
								Start: ast.Position{
									Column: 26,
									Line:   38,
								},
							},
						},
						Value: "",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 38,
								Line:   38,
							},
							File:   "usage.flux",
							Source: "token=\"\"",
							Start: ast.Position{
								Column: 30,
								Line:   38,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   38,
								},
								File:   "usage.flux",
								Source: "token",
								Start: ast.Position{
									Column: 30,
									Line:   38,
								},
							},
						},
						Name: "token",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   38,
								},
								File:   "usage.flux",
								Source: "\"\"",
								Start: ast.Position{
									Column: 36,
									Line:   38,
								},
							},
						},
						Value: "",
					},
				}},
				Rparan: nil,
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   3,
					},
					File:   "usage.flux",
					Source: "import \"csv\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   3,
						},
						File:   "usage.flux",
						Source: "\"csv\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "csv",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 31,
						Line:   4,
					},
					File:   "usage.flux",
					Source: "import \"experimental/influxdb\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 31,
							Line:   4,
						},
						File:   "usage.flux",
						Source: "\"experimental/influxdb\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "experimental/influxdb",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 27,
						Line:   5,
					},
					File:   "usage.flux",
					Source: "import \"experimental/json\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   5,
						},
						File:   "usage.flux",
						Source: "\"experimental/json\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "experimental/json",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   6,
					},
					File:   "usage.flux",
					Source: "import \"http\"",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   6,
						},
						File:   "usage.flux",
						Source: "\"http\"",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				Value: "http",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "usage.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   1,
					},
					File:   "usage.flux",
					Source: "package usage",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   1,
						},
						File:   "usage.flux",
						Source: "usage",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "usage",
			},
		},
	}},
	Package: "usage",
	Path:    "experimental/usage",
}
