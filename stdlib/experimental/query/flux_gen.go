// DO NOT EDIT: This file is autogenerated via the builtin command.

package query

import (
	flux "github.com/influxdata/flux"
	ast "github.com/influxdata/flux/ast"
)

func init() {
	flux.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 32,
					Line:   26,
				},
				File:   "from.flux",
				Source: "package query\n\nfromRange = (bucket, start, stop=now()) =>\n    from(bucket: bucket)\n        |> range(start: start, stop: stop)\n\nfilterMeasurement = (table=<-, measurement) => table |> filter(fn: (r) => r._measurement == measurement)\n\nfilterFields = (table=<-, fields=[]) =>\n    if length(arr: fields) == 0 then\n        table\n    else\n        table |> filter(fn: (r) => contains(value: r._field, set: fields))\n\ninBucket = (\n    bucket,\n    measurement,\n    start,\n    stop=now(),\n    fields=[],\n    predicate=(r) => true\n) =>\n    fromRange(bucket: bucket, start: start, stop: stop)\n        |> filterMeasurement(measurement)\n        |> filter(fn: predicate)\n        |> filterFields(fields)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 43,
						Line:   5,
					},
					File:   "from.flux",
					Source: "fromRange = (bucket, start, stop=now()) =>\n    from(bucket: bucket)\n        |> range(start: start, stop: stop)",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   3,
						},
						File:   "from.flux",
						Source: "fromRange",
						Start: ast.Position{
							Column: 1,
							Line:   3,
						},
					},
				},
				Name: "fromRange",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 43,
							Line:   5,
						},
						File:   "from.flux",
						Source: "(bucket, start, stop=now()) =>\n    from(bucket: bucket)\n        |> range(start: start, stop: stop)",
						Start: ast.Position{
							Column: 13,
							Line:   3,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   4,
									},
									File:   "from.flux",
									Source: "bucket: bucket",
									Start: ast.Position{
										Column: 10,
										Line:   4,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   4,
										},
										File:   "from.flux",
										Source: "bucket: bucket",
										Start: ast.Position{
											Column: 10,
											Line:   4,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   4,
											},
											File:   "from.flux",
											Source: "bucket",
											Start: ast.Position{
												Column: 10,
												Line:   4,
											},
										},
									},
									Name: "bucket",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   4,
											},
											File:   "from.flux",
											Source: "bucket",
											Start: ast.Position{
												Column: 18,
												Line:   4,
											},
										},
									},
									Name: "bucket",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   4,
								},
								File:   "from.flux",
								Source: "from(bucket: bucket)",
								Start: ast.Position{
									Column: 5,
									Line:   4,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   4,
									},
									File:   "from.flux",
									Source: "from",
									Start: ast.Position{
										Column: 5,
										Line:   4,
									},
								},
							},
							Name: "from",
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   5,
							},
							File:   "from.flux",
							Source: "from(bucket: bucket)\n        |> range(start: start, stop: stop)",
							Start: ast.Position{
								Column: 5,
								Line:   4,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   5,
									},
									File:   "from.flux",
									Source: "start: start, stop: stop",
									Start: ast.Position{
										Column: 18,
										Line:   5,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   5,
										},
										File:   "from.flux",
										Source: "start: start",
										Start: ast.Position{
											Column: 18,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   5,
											},
											File:   "from.flux",
											Source: "start",
											Start: ast.Position{
												Column: 18,
												Line:   5,
											},
										},
									},
									Name: "start",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   5,
											},
											File:   "from.flux",
											Source: "start",
											Start: ast.Position{
												Column: 25,
												Line:   5,
											},
										},
									},
									Name: "start",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   5,
										},
										File:   "from.flux",
										Source: "stop: stop",
										Start: ast.Position{
											Column: 32,
											Line:   5,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   5,
											},
											File:   "from.flux",
											Source: "stop",
											Start: ast.Position{
												Column: 32,
												Line:   5,
											},
										},
									},
									Name: "stop",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   5,
											},
											File:   "from.flux",
											Source: "stop",
											Start: ast.Position{
												Column: 38,
												Line:   5,
											},
										},
									},
									Name: "stop",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   5,
								},
								File:   "from.flux",
								Source: "range(start: start, stop: stop)",
								Start: ast.Position{
									Column: 12,
									Line:   5,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   5,
									},
									File:   "from.flux",
									Source: "range",
									Start: ast.Position{
										Column: 12,
										Line:   5,
									},
								},
							},
							Name: "range",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   3,
							},
							File:   "from.flux",
							Source: "bucket",
							Start: ast.Position{
								Column: 14,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   3,
								},
								File:   "from.flux",
								Source: "bucket",
								Start: ast.Position{
									Column: 14,
									Line:   3,
								},
							},
						},
						Name: "bucket",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   3,
							},
							File:   "from.flux",
							Source: "start",
							Start: ast.Position{
								Column: 22,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   3,
								},
								File:   "from.flux",
								Source: "start",
								Start: ast.Position{
									Column: 22,
									Line:   3,
								},
							},
						},
						Name: "start",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   3,
							},
							File:   "from.flux",
							Source: "stop=now()",
							Start: ast.Position{
								Column: 29,
								Line:   3,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   3,
								},
								File:   "from.flux",
								Source: "stop",
								Start: ast.Position{
									Column: 29,
									Line:   3,
								},
							},
						},
						Name: "stop",
					},
					Value: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   3,
								},
								File:   "from.flux",
								Source: "now()",
								Start: ast.Position{
									Column: 34,
									Line:   3,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   3,
									},
									File:   "from.flux",
									Source: "now",
									Start: ast.Position{
										Column: 34,
										Line:   3,
									},
								},
							},
							Name: "now",
						},
					},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 105,
						Line:   7,
					},
					File:   "from.flux",
					Source: "filterMeasurement = (table=<-, measurement) => table |> filter(fn: (r) => r._measurement == measurement)",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   7,
						},
						File:   "from.flux",
						Source: "filterMeasurement",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "filterMeasurement",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 105,
							Line:   7,
						},
						File:   "from.flux",
						Source: "(table=<-, measurement) => table |> filter(fn: (r) => r._measurement == measurement)",
						Start: ast.Position{
							Column: 21,
							Line:   7,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   7,
								},
								File:   "from.flux",
								Source: "table",
								Start: ast.Position{
									Column: 48,
									Line:   7,
								},
							},
						},
						Name: "table",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 105,
								Line:   7,
							},
							File:   "from.flux",
							Source: "table |> filter(fn: (r) => r._measurement == measurement)",
							Start: ast.Position{
								Column: 48,
								Line:   7,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 104,
										Line:   7,
									},
									File:   "from.flux",
									Source: "fn: (r) => r._measurement == measurement",
									Start: ast.Position{
										Column: 64,
										Line:   7,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 104,
											Line:   7,
										},
										File:   "from.flux",
										Source: "fn: (r) => r._measurement == measurement",
										Start: ast.Position{
											Column: 64,
											Line:   7,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   7,
											},
											File:   "from.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 64,
												Line:   7,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 104,
												Line:   7,
											},
											File:   "from.flux",
											Source: "(r) => r._measurement == measurement",
											Start: ast.Position{
												Column: 68,
												Line:   7,
											},
										},
									},
									Body: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 104,
													Line:   7,
												},
												File:   "from.flux",
												Source: "r._measurement == measurement",
												Start: ast.Position{
													Column: 75,
													Line:   7,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 89,
														Line:   7,
													},
													File:   "from.flux",
													Source: "r._measurement",
													Start: ast.Position{
														Column: 75,
														Line:   7,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 76,
															Line:   7,
														},
														File:   "from.flux",
														Source: "r",
														Start: ast.Position{
															Column: 75,
															Line:   7,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 89,
															Line:   7,
														},
														File:   "from.flux",
														Source: "_measurement",
														Start: ast.Position{
															Column: 77,
															Line:   7,
														},
													},
												},
												Name: "_measurement",
											},
										},
										Operator: 17,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 104,
														Line:   7,
													},
													File:   "from.flux",
													Source: "measurement",
													Start: ast.Position{
														Column: 93,
														Line:   7,
													},
												},
											},
											Name: "measurement",
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 70,
													Line:   7,
												},
												File:   "from.flux",
												Source: "r",
												Start: ast.Position{
													Column: 69,
													Line:   7,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 70,
														Line:   7,
													},
													File:   "from.flux",
													Source: "r",
													Start: ast.Position{
														Column: 69,
														Line:   7,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 105,
									Line:   7,
								},
								File:   "from.flux",
								Source: "filter(fn: (r) => r._measurement == measurement)",
								Start: ast.Position{
									Column: 57,
									Line:   7,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 63,
										Line:   7,
									},
									File:   "from.flux",
									Source: "filter",
									Start: ast.Position{
										Column: 57,
										Line:   7,
									},
								},
							},
							Name: "filter",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   7,
							},
							File:   "from.flux",
							Source: "table=<-",
							Start: ast.Position{
								Column: 22,
								Line:   7,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   7,
								},
								File:   "from.flux",
								Source: "table",
								Start: ast.Position{
									Column: 22,
									Line:   7,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   7,
							},
							File:   "from.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 28,
								Line:   7,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   7,
							},
							File:   "from.flux",
							Source: "measurement",
							Start: ast.Position{
								Column: 32,
								Line:   7,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   7,
								},
								File:   "from.flux",
								Source: "measurement",
								Start: ast.Position{
									Column: 32,
									Line:   7,
								},
							},
						},
						Name: "measurement",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 75,
						Line:   13,
					},
					File:   "from.flux",
					Source: "filterFields = (table=<-, fields=[]) =>\n    if length(arr: fields) == 0 then\n        table\n    else\n        table |> filter(fn: (r) => contains(value: r._field, set: fields))",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   9,
						},
						File:   "from.flux",
						Source: "filterFields",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Name: "filterFields",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 75,
							Line:   13,
						},
						File:   "from.flux",
						Source: "(table=<-, fields=[]) =>\n    if length(arr: fields) == 0 then\n        table\n    else\n        table |> filter(fn: (r) => contains(value: r._field, set: fields))",
						Start: ast.Position{
							Column: 16,
							Line:   9,
						},
					},
				},
				Body: &ast.ConditionalExpression{
					Alternate: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   13,
									},
									File:   "from.flux",
									Source: "table",
									Start: ast.Position{
										Column: 9,
										Line:   13,
									},
								},
							},
							Name: "table",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 75,
									Line:   13,
								},
								File:   "from.flux",
								Source: "table |> filter(fn: (r) => contains(value: r._field, set: fields))",
								Start: ast.Position{
									Column: 9,
									Line:   13,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 74,
											Line:   13,
										},
										File:   "from.flux",
										Source: "fn: (r) => contains(value: r._field, set: fields)",
										Start: ast.Position{
											Column: 25,
											Line:   13,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 74,
												Line:   13,
											},
											File:   "from.flux",
											Source: "fn: (r) => contains(value: r._field, set: fields)",
											Start: ast.Position{
												Column: 25,
												Line:   13,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   13,
												},
												File:   "from.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 25,
													Line:   13,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 74,
													Line:   13,
												},
												File:   "from.flux",
												Source: "(r) => contains(value: r._field, set: fields)",
												Start: ast.Position{
													Column: 29,
													Line:   13,
												},
											},
										},
										Body: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 73,
															Line:   13,
														},
														File:   "from.flux",
														Source: "value: r._field, set: fields",
														Start: ast.Position{
															Column: 45,
															Line:   13,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   13,
															},
															File:   "from.flux",
															Source: "value: r._field",
															Start: ast.Position{
																Column: 45,
																Line:   13,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 50,
																	Line:   13,
																},
																File:   "from.flux",
																Source: "value",
																Start: ast.Position{
																	Column: 45,
																	Line:   13,
																},
															},
														},
														Name: "value",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   13,
																},
																File:   "from.flux",
																Source: "r._field",
																Start: ast.Position{
																	Column: 52,
																	Line:   13,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 53,
																		Line:   13,
																	},
																	File:   "from.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 52,
																		Line:   13,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 60,
																		Line:   13,
																	},
																	File:   "from.flux",
																	Source: "_field",
																	Start: ast.Position{
																		Column: 54,
																		Line:   13,
																	},
																},
															},
															Name: "_field",
														},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 73,
																Line:   13,
															},
															File:   "from.flux",
															Source: "set: fields",
															Start: ast.Position{
																Column: 62,
																Line:   13,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 65,
																	Line:   13,
																},
																File:   "from.flux",
																Source: "set",
																Start: ast.Position{
																	Column: 62,
																	Line:   13,
																},
															},
														},
														Name: "set",
													},
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 73,
																	Line:   13,
																},
																File:   "from.flux",
																Source: "fields",
																Start: ast.Position{
																	Column: 67,
																	Line:   13,
																},
															},
														},
														Name: "fields",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 74,
														Line:   13,
													},
													File:   "from.flux",
													Source: "contains(value: r._field, set: fields)",
													Start: ast.Position{
														Column: 36,
														Line:   13,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   13,
														},
														File:   "from.flux",
														Source: "contains",
														Start: ast.Position{
															Column: 36,
															Line:   13,
														},
													},
												},
												Name: "contains",
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   13,
													},
													File:   "from.flux",
													Source: "r",
													Start: ast.Position{
														Column: 30,
														Line:   13,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   13,
														},
														File:   "from.flux",
														Source: "r",
														Start: ast.Position{
															Column: 30,
															Line:   13,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 75,
										Line:   13,
									},
									File:   "from.flux",
									Source: "filter(fn: (r) => contains(value: r._field, set: fields))",
									Start: ast.Position{
										Column: 18,
										Line:   13,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   13,
										},
										File:   "from.flux",
										Source: "filter",
										Start: ast.Position{
											Column: 18,
											Line:   13,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 75,
								Line:   13,
							},
							File:   "from.flux",
							Source: "if length(arr: fields) == 0 then\n        table\n    else\n        table |> filter(fn: (r) => contains(value: r._field, set: fields))",
							Start: ast.Position{
								Column: 5,
								Line:   10,
							},
						},
					},
					Consequent: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   11,
								},
								File:   "from.flux",
								Source: "table",
								Start: ast.Position{
									Column: 9,
									Line:   11,
								},
							},
						},
						Name: "table",
					},
					Test: &ast.BinaryExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   10,
								},
								File:   "from.flux",
								Source: "length(arr: fields) == 0",
								Start: ast.Position{
									Column: 8,
									Line:   10,
								},
							},
						},
						Left: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   10,
										},
										File:   "from.flux",
										Source: "arr: fields",
										Start: ast.Position{
											Column: 15,
											Line:   10,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   10,
											},
											File:   "from.flux",
											Source: "arr: fields",
											Start: ast.Position{
												Column: 15,
												Line:   10,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   10,
												},
												File:   "from.flux",
												Source: "arr",
												Start: ast.Position{
													Column: 15,
													Line:   10,
												},
											},
										},
										Name: "arr",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   10,
												},
												File:   "from.flux",
												Source: "fields",
												Start: ast.Position{
													Column: 20,
													Line:   10,
												},
											},
										},
										Name: "fields",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   10,
									},
									File:   "from.flux",
									Source: "length(arr: fields)",
									Start: ast.Position{
										Column: 8,
										Line:   10,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   10,
										},
										File:   "from.flux",
										Source: "length",
										Start: ast.Position{
											Column: 8,
											Line:   10,
										},
									},
								},
								Name: "length",
							},
						},
						Operator: 17,
						Right: &ast.IntegerLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   10,
									},
									File:   "from.flux",
									Source: "0",
									Start: ast.Position{
										Column: 31,
										Line:   10,
									},
								},
							},
							Value: int64(0),
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   9,
							},
							File:   "from.flux",
							Source: "table=<-",
							Start: ast.Position{
								Column: 17,
								Line:   9,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   9,
								},
								File:   "from.flux",
								Source: "table",
								Start: ast.Position{
									Column: 17,
									Line:   9,
								},
							},
						},
						Name: "table",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   9,
							},
							File:   "from.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 23,
								Line:   9,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   9,
							},
							File:   "from.flux",
							Source: "fields=[]",
							Start: ast.Position{
								Column: 27,
								Line:   9,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   9,
								},
								File:   "from.flux",
								Source: "fields",
								Start: ast.Position{
									Column: 27,
									Line:   9,
								},
							},
						},
						Name: "fields",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   9,
								},
								File:   "from.flux",
								Source: "[]",
								Start: ast.Position{
									Column: 34,
									Line:   9,
								},
							},
						},
						Elements: nil,
					},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 32,
						Line:   26,
					},
					File:   "from.flux",
					Source: "inBucket = (\n    bucket,\n    measurement,\n    start,\n    stop=now(),\n    fields=[],\n    predicate=(r) => true\n) =>\n    fromRange(bucket: bucket, start: start, stop: stop)\n        |> filterMeasurement(measurement)\n        |> filter(fn: predicate)\n        |> filterFields(fields)",
					Start: ast.Position{
						Column: 1,
						Line:   15,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   15,
						},
						File:   "from.flux",
						Source: "inBucket",
						Start: ast.Position{
							Column: 1,
							Line:   15,
						},
					},
				},
				Name: "inBucket",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 32,
							Line:   26,
						},
						File:   "from.flux",
						Source: "(\n    bucket,\n    measurement,\n    start,\n    stop=now(),\n    fields=[],\n    predicate=(r) => true\n) =>\n    fromRange(bucket: bucket, start: start, stop: stop)\n        |> filterMeasurement(measurement)\n        |> filter(fn: predicate)\n        |> filterFields(fields)",
						Start: ast.Position{
							Column: 12,
							Line:   15,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   23,
											},
											File:   "from.flux",
											Source: "bucket: bucket, start: start, stop: stop",
											Start: ast.Position{
												Column: 15,
												Line:   23,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   23,
												},
												File:   "from.flux",
												Source: "bucket: bucket",
												Start: ast.Position{
													Column: 15,
													Line:   23,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   23,
													},
													File:   "from.flux",
													Source: "bucket",
													Start: ast.Position{
														Column: 15,
														Line:   23,
													},
												},
											},
											Name: "bucket",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 29,
														Line:   23,
													},
													File:   "from.flux",
													Source: "bucket",
													Start: ast.Position{
														Column: 23,
														Line:   23,
													},
												},
											},
											Name: "bucket",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   23,
												},
												File:   "from.flux",
												Source: "start: start",
												Start: ast.Position{
													Column: 31,
													Line:   23,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   23,
													},
													File:   "from.flux",
													Source: "start",
													Start: ast.Position{
														Column: 31,
														Line:   23,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 43,
														Line:   23,
													},
													File:   "from.flux",
													Source: "start",
													Start: ast.Position{
														Column: 38,
														Line:   23,
													},
												},
											},
											Name: "start",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 55,
													Line:   23,
												},
												File:   "from.flux",
												Source: "stop: stop",
												Start: ast.Position{
													Column: 45,
													Line:   23,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 49,
														Line:   23,
													},
													File:   "from.flux",
													Source: "stop",
													Start: ast.Position{
														Column: 45,
														Line:   23,
													},
												},
											},
											Name: "stop",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 55,
														Line:   23,
													},
													File:   "from.flux",
													Source: "stop",
													Start: ast.Position{
														Column: 51,
														Line:   23,
													},
												},
											},
											Name: "stop",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   23,
										},
										File:   "from.flux",
										Source: "fromRange(bucket: bucket, start: start, stop: stop)",
										Start: ast.Position{
											Column: 5,
											Line:   23,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   23,
											},
											File:   "from.flux",
											Source: "fromRange",
											Start: ast.Position{
												Column: 5,
												Line:   23,
											},
										},
									},
									Name: "fromRange",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   24,
									},
									File:   "from.flux",
									Source: "fromRange(bucket: bucket, start: start, stop: stop)\n        |> filterMeasurement(measurement)",
									Start: ast.Position{
										Column: 5,
										Line:   23,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   24,
											},
											File:   "from.flux",
											Source: "measurement",
											Start: ast.Position{
												Column: 30,
												Line:   24,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   24,
												},
												File:   "from.flux",
												Source: "measurement",
												Start: ast.Position{
													Column: 30,
													Line:   24,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   24,
													},
													File:   "from.flux",
													Source: "measurement",
													Start: ast.Position{
														Column: 30,
														Line:   24,
													},
												},
											},
											Name: "measurement",
										},
										Value: nil,
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   24,
										},
										File:   "from.flux",
										Source: "filterMeasurement(measurement)",
										Start: ast.Position{
											Column: 12,
											Line:   24,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   24,
											},
											File:   "from.flux",
											Source: "filterMeasurement",
											Start: ast.Position{
												Column: 12,
												Line:   24,
											},
										},
									},
									Name: "filterMeasurement",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   25,
								},
								File:   "from.flux",
								Source: "fromRange(bucket: bucket, start: start, stop: stop)\n        |> filterMeasurement(measurement)\n        |> filter(fn: predicate)",
								Start: ast.Position{
									Column: 5,
									Line:   23,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   25,
										},
										File:   "from.flux",
										Source: "fn: predicate",
										Start: ast.Position{
											Column: 19,
											Line:   25,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   25,
											},
											File:   "from.flux",
											Source: "fn: predicate",
											Start: ast.Position{
												Column: 19,
												Line:   25,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   25,
												},
												File:   "from.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 19,
													Line:   25,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   25,
												},
												File:   "from.flux",
												Source: "predicate",
												Start: ast.Position{
													Column: 23,
													Line:   25,
												},
											},
										},
										Name: "predicate",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   25,
									},
									File:   "from.flux",
									Source: "filter(fn: predicate)",
									Start: ast.Position{
										Column: 12,
										Line:   25,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   25,
										},
										File:   "from.flux",
										Source: "filter",
										Start: ast.Position{
											Column: 12,
											Line:   25,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   26,
							},
							File:   "from.flux",
							Source: "fromRange(bucket: bucket, start: start, stop: stop)\n        |> filterMeasurement(measurement)\n        |> filter(fn: predicate)\n        |> filterFields(fields)",
							Start: ast.Position{
								Column: 5,
								Line:   23,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   26,
									},
									File:   "from.flux",
									Source: "fields",
									Start: ast.Position{
										Column: 25,
										Line:   26,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   26,
										},
										File:   "from.flux",
										Source: "fields",
										Start: ast.Position{
											Column: 25,
											Line:   26,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   26,
											},
											File:   "from.flux",
											Source: "fields",
											Start: ast.Position{
												Column: 25,
												Line:   26,
											},
										},
									},
									Name: "fields",
								},
								Value: nil,
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   26,
								},
								File:   "from.flux",
								Source: "filterFields(fields)",
								Start: ast.Position{
									Column: 12,
									Line:   26,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   26,
									},
									File:   "from.flux",
									Source: "filterFields",
									Start: ast.Position{
										Column: 12,
										Line:   26,
									},
								},
							},
							Name: "filterFields",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   16,
							},
							File:   "from.flux",
							Source: "bucket",
							Start: ast.Position{
								Column: 5,
								Line:   16,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   16,
								},
								File:   "from.flux",
								Source: "bucket",
								Start: ast.Position{
									Column: 5,
									Line:   16,
								},
							},
						},
						Name: "bucket",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   17,
							},
							File:   "from.flux",
							Source: "measurement",
							Start: ast.Position{
								Column: 5,
								Line:   17,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   17,
								},
								File:   "from.flux",
								Source: "measurement",
								Start: ast.Position{
									Column: 5,
									Line:   17,
								},
							},
						},
						Name: "measurement",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   18,
							},
							File:   "from.flux",
							Source: "start",
							Start: ast.Position{
								Column: 5,
								Line:   18,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   18,
								},
								File:   "from.flux",
								Source: "start",
								Start: ast.Position{
									Column: 5,
									Line:   18,
								},
							},
						},
						Name: "start",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   19,
							},
							File:   "from.flux",
							Source: "stop=now()",
							Start: ast.Position{
								Column: 5,
								Line:   19,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   19,
								},
								File:   "from.flux",
								Source: "stop",
								Start: ast.Position{
									Column: 5,
									Line:   19,
								},
							},
						},
						Name: "stop",
					},
					Value: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   19,
								},
								File:   "from.flux",
								Source: "now()",
								Start: ast.Position{
									Column: 10,
									Line:   19,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   19,
									},
									File:   "from.flux",
									Source: "now",
									Start: ast.Position{
										Column: 10,
										Line:   19,
									},
								},
							},
							Name: "now",
						},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   20,
							},
							File:   "from.flux",
							Source: "fields=[]",
							Start: ast.Position{
								Column: 5,
								Line:   20,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   20,
								},
								File:   "from.flux",
								Source: "fields",
								Start: ast.Position{
									Column: 5,
									Line:   20,
								},
							},
						},
						Name: "fields",
					},
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   20,
								},
								File:   "from.flux",
								Source: "[]",
								Start: ast.Position{
									Column: 12,
									Line:   20,
								},
							},
						},
						Elements: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   21,
							},
							File:   "from.flux",
							Source: "predicate=(r) => true",
							Start: ast.Position{
								Column: 5,
								Line:   21,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   21,
								},
								File:   "from.flux",
								Source: "predicate",
								Start: ast.Position{
									Column: 5,
									Line:   21,
								},
							},
						},
						Name: "predicate",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   21,
								},
								File:   "from.flux",
								Source: "(r) => true",
								Start: ast.Position{
									Column: 15,
									Line:   21,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   21,
									},
									File:   "from.flux",
									Source: "true",
									Start: ast.Position{
										Column: 22,
										Line:   21,
									},
								},
							},
							Name: "true",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   21,
									},
									File:   "from.flux",
									Source: "r",
									Start: ast.Position{
										Column: 16,
										Line:   21,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   21,
										},
										File:   "from.flux",
										Source: "r",
										Start: ast.Position{
											Column: 16,
											Line:   21,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}},
			},
		}},
		Imports:  nil,
		Metadata: "parser-type=go",
		Name:     "from.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   1,
					},
					File:   "from.flux",
					Source: "package query",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   1,
						},
						File:   "from.flux",
						Source: "query",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "query",
			},
		},
	}},
	Package: "query",
	Path:    "experimental/query",
}
