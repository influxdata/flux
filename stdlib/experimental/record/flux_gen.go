// DO NOT EDIT: This file is autogenerated via the builtin command.

package record

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 12,
					Line:   5,
				},
				File:   "record.flux",
				Source: "package record\n\n\n// any is a record that contains no properties but according to its type may contain any additional properties.\nbuiltin any",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// any is a record that contains no properties but according to its type may contain any additional properties.\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   5,
					},
					File:   "record.flux",
					Source: "builtin any",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   5,
						},
						File:   "record.flux",
						Source: "any",
						Start: ast.Position{
							Column: 9,
							Line:   5,
						},
					},
				},
				Name: "any",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 32,
							Line:   5,
						},
						File:   "record.flux",
						Source: "A where A: Record",
						Start: ast.Position{
							Column: 15,
							Line:   5,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   5,
							},
							File:   "record.flux",
							Source: "A: Record",
							Start: ast.Position{
								Column: 23,
								Line:   5,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   5,
								},
								File:   "record.flux",
								Source: "Record",
								Start: ast.Position{
									Column: 26,
									Line:   5,
								},
							},
						},
						Name: "Record",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   5,
								},
								File:   "record.flux",
								Source: "A",
								Start: ast.Position{
									Column: 23,
									Line:   5,
								},
							},
						},
						Name: "A",
					},
				}},
				Ty: &ast.TvarType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   5,
							},
							File:   "record.flux",
							Source: "A",
							Start: ast.Position{
								Column: 15,
								Line:   5,
							},
						},
					},
					ID: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   5,
								},
								File:   "record.flux",
								Source: "A",
								Start: ast.Position{
									Column: 15,
									Line:   5,
								},
							},
						},
						Name: "A",
					},
				},
			},
		}},
		Eof:      nil,
		Imports:  nil,
		Metadata: "parser-type=rust",
		Name:     "record.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   1,
					},
					File:   "record.flux",
					Source: "package record",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   1,
						},
						File:   "record.flux",
						Source: "record",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "record",
			},
		},
	}},
	Package: "record",
	Path:    "experimental/record",
}
