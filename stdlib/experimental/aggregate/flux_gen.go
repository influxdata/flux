// DO NOT EDIT: This file is autogenerated via the builtin command.

package aggregate

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 6,
					Line:   15,
				},
				File:   "aggregate.flux",
				Source: "package aggregate\n\n\nimport \"experimental\"\n\nrate = (tables=<-, every, groupColumns=[], unit=1s) => tables\n    |> derivative(nonNegative: true, unit: unit)\n    |> aggregateWindow(\n        every: every,\n        fn: (tables=<-, column) => tables\n            |> mean(column: column)\n            |> group(columns: groupColumns)\n            |> experimental.group(columns: [\"_start\", \"_stop\"], mode: \"extend\")\n            |> sum(),\n    )",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 6,
						Line:   15,
					},
					File:   "aggregate.flux",
					Source: "rate = (tables=<-, every, groupColumns=[], unit=1s) => tables\n    |> derivative(nonNegative: true, unit: unit)\n    |> aggregateWindow(\n        every: every,\n        fn: (tables=<-, column) => tables\n            |> mean(column: column)\n            |> group(columns: groupColumns)\n            |> experimental.group(columns: [\"_start\", \"_stop\"], mode: \"extend\")\n            |> sum(),\n    )",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   6,
						},
						File:   "aggregate.flux",
						Source: "rate",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Name: "rate",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   15,
						},
						File:   "aggregate.flux",
						Source: "(tables=<-, every, groupColumns=[], unit=1s) => tables\n    |> derivative(nonNegative: true, unit: unit)\n    |> aggregateWindow(\n        every: every,\n        fn: (tables=<-, column) => tables\n            |> mean(column: column)\n            |> group(columns: groupColumns)\n            |> experimental.group(columns: [\"_start\", \"_stop\"], mode: \"extend\")\n            |> sum(),\n    )",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   6,
									},
									File:   "aggregate.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 56,
										Line:   6,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   7,
								},
								File:   "aggregate.flux",
								Source: "tables\n    |> derivative(nonNegative: true, unit: unit)",
								Start: ast.Position{
									Column: 56,
									Line:   6,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   7,
										},
										File:   "aggregate.flux",
										Source: "nonNegative: true, unit: unit",
										Start: ast.Position{
											Column: 19,
											Line:   7,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   7,
											},
											File:   "aggregate.flux",
											Source: "nonNegative: true",
											Start: ast.Position{
												Column: 19,
												Line:   7,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   7,
												},
												File:   "aggregate.flux",
												Source: "nonNegative",
												Start: ast.Position{
													Column: 19,
													Line:   7,
												},
											},
										},
										Name: "nonNegative",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   7,
												},
												File:   "aggregate.flux",
												Source: "true",
												Start: ast.Position{
													Column: 32,
													Line:   7,
												},
											},
										},
										Name: "true",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   7,
											},
											File:   "aggregate.flux",
											Source: "unit: unit",
											Start: ast.Position{
												Column: 38,
												Line:   7,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   7,
												},
												File:   "aggregate.flux",
												Source: "unit",
												Start: ast.Position{
													Column: 38,
													Line:   7,
												},
											},
										},
										Name: "unit",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   7,
												},
												File:   "aggregate.flux",
												Source: "unit",
												Start: ast.Position{
													Column: 44,
													Line:   7,
												},
											},
										},
										Name: "unit",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   7,
									},
									File:   "aggregate.flux",
									Source: "derivative(nonNegative: true, unit: unit)",
									Start: ast.Position{
										Column: 8,
										Line:   7,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   7,
										},
										File:   "aggregate.flux",
										Source: "derivative",
										Start: ast.Position{
											Column: 8,
											Line:   7,
										},
									},
								},
								Name: "derivative",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 6,
								Line:   15,
							},
							File:   "aggregate.flux",
							Source: "tables\n    |> derivative(nonNegative: true, unit: unit)\n    |> aggregateWindow(\n        every: every,\n        fn: (tables=<-, column) => tables\n            |> mean(column: column)\n            |> group(columns: groupColumns)\n            |> experimental.group(columns: [\"_start\", \"_stop\"], mode: \"extend\")\n            |> sum(),\n    )",
							Start: ast.Position{
								Column: 56,
								Line:   6,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   14,
									},
									File:   "aggregate.flux",
									Source: "every: every,\n        fn: (tables=<-, column) => tables\n            |> mean(column: column)\n            |> group(columns: groupColumns)\n            |> experimental.group(columns: [\"_start\", \"_stop\"], mode: \"extend\")\n            |> sum()",
									Start: ast.Position{
										Column: 9,
										Line:   9,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   9,
										},
										File:   "aggregate.flux",
										Source: "every: every",
										Start: ast.Position{
											Column: 9,
											Line:   9,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   9,
											},
											File:   "aggregate.flux",
											Source: "every",
											Start: ast.Position{
												Column: 9,
												Line:   9,
											},
										},
									},
									Name: "every",
								},
								Separator: nil,
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   9,
											},
											File:   "aggregate.flux",
											Source: "every",
											Start: ast.Position{
												Column: 16,
												Line:   9,
											},
										},
									},
									Name: "every",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   14,
										},
										File:   "aggregate.flux",
										Source: "fn: (tables=<-, column) => tables\n            |> mean(column: column)\n            |> group(columns: groupColumns)\n            |> experimental.group(columns: [\"_start\", \"_stop\"], mode: \"extend\")\n            |> sum()",
										Start: ast.Position{
											Column: 9,
											Line:   10,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   10,
											},
											File:   "aggregate.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 9,
												Line:   10,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.FunctionExpression{
									Arrow: nil,
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   14,
											},
											File:   "aggregate.flux",
											Source: "(tables=<-, column) => tables\n            |> mean(column: column)\n            |> group(columns: groupColumns)\n            |> experimental.group(columns: [\"_start\", \"_stop\"], mode: \"extend\")\n            |> sum()",
											Start: ast.Position{
												Column: 13,
												Line:   10,
											},
										},
									},
									Body: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.PipeExpression{
													Argument: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 42,
																	Line:   10,
																},
																File:   "aggregate.flux",
																Source: "tables",
																Start: ast.Position{
																	Column: 36,
																	Line:   10,
																},
															},
														},
														Name: "tables",
													},
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   11,
															},
															File:   "aggregate.flux",
															Source: "tables\n            |> mean(column: column)",
															Start: ast.Position{
																Column: 36,
																Line:   10,
															},
														},
													},
													Call: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 35,
																		Line:   11,
																	},
																	File:   "aggregate.flux",
																	Source: "column: column",
																	Start: ast.Position{
																		Column: 21,
																		Line:   11,
																	},
																},
															},
															Lbrace: nil,
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 35,
																			Line:   11,
																		},
																		File:   "aggregate.flux",
																		Source: "column: column",
																		Start: ast.Position{
																			Column: 21,
																			Line:   11,
																		},
																	},
																},
																Comma: nil,
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 27,
																				Line:   11,
																			},
																			File:   "aggregate.flux",
																			Source: "column",
																			Start: ast.Position{
																				Column: 21,
																				Line:   11,
																			},
																		},
																	},
																	Name: "column",
																},
																Separator: nil,
																Value: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 35,
																				Line:   11,
																			},
																			File:   "aggregate.flux",
																			Source: "column",
																			Start: ast.Position{
																				Column: 29,
																				Line:   11,
																			},
																		},
																	},
																	Name: "column",
																},
															}},
															Rbrace: nil,
															With:   nil,
														}},
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   11,
																},
																File:   "aggregate.flux",
																Source: "mean(column: column)",
																Start: ast.Position{
																	Column: 16,
																	Line:   11,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 20,
																		Line:   11,
																	},
																	File:   "aggregate.flux",
																	Source: "mean",
																	Start: ast.Position{
																		Column: 16,
																		Line:   11,
																	},
																},
															},
															Name: "mean",
														},
														Lparen: nil,
														Rparen: nil,
													},
												},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   12,
														},
														File:   "aggregate.flux",
														Source: "tables\n            |> mean(column: column)\n            |> group(columns: groupColumns)",
														Start: ast.Position{
															Column: 36,
															Line:   10,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 43,
																	Line:   12,
																},
																File:   "aggregate.flux",
																Source: "columns: groupColumns",
																Start: ast.Position{
																	Column: 22,
																	Line:   12,
																},
															},
														},
														Lbrace: nil,
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   12,
																	},
																	File:   "aggregate.flux",
																	Source: "columns: groupColumns",
																	Start: ast.Position{
																		Column: 22,
																		Line:   12,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 29,
																			Line:   12,
																		},
																		File:   "aggregate.flux",
																		Source: "columns",
																		Start: ast.Position{
																			Column: 22,
																			Line:   12,
																		},
																	},
																},
																Name: "columns",
															},
															Separator: nil,
															Value: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 43,
																			Line:   12,
																		},
																		File:   "aggregate.flux",
																		Source: "groupColumns",
																		Start: ast.Position{
																			Column: 31,
																			Line:   12,
																		},
																	},
																},
																Name: "groupColumns",
															},
														}},
														Rbrace: nil,
														With:   nil,
													}},
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   12,
															},
															File:   "aggregate.flux",
															Source: "group(columns: groupColumns)",
															Start: ast.Position{
																Column: 16,
																Line:   12,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 21,
																	Line:   12,
																},
																File:   "aggregate.flux",
																Source: "group",
																Start: ast.Position{
																	Column: 16,
																	Line:   12,
																},
															},
														},
														Name: "group",
													},
													Lparen: nil,
													Rparen: nil,
												},
											},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 80,
														Line:   13,
													},
													File:   "aggregate.flux",
													Source: "tables\n            |> mean(column: column)\n            |> group(columns: groupColumns)\n            |> experimental.group(columns: [\"_start\", \"_stop\"], mode: \"extend\")",
													Start: ast.Position{
														Column: 36,
														Line:   10,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 79,
																Line:   13,
															},
															File:   "aggregate.flux",
															Source: "columns: [\"_start\", \"_stop\"], mode: \"extend\"",
															Start: ast.Position{
																Column: 35,
																Line:   13,
															},
														},
													},
													Lbrace: nil,
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 63,
																	Line:   13,
																},
																File:   "aggregate.flux",
																Source: "columns: [\"_start\", \"_stop\"]",
																Start: ast.Position{
																	Column: 35,
																	Line:   13,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   13,
																	},
																	File:   "aggregate.flux",
																	Source: "columns",
																	Start: ast.Position{
																		Column: 35,
																		Line:   13,
																	},
																},
															},
															Name: "columns",
														},
														Separator: nil,
														Value: &ast.ArrayExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 63,
																		Line:   13,
																	},
																	File:   "aggregate.flux",
																	Source: "[\"_start\", \"_stop\"]",
																	Start: ast.Position{
																		Column: 44,
																		Line:   13,
																	},
																},
															},
															Elements: []ast.Expression{&ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 53,
																			Line:   13,
																		},
																		File:   "aggregate.flux",
																		Source: "\"_start\"",
																		Start: ast.Position{
																			Column: 45,
																			Line:   13,
																		},
																	},
																},
																Value: "_start",
															}, &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 62,
																			Line:   13,
																		},
																		File:   "aggregate.flux",
																		Source: "\"_stop\"",
																		Start: ast.Position{
																			Column: 55,
																			Line:   13,
																		},
																	},
																},
																Value: "_stop",
															}},
															Lbrack: nil,
															Rbrack: nil,
														},
													}, &ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 79,
																	Line:   13,
																},
																File:   "aggregate.flux",
																Source: "mode: \"extend\"",
																Start: ast.Position{
																	Column: 65,
																	Line:   13,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 69,
																		Line:   13,
																	},
																	File:   "aggregate.flux",
																	Source: "mode",
																	Start: ast.Position{
																		Column: 65,
																		Line:   13,
																	},
																},
															},
															Name: "mode",
														},
														Separator: nil,
														Value: &ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 79,
																		Line:   13,
																	},
																	File:   "aggregate.flux",
																	Source: "\"extend\"",
																	Start: ast.Position{
																		Column: 71,
																		Line:   13,
																	},
																},
															},
															Value: "extend",
														},
													}},
													Rbrace: nil,
													With:   nil,
												}},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 80,
															Line:   13,
														},
														File:   "aggregate.flux",
														Source: "experimental.group(columns: [\"_start\", \"_stop\"], mode: \"extend\")",
														Start: ast.Position{
															Column: 16,
															Line:   13,
														},
													},
												},
												Callee: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 34,
																Line:   13,
															},
															File:   "aggregate.flux",
															Source: "experimental.group",
															Start: ast.Position{
																Column: 16,
																Line:   13,
															},
														},
													},
													Lbrack: nil,
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 28,
																	Line:   13,
																},
																File:   "aggregate.flux",
																Source: "experimental",
																Start: ast.Position{
																	Column: 16,
																	Line:   13,
																},
															},
														},
														Name: "experimental",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 34,
																	Line:   13,
																},
																File:   "aggregate.flux",
																Source: "group",
																Start: ast.Position{
																	Column: 29,
																	Line:   13,
																},
															},
														},
														Name: "group",
													},
													Rbrack: nil,
												},
												Lparen: nil,
												Rparen: nil,
											},
										},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   14,
												},
												File:   "aggregate.flux",
												Source: "tables\n            |> mean(column: column)\n            |> group(columns: groupColumns)\n            |> experimental.group(columns: [\"_start\", \"_stop\"], mode: \"extend\")\n            |> sum()",
												Start: ast.Position{
													Column: 36,
													Line:   10,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: nil,
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   14,
													},
													File:   "aggregate.flux",
													Source: "sum()",
													Start: ast.Position{
														Column: 16,
														Line:   14,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   14,
														},
														File:   "aggregate.flux",
														Source: "sum",
														Start: ast.Position{
															Column: 16,
															Line:   14,
														},
													},
												},
												Name: "sum",
											},
											Lparen: nil,
											Rparen: nil,
										},
									},
									Lparen: nil,
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   10,
												},
												File:   "aggregate.flux",
												Source: "tables=<-",
												Start: ast.Position{
													Column: 14,
													Line:   10,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 20,
														Line:   10,
													},
													File:   "aggregate.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 14,
														Line:   10,
													},
												},
											},
											Name: "tables",
										},
										Separator: nil,
										Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   10,
												},
												File:   "aggregate.flux",
												Source: "<-",
												Start: ast.Position{
													Column: 21,
													Line:   10,
												},
											},
										}},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   10,
												},
												File:   "aggregate.flux",
												Source: "column",
												Start: ast.Position{
													Column: 25,
													Line:   10,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 31,
														Line:   10,
													},
													File:   "aggregate.flux",
													Source: "column",
													Start: ast.Position{
														Column: 25,
														Line:   10,
													},
												},
											},
											Name: "column",
										},
										Separator: nil,
										Value:     nil,
									}},
									Rparan: nil,
								},
							}},
							Rbrace: nil,
							With:   nil,
						}},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   15,
								},
								File:   "aggregate.flux",
								Source: "aggregateWindow(\n        every: every,\n        fn: (tables=<-, column) => tables\n            |> mean(column: column)\n            |> group(columns: groupColumns)\n            |> experimental.group(columns: [\"_start\", \"_stop\"], mode: \"extend\")\n            |> sum(),\n    )",
								Start: ast.Position{
									Column: 8,
									Line:   8,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   8,
									},
									File:   "aggregate.flux",
									Source: "aggregateWindow",
									Start: ast.Position{
										Column: 8,
										Line:   8,
									},
								},
							},
							Name: "aggregateWindow",
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   6,
							},
							File:   "aggregate.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 9,
								Line:   6,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   6,
								},
								File:   "aggregate.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 9,
									Line:   6,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   6,
							},
							File:   "aggregate.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 16,
								Line:   6,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   6,
							},
							File:   "aggregate.flux",
							Source: "every",
							Start: ast.Position{
								Column: 20,
								Line:   6,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   6,
								},
								File:   "aggregate.flux",
								Source: "every",
								Start: ast.Position{
									Column: 20,
									Line:   6,
								},
							},
						},
						Name: "every",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   6,
							},
							File:   "aggregate.flux",
							Source: "groupColumns=[]",
							Start: ast.Position{
								Column: 27,
								Line:   6,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   6,
								},
								File:   "aggregate.flux",
								Source: "groupColumns",
								Start: ast.Position{
									Column: 27,
									Line:   6,
								},
							},
						},
						Name: "groupColumns",
					},
					Separator: nil,
					Value: &ast.ArrayExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   6,
								},
								File:   "aggregate.flux",
								Source: "[]",
								Start: ast.Position{
									Column: 40,
									Line:   6,
								},
							},
						},
						Elements: []ast.Expression{},
						Lbrack:   nil,
						Rbrack:   nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 51,
								Line:   6,
							},
							File:   "aggregate.flux",
							Source: "unit=1s",
							Start: ast.Position{
								Column: 44,
								Line:   6,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   6,
								},
								File:   "aggregate.flux",
								Source: "unit",
								Start: ast.Position{
									Column: 44,
									Line:   6,
								},
							},
						},
						Name: "unit",
					},
					Separator: nil,
					Value: &ast.DurationLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   6,
								},
								File:   "aggregate.flux",
								Source: "1s",
								Start: ast.Position{
									Column: 49,
									Line:   6,
								},
							},
						},
						Values: []ast.Duration{ast.Duration{
							Magnitude: int64(1),
							Unit:      "s",
						}},
					},
				}},
				Rparan: nil,
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   4,
					},
					File:   "aggregate.flux",
					Source: "import \"experimental\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   4,
						},
						File:   "aggregate.flux",
						Source: "\"experimental\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "experimental",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "aggregate.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   1,
					},
					File:   "aggregate.flux",
					Source: "package aggregate",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   1,
						},
						File:   "aggregate.flux",
						Source: "aggregate",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "aggregate",
			},
		},
	}},
	Package: "aggregate",
	Path:    "experimental/aggregate",
}
