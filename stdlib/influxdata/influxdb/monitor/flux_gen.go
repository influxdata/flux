// DO NOT EDIT: This file is autogenerated via the builtin command.

package monitor

import (
	flux "github.com/influxdata/flux"
	ast "github.com/influxdata/flux/ast"
)

func init() {
	flux.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 19,
					Line:   125,
				},
				File:   "",
				Source: "package monitor\n\nimport \"experimental\"\nimport \"influxdata/influxdb/v1\"\nimport \"influxdata/influxdb\"\n\nbucket = \"_monitoring\"\n\n// Write persists the check statuses\noption write = (tables=<-) => tables |> experimental.to(bucket: bucket)\n\n// Log records notification events\noption log = (tables=<-) => tables |> experimental.to(bucket: bucket)\n\n// From retrieves the check statuses that have been stored.\nfrom = (start, stop=now(), fn=(r) => true) =>\n    influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"statuses\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()\n\n// StateChanges takes a stream of tables, fromLevel, and toLevel and returns\n// a stream of tables where status has gone from fromLevel to toLevel.\n//\n// StateChanges only operates on data with data containing r._measurement == \"statuses\"\n// and where r._level exists.\nstateChanges = (fromLevel=\"any\", toLevel, tables=<-) => {\n    toStatuses = tables\n        |> filter(fn: (r) => r._level == toLevel and r._measurement == \"statuses\")\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n    levelFilter = if fromLevel == \"any\" then (r) => r._level != toLevel and exists r._level\n                   else (r) => r._level == fromLevel\n\n    fromStatuses = tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n     allStatuses = union(tables: [toStatuses, fromStatuses])\n        |> sort(columns: [\"_time\"])\n\n    return allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value > 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}\n\n// Notify will call the endpoint and log the results.\nnotify = (tables=<-, endpoint, data={}) =>\n    tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n        |> map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))\n        |> endpoint()\n        |> experimental.group(mode: \"extend\", columns: [\"_sent\"])\n        |> log()\n\n// Logs retrieves notification events that have been logged.\nlogs = (start, stop=now(), fn) =>\n    influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"notifications\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()\n\n// Deadman takes in a stream of tables and reports which tables\n// were observed strictly before t and which were observed after.\n//\ndeadman = (t, tables=<-) => tables\n    |> max(column: \"_time\")\n    |> map(fn: (r) => ( {r with dead: r._time < t} ))\n\n// levels describing the result of a check\nlevelOK = \"ok\"\nlevelInfo = \"info\"\nlevelWarn = \"warn\"\nlevelCrit = \"crit\"\nlevelUnknown = \"unknown\"\n\n// Check performs a check against its input using the given ok, info, warn and crit functions\n// and writes the result to a system bucket.\ncheck = (\n    tables=<-,\n    data,\n    messageFn,\n    crit=(r) => false,\n    warn=(r) => false,\n    info=(r) => false,\n    ok=(r) => true\n) =>\n    tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n        |> map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))\n        |> map(fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }))\n        |> experimental.group(mode: \"extend\", columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"])\n        |> write()",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 23,
						Line:   7,
					},
					File:   "",
					Source: "bucket = \"_monitoring\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   7,
						},
						File:   "",
						Source: "bucket",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "bucket",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 23,
							Line:   7,
						},
						File:   "",
						Source: "\"_monitoring\"",
						Start: ast.Position{
							Column: 10,
							Line:   7,
						},
					},
				},
				Value: "_monitoring",
			},
		}, &ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 72,
							Line:   10,
						},
						File:   "",
						Source: "write = (tables=<-) => tables |> experimental.to(bucket: bucket)",
						Start: ast.Position{
							Column: 8,
							Line:   10,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   10,
							},
							File:   "",
							Source: "write",
							Start: ast.Position{
								Column: 8,
								Line:   10,
							},
						},
					},
					Name: "write",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   10,
							},
							File:   "",
							Source: "(tables=<-) => tables |> experimental.to(bucket: bucket)",
							Start: ast.Position{
								Column: 16,
								Line:   10,
							},
						},
					},
					Body: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   10,
									},
									File:   "",
									Source: "tables",
									Start: ast.Position{
										Column: 31,
										Line:   10,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   10,
								},
								File:   "",
								Source: "tables |> experimental.to(bucket: bucket)",
								Start: ast.Position{
									Column: 31,
									Line:   10,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 71,
											Line:   10,
										},
										File:   "",
										Source: "bucket: bucket",
										Start: ast.Position{
											Column: 57,
											Line:   10,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 71,
												Line:   10,
											},
											File:   "",
											Source: "bucket: bucket",
											Start: ast.Position{
												Column: 57,
												Line:   10,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 63,
													Line:   10,
												},
												File:   "",
												Source: "bucket",
												Start: ast.Position{
													Column: 57,
													Line:   10,
												},
											},
										},
										Name: "bucket",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 71,
													Line:   10,
												},
												File:   "",
												Source: "bucket",
												Start: ast.Position{
													Column: 65,
													Line:   10,
												},
											},
										},
										Name: "bucket",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   10,
									},
									File:   "",
									Source: "experimental.to(bucket: bucket)",
									Start: ast.Position{
										Column: 41,
										Line:   10,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   10,
										},
										File:   "",
										Source: "experimental.to",
										Start: ast.Position{
											Column: 41,
											Line:   10,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   10,
											},
											File:   "",
											Source: "experimental",
											Start: ast.Position{
												Column: 41,
												Line:   10,
											},
										},
									},
									Name: "experimental",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 56,
												Line:   10,
											},
											File:   "",
											Source: "to",
											Start: ast.Position{
												Column: 54,
												Line:   10,
											},
										},
									},
									Name: "to",
								},
							},
						},
					},
					Params: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   10,
								},
								File:   "",
								Source: "tables=<-",
								Start: ast.Position{
									Column: 17,
									Line:   10,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   10,
									},
									File:   "",
									Source: "tables",
									Start: ast.Position{
										Column: 17,
										Line:   10,
									},
								},
							},
							Name: "tables",
						},
						Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   10,
								},
								File:   "",
								Source: "<-",
								Start: ast.Position{
									Column: 24,
									Line:   10,
								},
							},
						}},
					}},
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 72,
						Line:   10,
					},
					File:   "",
					Source: "option write = (tables=<-) => tables |> experimental.to(bucket: bucket)",
					Start: ast.Position{
						Column: 1,
						Line:   10,
					},
				},
			},
		}, &ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 70,
							Line:   13,
						},
						File:   "",
						Source: "log = (tables=<-) => tables |> experimental.to(bucket: bucket)",
						Start: ast.Position{
							Column: 8,
							Line:   13,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   13,
							},
							File:   "",
							Source: "log",
							Start: ast.Position{
								Column: 8,
								Line:   13,
							},
						},
					},
					Name: "log",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 70,
								Line:   13,
							},
							File:   "",
							Source: "(tables=<-) => tables |> experimental.to(bucket: bucket)",
							Start: ast.Position{
								Column: 14,
								Line:   13,
							},
						},
					},
					Body: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   13,
									},
									File:   "",
									Source: "tables",
									Start: ast.Position{
										Column: 29,
										Line:   13,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   13,
								},
								File:   "",
								Source: "tables |> experimental.to(bucket: bucket)",
								Start: ast.Position{
									Column: 29,
									Line:   13,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   13,
										},
										File:   "",
										Source: "bucket: bucket",
										Start: ast.Position{
											Column: 55,
											Line:   13,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   13,
											},
											File:   "",
											Source: "bucket: bucket",
											Start: ast.Position{
												Column: 55,
												Line:   13,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 61,
													Line:   13,
												},
												File:   "",
												Source: "bucket",
												Start: ast.Position{
													Column: 55,
													Line:   13,
												},
											},
										},
										Name: "bucket",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   13,
												},
												File:   "",
												Source: "bucket",
												Start: ast.Position{
													Column: 63,
													Line:   13,
												},
											},
										},
										Name: "bucket",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   13,
									},
									File:   "",
									Source: "experimental.to(bucket: bucket)",
									Start: ast.Position{
										Column: 39,
										Line:   13,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   13,
										},
										File:   "",
										Source: "experimental.to",
										Start: ast.Position{
											Column: 39,
											Line:   13,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   13,
											},
											File:   "",
											Source: "experimental",
											Start: ast.Position{
												Column: 39,
												Line:   13,
											},
										},
									},
									Name: "experimental",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   13,
											},
											File:   "",
											Source: "to",
											Start: ast.Position{
												Column: 52,
												Line:   13,
											},
										},
									},
									Name: "to",
								},
							},
						},
					},
					Params: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   13,
								},
								File:   "",
								Source: "tables=<-",
								Start: ast.Position{
									Column: 15,
									Line:   13,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   13,
									},
									File:   "",
									Source: "tables",
									Start: ast.Position{
										Column: 15,
										Line:   13,
									},
								},
							},
							Name: "tables",
						},
						Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   13,
								},
								File:   "",
								Source: "<-",
								Start: ast.Position{
									Column: 22,
									Line:   13,
								},
							},
						}},
					}},
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 70,
						Line:   13,
					},
					File:   "",
					Source: "option log = (tables=<-) => tables |> experimental.to(bucket: bucket)",
					Start: ast.Position{
						Column: 1,
						Line:   13,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   21,
					},
					File:   "",
					Source: "from = (start, stop=now(), fn=(r) => true) =>\n    influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"statuses\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
					Start: ast.Position{
						Column: 1,
						Line:   16,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   16,
						},
						File:   "",
						Source: "from",
						Start: ast.Position{
							Column: 1,
							Line:   16,
						},
					},
				},
				Name: "from",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   21,
						},
						File:   "",
						Source: "(start, stop=now(), fn=(r) => true) =>\n    influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"statuses\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
						Start: ast.Position{
							Column: 8,
							Line:   16,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   17,
												},
												File:   "",
												Source: "bucket: bucket",
												Start: ast.Position{
													Column: 19,
													Line:   17,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   17,
													},
													File:   "",
													Source: "bucket: bucket",
													Start: ast.Position{
														Column: 19,
														Line:   17,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   17,
														},
														File:   "",
														Source: "bucket",
														Start: ast.Position{
															Column: 19,
															Line:   17,
														},
													},
												},
												Name: "bucket",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 33,
															Line:   17,
														},
														File:   "",
														Source: "bucket",
														Start: ast.Position{
															Column: 27,
															Line:   17,
														},
													},
												},
												Name: "bucket",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   17,
											},
											File:   "",
											Source: "influxdb.from(bucket: bucket)",
											Start: ast.Position{
												Column: 5,
												Line:   17,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   17,
												},
												File:   "",
												Source: "influxdb.from",
												Start: ast.Position{
													Column: 5,
													Line:   17,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   17,
													},
													File:   "",
													Source: "influxdb",
													Start: ast.Position{
														Column: 5,
														Line:   17,
													},
												},
											},
											Name: "influxdb",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   17,
													},
													File:   "",
													Source: "from",
													Start: ast.Position{
														Column: 14,
														Line:   17,
													},
												},
											},
											Name: "from",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   18,
										},
										File:   "",
										Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)",
										Start: ast.Position{
											Column: 5,
											Line:   17,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   18,
												},
												File:   "",
												Source: "start: start, stop: stop",
												Start: ast.Position{
													Column: 18,
													Line:   18,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   18,
													},
													File:   "",
													Source: "start: start",
													Start: ast.Position{
														Column: 18,
														Line:   18,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 23,
															Line:   18,
														},
														File:   "",
														Source: "start",
														Start: ast.Position{
															Column: 18,
															Line:   18,
														},
													},
												},
												Name: "start",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   18,
														},
														File:   "",
														Source: "start",
														Start: ast.Position{
															Column: 25,
															Line:   18,
														},
													},
												},
												Name: "start",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   18,
													},
													File:   "",
													Source: "stop: stop",
													Start: ast.Position{
														Column: 32,
														Line:   18,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   18,
														},
														File:   "",
														Source: "stop",
														Start: ast.Position{
															Column: 32,
															Line:   18,
														},
													},
												},
												Name: "stop",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   18,
														},
														File:   "",
														Source: "stop",
														Start: ast.Position{
															Column: 38,
															Line:   18,
														},
													},
												},
												Name: "stop",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   18,
											},
											File:   "",
											Source: "range(start: start, stop: stop)",
											Start: ast.Position{
												Column: 12,
												Line:   18,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   18,
												},
												File:   "",
												Source: "range",
												Start: ast.Position{
													Column: 12,
													Line:   18,
												},
											},
										},
										Name: "range",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   19,
									},
									File:   "",
									Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"statuses\")",
									Start: ast.Position{
										Column: 5,
										Line:   17,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   19,
											},
											File:   "",
											Source: "fn: (r) => r._measurement == \"statuses\"",
											Start: ast.Position{
												Column: 19,
												Line:   19,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 58,
													Line:   19,
												},
												File:   "",
												Source: "fn: (r) => r._measurement == \"statuses\"",
												Start: ast.Position{
													Column: 19,
													Line:   19,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   19,
													},
													File:   "",
													Source: "fn",
													Start: ast.Position{
														Column: 19,
														Line:   19,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 58,
														Line:   19,
													},
													File:   "",
													Source: "(r) => r._measurement == \"statuses\"",
													Start: ast.Position{
														Column: 23,
														Line:   19,
													},
												},
											},
											Body: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   19,
														},
														File:   "",
														Source: "r._measurement == \"statuses\"",
														Start: ast.Position{
															Column: 30,
															Line:   19,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   19,
															},
															File:   "",
															Source: "r._measurement",
															Start: ast.Position{
																Column: 30,
																Line:   19,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   19,
																},
																File:   "",
																Source: "r",
																Start: ast.Position{
																	Column: 30,
																	Line:   19,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   19,
																},
																File:   "",
																Source: "_measurement",
																Start: ast.Position{
																	Column: 32,
																	Line:   19,
																},
															},
														},
														Name: "_measurement",
													},
												},
												Operator: 17,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 58,
																Line:   19,
															},
															File:   "",
															Source: "\"statuses\"",
															Start: ast.Position{
																Column: 48,
																Line:   19,
															},
														},
													},
													Value: "statuses",
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   19,
														},
														File:   "",
														Source: "r",
														Start: ast.Position{
															Column: 24,
															Line:   19,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 25,
																Line:   19,
															},
															File:   "",
															Source: "r",
															Start: ast.Position{
																Column: 24,
																Line:   19,
															},
														},
													},
													Name: "r",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   19,
										},
										File:   "",
										Source: "filter(fn: (r) => r._measurement == \"statuses\")",
										Start: ast.Position{
											Column: 12,
											Line:   19,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   19,
											},
											File:   "",
											Source: "filter",
											Start: ast.Position{
												Column: 12,
												Line:   19,
											},
										},
									},
									Name: "filter",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   20,
								},
								File:   "",
								Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"statuses\")\n        |> filter(fn: fn)",
								Start: ast.Position{
									Column: 5,
									Line:   17,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   20,
										},
										File:   "",
										Source: "fn: fn",
										Start: ast.Position{
											Column: 19,
											Line:   20,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   20,
											},
											File:   "",
											Source: "fn: fn",
											Start: ast.Position{
												Column: 19,
												Line:   20,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   20,
												},
												File:   "",
												Source: "fn",
												Start: ast.Position{
													Column: 19,
													Line:   20,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   20,
												},
												File:   "",
												Source: "fn",
												Start: ast.Position{
													Column: 23,
													Line:   20,
												},
											},
										},
										Name: "fn",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   20,
									},
									File:   "",
									Source: "filter(fn: fn)",
									Start: ast.Position{
										Column: 12,
										Line:   20,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   20,
										},
										File:   "",
										Source: "filter",
										Start: ast.Position{
											Column: 12,
											Line:   20,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   21,
							},
							File:   "",
							Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"statuses\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
							Start: ast.Position{
								Column: 5,
								Line:   17,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   21,
								},
								File:   "",
								Source: "v1.fieldsAsCols()",
								Start: ast.Position{
									Column: 12,
									Line:   21,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   21,
									},
									File:   "",
									Source: "v1.fieldsAsCols",
									Start: ast.Position{
										Column: 12,
										Line:   21,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   21,
										},
										File:   "",
										Source: "v1",
										Start: ast.Position{
											Column: 12,
											Line:   21,
										},
									},
								},
								Name: "v1",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   21,
										},
										File:   "",
										Source: "fieldsAsCols",
										Start: ast.Position{
											Column: 15,
											Line:   21,
										},
									},
								},
								Name: "fieldsAsCols",
							},
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   16,
							},
							File:   "",
							Source: "start",
							Start: ast.Position{
								Column: 9,
								Line:   16,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   16,
								},
								File:   "",
								Source: "start",
								Start: ast.Position{
									Column: 9,
									Line:   16,
								},
							},
						},
						Name: "start",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   16,
							},
							File:   "",
							Source: "stop=now()",
							Start: ast.Position{
								Column: 16,
								Line:   16,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   16,
								},
								File:   "",
								Source: "stop",
								Start: ast.Position{
									Column: 16,
									Line:   16,
								},
							},
						},
						Name: "stop",
					},
					Value: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   16,
								},
								File:   "",
								Source: "now()",
								Start: ast.Position{
									Column: 21,
									Line:   16,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   16,
									},
									File:   "",
									Source: "now",
									Start: ast.Position{
										Column: 21,
										Line:   16,
									},
								},
							},
							Name: "now",
						},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   16,
							},
							File:   "",
							Source: "fn=(r) => true",
							Start: ast.Position{
								Column: 28,
								Line:   16,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   16,
								},
								File:   "",
								Source: "fn",
								Start: ast.Position{
									Column: 28,
									Line:   16,
								},
							},
						},
						Name: "fn",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   16,
								},
								File:   "",
								Source: "(r) => true",
								Start: ast.Position{
									Column: 31,
									Line:   16,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   16,
									},
									File:   "",
									Source: "true",
									Start: ast.Position{
										Column: 38,
										Line:   16,
									},
								},
							},
							Name: "true",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   16,
									},
									File:   "",
									Source: "r",
									Start: ast.Position{
										Column: 32,
										Line:   16,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   16,
										},
										File:   "",
										Source: "r",
										Start: ast.Position{
											Column: 32,
											Line:   16,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   54,
					},
					File:   "",
					Source: "stateChanges = (fromLevel=\"any\", toLevel, tables=<-) => {\n    toStatuses = tables\n        |> filter(fn: (r) => r._level == toLevel and r._measurement == \"statuses\")\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n    levelFilter = if fromLevel == \"any\" then (r) => r._level != toLevel and exists r._level\n                   else (r) => r._level == fromLevel\n\n    fromStatuses = tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n     allStatuses = union(tables: [toStatuses, fromStatuses])\n        |> sort(columns: [\"_time\"])\n\n    return allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value > 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
					Start: ast.Position{
						Column: 1,
						Line:   28,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   28,
						},
						File:   "",
						Source: "stateChanges",
						Start: ast.Position{
							Column: 1,
							Line:   28,
						},
					},
				},
				Name: "stateChanges",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   54,
						},
						File:   "",
						Source: "(fromLevel=\"any\", toLevel, tables=<-) => {\n    toStatuses = tables\n        |> filter(fn: (r) => r._level == toLevel and r._measurement == \"statuses\")\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n    levelFilter = if fromLevel == \"any\" then (r) => r._level != toLevel and exists r._level\n                   else (r) => r._level == fromLevel\n\n    fromStatuses = tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n     allStatuses = union(tables: [toStatuses, fromStatuses])\n        |> sort(columns: [\"_time\"])\n\n    return allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value > 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
						Start: ast.Position{
							Column: 16,
							Line:   28,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   54,
							},
							File:   "",
							Source: "{\n    toStatuses = tables\n        |> filter(fn: (r) => r._level == toLevel and r._measurement == \"statuses\")\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n    levelFilter = if fromLevel == \"any\" then (r) => r._level != toLevel and exists r._level\n                   else (r) => r._level == fromLevel\n\n    fromStatuses = tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n     allStatuses = union(tables: [toStatuses, fromStatuses])\n        |> sort(columns: [\"_time\"])\n\n    return allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value > 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
							Start: ast.Position{
								Column: 57,
								Line:   28,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   34,
								},
								File:   "",
								Source: "toStatuses = tables\n        |> filter(fn: (r) => r._level == toLevel and r._measurement == \"statuses\")\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})",
								Start: ast.Position{
									Column: 5,
									Line:   29,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   29,
									},
									File:   "",
									Source: "toStatuses",
									Start: ast.Position{
										Column: 5,
										Line:   29,
									},
								},
							},
							Name: "toStatuses",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   29,
														},
														File:   "",
														Source: "tables",
														Start: ast.Position{
															Column: 18,
															Line:   29,
														},
													},
												},
												Name: "tables",
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 83,
														Line:   30,
													},
													File:   "",
													Source: "tables\n        |> filter(fn: (r) => r._level == toLevel and r._measurement == \"statuses\")",
													Start: ast.Position{
														Column: 18,
														Line:   29,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 82,
																Line:   30,
															},
															File:   "",
															Source: "fn: (r) => r._level == toLevel and r._measurement == \"statuses\"",
															Start: ast.Position{
																Column: 19,
																Line:   30,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 82,
																	Line:   30,
																},
																File:   "",
																Source: "fn: (r) => r._level == toLevel and r._measurement == \"statuses\"",
																Start: ast.Position{
																	Column: 19,
																	Line:   30,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   30,
																	},
																	File:   "",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 19,
																		Line:   30,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.FunctionExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 82,
																		Line:   30,
																	},
																	File:   "",
																	Source: "(r) => r._level == toLevel and r._measurement == \"statuses\"",
																	Start: ast.Position{
																		Column: 23,
																		Line:   30,
																	},
																},
															},
															Body: &ast.LogicalExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 82,
																			Line:   30,
																		},
																		File:   "",
																		Source: "r._level == toLevel and r._measurement == \"statuses\"",
																		Start: ast.Position{
																			Column: 30,
																			Line:   30,
																		},
																	},
																},
																Left: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 49,
																				Line:   30,
																			},
																			File:   "",
																			Source: "r._level == toLevel",
																			Start: ast.Position{
																				Column: 30,
																				Line:   30,
																			},
																		},
																	},
																	Left: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 38,
																					Line:   30,
																				},
																				File:   "",
																				Source: "r._level",
																				Start: ast.Position{
																					Column: 30,
																					Line:   30,
																				},
																			},
																		},
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 31,
																						Line:   30,
																					},
																					File:   "",
																					Source: "r",
																					Start: ast.Position{
																						Column: 30,
																						Line:   30,
																					},
																				},
																			},
																			Name: "r",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 38,
																						Line:   30,
																					},
																					File:   "",
																					Source: "_level",
																					Start: ast.Position{
																						Column: 32,
																						Line:   30,
																					},
																				},
																			},
																			Name: "_level",
																		},
																	},
																	Operator: 17,
																	Right: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 49,
																					Line:   30,
																				},
																				File:   "",
																				Source: "toLevel",
																				Start: ast.Position{
																					Column: 42,
																					Line:   30,
																				},
																			},
																		},
																		Name: "toLevel",
																	},
																},
																Operator: 1,
																Right: &ast.BinaryExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 82,
																				Line:   30,
																			},
																			File:   "",
																			Source: "r._measurement == \"statuses\"",
																			Start: ast.Position{
																				Column: 54,
																				Line:   30,
																			},
																		},
																	},
																	Left: &ast.MemberExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 68,
																					Line:   30,
																				},
																				File:   "",
																				Source: "r._measurement",
																				Start: ast.Position{
																					Column: 54,
																					Line:   30,
																				},
																			},
																		},
																		Object: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 55,
																						Line:   30,
																					},
																					File:   "",
																					Source: "r",
																					Start: ast.Position{
																						Column: 54,
																						Line:   30,
																					},
																				},
																			},
																			Name: "r",
																		},
																		Property: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 68,
																						Line:   30,
																					},
																					File:   "",
																					Source: "_measurement",
																					Start: ast.Position{
																						Column: 56,
																						Line:   30,
																					},
																				},
																			},
																			Name: "_measurement",
																		},
																	},
																	Operator: 17,
																	Right: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 82,
																					Line:   30,
																				},
																				File:   "",
																				Source: "\"statuses\"",
																				Start: ast.Position{
																					Column: 72,
																					Line:   30,
																				},
																			},
																		},
																		Value: "statuses",
																	},
																},
															},
															Params: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   30,
																		},
																		File:   "",
																		Source: "r",
																		Start: ast.Position{
																			Column: 24,
																			Line:   30,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 25,
																				Line:   30,
																			},
																			File:   "",
																			Source: "r",
																			Start: ast.Position{
																				Column: 24,
																				Line:   30,
																			},
																		},
																	},
																	Name: "r",
																},
																Value: nil,
															}},
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 83,
															Line:   30,
														},
														File:   "",
														Source: "filter(fn: (r) => r._level == toLevel and r._measurement == \"statuses\")",
														Start: ast.Position{
															Column: 12,
															Line:   30,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   30,
															},
															File:   "",
															Source: "filter",
															Start: ast.Position{
																Column: 12,
																Line:   30,
															},
														},
													},
													Name: "filter",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   31,
												},
												File:   "",
												Source: "tables\n        |> filter(fn: (r) => r._level == toLevel and r._measurement == \"statuses\")\n        |> map(fn: (r) => ({r with level_value: 1}))",
												Start: ast.Position{
													Column: 18,
													Line:   29,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 52,
															Line:   31,
														},
														File:   "",
														Source: "fn: (r) => ({r with level_value: 1})",
														Start: ast.Position{
															Column: 16,
															Line:   31,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 52,
																Line:   31,
															},
															File:   "",
															Source: "fn: (r) => ({r with level_value: 1})",
															Start: ast.Position{
																Column: 16,
																Line:   31,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   31,
																},
																File:   "",
																Source: "fn",
																Start: ast.Position{
																	Column: 16,
																	Line:   31,
																},
															},
														},
														Name: "fn",
													},
													Value: &ast.FunctionExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 52,
																	Line:   31,
																},
																File:   "",
																Source: "(r) => ({r with level_value: 1})",
																Start: ast.Position{
																	Column: 20,
																	Line:   31,
																},
															},
														},
														Body: &ast.ParenExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 52,
																		Line:   31,
																	},
																	File:   "",
																	Source: "({r with level_value: 1})",
																	Start: ast.Position{
																		Column: 27,
																		Line:   31,
																	},
																},
															},
															Expression: &ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 51,
																			Line:   31,
																		},
																		File:   "",
																		Source: "{r with level_value: 1}",
																		Start: ast.Position{
																			Column: 28,
																			Line:   31,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 50,
																				Line:   31,
																			},
																			File:   "",
																			Source: "level_value: 1",
																			Start: ast.Position{
																				Column: 36,
																				Line:   31,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 47,
																					Line:   31,
																				},
																				File:   "",
																				Source: "level_value",
																				Start: ast.Position{
																					Column: 36,
																					Line:   31,
																				},
																			},
																		},
																		Name: "level_value",
																	},
																	Value: &ast.IntegerLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 50,
																					Line:   31,
																				},
																				File:   "",
																				Source: "1",
																				Start: ast.Position{
																					Column: 49,
																					Line:   31,
																				},
																			},
																		},
																		Value: int64(1),
																	},
																}},
																With: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   31,
																			},
																			File:   "",
																			Source: "r",
																			Start: ast.Position{
																				Column: 29,
																				Line:   31,
																			},
																		},
																	},
																	Name: "r",
																},
															},
														},
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 22,
																		Line:   31,
																	},
																	File:   "",
																	Source: "r",
																	Start: ast.Position{
																		Column: 21,
																		Line:   31,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 22,
																			Line:   31,
																		},
																		File:   "",
																		Source: "r",
																		Start: ast.Position{
																			Column: 21,
																			Line:   31,
																		},
																	},
																},
																Name: "r",
															},
															Value: nil,
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 53,
														Line:   31,
													},
													File:   "",
													Source: "map(fn: (r) => ({r with level_value: 1}))",
													Start: ast.Position{
														Column: 12,
														Line:   31,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   31,
														},
														File:   "",
														Source: "map",
														Start: ast.Position{
															Column: 12,
															Line:   31,
														},
													},
												},
												Name: "map",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   32,
											},
											File:   "",
											Source: "tables\n        |> filter(fn: (r) => r._level == toLevel and r._measurement == \"statuses\")\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")",
											Start: ast.Position{
												Column: 18,
												Line:   29,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   32,
													},
													File:   "",
													Source: "column: \"_level\", as: \"l2\"",
													Start: ast.Position{
														Column: 22,
														Line:   32,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   32,
														},
														File:   "",
														Source: "column: \"_level\"",
														Start: ast.Position{
															Column: 22,
															Line:   32,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   32,
															},
															File:   "",
															Source: "column",
															Start: ast.Position{
																Column: 22,
																Line:   32,
															},
														},
													},
													Name: "column",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   32,
															},
															File:   "",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 30,
																Line:   32,
															},
														},
													},
													Value: "_level",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   32,
														},
														File:   "",
														Source: "as: \"l2\"",
														Start: ast.Position{
															Column: 40,
															Line:   32,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   32,
															},
															File:   "",
															Source: "as",
															Start: ast.Position{
																Column: 40,
																Line:   32,
															},
														},
													},
													Name: "as",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   32,
															},
															File:   "",
															Source: "\"l2\"",
															Start: ast.Position{
																Column: 44,
																Line:   32,
															},
														},
													},
													Value: "l2",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   32,
												},
												File:   "",
												Source: "duplicate(column: \"_level\", as: \"l2\")",
												Start: ast.Position{
													Column: 12,
													Line:   32,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   32,
													},
													File:   "",
													Source: "duplicate",
													Start: ast.Position{
														Column: 12,
														Line:   32,
													},
												},
											},
											Name: "duplicate",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   33,
										},
										File:   "",
										Source: "tables\n        |> filter(fn: (r) => r._level == toLevel and r._measurement == \"statuses\")\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])",
										Start: ast.Position{
											Column: 18,
											Line:   29,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   33,
												},
												File:   "",
												Source: "columns: [\"_level\"]",
												Start: ast.Position{
													Column: 17,
													Line:   33,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   33,
													},
													File:   "",
													Source: "columns: [\"_level\"]",
													Start: ast.Position{
														Column: 17,
														Line:   33,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   33,
														},
														File:   "",
														Source: "columns",
														Start: ast.Position{
															Column: 17,
															Line:   33,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   33,
														},
														File:   "",
														Source: "[\"_level\"]",
														Start: ast.Position{
															Column: 26,
															Line:   33,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   33,
															},
															File:   "",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 27,
																Line:   33,
															},
														},
													},
													Value: "_level",
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   33,
											},
											File:   "",
											Source: "drop(columns: [\"_level\"])",
											Start: ast.Position{
												Column: 12,
												Line:   33,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   33,
												},
												File:   "",
												Source: "drop",
												Start: ast.Position{
													Column: 12,
													Line:   33,
												},
											},
										},
										Name: "drop",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   34,
									},
									File:   "",
									Source: "tables\n        |> filter(fn: (r) => r._level == toLevel and r._measurement == \"statuses\")\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})",
									Start: ast.Position{
										Column: 18,
										Line:   29,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   34,
											},
											File:   "",
											Source: "columns: {\"l2\": \"_level\"}",
											Start: ast.Position{
												Column: 19,
												Line:   34,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   34,
												},
												File:   "",
												Source: "columns: {\"l2\": \"_level\"}",
												Start: ast.Position{
													Column: 19,
													Line:   34,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   34,
													},
													File:   "",
													Source: "columns",
													Start: ast.Position{
														Column: 19,
														Line:   34,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   34,
													},
													File:   "",
													Source: "{\"l2\": \"_level\"}",
													Start: ast.Position{
														Column: 28,
														Line:   34,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   34,
														},
														File:   "",
														Source: "\"l2\": \"_level\"",
														Start: ast.Position{
															Column: 29,
															Line:   34,
														},
													},
												},
												Key: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   34,
															},
															File:   "",
															Source: "\"l2\"",
															Start: ast.Position{
																Column: 29,
																Line:   34,
															},
														},
													},
													Value: "l2",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   34,
															},
															File:   "",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 35,
																Line:   34,
															},
														},
													},
													Value: "_level",
												},
											}},
											With: nil,
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   34,
										},
										File:   "",
										Source: "rename(columns: {\"l2\": \"_level\"})",
										Start: ast.Position{
											Column: 12,
											Line:   34,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   34,
											},
											File:   "",
											Source: "rename",
											Start: ast.Position{
												Column: 12,
												Line:   34,
											},
										},
									},
									Name: "rename",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   37,
								},
								File:   "",
								Source: "levelFilter = if fromLevel == \"any\" then (r) => r._level != toLevel and exists r._level\n                   else (r) => r._level == fromLevel",
								Start: ast.Position{
									Column: 5,
									Line:   36,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   36,
									},
									File:   "",
									Source: "levelFilter",
									Start: ast.Position{
										Column: 5,
										Line:   36,
									},
								},
							},
							Name: "levelFilter",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   37,
										},
										File:   "",
										Source: "(r) => r._level == fromLevel",
										Start: ast.Position{
											Column: 25,
											Line:   37,
										},
									},
								},
								Body: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   37,
											},
											File:   "",
											Source: "r._level == fromLevel",
											Start: ast.Position{
												Column: 32,
												Line:   37,
											},
										},
									},
									Left: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   37,
												},
												File:   "",
												Source: "r._level",
												Start: ast.Position{
													Column: 32,
													Line:   37,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   37,
													},
													File:   "",
													Source: "r",
													Start: ast.Position{
														Column: 32,
														Line:   37,
													},
												},
											},
											Name: "r",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   37,
													},
													File:   "",
													Source: "_level",
													Start: ast.Position{
														Column: 34,
														Line:   37,
													},
												},
											},
											Name: "_level",
										},
									},
									Operator: 17,
									Right: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   37,
												},
												File:   "",
												Source: "fromLevel",
												Start: ast.Position{
													Column: 44,
													Line:   37,
												},
											},
										},
										Name: "fromLevel",
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   37,
											},
											File:   "",
											Source: "r",
											Start: ast.Position{
												Column: 26,
												Line:   37,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   37,
												},
												File:   "",
												Source: "r",
												Start: ast.Position{
													Column: 26,
													Line:   37,
												},
											},
										},
										Name: "r",
									},
									Value: nil,
								}},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   37,
									},
									File:   "",
									Source: "if fromLevel == \"any\" then (r) => r._level != toLevel and exists r._level\n                   else (r) => r._level == fromLevel",
									Start: ast.Position{
										Column: 19,
										Line:   36,
									},
								},
							},
							Consequent: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 92,
											Line:   36,
										},
										File:   "",
										Source: "(r) => r._level != toLevel and exists r._level",
										Start: ast.Position{
											Column: 46,
											Line:   36,
										},
									},
								},
								Body: &ast.LogicalExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 92,
												Line:   36,
											},
											File:   "",
											Source: "r._level != toLevel and exists r._level",
											Start: ast.Position{
												Column: 53,
												Line:   36,
											},
										},
									},
									Left: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 72,
													Line:   36,
												},
												File:   "",
												Source: "r._level != toLevel",
												Start: ast.Position{
													Column: 53,
													Line:   36,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 61,
														Line:   36,
													},
													File:   "",
													Source: "r._level",
													Start: ast.Position{
														Column: 53,
														Line:   36,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 54,
															Line:   36,
														},
														File:   "",
														Source: "r",
														Start: ast.Position{
															Column: 53,
															Line:   36,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 61,
															Line:   36,
														},
														File:   "",
														Source: "_level",
														Start: ast.Position{
															Column: 55,
															Line:   36,
														},
													},
												},
												Name: "_level",
											},
										},
										Operator: 18,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 72,
														Line:   36,
													},
													File:   "",
													Source: "toLevel",
													Start: ast.Position{
														Column: 65,
														Line:   36,
													},
												},
											},
											Name: "toLevel",
										},
									},
									Operator: 1,
									Right: &ast.UnaryExpression{
										Argument: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 92,
														Line:   36,
													},
													File:   "",
													Source: "r._level",
													Start: ast.Position{
														Column: 84,
														Line:   36,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 85,
															Line:   36,
														},
														File:   "",
														Source: "r",
														Start: ast.Position{
															Column: 84,
															Line:   36,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 92,
															Line:   36,
														},
														File:   "",
														Source: "_level",
														Start: ast.Position{
															Column: 86,
															Line:   36,
														},
													},
												},
												Name: "_level",
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 92,
													Line:   36,
												},
												File:   "",
												Source: "exists r._level",
												Start: ast.Position{
													Column: 77,
													Line:   36,
												},
											},
										},
										Operator: 14,
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   36,
											},
											File:   "",
											Source: "r",
											Start: ast.Position{
												Column: 47,
												Line:   36,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   36,
												},
												File:   "",
												Source: "r",
												Start: ast.Position{
													Column: 47,
													Line:   36,
												},
											},
										},
										Name: "r",
									},
									Value: nil,
								}},
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   36,
										},
										File:   "",
										Source: "fromLevel == \"any\"",
										Start: ast.Position{
											Column: 22,
											Line:   36,
										},
									},
								},
								Left: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   36,
											},
											File:   "",
											Source: "fromLevel",
											Start: ast.Position{
												Column: 22,
												Line:   36,
											},
										},
									},
									Name: "fromLevel",
								},
								Operator: 17,
								Right: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   36,
											},
											File:   "",
											Source: "\"any\"",
											Start: ast.Position{
												Column: 35,
												Line:   36,
											},
										},
									},
									Value: "any",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   44,
								},
								File:   "",
								Source: "fromStatuses = tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})",
								Start: ast.Position{
									Column: 5,
									Line:   39,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   39,
									},
									File:   "",
									Source: "fromStatuses",
									Start: ast.Position{
										Column: 5,
										Line:   39,
									},
								},
							},
							Name: "fromStatuses",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 26,
															Line:   39,
														},
														File:   "",
														Source: "tables",
														Start: ast.Position{
															Column: 20,
															Line:   39,
														},
													},
												},
												Name: "tables",
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   40,
													},
													File:   "",
													Source: "tables\n        |> filter(fn: levelFilter)",
													Start: ast.Position{
														Column: 20,
														Line:   39,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 34,
																Line:   40,
															},
															File:   "",
															Source: "fn: levelFilter",
															Start: ast.Position{
																Column: 19,
																Line:   40,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 34,
																	Line:   40,
																},
																File:   "",
																Source: "fn: levelFilter",
																Start: ast.Position{
																	Column: 19,
																	Line:   40,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   40,
																	},
																	File:   "",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 19,
																		Line:   40,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 34,
																		Line:   40,
																	},
																	File:   "",
																	Source: "levelFilter",
																	Start: ast.Position{
																		Column: 23,
																		Line:   40,
																	},
																},
															},
															Name: "levelFilter",
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 35,
															Line:   40,
														},
														File:   "",
														Source: "filter(fn: levelFilter)",
														Start: ast.Position{
															Column: 12,
															Line:   40,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   40,
															},
															File:   "",
															Source: "filter",
															Start: ast.Position{
																Column: 12,
																Line:   40,
															},
														},
													},
													Name: "filter",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   41,
												},
												File:   "",
												Source: "tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))",
												Start: ast.Position{
													Column: 20,
													Line:   39,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 52,
															Line:   41,
														},
														File:   "",
														Source: "fn: (r) => ({r with level_value: 0})",
														Start: ast.Position{
															Column: 16,
															Line:   41,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 52,
																Line:   41,
															},
															File:   "",
															Source: "fn: (r) => ({r with level_value: 0})",
															Start: ast.Position{
																Column: 16,
																Line:   41,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   41,
																},
																File:   "",
																Source: "fn",
																Start: ast.Position{
																	Column: 16,
																	Line:   41,
																},
															},
														},
														Name: "fn",
													},
													Value: &ast.FunctionExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 52,
																	Line:   41,
																},
																File:   "",
																Source: "(r) => ({r with level_value: 0})",
																Start: ast.Position{
																	Column: 20,
																	Line:   41,
																},
															},
														},
														Body: &ast.ParenExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 52,
																		Line:   41,
																	},
																	File:   "",
																	Source: "({r with level_value: 0})",
																	Start: ast.Position{
																		Column: 27,
																		Line:   41,
																	},
																},
															},
															Expression: &ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 51,
																			Line:   41,
																		},
																		File:   "",
																		Source: "{r with level_value: 0}",
																		Start: ast.Position{
																			Column: 28,
																			Line:   41,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 50,
																				Line:   41,
																			},
																			File:   "",
																			Source: "level_value: 0",
																			Start: ast.Position{
																				Column: 36,
																				Line:   41,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 47,
																					Line:   41,
																				},
																				File:   "",
																				Source: "level_value",
																				Start: ast.Position{
																					Column: 36,
																					Line:   41,
																				},
																			},
																		},
																		Name: "level_value",
																	},
																	Value: &ast.IntegerLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 50,
																					Line:   41,
																				},
																				File:   "",
																				Source: "0",
																				Start: ast.Position{
																					Column: 49,
																					Line:   41,
																				},
																			},
																		},
																		Value: int64(0),
																	},
																}},
																With: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   41,
																			},
																			File:   "",
																			Source: "r",
																			Start: ast.Position{
																				Column: 29,
																				Line:   41,
																			},
																		},
																	},
																	Name: "r",
																},
															},
														},
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 22,
																		Line:   41,
																	},
																	File:   "",
																	Source: "r",
																	Start: ast.Position{
																		Column: 21,
																		Line:   41,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 22,
																			Line:   41,
																		},
																		File:   "",
																		Source: "r",
																		Start: ast.Position{
																			Column: 21,
																			Line:   41,
																		},
																	},
																},
																Name: "r",
															},
															Value: nil,
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 53,
														Line:   41,
													},
													File:   "",
													Source: "map(fn: (r) => ({r with level_value: 0}))",
													Start: ast.Position{
														Column: 12,
														Line:   41,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   41,
														},
														File:   "",
														Source: "map",
														Start: ast.Position{
															Column: 12,
															Line:   41,
														},
													},
												},
												Name: "map",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   42,
											},
											File:   "",
											Source: "tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")",
											Start: ast.Position{
												Column: 20,
												Line:   39,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   42,
													},
													File:   "",
													Source: "column: \"_level\", as: \"l2\"",
													Start: ast.Position{
														Column: 22,
														Line:   42,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   42,
														},
														File:   "",
														Source: "column: \"_level\"",
														Start: ast.Position{
															Column: 22,
															Line:   42,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   42,
															},
															File:   "",
															Source: "column",
															Start: ast.Position{
																Column: 22,
																Line:   42,
															},
														},
													},
													Name: "column",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   42,
															},
															File:   "",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 30,
																Line:   42,
															},
														},
													},
													Value: "_level",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   42,
														},
														File:   "",
														Source: "as: \"l2\"",
														Start: ast.Position{
															Column: 40,
															Line:   42,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   42,
															},
															File:   "",
															Source: "as",
															Start: ast.Position{
																Column: 40,
																Line:   42,
															},
														},
													},
													Name: "as",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   42,
															},
															File:   "",
															Source: "\"l2\"",
															Start: ast.Position{
																Column: 44,
																Line:   42,
															},
														},
													},
													Value: "l2",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   42,
												},
												File:   "",
												Source: "duplicate(column: \"_level\", as: \"l2\")",
												Start: ast.Position{
													Column: 12,
													Line:   42,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   42,
													},
													File:   "",
													Source: "duplicate",
													Start: ast.Position{
														Column: 12,
														Line:   42,
													},
												},
											},
											Name: "duplicate",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   43,
										},
										File:   "",
										Source: "tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])",
										Start: ast.Position{
											Column: 20,
											Line:   39,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   43,
												},
												File:   "",
												Source: "columns: [\"_level\"]",
												Start: ast.Position{
													Column: 17,
													Line:   43,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   43,
													},
													File:   "",
													Source: "columns: [\"_level\"]",
													Start: ast.Position{
														Column: 17,
														Line:   43,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   43,
														},
														File:   "",
														Source: "columns",
														Start: ast.Position{
															Column: 17,
															Line:   43,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   43,
														},
														File:   "",
														Source: "[\"_level\"]",
														Start: ast.Position{
															Column: 26,
															Line:   43,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   43,
															},
															File:   "",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 27,
																Line:   43,
															},
														},
													},
													Value: "_level",
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   43,
											},
											File:   "",
											Source: "drop(columns: [\"_level\"])",
											Start: ast.Position{
												Column: 12,
												Line:   43,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   43,
												},
												File:   "",
												Source: "drop",
												Start: ast.Position{
													Column: 12,
													Line:   43,
												},
											},
										},
										Name: "drop",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   44,
									},
									File:   "",
									Source: "tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})",
									Start: ast.Position{
										Column: 20,
										Line:   39,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   44,
											},
											File:   "",
											Source: "columns: {\"l2\": \"_level\"}",
											Start: ast.Position{
												Column: 19,
												Line:   44,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   44,
												},
												File:   "",
												Source: "columns: {\"l2\": \"_level\"}",
												Start: ast.Position{
													Column: 19,
													Line:   44,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   44,
													},
													File:   "",
													Source: "columns",
													Start: ast.Position{
														Column: 19,
														Line:   44,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   44,
													},
													File:   "",
													Source: "{\"l2\": \"_level\"}",
													Start: ast.Position{
														Column: 28,
														Line:   44,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   44,
														},
														File:   "",
														Source: "\"l2\": \"_level\"",
														Start: ast.Position{
															Column: 29,
															Line:   44,
														},
													},
												},
												Key: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   44,
															},
															File:   "",
															Source: "\"l2\"",
															Start: ast.Position{
																Column: 29,
																Line:   44,
															},
														},
													},
													Value: "l2",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   44,
															},
															File:   "",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 35,
																Line:   44,
															},
														},
													},
													Value: "_level",
												},
											}},
											With: nil,
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   44,
										},
										File:   "",
										Source: "rename(columns: {\"l2\": \"_level\"})",
										Start: ast.Position{
											Column: 12,
											Line:   44,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   44,
											},
											File:   "",
											Source: "rename",
											Start: ast.Position{
												Column: 12,
												Line:   44,
											},
										},
									},
									Name: "rename",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   47,
								},
								File:   "",
								Source: "allStatuses = union(tables: [toStatuses, fromStatuses])\n        |> sort(columns: [\"_time\"])",
								Start: ast.Position{
									Column: 6,
									Line:   46,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   46,
									},
									File:   "",
									Source: "allStatuses",
									Start: ast.Position{
										Column: 6,
										Line:   46,
									},
								},
							},
							Name: "allStatuses",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 60,
												Line:   46,
											},
											File:   "",
											Source: "tables: [toStatuses, fromStatuses]",
											Start: ast.Position{
												Column: 26,
												Line:   46,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 60,
													Line:   46,
												},
												File:   "",
												Source: "tables: [toStatuses, fromStatuses]",
												Start: ast.Position{
													Column: 26,
													Line:   46,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   46,
													},
													File:   "",
													Source: "tables",
													Start: ast.Position{
														Column: 26,
														Line:   46,
													},
												},
											},
											Name: "tables",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 60,
														Line:   46,
													},
													File:   "",
													Source: "[toStatuses, fromStatuses]",
													Start: ast.Position{
														Column: 34,
														Line:   46,
													},
												},
											},
											Elements: []ast.Expression{&ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   46,
														},
														File:   "",
														Source: "toStatuses",
														Start: ast.Position{
															Column: 35,
															Line:   46,
														},
													},
												},
												Name: "toStatuses",
											}, &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   46,
														},
														File:   "",
														Source: "fromStatuses",
														Start: ast.Position{
															Column: 47,
															Line:   46,
														},
													},
												},
												Name: "fromStatuses",
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   46,
										},
										File:   "",
										Source: "union(tables: [toStatuses, fromStatuses])",
										Start: ast.Position{
											Column: 20,
											Line:   46,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   46,
											},
											File:   "",
											Source: "union",
											Start: ast.Position{
												Column: 20,
												Line:   46,
											},
										},
									},
									Name: "union",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   47,
									},
									File:   "",
									Source: "union(tables: [toStatuses, fromStatuses])\n        |> sort(columns: [\"_time\"])",
									Start: ast.Position{
										Column: 20,
										Line:   46,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   47,
											},
											File:   "",
											Source: "columns: [\"_time\"]",
											Start: ast.Position{
												Column: 17,
												Line:   47,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   47,
												},
												File:   "",
												Source: "columns: [\"_time\"]",
												Start: ast.Position{
													Column: 17,
													Line:   47,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   47,
													},
													File:   "",
													Source: "columns",
													Start: ast.Position{
														Column: 17,
														Line:   47,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   47,
													},
													File:   "",
													Source: "[\"_time\"]",
													Start: ast.Position{
														Column: 26,
														Line:   47,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   47,
														},
														File:   "",
														Source: "\"_time\"",
														Start: ast.Position{
															Column: 27,
															Line:   47,
														},
													},
												},
												Value: "_time",
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   47,
										},
										File:   "",
										Source: "sort(columns: [\"_time\"])",
										Start: ast.Position{
											Column: 12,
											Line:   47,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   47,
											},
											File:   "",
											Source: "sort",
											Start: ast.Position{
												Column: 12,
												Line:   47,
											},
										},
									},
									Name: "sort",
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   49,
													},
													File:   "",
													Source: "allStatuses",
													Start: ast.Position{
														Column: 12,
														Line:   49,
													},
												},
											},
											Name: "allStatuses",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   50,
												},
												File:   "",
												Source: "allStatuses\n        |> difference(columns: [\"level_value\"])",
												Start: ast.Position{
													Column: 12,
													Line:   49,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   50,
														},
														File:   "",
														Source: "columns: [\"level_value\"]",
														Start: ast.Position{
															Column: 23,
															Line:   50,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   50,
															},
															File:   "",
															Source: "columns: [\"level_value\"]",
															Start: ast.Position{
																Column: 23,
																Line:   50,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   50,
																},
																File:   "",
																Source: "columns",
																Start: ast.Position{
																	Column: 23,
																	Line:   50,
																},
															},
														},
														Name: "columns",
													},
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   50,
																},
																File:   "",
																Source: "[\"level_value\"]",
																Start: ast.Position{
																	Column: 32,
																	Line:   50,
																},
															},
														},
														Elements: []ast.Expression{&ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   50,
																	},
																	File:   "",
																	Source: "\"level_value\"",
																	Start: ast.Position{
																		Column: 33,
																		Line:   50,
																	},
																},
															},
															Value: "level_value",
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   50,
													},
													File:   "",
													Source: "difference(columns: [\"level_value\"])",
													Start: ast.Position{
														Column: 12,
														Line:   50,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   50,
														},
														File:   "",
														Source: "difference",
														Start: ast.Position{
															Column: 12,
															Line:   50,
														},
													},
												},
												Name: "difference",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   51,
											},
											File:   "",
											Source: "allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value > 0)",
											Start: ast.Position{
												Column: 12,
												Line:   49,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   51,
													},
													File:   "",
													Source: "fn: (r) => r.level_value > 0",
													Start: ast.Position{
														Column: 19,
														Line:   51,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   51,
														},
														File:   "",
														Source: "fn: (r) => r.level_value > 0",
														Start: ast.Position{
															Column: 19,
															Line:   51,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   51,
															},
															File:   "",
															Source: "fn",
															Start: ast.Position{
																Column: 19,
																Line:   51,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   51,
															},
															File:   "",
															Source: "(r) => r.level_value > 0",
															Start: ast.Position{
																Column: 23,
																Line:   51,
															},
														},
													},
													Body: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   51,
																},
																File:   "",
																Source: "r.level_value > 0",
																Start: ast.Position{
																	Column: 30,
																	Line:   51,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   51,
																	},
																	File:   "",
																	Source: "r.level_value",
																	Start: ast.Position{
																		Column: 30,
																		Line:   51,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 31,
																			Line:   51,
																		},
																		File:   "",
																		Source: "r",
																		Start: ast.Position{
																			Column: 30,
																			Line:   51,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 43,
																			Line:   51,
																		},
																		File:   "",
																		Source: "level_value",
																		Start: ast.Position{
																			Column: 32,
																			Line:   51,
																		},
																	},
																},
																Name: "level_value",
															},
														},
														Operator: 10,
														Right: &ast.IntegerLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   51,
																	},
																	File:   "",
																	Source: "0",
																	Start: ast.Position{
																		Column: 46,
																		Line:   51,
																	},
																},
															},
															Value: int64(0),
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 25,
																	Line:   51,
																},
																File:   "",
																Source: "r",
																Start: ast.Position{
																	Column: 24,
																	Line:   51,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 25,
																		Line:   51,
																	},
																	File:   "",
																	Source: "r",
																	Start: ast.Position{
																		Column: 24,
																		Line:   51,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   51,
												},
												File:   "",
												Source: "filter(fn: (r) => r.level_value > 0)",
												Start: ast.Position{
													Column: 12,
													Line:   51,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   51,
													},
													File:   "",
													Source: "filter",
													Start: ast.Position{
														Column: 12,
														Line:   51,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   52,
										},
										File:   "",
										Source: "allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value > 0)\n        |> drop(columns: [\"level_value\"])",
										Start: ast.Position{
											Column: 12,
											Line:   49,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   52,
												},
												File:   "",
												Source: "columns: [\"level_value\"]",
												Start: ast.Position{
													Column: 17,
													Line:   52,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   52,
													},
													File:   "",
													Source: "columns: [\"level_value\"]",
													Start: ast.Position{
														Column: 17,
														Line:   52,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   52,
														},
														File:   "",
														Source: "columns",
														Start: ast.Position{
															Column: 17,
															Line:   52,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   52,
														},
														File:   "",
														Source: "[\"level_value\"]",
														Start: ast.Position{
															Column: 26,
															Line:   52,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   52,
															},
															File:   "",
															Source: "\"level_value\"",
															Start: ast.Position{
																Column: 27,
																Line:   52,
															},
														},
													},
													Value: "level_value",
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   52,
											},
											File:   "",
											Source: "drop(columns: [\"level_value\"])",
											Start: ast.Position{
												Column: 12,
												Line:   52,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   52,
												},
												File:   "",
												Source: "drop",
												Start: ast.Position{
													Column: 12,
													Line:   52,
												},
											},
										},
										Name: "drop",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   53,
									},
									File:   "",
									Source: "allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value > 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])",
									Start: ast.Position{
										Column: 12,
										Line:   49,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   53,
											},
											File:   "",
											Source: "mode: \"extend\", columns: [\"_level\"]",
											Start: ast.Position{
												Column: 31,
												Line:   53,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   53,
												},
												File:   "",
												Source: "mode: \"extend\"",
												Start: ast.Position{
													Column: 31,
													Line:   53,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   53,
													},
													File:   "",
													Source: "mode",
													Start: ast.Position{
														Column: 31,
														Line:   53,
													},
												},
											},
											Name: "mode",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   53,
													},
													File:   "",
													Source: "\"extend\"",
													Start: ast.Position{
														Column: 37,
														Line:   53,
													},
												},
											},
											Value: "extend",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   53,
												},
												File:   "",
												Source: "columns: [\"_level\"]",
												Start: ast.Position{
													Column: 47,
													Line:   53,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 54,
														Line:   53,
													},
													File:   "",
													Source: "columns",
													Start: ast.Position{
														Column: 47,
														Line:   53,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 66,
														Line:   53,
													},
													File:   "",
													Source: "[\"_level\"]",
													Start: ast.Position{
														Column: 56,
														Line:   53,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 65,
															Line:   53,
														},
														File:   "",
														Source: "\"_level\"",
														Start: ast.Position{
															Column: 57,
															Line:   53,
														},
													},
												},
												Value: "_level",
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   53,
										},
										File:   "",
										Source: "experimental.group(mode: \"extend\", columns: [\"_level\"])",
										Start: ast.Position{
											Column: 12,
											Line:   53,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   53,
											},
											File:   "",
											Source: "experimental.group",
											Start: ast.Position{
												Column: 12,
												Line:   53,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   53,
												},
												File:   "",
												Source: "experimental",
												Start: ast.Position{
													Column: 12,
													Line:   53,
												},
											},
										},
										Name: "experimental",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   53,
												},
												File:   "",
												Source: "group",
												Start: ast.Position{
													Column: 25,
													Line:   53,
												},
											},
										},
										Name: "group",
									},
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 67,
									Line:   53,
								},
								File:   "",
								Source: "return allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value > 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])",
								Start: ast.Position{
									Column: 5,
									Line:   49,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   28,
							},
							File:   "",
							Source: "fromLevel=\"any\"",
							Start: ast.Position{
								Column: 17,
								Line:   28,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   28,
								},
								File:   "",
								Source: "fromLevel",
								Start: ast.Position{
									Column: 17,
									Line:   28,
								},
							},
						},
						Name: "fromLevel",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   28,
								},
								File:   "",
								Source: "\"any\"",
								Start: ast.Position{
									Column: 27,
									Line:   28,
								},
							},
						},
						Value: "any",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 41,
								Line:   28,
							},
							File:   "",
							Source: "toLevel",
							Start: ast.Position{
								Column: 34,
								Line:   28,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   28,
								},
								File:   "",
								Source: "toLevel",
								Start: ast.Position{
									Column: 34,
									Line:   28,
								},
							},
						},
						Name: "toLevel",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 52,
								Line:   28,
							},
							File:   "",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 43,
								Line:   28,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   28,
								},
								File:   "",
								Source: "tables",
								Start: ast.Position{
									Column: 43,
									Line:   28,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 52,
								Line:   28,
							},
							File:   "",
							Source: "<-",
							Start: ast.Position{
								Column: 50,
								Line:   28,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   68,
					},
					File:   "",
					Source: "notify = (tables=<-, endpoint, data={}) =>\n    tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n        |> map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))\n        |> endpoint()\n        |> experimental.group(mode: \"extend\", columns: [\"_sent\"])\n        |> log()",
					Start: ast.Position{
						Column: 1,
						Line:   57,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   57,
						},
						File:   "",
						Source: "notify",
						Start: ast.Position{
							Column: 1,
							Line:   57,
						},
					},
				},
				Name: "notify",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   68,
						},
						File:   "",
						Source: "(tables=<-, endpoint, data={}) =>\n    tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n        |> map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))\n        |> endpoint()\n        |> experimental.group(mode: \"extend\", columns: [\"_sent\"])\n        |> log()",
						Start: ast.Position{
							Column: 10,
							Line:   57,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   58,
													},
													File:   "",
													Source: "tables",
													Start: ast.Position{
														Column: 5,
														Line:   58,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   59,
												},
												File:   "",
												Source: "tables\n        |> experimental.set(o: data)",
												Start: ast.Position{
													Column: 5,
													Line:   58,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   59,
														},
														File:   "",
														Source: "o: data",
														Start: ast.Position{
															Column: 29,
															Line:   59,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   59,
															},
															File:   "",
															Source: "o: data",
															Start: ast.Position{
																Column: 29,
																Line:   59,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   59,
																},
																File:   "",
																Source: "o",
																Start: ast.Position{
																	Column: 29,
																	Line:   59,
																},
															},
														},
														Name: "o",
													},
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   59,
																},
																File:   "",
																Source: "data",
																Start: ast.Position{
																	Column: 32,
																	Line:   59,
																},
															},
														},
														Name: "data",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   59,
													},
													File:   "",
													Source: "experimental.set(o: data)",
													Start: ast.Position{
														Column: 12,
														Line:   59,
													},
												},
											},
											Callee: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   59,
														},
														File:   "",
														Source: "experimental.set",
														Start: ast.Position{
															Column: 12,
															Line:   59,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   59,
															},
															File:   "",
															Source: "experimental",
															Start: ast.Position{
																Column: 12,
																Line:   59,
															},
														},
													},
													Name: "experimental",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   59,
															},
															File:   "",
															Source: "set",
															Start: ast.Position{
																Column: 25,
																Line:   59,
															},
														},
													},
													Name: "set",
												},
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 89,
												Line:   60,
											},
											File:   "",
											Source: "tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))",
											Start: ast.Position{
												Column: 5,
												Line:   58,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 88,
														Line:   60,
													},
													File:   "",
													Source: "mode: \"extend\", columns: experimental.objectKeys(o: data)",
													Start: ast.Position{
														Column: 31,
														Line:   60,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   60,
														},
														File:   "",
														Source: "mode: \"extend\"",
														Start: ast.Position{
															Column: 31,
															Line:   60,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   60,
															},
															File:   "",
															Source: "mode",
															Start: ast.Position{
																Column: 31,
																Line:   60,
															},
														},
													},
													Name: "mode",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   60,
															},
															File:   "",
															Source: "\"extend\"",
															Start: ast.Position{
																Column: 37,
																Line:   60,
															},
														},
													},
													Value: "extend",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 88,
															Line:   60,
														},
														File:   "",
														Source: "columns: experimental.objectKeys(o: data)",
														Start: ast.Position{
															Column: 47,
															Line:   60,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 54,
																Line:   60,
															},
															File:   "",
															Source: "columns",
															Start: ast.Position{
																Column: 47,
																Line:   60,
															},
														},
													},
													Name: "columns",
												},
												Value: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 87,
																	Line:   60,
																},
																File:   "",
																Source: "o: data",
																Start: ast.Position{
																	Column: 80,
																	Line:   60,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 87,
																		Line:   60,
																	},
																	File:   "",
																	Source: "o: data",
																	Start: ast.Position{
																		Column: 80,
																		Line:   60,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 81,
																			Line:   60,
																		},
																		File:   "",
																		Source: "o",
																		Start: ast.Position{
																			Column: 80,
																			Line:   60,
																		},
																	},
																},
																Name: "o",
															},
															Value: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 87,
																			Line:   60,
																		},
																		File:   "",
																		Source: "data",
																		Start: ast.Position{
																			Column: 83,
																			Line:   60,
																		},
																	},
																},
																Name: "data",
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 88,
																Line:   60,
															},
															File:   "",
															Source: "experimental.objectKeys(o: data)",
															Start: ast.Position{
																Column: 56,
																Line:   60,
															},
														},
													},
													Callee: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 79,
																	Line:   60,
																},
																File:   "",
																Source: "experimental.objectKeys",
																Start: ast.Position{
																	Column: 56,
																	Line:   60,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 68,
																		Line:   60,
																	},
																	File:   "",
																	Source: "experimental",
																	Start: ast.Position{
																		Column: 56,
																		Line:   60,
																	},
																},
															},
															Name: "experimental",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 79,
																		Line:   60,
																	},
																	File:   "",
																	Source: "objectKeys",
																	Start: ast.Position{
																		Column: 69,
																		Line:   60,
																	},
																},
															},
															Name: "objectKeys",
														},
													},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 89,
													Line:   60,
												},
												File:   "",
												Source: "experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))",
												Start: ast.Position{
													Column: 12,
													Line:   60,
												},
											},
										},
										Callee: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   60,
													},
													File:   "",
													Source: "experimental.group",
													Start: ast.Position{
														Column: 12,
														Line:   60,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   60,
														},
														File:   "",
														Source: "experimental",
														Start: ast.Position{
															Column: 12,
															Line:   60,
														},
													},
												},
												Name: "experimental",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   60,
														},
														File:   "",
														Source: "group",
														Start: ast.Position{
															Column: 25,
															Line:   60,
														},
													},
												},
												Name: "group",
											},
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   65,
										},
										File:   "",
										Source: "tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n        |> map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))",
										Start: ast.Position{
											Column: 5,
											Line:   58,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   65,
												},
												File:   "",
												Source: "fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        })",
												Start: ast.Position{
													Column: 16,
													Line:   61,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   65,
													},
													File:   "",
													Source: "fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        })",
													Start: ast.Position{
														Column: 16,
														Line:   61,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   61,
														},
														File:   "",
														Source: "fn",
														Start: ast.Position{
															Column: 16,
															Line:   61,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   65,
														},
														File:   "",
														Source: "(r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        })",
														Start: ast.Position{
															Column: 20,
															Line:   61,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 11,
																Line:   65,
															},
															File:   "",
															Source: "({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        })",
															Start: ast.Position{
																Column: 27,
																Line:   61,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 10,
																	Line:   65,
																},
																File:   "",
																Source: "{r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }",
																Start: ast.Position{
																	Column: 28,
																	Line:   61,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   62,
																	},
																	File:   "",
																	Source: "_measurement: \"notifications\"",
																	Start: ast.Position{
																		Column: 13,
																		Line:   62,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   62,
																		},
																		File:   "",
																		Source: "_measurement",
																		Start: ast.Position{
																			Column: 13,
																			Line:   62,
																		},
																	},
																},
																Name: "_measurement",
															},
															Value: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 42,
																			Line:   62,
																		},
																		File:   "",
																		Source: "\"notifications\"",
																		Start: ast.Position{
																			Column: 27,
																			Line:   62,
																		},
																	},
																},
																Value: "notifications",
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   63,
																	},
																	File:   "",
																	Source: "_status_timestamp: int(v: r._time)",
																	Start: ast.Position{
																		Column: 13,
																		Line:   63,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 30,
																			Line:   63,
																		},
																		File:   "",
																		Source: "_status_timestamp",
																		Start: ast.Position{
																			Column: 13,
																			Line:   63,
																		},
																	},
																},
																Name: "_status_timestamp",
															},
															Value: &ast.CallExpression{
																Arguments: []ast.Expression{&ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 46,
																				Line:   63,
																			},
																			File:   "",
																			Source: "v: r._time",
																			Start: ast.Position{
																				Column: 36,
																				Line:   63,
																			},
																		},
																	},
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 46,
																					Line:   63,
																				},
																				File:   "",
																				Source: "v: r._time",
																				Start: ast.Position{
																					Column: 36,
																					Line:   63,
																				},
																			},
																		},
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 37,
																						Line:   63,
																					},
																					File:   "",
																					Source: "v",
																					Start: ast.Position{
																						Column: 36,
																						Line:   63,
																					},
																				},
																			},
																			Name: "v",
																		},
																		Value: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 46,
																						Line:   63,
																					},
																					File:   "",
																					Source: "r._time",
																					Start: ast.Position{
																						Column: 39,
																						Line:   63,
																					},
																				},
																			},
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 40,
																							Line:   63,
																						},
																						File:   "",
																						Source: "r",
																						Start: ast.Position{
																							Column: 39,
																							Line:   63,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 46,
																							Line:   63,
																						},
																						File:   "",
																						Source: "_time",
																						Start: ast.Position{
																							Column: 41,
																							Line:   63,
																						},
																					},
																				},
																				Name: "_time",
																			},
																		},
																	}},
																	With: nil,
																}},
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 47,
																			Line:   63,
																		},
																		File:   "",
																		Source: "int(v: r._time)",
																		Start: ast.Position{
																			Column: 32,
																			Line:   63,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 35,
																				Line:   63,
																			},
																			File:   "",
																			Source: "int",
																			Start: ast.Position{
																				Column: 32,
																				Line:   63,
																			},
																		},
																	},
																	Name: "int",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 25,
																		Line:   64,
																	},
																	File:   "",
																	Source: "_time: now()",
																	Start: ast.Position{
																		Column: 13,
																		Line:   64,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   64,
																		},
																		File:   "",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 13,
																			Line:   64,
																		},
																	},
																},
																Name: "_time",
															},
															Value: &ast.CallExpression{
																Arguments: nil,
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   64,
																		},
																		File:   "",
																		Source: "now()",
																		Start: ast.Position{
																			Column: 20,
																			Line:   64,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 23,
																				Line:   64,
																			},
																			File:   "",
																			Source: "now",
																			Start: ast.Position{
																				Column: 20,
																				Line:   64,
																			},
																		},
																	},
																	Name: "now",
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 30,
																		Line:   61,
																	},
																	File:   "",
																	Source: "r",
																	Start: ast.Position{
																		Column: 29,
																		Line:   61,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 22,
																Line:   61,
															},
															File:   "",
															Source: "r",
															Start: ast.Position{
																Column: 21,
																Line:   61,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   61,
																},
																File:   "",
																Source: "r",
																Start: ast.Position{
																	Column: 21,
																	Line:   61,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   65,
											},
											File:   "",
											Source: "map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))",
											Start: ast.Position{
												Column: 12,
												Line:   61,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   61,
												},
												File:   "",
												Source: "map",
												Start: ast.Position{
													Column: 12,
													Line:   61,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   66,
									},
									File:   "",
									Source: "tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n        |> map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))\n        |> endpoint()",
									Start: ast.Position{
										Column: 5,
										Line:   58,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   66,
										},
										File:   "",
										Source: "endpoint()",
										Start: ast.Position{
											Column: 12,
											Line:   66,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   66,
											},
											File:   "",
											Source: "endpoint",
											Start: ast.Position{
												Column: 12,
												Line:   66,
											},
										},
									},
									Name: "endpoint",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   67,
								},
								File:   "",
								Source: "tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n        |> map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))\n        |> endpoint()\n        |> experimental.group(mode: \"extend\", columns: [\"_sent\"])",
								Start: ast.Position{
									Column: 5,
									Line:   58,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   67,
										},
										File:   "",
										Source: "mode: \"extend\", columns: [\"_sent\"]",
										Start: ast.Position{
											Column: 31,
											Line:   67,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   67,
											},
											File:   "",
											Source: "mode: \"extend\"",
											Start: ast.Position{
												Column: 31,
												Line:   67,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   67,
												},
												File:   "",
												Source: "mode",
												Start: ast.Position{
													Column: 31,
													Line:   67,
												},
											},
										},
										Name: "mode",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   67,
												},
												File:   "",
												Source: "\"extend\"",
												Start: ast.Position{
													Column: 37,
													Line:   67,
												},
											},
										},
										Value: "extend",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   67,
											},
											File:   "",
											Source: "columns: [\"_sent\"]",
											Start: ast.Position{
												Column: 47,
												Line:   67,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   67,
												},
												File:   "",
												Source: "columns",
												Start: ast.Position{
													Column: 47,
													Line:   67,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 65,
													Line:   67,
												},
												File:   "",
												Source: "[\"_sent\"]",
												Start: ast.Position{
													Column: 56,
													Line:   67,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 64,
														Line:   67,
													},
													File:   "",
													Source: "\"_sent\"",
													Start: ast.Position{
														Column: 57,
														Line:   67,
													},
												},
											},
											Value: "_sent",
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   67,
									},
									File:   "",
									Source: "experimental.group(mode: \"extend\", columns: [\"_sent\"])",
									Start: ast.Position{
										Column: 12,
										Line:   67,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   67,
										},
										File:   "",
										Source: "experimental.group",
										Start: ast.Position{
											Column: 12,
											Line:   67,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   67,
											},
											File:   "",
											Source: "experimental",
											Start: ast.Position{
												Column: 12,
												Line:   67,
											},
										},
									},
									Name: "experimental",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   67,
											},
											File:   "",
											Source: "group",
											Start: ast.Position{
												Column: 25,
												Line:   67,
											},
										},
									},
									Name: "group",
								},
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 17,
								Line:   68,
							},
							File:   "",
							Source: "tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n        |> map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))\n        |> endpoint()\n        |> experimental.group(mode: \"extend\", columns: [\"_sent\"])\n        |> log()",
							Start: ast.Position{
								Column: 5,
								Line:   58,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   68,
								},
								File:   "",
								Source: "log()",
								Start: ast.Position{
									Column: 12,
									Line:   68,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   68,
									},
									File:   "",
									Source: "log",
									Start: ast.Position{
										Column: 12,
										Line:   68,
									},
								},
							},
							Name: "log",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   57,
							},
							File:   "",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 11,
								Line:   57,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   57,
								},
								File:   "",
								Source: "tables",
								Start: ast.Position{
									Column: 11,
									Line:   57,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   57,
							},
							File:   "",
							Source: "<-",
							Start: ast.Position{
								Column: 18,
								Line:   57,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   57,
							},
							File:   "",
							Source: "endpoint",
							Start: ast.Position{
								Column: 22,
								Line:   57,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   57,
								},
								File:   "",
								Source: "endpoint",
								Start: ast.Position{
									Column: 22,
									Line:   57,
								},
							},
						},
						Name: "endpoint",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   57,
							},
							File:   "",
							Source: "data={}",
							Start: ast.Position{
								Column: 32,
								Line:   57,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   57,
								},
								File:   "",
								Source: "data",
								Start: ast.Position{
									Column: 32,
									Line:   57,
								},
							},
						},
						Name: "data",
					},
					Value: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   57,
								},
								File:   "",
								Source: "{}",
								Start: ast.Position{
									Column: 37,
									Line:   57,
								},
							},
						},
						Properties: []*ast.Property{},
						With:       nil,
					},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   76,
					},
					File:   "",
					Source: "logs = (start, stop=now(), fn) =>\n    influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"notifications\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
					Start: ast.Position{
						Column: 1,
						Line:   71,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   71,
						},
						File:   "",
						Source: "logs",
						Start: ast.Position{
							Column: 1,
							Line:   71,
						},
					},
				},
				Name: "logs",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   76,
						},
						File:   "",
						Source: "(start, stop=now(), fn) =>\n    influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"notifications\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
						Start: ast.Position{
							Column: 8,
							Line:   71,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   72,
												},
												File:   "",
												Source: "bucket: bucket",
												Start: ast.Position{
													Column: 19,
													Line:   72,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   72,
													},
													File:   "",
													Source: "bucket: bucket",
													Start: ast.Position{
														Column: 19,
														Line:   72,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   72,
														},
														File:   "",
														Source: "bucket",
														Start: ast.Position{
															Column: 19,
															Line:   72,
														},
													},
												},
												Name: "bucket",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 33,
															Line:   72,
														},
														File:   "",
														Source: "bucket",
														Start: ast.Position{
															Column: 27,
															Line:   72,
														},
													},
												},
												Name: "bucket",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   72,
											},
											File:   "",
											Source: "influxdb.from(bucket: bucket)",
											Start: ast.Position{
												Column: 5,
												Line:   72,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   72,
												},
												File:   "",
												Source: "influxdb.from",
												Start: ast.Position{
													Column: 5,
													Line:   72,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   72,
													},
													File:   "",
													Source: "influxdb",
													Start: ast.Position{
														Column: 5,
														Line:   72,
													},
												},
											},
											Name: "influxdb",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   72,
													},
													File:   "",
													Source: "from",
													Start: ast.Position{
														Column: 14,
														Line:   72,
													},
												},
											},
											Name: "from",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   73,
										},
										File:   "",
										Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)",
										Start: ast.Position{
											Column: 5,
											Line:   72,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   73,
												},
												File:   "",
												Source: "start: start, stop: stop",
												Start: ast.Position{
													Column: 18,
													Line:   73,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   73,
													},
													File:   "",
													Source: "start: start",
													Start: ast.Position{
														Column: 18,
														Line:   73,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 23,
															Line:   73,
														},
														File:   "",
														Source: "start",
														Start: ast.Position{
															Column: 18,
															Line:   73,
														},
													},
												},
												Name: "start",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   73,
														},
														File:   "",
														Source: "start",
														Start: ast.Position{
															Column: 25,
															Line:   73,
														},
													},
												},
												Name: "start",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   73,
													},
													File:   "",
													Source: "stop: stop",
													Start: ast.Position{
														Column: 32,
														Line:   73,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   73,
														},
														File:   "",
														Source: "stop",
														Start: ast.Position{
															Column: 32,
															Line:   73,
														},
													},
												},
												Name: "stop",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   73,
														},
														File:   "",
														Source: "stop",
														Start: ast.Position{
															Column: 38,
															Line:   73,
														},
													},
												},
												Name: "stop",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   73,
											},
											File:   "",
											Source: "range(start: start, stop: stop)",
											Start: ast.Position{
												Column: 12,
												Line:   73,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   73,
												},
												File:   "",
												Source: "range",
												Start: ast.Position{
													Column: 12,
													Line:   73,
												},
											},
										},
										Name: "range",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   74,
									},
									File:   "",
									Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"notifications\")",
									Start: ast.Position{
										Column: 5,
										Line:   72,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 63,
												Line:   74,
											},
											File:   "",
											Source: "fn: (r) => r._measurement == \"notifications\"",
											Start: ast.Position{
												Column: 19,
												Line:   74,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 63,
													Line:   74,
												},
												File:   "",
												Source: "fn: (r) => r._measurement == \"notifications\"",
												Start: ast.Position{
													Column: 19,
													Line:   74,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   74,
													},
													File:   "",
													Source: "fn",
													Start: ast.Position{
														Column: 19,
														Line:   74,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 63,
														Line:   74,
													},
													File:   "",
													Source: "(r) => r._measurement == \"notifications\"",
													Start: ast.Position{
														Column: 23,
														Line:   74,
													},
												},
											},
											Body: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 63,
															Line:   74,
														},
														File:   "",
														Source: "r._measurement == \"notifications\"",
														Start: ast.Position{
															Column: 30,
															Line:   74,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   74,
															},
															File:   "",
															Source: "r._measurement",
															Start: ast.Position{
																Column: 30,
																Line:   74,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   74,
																},
																File:   "",
																Source: "r",
																Start: ast.Position{
																	Column: 30,
																	Line:   74,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   74,
																},
																File:   "",
																Source: "_measurement",
																Start: ast.Position{
																	Column: 32,
																	Line:   74,
																},
															},
														},
														Name: "_measurement",
													},
												},
												Operator: 17,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 63,
																Line:   74,
															},
															File:   "",
															Source: "\"notifications\"",
															Start: ast.Position{
																Column: 48,
																Line:   74,
															},
														},
													},
													Value: "notifications",
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   74,
														},
														File:   "",
														Source: "r",
														Start: ast.Position{
															Column: 24,
															Line:   74,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 25,
																Line:   74,
															},
															File:   "",
															Source: "r",
															Start: ast.Position{
																Column: 24,
																Line:   74,
															},
														},
													},
													Name: "r",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 64,
											Line:   74,
										},
										File:   "",
										Source: "filter(fn: (r) => r._measurement == \"notifications\")",
										Start: ast.Position{
											Column: 12,
											Line:   74,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   74,
											},
											File:   "",
											Source: "filter",
											Start: ast.Position{
												Column: 12,
												Line:   74,
											},
										},
									},
									Name: "filter",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   75,
								},
								File:   "",
								Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"notifications\")\n        |> filter(fn: fn)",
								Start: ast.Position{
									Column: 5,
									Line:   72,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   75,
										},
										File:   "",
										Source: "fn: fn",
										Start: ast.Position{
											Column: 19,
											Line:   75,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   75,
											},
											File:   "",
											Source: "fn: fn",
											Start: ast.Position{
												Column: 19,
												Line:   75,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   75,
												},
												File:   "",
												Source: "fn",
												Start: ast.Position{
													Column: 19,
													Line:   75,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   75,
												},
												File:   "",
												Source: "fn",
												Start: ast.Position{
													Column: 23,
													Line:   75,
												},
											},
										},
										Name: "fn",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   75,
									},
									File:   "",
									Source: "filter(fn: fn)",
									Start: ast.Position{
										Column: 12,
										Line:   75,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   75,
										},
										File:   "",
										Source: "filter",
										Start: ast.Position{
											Column: 12,
											Line:   75,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   76,
							},
							File:   "",
							Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"notifications\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
							Start: ast.Position{
								Column: 5,
								Line:   72,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   76,
								},
								File:   "",
								Source: "v1.fieldsAsCols()",
								Start: ast.Position{
									Column: 12,
									Line:   76,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   76,
									},
									File:   "",
									Source: "v1.fieldsAsCols",
									Start: ast.Position{
										Column: 12,
										Line:   76,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   76,
										},
										File:   "",
										Source: "v1",
										Start: ast.Position{
											Column: 12,
											Line:   76,
										},
									},
								},
								Name: "v1",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   76,
										},
										File:   "",
										Source: "fieldsAsCols",
										Start: ast.Position{
											Column: 15,
											Line:   76,
										},
									},
								},
								Name: "fieldsAsCols",
							},
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   71,
							},
							File:   "",
							Source: "start",
							Start: ast.Position{
								Column: 9,
								Line:   71,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   71,
								},
								File:   "",
								Source: "start",
								Start: ast.Position{
									Column: 9,
									Line:   71,
								},
							},
						},
						Name: "start",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   71,
							},
							File:   "",
							Source: "stop=now()",
							Start: ast.Position{
								Column: 16,
								Line:   71,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   71,
								},
								File:   "",
								Source: "stop",
								Start: ast.Position{
									Column: 16,
									Line:   71,
								},
							},
						},
						Name: "stop",
					},
					Value: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   71,
								},
								File:   "",
								Source: "now()",
								Start: ast.Position{
									Column: 21,
									Line:   71,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   71,
									},
									File:   "",
									Source: "now",
									Start: ast.Position{
										Column: 21,
										Line:   71,
									},
								},
							},
							Name: "now",
						},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   71,
							},
							File:   "",
							Source: "fn",
							Start: ast.Position{
								Column: 28,
								Line:   71,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   71,
								},
								File:   "",
								Source: "fn",
								Start: ast.Position{
									Column: 28,
									Line:   71,
								},
							},
						},
						Name: "fn",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 54,
						Line:   83,
					},
					File:   "",
					Source: "deadman = (t, tables=<-) => tables\n    |> max(column: \"_time\")\n    |> map(fn: (r) => ( {r with dead: r._time < t} ))",
					Start: ast.Position{
						Column: 1,
						Line:   81,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   81,
						},
						File:   "",
						Source: "deadman",
						Start: ast.Position{
							Column: 1,
							Line:   81,
						},
					},
				},
				Name: "deadman",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 54,
							Line:   83,
						},
						File:   "",
						Source: "(t, tables=<-) => tables\n    |> max(column: \"_time\")\n    |> map(fn: (r) => ( {r with dead: r._time < t} ))",
						Start: ast.Position{
							Column: 11,
							Line:   81,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   81,
									},
									File:   "",
									Source: "tables",
									Start: ast.Position{
										Column: 29,
										Line:   81,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   82,
								},
								File:   "",
								Source: "tables\n    |> max(column: \"_time\")",
								Start: ast.Position{
									Column: 29,
									Line:   81,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   82,
										},
										File:   "",
										Source: "column: \"_time\"",
										Start: ast.Position{
											Column: 12,
											Line:   82,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   82,
											},
											File:   "",
											Source: "column: \"_time\"",
											Start: ast.Position{
												Column: 12,
												Line:   82,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   82,
												},
												File:   "",
												Source: "column",
												Start: ast.Position{
													Column: 12,
													Line:   82,
												},
											},
										},
										Name: "column",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   82,
												},
												File:   "",
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 20,
													Line:   82,
												},
											},
										},
										Value: "_time",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   82,
									},
									File:   "",
									Source: "max(column: \"_time\")",
									Start: ast.Position{
										Column: 8,
										Line:   82,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   82,
										},
										File:   "",
										Source: "max",
										Start: ast.Position{
											Column: 8,
											Line:   82,
										},
									},
								},
								Name: "max",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 54,
								Line:   83,
							},
							File:   "",
							Source: "tables\n    |> max(column: \"_time\")\n    |> map(fn: (r) => ( {r with dead: r._time < t} ))",
							Start: ast.Position{
								Column: 29,
								Line:   81,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   83,
									},
									File:   "",
									Source: "fn: (r) => ( {r with dead: r._time < t} )",
									Start: ast.Position{
										Column: 12,
										Line:   83,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   83,
										},
										File:   "",
										Source: "fn: (r) => ( {r with dead: r._time < t} )",
										Start: ast.Position{
											Column: 12,
											Line:   83,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   83,
											},
											File:   "",
											Source: "fn",
											Start: ast.Position{
												Column: 12,
												Line:   83,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   83,
											},
											File:   "",
											Source: "(r) => ( {r with dead: r._time < t} )",
											Start: ast.Position{
												Column: 16,
												Line:   83,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   83,
												},
												File:   "",
												Source: "( {r with dead: r._time < t} )",
												Start: ast.Position{
													Column: 23,
													Line:   83,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   83,
													},
													File:   "",
													Source: "{r with dead: r._time < t}",
													Start: ast.Position{
														Column: 25,
														Line:   83,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 50,
															Line:   83,
														},
														File:   "",
														Source: "dead: r._time < t",
														Start: ast.Position{
															Column: 33,
															Line:   83,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   83,
															},
															File:   "",
															Source: "dead",
															Start: ast.Position{
																Column: 33,
																Line:   83,
															},
														},
													},
													Name: "dead",
												},
												Value: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 50,
																Line:   83,
															},
															File:   "",
															Source: "r._time < t",
															Start: ast.Position{
																Column: 39,
																Line:   83,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   83,
																},
																File:   "",
																Source: "r._time",
																Start: ast.Position{
																	Column: 39,
																	Line:   83,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 40,
																		Line:   83,
																	},
																	File:   "",
																	Source: "r",
																	Start: ast.Position{
																		Column: 39,
																		Line:   83,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   83,
																	},
																	File:   "",
																	Source: "_time",
																	Start: ast.Position{
																		Column: 41,
																		Line:   83,
																	},
																},
															},
															Name: "_time",
														},
													},
													Operator: 8,
													Right: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 50,
																	Line:   83,
																},
																File:   "",
																Source: "t",
																Start: ast.Position{
																	Column: 49,
																	Line:   83,
																},
															},
														},
														Name: "t",
													},
												},
											}},
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   83,
														},
														File:   "",
														Source: "r",
														Start: ast.Position{
															Column: 26,
															Line:   83,
														},
													},
												},
												Name: "r",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   83,
												},
												File:   "",
												Source: "r",
												Start: ast.Position{
													Column: 17,
													Line:   83,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   83,
													},
													File:   "",
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   83,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   83,
								},
								File:   "",
								Source: "map(fn: (r) => ( {r with dead: r._time < t} ))",
								Start: ast.Position{
									Column: 8,
									Line:   83,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   83,
									},
									File:   "",
									Source: "map",
									Start: ast.Position{
										Column: 8,
										Line:   83,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   81,
							},
							File:   "",
							Source: "t",
							Start: ast.Position{
								Column: 12,
								Line:   81,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   81,
								},
								File:   "",
								Source: "t",
								Start: ast.Position{
									Column: 12,
									Line:   81,
								},
							},
						},
						Name: "t",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   81,
							},
							File:   "",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 15,
								Line:   81,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   81,
								},
								File:   "",
								Source: "tables",
								Start: ast.Position{
									Column: 15,
									Line:   81,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   81,
							},
							File:   "",
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   81,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   86,
					},
					File:   "",
					Source: "levelOK = \"ok\"",
					Start: ast.Position{
						Column: 1,
						Line:   86,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   86,
						},
						File:   "",
						Source: "levelOK",
						Start: ast.Position{
							Column: 1,
							Line:   86,
						},
					},
				},
				Name: "levelOK",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   86,
						},
						File:   "",
						Source: "\"ok\"",
						Start: ast.Position{
							Column: 11,
							Line:   86,
						},
					},
				},
				Value: "ok",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   87,
					},
					File:   "",
					Source: "levelInfo = \"info\"",
					Start: ast.Position{
						Column: 1,
						Line:   87,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   87,
						},
						File:   "",
						Source: "levelInfo",
						Start: ast.Position{
							Column: 1,
							Line:   87,
						},
					},
				},
				Name: "levelInfo",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   87,
						},
						File:   "",
						Source: "\"info\"",
						Start: ast.Position{
							Column: 13,
							Line:   87,
						},
					},
				},
				Value: "info",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   88,
					},
					File:   "",
					Source: "levelWarn = \"warn\"",
					Start: ast.Position{
						Column: 1,
						Line:   88,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   88,
						},
						File:   "",
						Source: "levelWarn",
						Start: ast.Position{
							Column: 1,
							Line:   88,
						},
					},
				},
				Name: "levelWarn",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   88,
						},
						File:   "",
						Source: "\"warn\"",
						Start: ast.Position{
							Column: 13,
							Line:   88,
						},
					},
				},
				Value: "warn",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   89,
					},
					File:   "",
					Source: "levelCrit = \"crit\"",
					Start: ast.Position{
						Column: 1,
						Line:   89,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   89,
						},
						File:   "",
						Source: "levelCrit",
						Start: ast.Position{
							Column: 1,
							Line:   89,
						},
					},
				},
				Name: "levelCrit",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   89,
						},
						File:   "",
						Source: "\"crit\"",
						Start: ast.Position{
							Column: 13,
							Line:   89,
						},
					},
				},
				Value: "crit",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 25,
						Line:   90,
					},
					File:   "",
					Source: "levelUnknown = \"unknown\"",
					Start: ast.Position{
						Column: 1,
						Line:   90,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   90,
						},
						File:   "",
						Source: "levelUnknown",
						Start: ast.Position{
							Column: 1,
							Line:   90,
						},
					},
				},
				Name: "levelUnknown",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   90,
						},
						File:   "",
						Source: "\"unknown\"",
						Start: ast.Position{
							Column: 16,
							Line:   90,
						},
					},
				},
				Value: "unknown",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   125,
					},
					File:   "",
					Source: "check = (\n    tables=<-,\n    data,\n    messageFn,\n    crit=(r) => false,\n    warn=(r) => false,\n    info=(r) => false,\n    ok=(r) => true\n) =>\n    tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n        |> map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))\n        |> map(fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }))\n        |> experimental.group(mode: \"extend\", columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"])\n        |> write()",
					Start: ast.Position{
						Column: 1,
						Line:   94,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   94,
						},
						File:   "",
						Source: "check",
						Start: ast.Position{
							Column: 1,
							Line:   94,
						},
					},
				},
				Name: "check",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   125,
						},
						File:   "",
						Source: "(\n    tables=<-,\n    data,\n    messageFn,\n    crit=(r) => false,\n    warn=(r) => false,\n    info=(r) => false,\n    ok=(r) => true\n) =>\n    tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n        |> map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))\n        |> map(fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }))\n        |> experimental.group(mode: \"extend\", columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"])\n        |> write()",
						Start: ast.Position{
							Column: 9,
							Line:   94,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   103,
													},
													File:   "",
													Source: "tables",
													Start: ast.Position{
														Column: 5,
														Line:   103,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   104,
												},
												File:   "",
												Source: "tables\n        |> experimental.set(o: data.tags)",
												Start: ast.Position{
													Column: 5,
													Line:   103,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   104,
														},
														File:   "",
														Source: "o: data.tags",
														Start: ast.Position{
															Column: 29,
															Line:   104,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 41,
																Line:   104,
															},
															File:   "",
															Source: "o: data.tags",
															Start: ast.Position{
																Column: 29,
																Line:   104,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   104,
																},
																File:   "",
																Source: "o",
																Start: ast.Position{
																	Column: 29,
																	Line:   104,
																},
															},
														},
														Name: "o",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 41,
																	Line:   104,
																},
																File:   "",
																Source: "data.tags",
																Start: ast.Position{
																	Column: 32,
																	Line:   104,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   104,
																	},
																	File:   "",
																	Source: "data",
																	Start: ast.Position{
																		Column: 32,
																		Line:   104,
																	},
																},
															},
															Name: "data",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 41,
																		Line:   104,
																	},
																	File:   "",
																	Source: "tags",
																	Start: ast.Position{
																		Column: 37,
																		Line:   104,
																	},
																},
															},
															Name: "tags",
														},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   104,
													},
													File:   "",
													Source: "experimental.set(o: data.tags)",
													Start: ast.Position{
														Column: 12,
														Line:   104,
													},
												},
											},
											Callee: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   104,
														},
														File:   "",
														Source: "experimental.set",
														Start: ast.Position{
															Column: 12,
															Line:   104,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   104,
															},
															File:   "",
															Source: "experimental",
															Start: ast.Position{
																Column: 12,
																Line:   104,
															},
														},
													},
													Name: "experimental",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   104,
															},
															File:   "",
															Source: "set",
															Start: ast.Position{
																Column: 25,
																Line:   104,
															},
														},
													},
													Name: "set",
												},
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 94,
												Line:   105,
											},
											File:   "",
											Source: "tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))",
											Start: ast.Position{
												Column: 5,
												Line:   103,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 93,
														Line:   105,
													},
													File:   "",
													Source: "mode: \"extend\", columns: experimental.objectKeys(o: data.tags)",
													Start: ast.Position{
														Column: 31,
														Line:   105,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   105,
														},
														File:   "",
														Source: "mode: \"extend\"",
														Start: ast.Position{
															Column: 31,
															Line:   105,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   105,
															},
															File:   "",
															Source: "mode",
															Start: ast.Position{
																Column: 31,
																Line:   105,
															},
														},
													},
													Name: "mode",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   105,
															},
															File:   "",
															Source: "\"extend\"",
															Start: ast.Position{
																Column: 37,
																Line:   105,
															},
														},
													},
													Value: "extend",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 93,
															Line:   105,
														},
														File:   "",
														Source: "columns: experimental.objectKeys(o: data.tags)",
														Start: ast.Position{
															Column: 47,
															Line:   105,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 54,
																Line:   105,
															},
															File:   "",
															Source: "columns",
															Start: ast.Position{
																Column: 47,
																Line:   105,
															},
														},
													},
													Name: "columns",
												},
												Value: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 92,
																	Line:   105,
																},
																File:   "",
																Source: "o: data.tags",
																Start: ast.Position{
																	Column: 80,
																	Line:   105,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 92,
																		Line:   105,
																	},
																	File:   "",
																	Source: "o: data.tags",
																	Start: ast.Position{
																		Column: 80,
																		Line:   105,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 81,
																			Line:   105,
																		},
																		File:   "",
																		Source: "o",
																		Start: ast.Position{
																			Column: 80,
																			Line:   105,
																		},
																	},
																},
																Name: "o",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 92,
																			Line:   105,
																		},
																		File:   "",
																		Source: "data.tags",
																		Start: ast.Position{
																			Column: 83,
																			Line:   105,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 87,
																				Line:   105,
																			},
																			File:   "",
																			Source: "data",
																			Start: ast.Position{
																				Column: 83,
																				Line:   105,
																			},
																		},
																	},
																	Name: "data",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 92,
																				Line:   105,
																			},
																			File:   "",
																			Source: "tags",
																			Start: ast.Position{
																				Column: 88,
																				Line:   105,
																			},
																		},
																	},
																	Name: "tags",
																},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 93,
																Line:   105,
															},
															File:   "",
															Source: "experimental.objectKeys(o: data.tags)",
															Start: ast.Position{
																Column: 56,
																Line:   105,
															},
														},
													},
													Callee: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 79,
																	Line:   105,
																},
																File:   "",
																Source: "experimental.objectKeys",
																Start: ast.Position{
																	Column: 56,
																	Line:   105,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 68,
																		Line:   105,
																	},
																	File:   "",
																	Source: "experimental",
																	Start: ast.Position{
																		Column: 56,
																		Line:   105,
																	},
																},
															},
															Name: "experimental",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 79,
																		Line:   105,
																	},
																	File:   "",
																	Source: "objectKeys",
																	Start: ast.Position{
																		Column: 69,
																		Line:   105,
																	},
																},
															},
															Name: "objectKeys",
														},
													},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 94,
													Line:   105,
												},
												File:   "",
												Source: "experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))",
												Start: ast.Position{
													Column: 12,
													Line:   105,
												},
											},
										},
										Callee: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   105,
													},
													File:   "",
													Source: "experimental.group",
													Start: ast.Position{
														Column: 12,
														Line:   105,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   105,
														},
														File:   "",
														Source: "experimental",
														Start: ast.Position{
															Column: 12,
															Line:   105,
														},
													},
												},
												Name: "experimental",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   105,
														},
														File:   "",
														Source: "group",
														Start: ast.Position{
															Column: 25,
															Line:   105,
														},
													},
												},
												Name: "group",
											},
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   120,
										},
										File:   "",
										Source: "tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n        |> map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))",
										Start: ast.Position{
											Column: 5,
											Line:   103,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   120,
												},
												File:   "",
												Source: "fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        })",
												Start: ast.Position{
													Column: 16,
													Line:   106,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   120,
													},
													File:   "",
													Source: "fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        })",
													Start: ast.Position{
														Column: 16,
														Line:   106,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   106,
														},
														File:   "",
														Source: "fn",
														Start: ast.Position{
															Column: 16,
															Line:   106,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   120,
														},
														File:   "",
														Source: "(r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        })",
														Start: ast.Position{
															Column: 20,
															Line:   106,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 11,
																Line:   120,
															},
															File:   "",
															Source: "({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        })",
															Start: ast.Position{
																Column: 27,
																Line:   106,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 10,
																	Line:   120,
																},
																File:   "",
																Source: "{r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }",
																Start: ast.Position{
																	Column: 28,
																	Line:   106,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 37,
																		Line:   107,
																	},
																	File:   "",
																	Source: "_measurement: \"statuses\"",
																	Start: ast.Position{
																		Column: 13,
																		Line:   107,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   107,
																		},
																		File:   "",
																		Source: "_measurement",
																		Start: ast.Position{
																			Column: 13,
																			Line:   107,
																		},
																	},
																},
																Name: "_measurement",
															},
															Value: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 37,
																			Line:   107,
																		},
																		File:   "",
																		Source: "\"statuses\"",
																		Start: ast.Position{
																			Column: 27,
																			Line:   107,
																		},
																	},
																},
																Value: "statuses",
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 48,
																		Line:   108,
																	},
																	File:   "",
																	Source: "_source_measurement: r._measurement",
																	Start: ast.Position{
																		Column: 13,
																		Line:   108,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 32,
																			Line:   108,
																		},
																		File:   "",
																		Source: "_source_measurement",
																		Start: ast.Position{
																			Column: 13,
																			Line:   108,
																		},
																	},
																},
																Name: "_source_measurement",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 48,
																			Line:   108,
																		},
																		File:   "",
																		Source: "r._measurement",
																		Start: ast.Position{
																			Column: 34,
																			Line:   108,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 35,
																				Line:   108,
																			},
																			File:   "",
																			Source: "r",
																			Start: ast.Position{
																				Column: 34,
																				Line:   108,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 48,
																				Line:   108,
																			},
																			File:   "",
																			Source: "_measurement",
																			Start: ast.Position{
																				Column: 36,
																				Line:   108,
																			},
																		},
																	},
																	Name: "_measurement",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 30,
																		Line:   109,
																	},
																	File:   "",
																	Source: "_type: data._type",
																	Start: ast.Position{
																		Column: 13,
																		Line:   109,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   109,
																		},
																		File:   "",
																		Source: "_type",
																		Start: ast.Position{
																			Column: 13,
																			Line:   109,
																		},
																	},
																},
																Name: "_type",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 30,
																			Line:   109,
																		},
																		File:   "",
																		Source: "data._type",
																		Start: ast.Position{
																			Column: 20,
																			Line:   109,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 24,
																				Line:   109,
																			},
																			File:   "",
																			Source: "data",
																			Start: ast.Position{
																				Column: 20,
																				Line:   109,
																			},
																		},
																	},
																	Name: "data",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   109,
																			},
																			File:   "",
																			Source: "_type",
																			Start: ast.Position{
																				Column: 25,
																				Line:   109,
																			},
																		},
																	},
																	Name: "_type",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 39,
																		Line:   110,
																	},
																	File:   "",
																	Source: "_check_id:  data._check_id",
																	Start: ast.Position{
																		Column: 13,
																		Line:   110,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 22,
																			Line:   110,
																		},
																		File:   "",
																		Source: "_check_id",
																		Start: ast.Position{
																			Column: 13,
																			Line:   110,
																		},
																	},
																},
																Name: "_check_id",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 39,
																			Line:   110,
																		},
																		File:   "",
																		Source: "data._check_id",
																		Start: ast.Position{
																			Column: 25,
																			Line:   110,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 29,
																				Line:   110,
																			},
																			File:   "",
																			Source: "data",
																			Start: ast.Position{
																				Column: 25,
																				Line:   110,
																			},
																		},
																	},
																	Name: "data",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 39,
																				Line:   110,
																			},
																			File:   "",
																			Source: "_check_id",
																			Start: ast.Position{
																				Column: 30,
																				Line:   110,
																			},
																		},
																	},
																	Name: "_check_id",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   111,
																	},
																	File:   "",
																	Source: "_check_name: data._check_name",
																	Start: ast.Position{
																		Column: 13,
																		Line:   111,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 24,
																			Line:   111,
																		},
																		File:   "",
																		Source: "_check_name",
																		Start: ast.Position{
																			Column: 13,
																			Line:   111,
																		},
																	},
																},
																Name: "_check_name",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 42,
																			Line:   111,
																		},
																		File:   "",
																		Source: "data._check_name",
																		Start: ast.Position{
																			Column: 26,
																			Line:   111,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   111,
																			},
																			File:   "",
																			Source: "data",
																			Start: ast.Position{
																				Column: 26,
																				Line:   111,
																			},
																		},
																	},
																	Name: "data",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 42,
																				Line:   111,
																			},
																			File:   "",
																			Source: "_check_name",
																			Start: ast.Position{
																				Column: 31,
																				Line:   111,
																			},
																		},
																	},
																	Name: "_check_name",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 34,
																		Line:   117,
																	},
																	File:   "",
																	Source: "_level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown",
																	Start: ast.Position{
																		Column: 13,
																		Line:   112,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 19,
																			Line:   112,
																		},
																		File:   "",
																		Source: "_level",
																		Start: ast.Position{
																			Column: 13,
																			Line:   112,
																		},
																	},
																},
																Name: "_level",
															},
															Value: &ast.ConditionalExpression{
																Alternate: &ast.ConditionalExpression{
																	Alternate: &ast.ConditionalExpression{
																		Alternate: &ast.ConditionalExpression{
																			Alternate: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 34,
																							Line:   117,
																						},
																						File:   "",
																						Source: "levelUnknown",
																						Start: ast.Position{
																							Column: 22,
																							Line:   117,
																						},
																					},
																				},
																				Name: "levelUnknown",
																			},
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 34,
																						Line:   117,
																					},
																					File:   "",
																					Source: "if ok(r: r) then levelOK\n                else levelUnknown",
																					Start: ast.Position{
																						Column: 22,
																						Line:   116,
																					},
																				},
																			},
																			Consequent: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 46,
																							Line:   116,
																						},
																						File:   "",
																						Source: "levelOK",
																						Start: ast.Position{
																							Column: 39,
																							Line:   116,
																						},
																					},
																				},
																				Name: "levelOK",
																			},
																			Test: &ast.CallExpression{
																				Arguments: []ast.Expression{&ast.ObjectExpression{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 32,
																								Line:   116,
																							},
																							File:   "",
																							Source: "r: r",
																							Start: ast.Position{
																								Column: 28,
																								Line:   116,
																							},
																						},
																					},
																					Properties: []*ast.Property{&ast.Property{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 32,
																									Line:   116,
																								},
																								File:   "",
																								Source: "r: r",
																								Start: ast.Position{
																									Column: 28,
																									Line:   116,
																								},
																							},
																						},
																						Key: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 29,
																										Line:   116,
																									},
																									File:   "",
																									Source: "r",
																									Start: ast.Position{
																										Column: 28,
																										Line:   116,
																									},
																								},
																							},
																							Name: "r",
																						},
																						Value: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 32,
																										Line:   116,
																									},
																									File:   "",
																									Source: "r",
																									Start: ast.Position{
																										Column: 31,
																										Line:   116,
																									},
																								},
																							},
																							Name: "r",
																						},
																					}},
																					With: nil,
																				}},
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 33,
																							Line:   116,
																						},
																						File:   "",
																						Source: "ok(r: r)",
																						Start: ast.Position{
																							Column: 25,
																							Line:   116,
																						},
																					},
																				},
																				Callee: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 27,
																								Line:   116,
																							},
																							File:   "",
																							Source: "ok",
																							Start: ast.Position{
																								Column: 25,
																								Line:   116,
																							},
																						},
																					},
																					Name: "ok",
																				},
																			},
																		},
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 34,
																					Line:   117,
																				},
																				File:   "",
																				Source: "if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown",
																				Start: ast.Position{
																					Column: 22,
																					Line:   115,
																				},
																			},
																		},
																		Consequent: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 50,
																						Line:   115,
																					},
																					File:   "",
																					Source: "levelInfo",
																					Start: ast.Position{
																						Column: 41,
																						Line:   115,
																					},
																				},
																			},
																			Name: "levelInfo",
																		},
																		Test: &ast.CallExpression{
																			Arguments: []ast.Expression{&ast.ObjectExpression{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 34,
																							Line:   115,
																						},
																						File:   "",
																						Source: "r: r",
																						Start: ast.Position{
																							Column: 30,
																							Line:   115,
																						},
																					},
																				},
																				Properties: []*ast.Property{&ast.Property{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 34,
																								Line:   115,
																							},
																							File:   "",
																							Source: "r: r",
																							Start: ast.Position{
																								Column: 30,
																								Line:   115,
																							},
																						},
																					},
																					Key: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 31,
																									Line:   115,
																								},
																								File:   "",
																								Source: "r",
																								Start: ast.Position{
																									Column: 30,
																									Line:   115,
																								},
																							},
																						},
																						Name: "r",
																					},
																					Value: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 34,
																									Line:   115,
																								},
																								File:   "",
																								Source: "r",
																								Start: ast.Position{
																									Column: 33,
																									Line:   115,
																								},
																							},
																						},
																						Name: "r",
																					},
																				}},
																				With: nil,
																			}},
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 35,
																						Line:   115,
																					},
																					File:   "",
																					Source: "info(r: r)",
																					Start: ast.Position{
																						Column: 25,
																						Line:   115,
																					},
																				},
																			},
																			Callee: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 29,
																							Line:   115,
																						},
																						File:   "",
																						Source: "info",
																						Start: ast.Position{
																							Column: 25,
																							Line:   115,
																						},
																					},
																				},
																				Name: "info",
																			},
																		},
																	},
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 34,
																				Line:   117,
																			},
																			File:   "",
																			Source: "if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown",
																			Start: ast.Position{
																				Column: 22,
																				Line:   114,
																			},
																		},
																	},
																	Consequent: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 50,
																					Line:   114,
																				},
																				File:   "",
																				Source: "levelWarn",
																				Start: ast.Position{
																					Column: 41,
																					Line:   114,
																				},
																			},
																		},
																		Name: "levelWarn",
																	},
																	Test: &ast.CallExpression{
																		Arguments: []ast.Expression{&ast.ObjectExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 34,
																						Line:   114,
																					},
																					File:   "",
																					Source: "r: r",
																					Start: ast.Position{
																						Column: 30,
																						Line:   114,
																					},
																				},
																			},
																			Properties: []*ast.Property{&ast.Property{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 34,
																							Line:   114,
																						},
																						File:   "",
																						Source: "r: r",
																						Start: ast.Position{
																							Column: 30,
																							Line:   114,
																						},
																					},
																				},
																				Key: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 31,
																								Line:   114,
																							},
																							File:   "",
																							Source: "r",
																							Start: ast.Position{
																								Column: 30,
																								Line:   114,
																							},
																						},
																					},
																					Name: "r",
																				},
																				Value: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 34,
																								Line:   114,
																							},
																							File:   "",
																							Source: "r",
																							Start: ast.Position{
																								Column: 33,
																								Line:   114,
																							},
																						},
																					},
																					Name: "r",
																				},
																			}},
																			With: nil,
																		}},
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 35,
																					Line:   114,
																				},
																				File:   "",
																				Source: "warn(r: r)",
																				Start: ast.Position{
																					Column: 25,
																					Line:   114,
																				},
																			},
																		},
																		Callee: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 29,
																						Line:   114,
																					},
																					File:   "",
																					Source: "warn",
																					Start: ast.Position{
																						Column: 25,
																						Line:   114,
																					},
																				},
																			},
																			Name: "warn",
																		},
																	},
																},
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 34,
																			Line:   117,
																		},
																		File:   "",
																		Source: "if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown",
																		Start: ast.Position{
																			Column: 17,
																			Line:   113,
																		},
																	},
																},
																Consequent: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 45,
																				Line:   113,
																			},
																			File:   "",
																			Source: "levelCrit",
																			Start: ast.Position{
																				Column: 36,
																				Line:   113,
																			},
																		},
																	},
																	Name: "levelCrit",
																},
																Test: &ast.CallExpression{
																	Arguments: []ast.Expression{&ast.ObjectExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 29,
																					Line:   113,
																				},
																				File:   "",
																				Source: "r: r",
																				Start: ast.Position{
																					Column: 25,
																					Line:   113,
																				},
																			},
																		},
																		Properties: []*ast.Property{&ast.Property{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 29,
																						Line:   113,
																					},
																					File:   "",
																					Source: "r: r",
																					Start: ast.Position{
																						Column: 25,
																						Line:   113,
																					},
																				},
																			},
																			Key: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 26,
																							Line:   113,
																						},
																						File:   "",
																						Source: "r",
																						Start: ast.Position{
																							Column: 25,
																							Line:   113,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Value: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 29,
																							Line:   113,
																						},
																						File:   "",
																						Source: "r",
																						Start: ast.Position{
																							Column: 28,
																							Line:   113,
																						},
																					},
																				},
																				Name: "r",
																			},
																		}},
																		With: nil,
																	}},
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   113,
																			},
																			File:   "",
																			Source: "crit(r: r)",
																			Start: ast.Position{
																				Column: 20,
																				Line:   113,
																			},
																		},
																	},
																	Callee: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 24,
																					Line:   113,
																				},
																				File:   "",
																				Source: "crit",
																				Start: ast.Position{
																					Column: 20,
																					Line:   113,
																				},
																			},
																		},
																		Name: "crit",
																	},
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   118,
																	},
																	File:   "",
																	Source: "_source_timestamp: int(v:r._time)",
																	Start: ast.Position{
																		Column: 13,
																		Line:   118,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 30,
																			Line:   118,
																		},
																		File:   "",
																		Source: "_source_timestamp",
																		Start: ast.Position{
																			Column: 13,
																			Line:   118,
																		},
																	},
																},
																Name: "_source_timestamp",
															},
															Value: &ast.CallExpression{
																Arguments: []ast.Expression{&ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 45,
																				Line:   118,
																			},
																			File:   "",
																			Source: "v:r._time",
																			Start: ast.Position{
																				Column: 36,
																				Line:   118,
																			},
																		},
																	},
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 45,
																					Line:   118,
																				},
																				File:   "",
																				Source: "v:r._time",
																				Start: ast.Position{
																					Column: 36,
																					Line:   118,
																				},
																			},
																		},
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 37,
																						Line:   118,
																					},
																					File:   "",
																					Source: "v",
																					Start: ast.Position{
																						Column: 36,
																						Line:   118,
																					},
																				},
																			},
																			Name: "v",
																		},
																		Value: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 45,
																						Line:   118,
																					},
																					File:   "",
																					Source: "r._time",
																					Start: ast.Position{
																						Column: 38,
																						Line:   118,
																					},
																				},
																			},
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 39,
																							Line:   118,
																						},
																						File:   "",
																						Source: "r",
																						Start: ast.Position{
																							Column: 38,
																							Line:   118,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 45,
																							Line:   118,
																						},
																						File:   "",
																						Source: "_time",
																						Start: ast.Position{
																							Column: 40,
																							Line:   118,
																						},
																					},
																				},
																				Name: "_time",
																			},
																		},
																	}},
																	With: nil,
																}},
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 46,
																			Line:   118,
																		},
																		File:   "",
																		Source: "int(v:r._time)",
																		Start: ast.Position{
																			Column: 32,
																			Line:   118,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 35,
																				Line:   118,
																			},
																			File:   "",
																			Source: "int",
																			Start: ast.Position{
																				Column: 32,
																				Line:   118,
																			},
																		},
																	},
																	Name: "int",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 25,
																		Line:   119,
																	},
																	File:   "",
																	Source: "_time: now()",
																	Start: ast.Position{
																		Column: 13,
																		Line:   119,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   119,
																		},
																		File:   "",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 13,
																			Line:   119,
																		},
																	},
																},
																Name: "_time",
															},
															Value: &ast.CallExpression{
																Arguments: nil,
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   119,
																		},
																		File:   "",
																		Source: "now()",
																		Start: ast.Position{
																			Column: 20,
																			Line:   119,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 23,
																				Line:   119,
																			},
																			File:   "",
																			Source: "now",
																			Start: ast.Position{
																				Column: 20,
																				Line:   119,
																			},
																		},
																	},
																	Name: "now",
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 30,
																		Line:   106,
																	},
																	File:   "",
																	Source: "r",
																	Start: ast.Position{
																		Column: 29,
																		Line:   106,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 22,
																Line:   106,
															},
															File:   "",
															Source: "r",
															Start: ast.Position{
																Column: 21,
																Line:   106,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   106,
																},
																File:   "",
																Source: "r",
																Start: ast.Position{
																	Column: 21,
																	Line:   106,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   120,
											},
											File:   "",
											Source: "map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))",
											Start: ast.Position{
												Column: 12,
												Line:   106,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   106,
												},
												File:   "",
												Source: "map",
												Start: ast.Position{
													Column: 12,
													Line:   106,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   123,
									},
									File:   "",
									Source: "tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n        |> map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))\n        |> map(fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }))",
									Start: ast.Position{
										Column: 5,
										Line:   103,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   123,
											},
											File:   "",
											Source: "fn: (r) => ({r with\n            _message: messageFn(r: r),\n        })",
											Start: ast.Position{
												Column: 16,
												Line:   121,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   123,
												},
												File:   "",
												Source: "fn: (r) => ({r with\n            _message: messageFn(r: r),\n        })",
												Start: ast.Position{
													Column: 16,
													Line:   121,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   121,
													},
													File:   "",
													Source: "fn",
													Start: ast.Position{
														Column: 16,
														Line:   121,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   123,
													},
													File:   "",
													Source: "(r) => ({r with\n            _message: messageFn(r: r),\n        })",
													Start: ast.Position{
														Column: 20,
														Line:   121,
													},
												},
											},
											Body: &ast.ParenExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   123,
														},
														File:   "",
														Source: "({r with\n            _message: messageFn(r: r),\n        })",
														Start: ast.Position{
															Column: 27,
															Line:   121,
														},
													},
												},
												Expression: &ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 10,
																Line:   123,
															},
															File:   "",
															Source: "{r with\n            _message: messageFn(r: r),\n        }",
															Start: ast.Position{
																Column: 28,
																Line:   121,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 38,
																	Line:   122,
																},
																File:   "",
																Source: "_message: messageFn(r: r)",
																Start: ast.Position{
																	Column: 13,
																	Line:   122,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   122,
																	},
																	File:   "",
																	Source: "_message",
																	Start: ast.Position{
																		Column: 13,
																		Line:   122,
																	},
																},
															},
															Name: "_message",
														},
														Value: &ast.CallExpression{
															Arguments: []ast.Expression{&ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 37,
																			Line:   122,
																		},
																		File:   "",
																		Source: "r: r",
																		Start: ast.Position{
																			Column: 33,
																			Line:   122,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 37,
																				Line:   122,
																			},
																			File:   "",
																			Source: "r: r",
																			Start: ast.Position{
																				Column: 33,
																				Line:   122,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 34,
																					Line:   122,
																				},
																				File:   "",
																				Source: "r",
																				Start: ast.Position{
																					Column: 33,
																					Line:   122,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Value: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 37,
																					Line:   122,
																				},
																				File:   "",
																				Source: "r",
																				Start: ast.Position{
																					Column: 36,
																					Line:   122,
																				},
																			},
																		},
																		Name: "r",
																	},
																}},
																With: nil,
															}},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 38,
																		Line:   122,
																	},
																	File:   "",
																	Source: "messageFn(r: r)",
																	Start: ast.Position{
																		Column: 23,
																		Line:   122,
																	},
																},
															},
															Callee: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 32,
																			Line:   122,
																		},
																		File:   "",
																		Source: "messageFn",
																		Start: ast.Position{
																			Column: 23,
																			Line:   122,
																		},
																	},
																},
																Name: "messageFn",
															},
														},
													}},
													With: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   121,
																},
																File:   "",
																Source: "r",
																Start: ast.Position{
																	Column: 29,
																	Line:   121,
																},
															},
														},
														Name: "r",
													},
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   121,
														},
														File:   "",
														Source: "r",
														Start: ast.Position{
															Column: 21,
															Line:   121,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 22,
																Line:   121,
															},
															File:   "",
															Source: "r",
															Start: ast.Position{
																Column: 21,
																Line:   121,
															},
														},
													},
													Name: "r",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   123,
										},
										File:   "",
										Source: "map(fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }))",
										Start: ast.Position{
											Column: 12,
											Line:   121,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   121,
											},
											File:   "",
											Source: "map",
											Start: ast.Position{
												Column: 12,
												Line:   121,
											},
										},
									},
									Name: "map",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 127,
									Line:   124,
								},
								File:   "",
								Source: "tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n        |> map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))\n        |> map(fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }))\n        |> experimental.group(mode: \"extend\", columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"])",
								Start: ast.Position{
									Column: 5,
									Line:   103,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 126,
											Line:   124,
										},
										File:   "",
										Source: "mode: \"extend\", columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"]",
										Start: ast.Position{
											Column: 31,
											Line:   124,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   124,
											},
											File:   "",
											Source: "mode: \"extend\"",
											Start: ast.Position{
												Column: 31,
												Line:   124,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   124,
												},
												File:   "",
												Source: "mode",
												Start: ast.Position{
													Column: 31,
													Line:   124,
												},
											},
										},
										Name: "mode",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   124,
												},
												File:   "",
												Source: "\"extend\"",
												Start: ast.Position{
													Column: 37,
													Line:   124,
												},
											},
										},
										Value: "extend",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 126,
												Line:   124,
											},
											File:   "",
											Source: "columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"]",
											Start: ast.Position{
												Column: 47,
												Line:   124,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   124,
												},
												File:   "",
												Source: "columns",
												Start: ast.Position{
													Column: 47,
													Line:   124,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 126,
													Line:   124,
												},
												File:   "",
												Source: "[\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"]",
												Start: ast.Position{
													Column: 56,
													Line:   124,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 78,
														Line:   124,
													},
													File:   "",
													Source: "\"_source_measurement\"",
													Start: ast.Position{
														Column: 57,
														Line:   124,
													},
												},
											},
											Value: "_source_measurement",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 87,
														Line:   124,
													},
													File:   "",
													Source: "\"_type\"",
													Start: ast.Position{
														Column: 80,
														Line:   124,
													},
												},
											},
											Value: "_type",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 100,
														Line:   124,
													},
													File:   "",
													Source: "\"_check_id\"",
													Start: ast.Position{
														Column: 89,
														Line:   124,
													},
												},
											},
											Value: "_check_id",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 115,
														Line:   124,
													},
													File:   "",
													Source: "\"_check_name\"",
													Start: ast.Position{
														Column: 102,
														Line:   124,
													},
												},
											},
											Value: "_check_name",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 125,
														Line:   124,
													},
													File:   "",
													Source: "\"_level\"",
													Start: ast.Position{
														Column: 117,
														Line:   124,
													},
												},
											},
											Value: "_level",
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 127,
										Line:   124,
									},
									File:   "",
									Source: "experimental.group(mode: \"extend\", columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"])",
									Start: ast.Position{
										Column: 12,
										Line:   124,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   124,
										},
										File:   "",
										Source: "experimental.group",
										Start: ast.Position{
											Column: 12,
											Line:   124,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   124,
											},
											File:   "",
											Source: "experimental",
											Start: ast.Position{
												Column: 12,
												Line:   124,
											},
										},
									},
									Name: "experimental",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   124,
											},
											File:   "",
											Source: "group",
											Start: ast.Position{
												Column: 25,
												Line:   124,
											},
										},
									},
									Name: "group",
								},
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   125,
							},
							File:   "",
							Source: "tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n        |> map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))\n        |> map(fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }))\n        |> experimental.group(mode: \"extend\", columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"])\n        |> write()",
							Start: ast.Position{
								Column: 5,
								Line:   103,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   125,
								},
								File:   "",
								Source: "write()",
								Start: ast.Position{
									Column: 12,
									Line:   125,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   125,
									},
									File:   "",
									Source: "write",
									Start: ast.Position{
										Column: 12,
										Line:   125,
									},
								},
							},
							Name: "write",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   95,
							},
							File:   "",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 5,
								Line:   95,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   95,
								},
								File:   "",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   95,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   95,
							},
							File:   "",
							Source: "<-",
							Start: ast.Position{
								Column: 12,
								Line:   95,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 9,
								Line:   96,
							},
							File:   "",
							Source: "data",
							Start: ast.Position{
								Column: 5,
								Line:   96,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   96,
								},
								File:   "",
								Source: "data",
								Start: ast.Position{
									Column: 5,
									Line:   96,
								},
							},
						},
						Name: "data",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   97,
							},
							File:   "",
							Source: "messageFn",
							Start: ast.Position{
								Column: 5,
								Line:   97,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   97,
								},
								File:   "",
								Source: "messageFn",
								Start: ast.Position{
									Column: 5,
									Line:   97,
								},
							},
						},
						Name: "messageFn",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   98,
							},
							File:   "",
							Source: "crit=(r) => false",
							Start: ast.Position{
								Column: 5,
								Line:   98,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   98,
								},
								File:   "",
								Source: "crit",
								Start: ast.Position{
									Column: 5,
									Line:   98,
								},
							},
						},
						Name: "crit",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   98,
								},
								File:   "",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 10,
									Line:   98,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   98,
									},
									File:   "",
									Source: "false",
									Start: ast.Position{
										Column: 17,
										Line:   98,
									},
								},
							},
							Name: "false",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   98,
									},
									File:   "",
									Source: "r",
									Start: ast.Position{
										Column: 11,
										Line:   98,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   98,
										},
										File:   "",
										Source: "r",
										Start: ast.Position{
											Column: 11,
											Line:   98,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   99,
							},
							File:   "",
							Source: "warn=(r) => false",
							Start: ast.Position{
								Column: 5,
								Line:   99,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   99,
								},
								File:   "",
								Source: "warn",
								Start: ast.Position{
									Column: 5,
									Line:   99,
								},
							},
						},
						Name: "warn",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   99,
								},
								File:   "",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 10,
									Line:   99,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   99,
									},
									File:   "",
									Source: "false",
									Start: ast.Position{
										Column: 17,
										Line:   99,
									},
								},
							},
							Name: "false",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   99,
									},
									File:   "",
									Source: "r",
									Start: ast.Position{
										Column: 11,
										Line:   99,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   99,
										},
										File:   "",
										Source: "r",
										Start: ast.Position{
											Column: 11,
											Line:   99,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   100,
							},
							File:   "",
							Source: "info=(r) => false",
							Start: ast.Position{
								Column: 5,
								Line:   100,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   100,
								},
								File:   "",
								Source: "info",
								Start: ast.Position{
									Column: 5,
									Line:   100,
								},
							},
						},
						Name: "info",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   100,
								},
								File:   "",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 10,
									Line:   100,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   100,
									},
									File:   "",
									Source: "false",
									Start: ast.Position{
										Column: 17,
										Line:   100,
									},
								},
							},
							Name: "false",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   100,
									},
									File:   "",
									Source: "r",
									Start: ast.Position{
										Column: 11,
										Line:   100,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   100,
										},
										File:   "",
										Source: "r",
										Start: ast.Position{
											Column: 11,
											Line:   100,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   101,
							},
							File:   "",
							Source: "ok=(r) => true",
							Start: ast.Position{
								Column: 5,
								Line:   101,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 7,
									Line:   101,
								},
								File:   "",
								Source: "ok",
								Start: ast.Position{
									Column: 5,
									Line:   101,
								},
							},
						},
						Name: "ok",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   101,
								},
								File:   "",
								Source: "(r) => true",
								Start: ast.Position{
									Column: 8,
									Line:   101,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   101,
									},
									File:   "",
									Source: "true",
									Start: ast.Position{
										Column: 15,
										Line:   101,
									},
								},
							},
							Name: "true",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   101,
									},
									File:   "",
									Source: "r",
									Start: ast.Position{
										Column: 9,
										Line:   101,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   101,
										},
										File:   "",
										Source: "r",
										Start: ast.Position{
											Column: 9,
											Line:   101,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   3,
					},
					File:   "",
					Source: "import \"experimental\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   3,
						},
						File:   "",
						Source: "\"experimental\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "experimental",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 32,
						Line:   4,
					},
					File:   "",
					Source: "import \"influxdata/influxdb/v1\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 32,
							Line:   4,
						},
						File:   "",
						Source: "\"influxdata/influxdb/v1\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "influxdata/influxdb/v1",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   5,
					},
					File:   "",
					Source: "import \"influxdata/influxdb\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   5,
						},
						File:   "",
						Source: "\"influxdata/influxdb\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "influxdata/influxdb",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "monitor.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   1,
					},
					File:   "",
					Source: "package monitor",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   1,
						},
						File:   "",
						Source: "monitor",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "monitor",
			},
		},
	}},
	Package: "monitor",
	Path:    "influxdata/influxdb/monitor",
}
