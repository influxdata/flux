// DO NOT EDIT: This file is autogenerated via the builtin command.

package monitor

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 15,
					Line:   181,
				},
				File:   "monitor.flux",
				Source: "package monitor\n\n\nimport \"experimental\"\nimport \"influxdata/influxdb/v1\"\nimport \"influxdata/influxdb\"\n\nbucket = \"_monitoring\"\n\n// Write persists the check statuses\noption write = (tables=<-) => tables |> experimental.to(bucket: bucket)\n\n// Log records notification events\noption log = (tables=<-) => tables |> experimental.to(bucket: bucket)\n\n// From retrieves the check statuses that have been stored.\nfrom = (start, stop=now(), fn=(r) => true) => influxdb.from(bucket: bucket)\n    |> range(start: start, stop: stop)\n    |> filter(fn: (r) => r._measurement == \"statuses\")\n    |> filter(fn: fn)\n    |> v1.fieldsAsCols()\n\n// levels describing the result of a check\nlevelOK = \"ok\"\nlevelInfo = \"info\"\nlevelWarn = \"warn\"\nlevelCrit = \"crit\"\nlevelUnknown = \"unknown\"\n_stateChanges = (fromLevel=\"any\", toLevel=\"any\", tables=<-) => {\n    toLevelFilter = if toLevel == \"any\" then\n        (r) => r._level != fromLevel and exists r._level\n    else\n        (r) => r._level == toLevel\n    fromLevelFilter = if fromLevel == \"any\" then\n        (r) => r._level != toLevel and exists r._level\n    else\n        (r) => r._level == fromLevel\n\n    return tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}\n\n// stateChangesOnly takes a stream of tables that contains a _level column and\n// returns a stream of tables where each record in a table represents a state change\n// of the _level column.\n// Statuses are sorted by source timestamp, because default sort order of statuses may differ\n// (`_time` column holds the time when check was executed) and that could result in detecting\n// status changes at the wrong time or even false changes.\nstateChangesOnly = (tables=<-) => {\n    return tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value != 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}\n\n// StateChanges takes a stream of tables, fromLevel, and toLevel and returns\n// a stream of tables where status has gone from fromLevel to toLevel.\n//\n// StateChanges only operates on data with data where r._level exists.\nstateChanges = (fromLevel=\"any\", toLevel=\"any\", tables=<-) => {\n    return if fromLevel == \"any\" and toLevel == \"any\" then\n        tables |> stateChangesOnly()\n    else\n        tables |> _stateChanges(fromLevel: fromLevel, toLevel: toLevel)\n}\n\n// Notify will call the endpoint and log the results.\nnotify = (tables=<-, endpoint, data) => tables\n    |> experimental.set(o: data)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n    |> map(\n        fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )\n    |> endpoint()\n    |> experimental.group(mode: \"extend\", columns: [\"_sent\"])\n    |> log()\n\n// Logs retrieves notification events that have been logged.\nlogs = (start, stop=now(), fn) => influxdb.from(bucket: bucket)\n    |> range(start: start, stop: stop)\n    |> filter(fn: (r) => r._measurement == \"notifications\")\n    |> filter(fn: fn)\n    |> v1.fieldsAsCols()\n\n// Deadman takes in a stream of tables and reports which tables\n// were observed strictly before t and which were observed after.\n//\ndeadman = (t, tables=<-) => tables\n    |> max(column: \"_time\")\n    |> map(fn: (r) => ({r with dead: r._time < t}))\n\n// Check performs a check against its input using the given ok, info, warn and crit functions\n// and writes the result to a system bucket.\ncheck = (\n        tables=<-,\n        data,\n        messageFn,\n        crit=(r) => false,\n        warn=(r) => false,\n        info=(r) => false,\n        ok=(r) => true,\n) => tables\n    |> experimental.set(o: data.tags)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n    |> map(\n        fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id: data._check_id,\n            _check_name: data._check_name,\n            _level: if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown,\n            _source_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )\n    |> map(\n        fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }),\n    )\n    |> experimental.group(\n        mode: \"extend\",\n        columns: [\n            \"_source_measurement\",\n            \"_type\",\n            \"_check_id\",\n            \"_check_name\",\n            \"_level\",\n        ],\n    )\n    |> write()",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 23,
						Line:   8,
					},
					File:   "monitor.flux",
					Source: "bucket = \"_monitoring\"",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   8,
						},
						File:   "monitor.flux",
						Source: "bucket",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Name: "bucket",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 23,
							Line:   8,
						},
						File:   "monitor.flux",
						Source: "\"_monitoring\"",
						Start: ast.Position{
							Column: 10,
							Line:   8,
						},
					},
				},
				Value: "_monitoring",
			},
		}, &ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 72,
							Line:   11,
						},
						File:   "monitor.flux",
						Source: "write = (tables=<-) => tables |> experimental.to(bucket: bucket)",
						Start: ast.Position{
							Column: 8,
							Line:   11,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   11,
							},
							File:   "monitor.flux",
							Source: "write",
							Start: ast.Position{
								Column: 8,
								Line:   11,
							},
						},
					},
					Name: "write",
				},
				Init: &ast.FunctionExpression{
					Arrow: nil,
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   11,
							},
							File:   "monitor.flux",
							Source: "(tables=<-) => tables |> experimental.to(bucket: bucket)",
							Start: ast.Position{
								Column: 16,
								Line:   11,
							},
						},
					},
					Body: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   11,
									},
									File:   "monitor.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 31,
										Line:   11,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   11,
								},
								File:   "monitor.flux",
								Source: "tables |> experimental.to(bucket: bucket)",
								Start: ast.Position{
									Column: 31,
									Line:   11,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 71,
											Line:   11,
										},
										File:   "monitor.flux",
										Source: "bucket: bucket",
										Start: ast.Position{
											Column: 57,
											Line:   11,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 71,
												Line:   11,
											},
											File:   "monitor.flux",
											Source: "bucket: bucket",
											Start: ast.Position{
												Column: 57,
												Line:   11,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 63,
													Line:   11,
												},
												File:   "monitor.flux",
												Source: "bucket",
												Start: ast.Position{
													Column: 57,
													Line:   11,
												},
											},
										},
										Name: "bucket",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 71,
													Line:   11,
												},
												File:   "monitor.flux",
												Source: "bucket",
												Start: ast.Position{
													Column: 65,
													Line:   11,
												},
											},
										},
										Name: "bucket",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   11,
									},
									File:   "monitor.flux",
									Source: "experimental.to(bucket: bucket)",
									Start: ast.Position{
										Column: 41,
										Line:   11,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   11,
										},
										File:   "monitor.flux",
										Source: "experimental.to",
										Start: ast.Position{
											Column: 41,
											Line:   11,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   11,
											},
											File:   "monitor.flux",
											Source: "experimental",
											Start: ast.Position{
												Column: 41,
												Line:   11,
											},
										},
									},
									Name: "experimental",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 56,
												Line:   11,
											},
											File:   "monitor.flux",
											Source: "to",
											Start: ast.Position{
												Column: 54,
												Line:   11,
											},
										},
									},
									Name: "to",
								},
								Rbrack: nil,
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					Lparen: nil,
					Params: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   11,
								},
								File:   "monitor.flux",
								Source: "tables=<-",
								Start: ast.Position{
									Column: 17,
									Line:   11,
								},
							},
						},
						Comma: nil,
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   11,
									},
									File:   "monitor.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 17,
										Line:   11,
									},
								},
							},
							Name: "tables",
						},
						Separator: nil,
						Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   11,
								},
								File:   "monitor.flux",
								Source: "<-",
								Start: ast.Position{
									Column: 24,
									Line:   11,
								},
							},
						}},
					}},
					Rparan: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Write persists the check statuses\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 72,
						Line:   11,
					},
					File:   "monitor.flux",
					Source: "option write = (tables=<-) => tables |> experimental.to(bucket: bucket)",
					Start: ast.Position{
						Column: 1,
						Line:   11,
					},
				},
			},
		}, &ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 70,
							Line:   14,
						},
						File:   "monitor.flux",
						Source: "log = (tables=<-) => tables |> experimental.to(bucket: bucket)",
						Start: ast.Position{
							Column: 8,
							Line:   14,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   14,
							},
							File:   "monitor.flux",
							Source: "log",
							Start: ast.Position{
								Column: 8,
								Line:   14,
							},
						},
					},
					Name: "log",
				},
				Init: &ast.FunctionExpression{
					Arrow: nil,
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 70,
								Line:   14,
							},
							File:   "monitor.flux",
							Source: "(tables=<-) => tables |> experimental.to(bucket: bucket)",
							Start: ast.Position{
								Column: 14,
								Line:   14,
							},
						},
					},
					Body: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   14,
									},
									File:   "monitor.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 29,
										Line:   14,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   14,
								},
								File:   "monitor.flux",
								Source: "tables |> experimental.to(bucket: bucket)",
								Start: ast.Position{
									Column: 29,
									Line:   14,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   14,
										},
										File:   "monitor.flux",
										Source: "bucket: bucket",
										Start: ast.Position{
											Column: 55,
											Line:   14,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   14,
											},
											File:   "monitor.flux",
											Source: "bucket: bucket",
											Start: ast.Position{
												Column: 55,
												Line:   14,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 61,
													Line:   14,
												},
												File:   "monitor.flux",
												Source: "bucket",
												Start: ast.Position{
													Column: 55,
													Line:   14,
												},
											},
										},
										Name: "bucket",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   14,
												},
												File:   "monitor.flux",
												Source: "bucket",
												Start: ast.Position{
													Column: 63,
													Line:   14,
												},
											},
										},
										Name: "bucket",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   14,
									},
									File:   "monitor.flux",
									Source: "experimental.to(bucket: bucket)",
									Start: ast.Position{
										Column: 39,
										Line:   14,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   14,
										},
										File:   "monitor.flux",
										Source: "experimental.to",
										Start: ast.Position{
											Column: 39,
											Line:   14,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   14,
											},
											File:   "monitor.flux",
											Source: "experimental",
											Start: ast.Position{
												Column: 39,
												Line:   14,
											},
										},
									},
									Name: "experimental",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   14,
											},
											File:   "monitor.flux",
											Source: "to",
											Start: ast.Position{
												Column: 52,
												Line:   14,
											},
										},
									},
									Name: "to",
								},
								Rbrack: nil,
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					Lparen: nil,
					Params: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   14,
								},
								File:   "monitor.flux",
								Source: "tables=<-",
								Start: ast.Position{
									Column: 15,
									Line:   14,
								},
							},
						},
						Comma: nil,
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   14,
									},
									File:   "monitor.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 15,
										Line:   14,
									},
								},
							},
							Name: "tables",
						},
						Separator: nil,
						Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   14,
								},
								File:   "monitor.flux",
								Source: "<-",
								Start: ast.Position{
									Column: 22,
									Line:   14,
								},
							},
						}},
					}},
					Rparan: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Log records notification events\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 70,
						Line:   14,
					},
					File:   "monitor.flux",
					Source: "option log = (tables=<-) => tables |> experimental.to(bucket: bucket)",
					Start: ast.Position{
						Column: 1,
						Line:   14,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 25,
						Line:   21,
					},
					File:   "monitor.flux",
					Source: "from = (start, stop=now(), fn=(r) => true) => influxdb.from(bucket: bucket)\n    |> range(start: start, stop: stop)\n    |> filter(fn: (r) => r._measurement == \"statuses\")\n    |> filter(fn: fn)\n    |> v1.fieldsAsCols()",
					Start: ast.Position{
						Column: 1,
						Line:   17,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// From retrieves the check statuses that have been stored.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   17,
						},
						File:   "monitor.flux",
						Source: "from",
						Start: ast.Position{
							Column: 1,
							Line:   17,
						},
					},
				},
				Name: "from",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   21,
						},
						File:   "monitor.flux",
						Source: "(start, stop=now(), fn=(r) => true) => influxdb.from(bucket: bucket)\n    |> range(start: start, stop: stop)\n    |> filter(fn: (r) => r._measurement == \"statuses\")\n    |> filter(fn: fn)\n    |> v1.fieldsAsCols()",
						Start: ast.Position{
							Column: 8,
							Line:   17,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 75,
													Line:   17,
												},
												File:   "monitor.flux",
												Source: "bucket: bucket",
												Start: ast.Position{
													Column: 61,
													Line:   17,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 75,
														Line:   17,
													},
													File:   "monitor.flux",
													Source: "bucket: bucket",
													Start: ast.Position{
														Column: 61,
														Line:   17,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 67,
															Line:   17,
														},
														File:   "monitor.flux",
														Source: "bucket",
														Start: ast.Position{
															Column: 61,
															Line:   17,
														},
													},
												},
												Name: "bucket",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 75,
															Line:   17,
														},
														File:   "monitor.flux",
														Source: "bucket",
														Start: ast.Position{
															Column: 69,
															Line:   17,
														},
													},
												},
												Name: "bucket",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 76,
												Line:   17,
											},
											File:   "monitor.flux",
											Source: "influxdb.from(bucket: bucket)",
											Start: ast.Position{
												Column: 47,
												Line:   17,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 60,
													Line:   17,
												},
												File:   "monitor.flux",
												Source: "influxdb.from",
												Start: ast.Position{
													Column: 47,
													Line:   17,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 55,
														Line:   17,
													},
													File:   "monitor.flux",
													Source: "influxdb",
													Start: ast.Position{
														Column: 47,
														Line:   17,
													},
												},
											},
											Name: "influxdb",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 60,
														Line:   17,
													},
													File:   "monitor.flux",
													Source: "from",
													Start: ast.Position{
														Column: 56,
														Line:   17,
													},
												},
											},
											Name: "from",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   18,
										},
										File:   "monitor.flux",
										Source: "influxdb.from(bucket: bucket)\n    |> range(start: start, stop: stop)",
										Start: ast.Position{
											Column: 47,
											Line:   17,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   18,
												},
												File:   "monitor.flux",
												Source: "start: start, stop: stop",
												Start: ast.Position{
													Column: 14,
													Line:   18,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   18,
													},
													File:   "monitor.flux",
													Source: "start: start",
													Start: ast.Position{
														Column: 14,
														Line:   18,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   18,
														},
														File:   "monitor.flux",
														Source: "start",
														Start: ast.Position{
															Column: 14,
															Line:   18,
														},
													},
												},
												Name: "start",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 26,
															Line:   18,
														},
														File:   "monitor.flux",
														Source: "start",
														Start: ast.Position{
															Column: 21,
															Line:   18,
														},
													},
												},
												Name: "start",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   18,
													},
													File:   "monitor.flux",
													Source: "stop: stop",
													Start: ast.Position{
														Column: 28,
														Line:   18,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   18,
														},
														File:   "monitor.flux",
														Source: "stop",
														Start: ast.Position{
															Column: 28,
															Line:   18,
														},
													},
												},
												Name: "stop",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   18,
														},
														File:   "monitor.flux",
														Source: "stop",
														Start: ast.Position{
															Column: 34,
															Line:   18,
														},
													},
												},
												Name: "stop",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   18,
											},
											File:   "monitor.flux",
											Source: "range(start: start, stop: stop)",
											Start: ast.Position{
												Column: 8,
												Line:   18,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   18,
												},
												File:   "monitor.flux",
												Source: "range",
												Start: ast.Position{
													Column: 8,
													Line:   18,
												},
											},
										},
										Name: "range",
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 55,
										Line:   19,
									},
									File:   "monitor.flux",
									Source: "influxdb.from(bucket: bucket)\n    |> range(start: start, stop: stop)\n    |> filter(fn: (r) => r._measurement == \"statuses\")",
									Start: ast.Position{
										Column: 47,
										Line:   17,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   19,
											},
											File:   "monitor.flux",
											Source: "fn: (r) => r._measurement == \"statuses\"",
											Start: ast.Position{
												Column: 15,
												Line:   19,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   19,
												},
												File:   "monitor.flux",
												Source: "fn: (r) => r._measurement == \"statuses\"",
												Start: ast.Position{
													Column: 15,
													Line:   19,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   19,
													},
													File:   "monitor.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 15,
														Line:   19,
													},
												},
											},
											Name: "fn",
										},
										Separator: nil,
										Value: &ast.FunctionExpression{
											Arrow: nil,
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 54,
														Line:   19,
													},
													File:   "monitor.flux",
													Source: "(r) => r._measurement == \"statuses\"",
													Start: ast.Position{
														Column: 19,
														Line:   19,
													},
												},
											},
											Body: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 54,
															Line:   19,
														},
														File:   "monitor.flux",
														Source: "r._measurement == \"statuses\"",
														Start: ast.Position{
															Column: 26,
															Line:   19,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   19,
															},
															File:   "monitor.flux",
															Source: "r._measurement",
															Start: ast.Position{
																Column: 26,
																Line:   19,
															},
														},
													},
													Lbrack: nil,
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 27,
																	Line:   19,
																},
																File:   "monitor.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 26,
																	Line:   19,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   19,
																},
																File:   "monitor.flux",
																Source: "_measurement",
																Start: ast.Position{
																	Column: 28,
																	Line:   19,
																},
															},
														},
														Name: "_measurement",
													},
													Rbrack: nil,
												},
												Operator: 17,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 54,
																Line:   19,
															},
															File:   "monitor.flux",
															Source: "\"statuses\"",
															Start: ast.Position{
																Column: 44,
																Line:   19,
															},
														},
													},
													Value: "statuses",
												},
											},
											Lparen: nil,
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   19,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 20,
															Line:   19,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   19,
															},
															File:   "monitor.flux",
															Source: "r",
															Start: ast.Position{
																Column: 20,
																Line:   19,
															},
														},
													},
													Name: "r",
												},
												Separator: nil,
												Value:     nil,
											}},
											Rparan: nil,
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   19,
										},
										File:   "monitor.flux",
										Source: "filter(fn: (r) => r._measurement == \"statuses\")",
										Start: ast.Position{
											Column: 8,
											Line:   19,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   19,
											},
											File:   "monitor.flux",
											Source: "filter",
											Start: ast.Position{
												Column: 8,
												Line:   19,
											},
										},
									},
									Name: "filter",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   20,
								},
								File:   "monitor.flux",
								Source: "influxdb.from(bucket: bucket)\n    |> range(start: start, stop: stop)\n    |> filter(fn: (r) => r._measurement == \"statuses\")\n    |> filter(fn: fn)",
								Start: ast.Position{
									Column: 47,
									Line:   17,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   20,
										},
										File:   "monitor.flux",
										Source: "fn: fn",
										Start: ast.Position{
											Column: 15,
											Line:   20,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   20,
											},
											File:   "monitor.flux",
											Source: "fn: fn",
											Start: ast.Position{
												Column: 15,
												Line:   20,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   20,
												},
												File:   "monitor.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 15,
													Line:   20,
												},
											},
										},
										Name: "fn",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   20,
												},
												File:   "monitor.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 19,
													Line:   20,
												},
											},
										},
										Name: "fn",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   20,
									},
									File:   "monitor.flux",
									Source: "filter(fn: fn)",
									Start: ast.Position{
										Column: 8,
										Line:   20,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   20,
										},
										File:   "monitor.flux",
										Source: "filter",
										Start: ast.Position{
											Column: 8,
											Line:   20,
										},
									},
								},
								Name: "filter",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   21,
							},
							File:   "monitor.flux",
							Source: "influxdb.from(bucket: bucket)\n    |> range(start: start, stop: stop)\n    |> filter(fn: (r) => r._measurement == \"statuses\")\n    |> filter(fn: fn)\n    |> v1.fieldsAsCols()",
							Start: ast.Position{
								Column: 47,
								Line:   17,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   21,
								},
								File:   "monitor.flux",
								Source: "v1.fieldsAsCols()",
								Start: ast.Position{
									Column: 8,
									Line:   21,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   21,
									},
									File:   "monitor.flux",
									Source: "v1.fieldsAsCols",
									Start: ast.Position{
										Column: 8,
										Line:   21,
									},
								},
							},
							Lbrack: nil,
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   21,
										},
										File:   "monitor.flux",
										Source: "v1",
										Start: ast.Position{
											Column: 8,
											Line:   21,
										},
									},
								},
								Name: "v1",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   21,
										},
										File:   "monitor.flux",
										Source: "fieldsAsCols",
										Start: ast.Position{
											Column: 11,
											Line:   21,
										},
									},
								},
								Name: "fieldsAsCols",
							},
							Rbrack: nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   17,
							},
							File:   "monitor.flux",
							Source: "start",
							Start: ast.Position{
								Column: 9,
								Line:   17,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   17,
								},
								File:   "monitor.flux",
								Source: "start",
								Start: ast.Position{
									Column: 9,
									Line:   17,
								},
							},
						},
						Name: "start",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   17,
							},
							File:   "monitor.flux",
							Source: "stop=now()",
							Start: ast.Position{
								Column: 16,
								Line:   17,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   17,
								},
								File:   "monitor.flux",
								Source: "stop",
								Start: ast.Position{
									Column: 16,
									Line:   17,
								},
							},
						},
						Name: "stop",
					},
					Separator: nil,
					Value: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   17,
								},
								File:   "monitor.flux",
								Source: "now()",
								Start: ast.Position{
									Column: 21,
									Line:   17,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   17,
									},
									File:   "monitor.flux",
									Source: "now",
									Start: ast.Position{
										Column: 21,
										Line:   17,
									},
								},
							},
							Name: "now",
						},
						Lparen: nil,
						Rparen: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   17,
							},
							File:   "monitor.flux",
							Source: "fn=(r) => true",
							Start: ast.Position{
								Column: 28,
								Line:   17,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   17,
								},
								File:   "monitor.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 28,
									Line:   17,
								},
							},
						},
						Name: "fn",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   17,
								},
								File:   "monitor.flux",
								Source: "(r) => true",
								Start: ast.Position{
									Column: 31,
									Line:   17,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   17,
									},
									File:   "monitor.flux",
									Source: "true",
									Start: ast.Position{
										Column: 38,
										Line:   17,
									},
								},
							},
							Name: "true",
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   17,
									},
									File:   "monitor.flux",
									Source: "r",
									Start: ast.Position{
										Column: 32,
										Line:   17,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   17,
										},
										File:   "monitor.flux",
										Source: "r",
										Start: ast.Position{
											Column: 32,
											Line:   17,
										},
									},
								},
								Name: "r",
							},
							Separator: nil,
							Value:     nil,
						}},
						Rparan: nil,
					},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   24,
					},
					File:   "monitor.flux",
					Source: "levelOK = \"ok\"",
					Start: ast.Position{
						Column: 1,
						Line:   24,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// levels describing the result of a check\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   24,
						},
						File:   "monitor.flux",
						Source: "levelOK",
						Start: ast.Position{
							Column: 1,
							Line:   24,
						},
					},
				},
				Name: "levelOK",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   24,
						},
						File:   "monitor.flux",
						Source: "\"ok\"",
						Start: ast.Position{
							Column: 11,
							Line:   24,
						},
					},
				},
				Value: "ok",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   25,
					},
					File:   "monitor.flux",
					Source: "levelInfo = \"info\"",
					Start: ast.Position{
						Column: 1,
						Line:   25,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   25,
						},
						File:   "monitor.flux",
						Source: "levelInfo",
						Start: ast.Position{
							Column: 1,
							Line:   25,
						},
					},
				},
				Name: "levelInfo",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   25,
						},
						File:   "monitor.flux",
						Source: "\"info\"",
						Start: ast.Position{
							Column: 13,
							Line:   25,
						},
					},
				},
				Value: "info",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   26,
					},
					File:   "monitor.flux",
					Source: "levelWarn = \"warn\"",
					Start: ast.Position{
						Column: 1,
						Line:   26,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   26,
						},
						File:   "monitor.flux",
						Source: "levelWarn",
						Start: ast.Position{
							Column: 1,
							Line:   26,
						},
					},
				},
				Name: "levelWarn",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   26,
						},
						File:   "monitor.flux",
						Source: "\"warn\"",
						Start: ast.Position{
							Column: 13,
							Line:   26,
						},
					},
				},
				Value: "warn",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   27,
					},
					File:   "monitor.flux",
					Source: "levelCrit = \"crit\"",
					Start: ast.Position{
						Column: 1,
						Line:   27,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   27,
						},
						File:   "monitor.flux",
						Source: "levelCrit",
						Start: ast.Position{
							Column: 1,
							Line:   27,
						},
					},
				},
				Name: "levelCrit",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   27,
						},
						File:   "monitor.flux",
						Source: "\"crit\"",
						Start: ast.Position{
							Column: 13,
							Line:   27,
						},
					},
				},
				Value: "crit",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 25,
						Line:   28,
					},
					File:   "monitor.flux",
					Source: "levelUnknown = \"unknown\"",
					Start: ast.Position{
						Column: 1,
						Line:   28,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   28,
						},
						File:   "monitor.flux",
						Source: "levelUnknown",
						Start: ast.Position{
							Column: 1,
							Line:   28,
						},
					},
				},
				Name: "levelUnknown",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   28,
						},
						File:   "monitor.flux",
						Source: "\"unknown\"",
						Start: ast.Position{
							Column: 16,
							Line:   28,
						},
					},
				},
				Value: "unknown",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   58,
					},
					File:   "monitor.flux",
					Source: "_stateChanges = (fromLevel=\"any\", toLevel=\"any\", tables=<-) => {\n    toLevelFilter = if toLevel == \"any\" then\n        (r) => r._level != fromLevel and exists r._level\n    else\n        (r) => r._level == toLevel\n    fromLevelFilter = if fromLevel == \"any\" then\n        (r) => r._level != toLevel and exists r._level\n    else\n        (r) => r._level == fromLevel\n\n    return tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
					Start: ast.Position{
						Column: 1,
						Line:   29,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   29,
						},
						File:   "monitor.flux",
						Source: "_stateChanges",
						Start: ast.Position{
							Column: 1,
							Line:   29,
						},
					},
				},
				Name: "_stateChanges",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   58,
						},
						File:   "monitor.flux",
						Source: "(fromLevel=\"any\", toLevel=\"any\", tables=<-) => {\n    toLevelFilter = if toLevel == \"any\" then\n        (r) => r._level != fromLevel and exists r._level\n    else\n        (r) => r._level == toLevel\n    fromLevelFilter = if fromLevel == \"any\" then\n        (r) => r._level != toLevel and exists r._level\n    else\n        (r) => r._level == fromLevel\n\n    return tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
						Start: ast.Position{
							Column: 17,
							Line:   29,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   58,
							},
							File:   "monitor.flux",
							Source: "{\n    toLevelFilter = if toLevel == \"any\" then\n        (r) => r._level != fromLevel and exists r._level\n    else\n        (r) => r._level == toLevel\n    fromLevelFilter = if fromLevel == \"any\" then\n        (r) => r._level != toLevel and exists r._level\n    else\n        (r) => r._level == fromLevel\n\n    return tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
							Start: ast.Position{
								Column: 64,
								Line:   29,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   33,
								},
								File:   "monitor.flux",
								Source: "toLevelFilter = if toLevel == \"any\" then\n        (r) => r._level != fromLevel and exists r._level\n    else\n        (r) => r._level == toLevel",
								Start: ast.Position{
									Column: 5,
									Line:   30,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   30,
									},
									File:   "monitor.flux",
									Source: "toLevelFilter",
									Start: ast.Position{
										Column: 5,
										Line:   30,
									},
								},
							},
							Name: "toLevelFilter",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.FunctionExpression{
								Arrow: nil,
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   33,
										},
										File:   "monitor.flux",
										Source: "(r) => r._level == toLevel",
										Start: ast.Position{
											Column: 9,
											Line:   33,
										},
									},
								},
								Body: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   33,
											},
											File:   "monitor.flux",
											Source: "r._level == toLevel",
											Start: ast.Position{
												Column: 16,
												Line:   33,
											},
										},
									},
									Left: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   33,
												},
												File:   "monitor.flux",
												Source: "r._level",
												Start: ast.Position{
													Column: 16,
													Line:   33,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   33,
													},
													File:   "monitor.flux",
													Source: "r",
													Start: ast.Position{
														Column: 16,
														Line:   33,
													},
												},
											},
											Name: "r",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   33,
													},
													File:   "monitor.flux",
													Source: "_level",
													Start: ast.Position{
														Column: 18,
														Line:   33,
													},
												},
											},
											Name: "_level",
										},
										Rbrack: nil,
									},
									Operator: 17,
									Right: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   33,
												},
												File:   "monitor.flux",
												Source: "toLevel",
												Start: ast.Position{
													Column: 28,
													Line:   33,
												},
											},
										},
										Name: "toLevel",
									},
								},
								Lparen: nil,
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   33,
											},
											File:   "monitor.flux",
											Source: "r",
											Start: ast.Position{
												Column: 10,
												Line:   33,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   33,
												},
												File:   "monitor.flux",
												Source: "r",
												Start: ast.Position{
													Column: 10,
													Line:   33,
												},
											},
										},
										Name: "r",
									},
									Separator: nil,
									Value:     nil,
								}},
								Rparan: nil,
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   33,
									},
									File:   "monitor.flux",
									Source: "if toLevel == \"any\" then\n        (r) => r._level != fromLevel and exists r._level\n    else\n        (r) => r._level == toLevel",
									Start: ast.Position{
										Column: 21,
										Line:   30,
									},
								},
							},
							Consequent: &ast.FunctionExpression{
								Arrow: nil,
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 57,
											Line:   31,
										},
										File:   "monitor.flux",
										Source: "(r) => r._level != fromLevel and exists r._level",
										Start: ast.Position{
											Column: 9,
											Line:   31,
										},
									},
								},
								Body: &ast.LogicalExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   31,
											},
											File:   "monitor.flux",
											Source: "r._level != fromLevel and exists r._level",
											Start: ast.Position{
												Column: 16,
												Line:   31,
											},
										},
									},
									Left: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   31,
												},
												File:   "monitor.flux",
												Source: "r._level != fromLevel",
												Start: ast.Position{
													Column: 16,
													Line:   31,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   31,
													},
													File:   "monitor.flux",
													Source: "r._level",
													Start: ast.Position{
														Column: 16,
														Line:   31,
													},
												},
											},
											Lbrack: nil,
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 17,
															Line:   31,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 16,
															Line:   31,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   31,
														},
														File:   "monitor.flux",
														Source: "_level",
														Start: ast.Position{
															Column: 18,
															Line:   31,
														},
													},
												},
												Name: "_level",
											},
											Rbrack: nil,
										},
										Operator: 18,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   31,
													},
													File:   "monitor.flux",
													Source: "fromLevel",
													Start: ast.Position{
														Column: 28,
														Line:   31,
													},
												},
											},
											Name: "fromLevel",
										},
									},
									Operator: 1,
									Right: &ast.UnaryExpression{
										Argument: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 57,
														Line:   31,
													},
													File:   "monitor.flux",
													Source: "r._level",
													Start: ast.Position{
														Column: 49,
														Line:   31,
													},
												},
											},
											Lbrack: nil,
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 50,
															Line:   31,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 49,
															Line:   31,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 57,
															Line:   31,
														},
														File:   "monitor.flux",
														Source: "_level",
														Start: ast.Position{
															Column: 51,
															Line:   31,
														},
													},
												},
												Name: "_level",
											},
											Rbrack: nil,
										},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   31,
												},
												File:   "monitor.flux",
												Source: "exists r._level",
												Start: ast.Position{
													Column: 42,
													Line:   31,
												},
											},
										},
										Operator: 14,
									},
								},
								Lparen: nil,
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   31,
											},
											File:   "monitor.flux",
											Source: "r",
											Start: ast.Position{
												Column: 10,
												Line:   31,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   31,
												},
												File:   "monitor.flux",
												Source: "r",
												Start: ast.Position{
													Column: 10,
													Line:   31,
												},
											},
										},
										Name: "r",
									},
									Separator: nil,
									Value:     nil,
								}},
								Rparan: nil,
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   30,
										},
										File:   "monitor.flux",
										Source: "toLevel == \"any\"",
										Start: ast.Position{
											Column: 24,
											Line:   30,
										},
									},
								},
								Left: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   30,
											},
											File:   "monitor.flux",
											Source: "toLevel",
											Start: ast.Position{
												Column: 24,
												Line:   30,
											},
										},
									},
									Name: "toLevel",
								},
								Operator: 17,
								Right: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   30,
											},
											File:   "monitor.flux",
											Source: "\"any\"",
											Start: ast.Position{
												Column: 35,
												Line:   30,
											},
										},
									},
									Value: "any",
								},
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   37,
								},
								File:   "monitor.flux",
								Source: "fromLevelFilter = if fromLevel == \"any\" then\n        (r) => r._level != toLevel and exists r._level\n    else\n        (r) => r._level == fromLevel",
								Start: ast.Position{
									Column: 5,
									Line:   34,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   34,
									},
									File:   "monitor.flux",
									Source: "fromLevelFilter",
									Start: ast.Position{
										Column: 5,
										Line:   34,
									},
								},
							},
							Name: "fromLevelFilter",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.FunctionExpression{
								Arrow: nil,
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   37,
										},
										File:   "monitor.flux",
										Source: "(r) => r._level == fromLevel",
										Start: ast.Position{
											Column: 9,
											Line:   37,
										},
									},
								},
								Body: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   37,
											},
											File:   "monitor.flux",
											Source: "r._level == fromLevel",
											Start: ast.Position{
												Column: 16,
												Line:   37,
											},
										},
									},
									Left: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   37,
												},
												File:   "monitor.flux",
												Source: "r._level",
												Start: ast.Position{
													Column: 16,
													Line:   37,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   37,
													},
													File:   "monitor.flux",
													Source: "r",
													Start: ast.Position{
														Column: 16,
														Line:   37,
													},
												},
											},
											Name: "r",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   37,
													},
													File:   "monitor.flux",
													Source: "_level",
													Start: ast.Position{
														Column: 18,
														Line:   37,
													},
												},
											},
											Name: "_level",
										},
										Rbrack: nil,
									},
									Operator: 17,
									Right: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   37,
												},
												File:   "monitor.flux",
												Source: "fromLevel",
												Start: ast.Position{
													Column: 28,
													Line:   37,
												},
											},
										},
										Name: "fromLevel",
									},
								},
								Lparen: nil,
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   37,
											},
											File:   "monitor.flux",
											Source: "r",
											Start: ast.Position{
												Column: 10,
												Line:   37,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   37,
												},
												File:   "monitor.flux",
												Source: "r",
												Start: ast.Position{
													Column: 10,
													Line:   37,
												},
											},
										},
										Name: "r",
									},
									Separator: nil,
									Value:     nil,
								}},
								Rparan: nil,
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   37,
									},
									File:   "monitor.flux",
									Source: "if fromLevel == \"any\" then\n        (r) => r._level != toLevel and exists r._level\n    else\n        (r) => r._level == fromLevel",
									Start: ast.Position{
										Column: 23,
										Line:   34,
									},
								},
							},
							Consequent: &ast.FunctionExpression{
								Arrow: nil,
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   35,
										},
										File:   "monitor.flux",
										Source: "(r) => r._level != toLevel and exists r._level",
										Start: ast.Position{
											Column: 9,
											Line:   35,
										},
									},
								},
								Body: &ast.LogicalExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   35,
											},
											File:   "monitor.flux",
											Source: "r._level != toLevel and exists r._level",
											Start: ast.Position{
												Column: 16,
												Line:   35,
											},
										},
									},
									Left: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   35,
												},
												File:   "monitor.flux",
												Source: "r._level != toLevel",
												Start: ast.Position{
													Column: 16,
													Line:   35,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   35,
													},
													File:   "monitor.flux",
													Source: "r._level",
													Start: ast.Position{
														Column: 16,
														Line:   35,
													},
												},
											},
											Lbrack: nil,
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 17,
															Line:   35,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 16,
															Line:   35,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   35,
														},
														File:   "monitor.flux",
														Source: "_level",
														Start: ast.Position{
															Column: 18,
															Line:   35,
														},
													},
												},
												Name: "_level",
											},
											Rbrack: nil,
										},
										Operator: 18,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   35,
													},
													File:   "monitor.flux",
													Source: "toLevel",
													Start: ast.Position{
														Column: 28,
														Line:   35,
													},
												},
											},
											Name: "toLevel",
										},
									},
									Operator: 1,
									Right: &ast.UnaryExpression{
										Argument: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 55,
														Line:   35,
													},
													File:   "monitor.flux",
													Source: "r._level",
													Start: ast.Position{
														Column: 47,
														Line:   35,
													},
												},
											},
											Lbrack: nil,
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   35,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 47,
															Line:   35,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   35,
														},
														File:   "monitor.flux",
														Source: "_level",
														Start: ast.Position{
															Column: 49,
															Line:   35,
														},
													},
												},
												Name: "_level",
											},
											Rbrack: nil,
										},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 55,
													Line:   35,
												},
												File:   "monitor.flux",
												Source: "exists r._level",
												Start: ast.Position{
													Column: 40,
													Line:   35,
												},
											},
										},
										Operator: 14,
									},
								},
								Lparen: nil,
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   35,
											},
											File:   "monitor.flux",
											Source: "r",
											Start: ast.Position{
												Column: 10,
												Line:   35,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   35,
												},
												File:   "monitor.flux",
												Source: "r",
												Start: ast.Position{
													Column: 10,
													Line:   35,
												},
											},
										},
										Name: "r",
									},
									Separator: nil,
									Value:     nil,
								}},
								Rparan: nil,
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 44,
											Line:   34,
										},
										File:   "monitor.flux",
										Source: "fromLevel == \"any\"",
										Start: ast.Position{
											Column: 26,
											Line:   34,
										},
									},
								},
								Left: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 35,
												Line:   34,
											},
											File:   "monitor.flux",
											Source: "fromLevel",
											Start: ast.Position{
												Column: 26,
												Line:   34,
											},
										},
									},
									Name: "fromLevel",
								},
								Operator: 17,
								Right: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   34,
											},
											File:   "monitor.flux",
											Source: "\"any\"",
											Start: ast.Position{
												Column: 39,
												Line:   34,
											},
										},
									},
									Value: "any",
								},
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.PipeExpression{
													Argument: &ast.PipeExpression{
														Argument: &ast.PipeExpression{
															Argument: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   39,
																		},
																		File:   "monitor.flux",
																		Source: "tables",
																		Start: ast.Position{
																			Column: 12,
																			Line:   39,
																		},
																	},
																},
																Name: "tables",
															},
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 10,
																		Line:   49,
																	},
																	File:   "monitor.flux",
																	Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )",
																	Start: ast.Position{
																		Column: 12,
																		Line:   39,
																	},
																},
															},
															Call: &ast.CallExpression{
																Arguments: []ast.Expression{&ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 15,
																				Line:   48,
																			},
																			File:   "monitor.flux",
																			Source: "fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            })",
																			Start: ast.Position{
																				Column: 13,
																				Line:   41,
																			},
																		},
																	},
																	Lbrace: nil,
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 15,
																					Line:   48,
																				},
																				File:   "monitor.flux",
																				Source: "fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            })",
																				Start: ast.Position{
																					Column: 13,
																					Line:   41,
																				},
																			},
																		},
																		Comma: nil,
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 15,
																						Line:   41,
																					},
																					File:   "monitor.flux",
																					Source: "fn",
																					Start: ast.Position{
																						Column: 13,
																						Line:   41,
																					},
																				},
																			},
																			Name: "fn",
																		},
																		Separator: nil,
																		Value: &ast.FunctionExpression{
																			Arrow: nil,
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 15,
																						Line:   48,
																					},
																					File:   "monitor.flux",
																					Source: "(r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            })",
																					Start: ast.Position{
																						Column: 17,
																						Line:   41,
																					},
																				},
																			},
																			Body: &ast.ParenExpression{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 15,
																							Line:   48,
																						},
																						File:   "monitor.flux",
																						Source: "({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            })",
																						Start: ast.Position{
																							Column: 24,
																							Line:   41,
																						},
																					},
																				},
																				Expression: &ast.ObjectExpression{
																					BaseNode: ast.BaseNode{
																						Comments: nil,
																						Errors:   nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 14,
																								Line:   48,
																							},
																							File:   "monitor.flux",
																							Source: "{r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }",
																							Start: ast.Position{
																								Column: 25,
																								Line:   41,
																							},
																						},
																					},
																					Lbrace: nil,
																					Properties: []*ast.Property{&ast.Property{
																						BaseNode: ast.BaseNode{
																							Comments: nil,
																							Errors:   nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 24,
																									Line:   47,
																								},
																								File:   "monitor.flux",
																								Source: "level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10",
																								Start: ast.Position{
																									Column: 17,
																									Line:   42,
																								},
																							},
																						},
																						Comma: nil,
																						Key: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Comments: nil,
																								Errors:   nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 28,
																										Line:   42,
																									},
																									File:   "monitor.flux",
																									Source: "level_value",
																									Start: ast.Position{
																										Column: 17,
																										Line:   42,
																									},
																								},
																							},
																							Name: "level_value",
																						},
																						Separator: nil,
																						Value: &ast.ConditionalExpression{
																							Alternate: &ast.ConditionalExpression{
																								Alternate: &ast.UnaryExpression{
																									Argument: &ast.IntegerLiteral{
																										BaseNode: ast.BaseNode{
																											Comments: nil,
																											Errors:   nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 24,
																													Line:   47,
																												},
																												File:   "monitor.flux",
																												Source: "10",
																												Start: ast.Position{
																													Column: 22,
																													Line:   47,
																												},
																											},
																										},
																										Value: int64(10),
																									},
																									BaseNode: ast.BaseNode{
																										Comments: nil,
																										Errors:   nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 24,
																												Line:   47,
																											},
																											File:   "monitor.flux",
																											Source: "-10",
																											Start: ast.Position{
																												Column: 21,
																												Line:   47,
																											},
																										},
																									},
																									Operator: 6,
																								},
																								BaseNode: ast.BaseNode{
																									Comments: nil,
																									Errors:   nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 24,
																											Line:   47,
																										},
																										File:   "monitor.flux",
																										Source: "if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10",
																										Start: ast.Position{
																											Column: 22,
																											Line:   44,
																										},
																									},
																								},
																								Consequent: &ast.IntegerLiteral{
																									BaseNode: ast.BaseNode{
																										Comments: nil,
																										Errors:   nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 22,
																												Line:   45,
																											},
																											File:   "monitor.flux",
																											Source: "0",
																											Start: ast.Position{
																												Column: 21,
																												Line:   45,
																											},
																										},
																									},
																									Value: int64(0),
																								},
																								Test: &ast.CallExpression{
																									Arguments: []ast.Expression{&ast.ObjectExpression{
																										BaseNode: ast.BaseNode{
																											Comments: nil,
																											Errors:   nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 45,
																													Line:   44,
																												},
																												File:   "monitor.flux",
																												Source: "r: r",
																												Start: ast.Position{
																													Column: 41,
																													Line:   44,
																												},
																											},
																										},
																										Lbrace: nil,
																										Properties: []*ast.Property{&ast.Property{
																											BaseNode: ast.BaseNode{
																												Comments: nil,
																												Errors:   nil,
																												Loc: &ast.SourceLocation{
																													End: ast.Position{
																														Column: 45,
																														Line:   44,
																													},
																													File:   "monitor.flux",
																													Source: "r: r",
																													Start: ast.Position{
																														Column: 41,
																														Line:   44,
																													},
																												},
																											},
																											Comma: nil,
																											Key: &ast.Identifier{
																												BaseNode: ast.BaseNode{
																													Comments: nil,
																													Errors:   nil,
																													Loc: &ast.SourceLocation{
																														End: ast.Position{
																															Column: 42,
																															Line:   44,
																														},
																														File:   "monitor.flux",
																														Source: "r",
																														Start: ast.Position{
																															Column: 41,
																															Line:   44,
																														},
																													},
																												},
																												Name: "r",
																											},
																											Separator: nil,
																											Value: &ast.Identifier{
																												BaseNode: ast.BaseNode{
																													Comments: nil,
																													Errors:   nil,
																													Loc: &ast.SourceLocation{
																														End: ast.Position{
																															Column: 45,
																															Line:   44,
																														},
																														File:   "monitor.flux",
																														Source: "r",
																														Start: ast.Position{
																															Column: 44,
																															Line:   44,
																														},
																													},
																												},
																												Name: "r",
																											},
																										}},
																										Rbrace: nil,
																										With:   nil,
																									}},
																									BaseNode: ast.BaseNode{
																										Comments: nil,
																										Errors:   nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 46,
																												Line:   44,
																											},
																											File:   "monitor.flux",
																											Source: "fromLevelFilter(r: r)",
																											Start: ast.Position{
																												Column: 25,
																												Line:   44,
																											},
																										},
																									},
																									Callee: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Comments: nil,
																											Errors:   nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 40,
																													Line:   44,
																												},
																												File:   "monitor.flux",
																												Source: "fromLevelFilter",
																												Start: ast.Position{
																													Column: 25,
																													Line:   44,
																												},
																											},
																										},
																										Name: "fromLevelFilter",
																									},
																									Lparen: nil,
																									Rparen: nil,
																								},
																								Tk_else: nil,
																								Tk_if:   nil,
																								Tk_then: nil,
																							},
																							BaseNode: ast.BaseNode{
																								Comments: nil,
																								Errors:   nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 24,
																										Line:   47,
																									},
																									File:   "monitor.flux",
																									Source: "if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10",
																									Start: ast.Position{
																										Column: 30,
																										Line:   42,
																									},
																								},
																							},
																							Consequent: &ast.IntegerLiteral{
																								BaseNode: ast.BaseNode{
																									Comments: nil,
																									Errors:   nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 22,
																											Line:   43,
																										},
																										File:   "monitor.flux",
																										Source: "1",
																										Start: ast.Position{
																											Column: 21,
																											Line:   43,
																										},
																									},
																								},
																								Value: int64(1),
																							},
																							Test: &ast.CallExpression{
																								Arguments: []ast.Expression{&ast.ObjectExpression{
																									BaseNode: ast.BaseNode{
																										Comments: nil,
																										Errors:   nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 51,
																												Line:   42,
																											},
																											File:   "monitor.flux",
																											Source: "r: r",
																											Start: ast.Position{
																												Column: 47,
																												Line:   42,
																											},
																										},
																									},
																									Lbrace: nil,
																									Properties: []*ast.Property{&ast.Property{
																										BaseNode: ast.BaseNode{
																											Comments: nil,
																											Errors:   nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 51,
																													Line:   42,
																												},
																												File:   "monitor.flux",
																												Source: "r: r",
																												Start: ast.Position{
																													Column: 47,
																													Line:   42,
																												},
																											},
																										},
																										Comma: nil,
																										Key: &ast.Identifier{
																											BaseNode: ast.BaseNode{
																												Comments: nil,
																												Errors:   nil,
																												Loc: &ast.SourceLocation{
																													End: ast.Position{
																														Column: 48,
																														Line:   42,
																													},
																													File:   "monitor.flux",
																													Source: "r",
																													Start: ast.Position{
																														Column: 47,
																														Line:   42,
																													},
																												},
																											},
																											Name: "r",
																										},
																										Separator: nil,
																										Value: &ast.Identifier{
																											BaseNode: ast.BaseNode{
																												Comments: nil,
																												Errors:   nil,
																												Loc: &ast.SourceLocation{
																													End: ast.Position{
																														Column: 51,
																														Line:   42,
																													},
																													File:   "monitor.flux",
																													Source: "r",
																													Start: ast.Position{
																														Column: 50,
																														Line:   42,
																													},
																												},
																											},
																											Name: "r",
																										},
																									}},
																									Rbrace: nil,
																									With:   nil,
																								}},
																								BaseNode: ast.BaseNode{
																									Comments: nil,
																									Errors:   nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 52,
																											Line:   42,
																										},
																										File:   "monitor.flux",
																										Source: "toLevelFilter(r: r)",
																										Start: ast.Position{
																											Column: 33,
																											Line:   42,
																										},
																									},
																								},
																								Callee: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Comments: nil,
																										Errors:   nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 46,
																												Line:   42,
																											},
																											File:   "monitor.flux",
																											Source: "toLevelFilter",
																											Start: ast.Position{
																												Column: 33,
																												Line:   42,
																											},
																										},
																									},
																									Name: "toLevelFilter",
																								},
																								Lparen: nil,
																								Rparen: nil,
																							},
																							Tk_else: nil,
																							Tk_if:   nil,
																							Tk_then: nil,
																						},
																					}},
																					Rbrace: nil,
																					With: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Comments: nil,
																							Errors:   nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 27,
																									Line:   41,
																								},
																								File:   "monitor.flux",
																								Source: "r",
																								Start: ast.Position{
																									Column: 26,
																									Line:   41,
																								},
																							},
																						},
																						Name: "r",
																					},
																				},
																				Lparen: nil,
																				Rparen: nil,
																			},
																			Lparen: nil,
																			Params: []*ast.Property{&ast.Property{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 19,
																							Line:   41,
																						},
																						File:   "monitor.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 18,
																							Line:   41,
																						},
																					},
																				},
																				Comma: nil,
																				Key: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Comments: nil,
																						Errors:   nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 19,
																								Line:   41,
																							},
																							File:   "monitor.flux",
																							Source: "r",
																							Start: ast.Position{
																								Column: 18,
																								Line:   41,
																							},
																						},
																					},
																					Name: "r",
																				},
																				Separator: nil,
																				Value:     nil,
																			}},
																			Rparan: nil,
																		},
																	}},
																	Rbrace: nil,
																	With:   nil,
																}},
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 10,
																			Line:   49,
																		},
																		File:   "monitor.flux",
																		Source: "map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )",
																		Start: ast.Position{
																			Column: 12,
																			Line:   40,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 15,
																				Line:   40,
																			},
																			File:   "monitor.flux",
																			Source: "map",
																			Start: ast.Position{
																				Column: 12,
																				Line:   40,
																			},
																		},
																	},
																	Name: "map",
																},
																Lparen: nil,
																Rparen: nil,
															},
														},
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 65,
																	Line:   50,
																},
																File:   "monitor.flux",
																Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")",
																Start: ast.Position{
																	Column: 12,
																	Line:   39,
																},
															},
														},
														Call: &ast.CallExpression{
															Arguments: []ast.Expression{&ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 64,
																			Line:   50,
																		},
																		File:   "monitor.flux",
																		Source: "column: \"_level\", as: \"____temp_level____\"",
																		Start: ast.Position{
																			Column: 22,
																			Line:   50,
																		},
																	},
																},
																Lbrace: nil,
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 38,
																				Line:   50,
																			},
																			File:   "monitor.flux",
																			Source: "column: \"_level\"",
																			Start: ast.Position{
																				Column: 22,
																				Line:   50,
																			},
																		},
																	},
																	Comma: nil,
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 28,
																					Line:   50,
																				},
																				File:   "monitor.flux",
																				Source: "column",
																				Start: ast.Position{
																					Column: 22,
																					Line:   50,
																				},
																			},
																		},
																		Name: "column",
																	},
																	Separator: nil,
																	Value: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 38,
																					Line:   50,
																				},
																				File:   "monitor.flux",
																				Source: "\"_level\"",
																				Start: ast.Position{
																					Column: 30,
																					Line:   50,
																				},
																			},
																		},
																		Value: "_level",
																	},
																}, &ast.Property{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 64,
																				Line:   50,
																			},
																			File:   "monitor.flux",
																			Source: "as: \"____temp_level____\"",
																			Start: ast.Position{
																				Column: 40,
																				Line:   50,
																			},
																		},
																	},
																	Comma: nil,
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 42,
																					Line:   50,
																				},
																				File:   "monitor.flux",
																				Source: "as",
																				Start: ast.Position{
																					Column: 40,
																					Line:   50,
																				},
																			},
																		},
																		Name: "as",
																	},
																	Separator: nil,
																	Value: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 64,
																					Line:   50,
																				},
																				File:   "monitor.flux",
																				Source: "\"____temp_level____\"",
																				Start: ast.Position{
																					Column: 44,
																					Line:   50,
																				},
																			},
																		},
																		Value: "____temp_level____",
																	},
																}},
																Rbrace: nil,
																With:   nil,
															}},
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 65,
																		Line:   50,
																	},
																	File:   "monitor.flux",
																	Source: "duplicate(column: \"_level\", as: \"____temp_level____\")",
																	Start: ast.Position{
																		Column: 12,
																		Line:   50,
																	},
																},
															},
															Callee: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 21,
																			Line:   50,
																		},
																		File:   "monitor.flux",
																		Source: "duplicate",
																		Start: ast.Position{
																			Column: 12,
																			Line:   50,
																		},
																	},
																},
																Name: "duplicate",
															},
															Lparen: nil,
															Rparen: nil,
														},
													},
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   51,
															},
															File:   "monitor.flux",
															Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])",
															Start: ast.Position{
																Column: 12,
																Line:   39,
															},
														},
													},
													Call: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   51,
																	},
																	File:   "monitor.flux",
																	Source: "columns: [\"_level\"]",
																	Start: ast.Position{
																		Column: 17,
																		Line:   51,
																	},
																},
															},
															Lbrace: nil,
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 36,
																			Line:   51,
																		},
																		File:   "monitor.flux",
																		Source: "columns: [\"_level\"]",
																		Start: ast.Position{
																			Column: 17,
																			Line:   51,
																		},
																	},
																},
																Comma: nil,
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 24,
																				Line:   51,
																			},
																			File:   "monitor.flux",
																			Source: "columns",
																			Start: ast.Position{
																				Column: 17,
																				Line:   51,
																			},
																		},
																	},
																	Name: "columns",
																},
																Separator: nil,
																Value: &ast.ArrayExpression{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 36,
																				Line:   51,
																			},
																			File:   "monitor.flux",
																			Source: "[\"_level\"]",
																			Start: ast.Position{
																				Column: 26,
																				Line:   51,
																			},
																		},
																	},
																	Elements: []ast.Expression{&ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 35,
																					Line:   51,
																				},
																				File:   "monitor.flux",
																				Source: "\"_level\"",
																				Start: ast.Position{
																					Column: 27,
																					Line:   51,
																				},
																			},
																		},
																		Value: "_level",
																	}},
																	Lbrack: nil,
																	Rbrack: nil,
																},
															}},
															Rbrace: nil,
															With:   nil,
														}},
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   51,
																},
																File:   "monitor.flux",
																Source: "drop(columns: [\"_level\"])",
																Start: ast.Position{
																	Column: 12,
																	Line:   51,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 16,
																		Line:   51,
																	},
																	File:   "monitor.flux",
																	Source: "drop",
																	Start: ast.Position{
																		Column: 12,
																		Line:   51,
																	},
																},
															},
															Name: "drop",
														},
														Lparen: nil,
														Rparen: nil,
													},
												},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 61,
															Line:   52,
														},
														File:   "monitor.flux",
														Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})",
														Start: ast.Position{
															Column: 12,
															Line:   39,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   52,
																},
																File:   "monitor.flux",
																Source: "columns: {\"____temp_level____\": \"_level\"}",
																Start: ast.Position{
																	Column: 19,
																	Line:   52,
																},
															},
														},
														Lbrace: nil,
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 60,
																		Line:   52,
																	},
																	File:   "monitor.flux",
																	Source: "columns: {\"____temp_level____\": \"_level\"}",
																	Start: ast.Position{
																		Column: 19,
																		Line:   52,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 26,
																			Line:   52,
																		},
																		File:   "monitor.flux",
																		Source: "columns",
																		Start: ast.Position{
																			Column: 19,
																			Line:   52,
																		},
																	},
																},
																Name: "columns",
															},
															Separator: nil,
															Value: &ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 60,
																			Line:   52,
																		},
																		File:   "monitor.flux",
																		Source: "{\"____temp_level____\": \"_level\"}",
																		Start: ast.Position{
																			Column: 28,
																			Line:   52,
																		},
																	},
																},
																Lbrace: nil,
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 59,
																				Line:   52,
																			},
																			File:   "monitor.flux",
																			Source: "\"____temp_level____\": \"_level\"",
																			Start: ast.Position{
																				Column: 29,
																				Line:   52,
																			},
																		},
																	},
																	Comma: nil,
																	Key: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 49,
																					Line:   52,
																				},
																				File:   "monitor.flux",
																				Source: "\"____temp_level____\"",
																				Start: ast.Position{
																					Column: 29,
																					Line:   52,
																				},
																			},
																		},
																		Value: "____temp_level____",
																	},
																	Separator: nil,
																	Value: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 59,
																					Line:   52,
																				},
																				File:   "monitor.flux",
																				Source: "\"_level\"",
																				Start: ast.Position{
																					Column: 51,
																					Line:   52,
																				},
																			},
																		},
																		Value: "_level",
																	},
																}},
																Rbrace: nil,
																With:   nil,
															},
														}},
														Rbrace: nil,
														With:   nil,
													}},
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 61,
																Line:   52,
															},
															File:   "monitor.flux",
															Source: "rename(columns: {\"____temp_level____\": \"_level\"})",
															Start: ast.Position{
																Column: 12,
																Line:   52,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   52,
																},
																File:   "monitor.flux",
																Source: "rename",
																Start: ast.Position{
																	Column: 12,
																	Line:   52,
																},
															},
														},
														Name: "rename",
													},
													Lparen: nil,
													Rparen: nil,
												},
											},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 61,
														Line:   53,
													},
													File:   "monitor.flux",
													Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)",
													Start: ast.Position{
														Column: 12,
														Line:   39,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   53,
															},
															File:   "monitor.flux",
															Source: "columns: [\"_source_timestamp\"], desc: false",
															Start: ast.Position{
																Column: 17,
																Line:   53,
															},
														},
													},
													Lbrace: nil,
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   53,
																},
																File:   "monitor.flux",
																Source: "columns: [\"_source_timestamp\"]",
																Start: ast.Position{
																	Column: 17,
																	Line:   53,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 24,
																		Line:   53,
																	},
																	File:   "monitor.flux",
																	Source: "columns",
																	Start: ast.Position{
																		Column: 17,
																		Line:   53,
																	},
																},
															},
															Name: "columns",
														},
														Separator: nil,
														Value: &ast.ArrayExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   53,
																	},
																	File:   "monitor.flux",
																	Source: "[\"_source_timestamp\"]",
																	Start: ast.Position{
																		Column: 26,
																		Line:   53,
																	},
																},
															},
															Elements: []ast.Expression{&ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 46,
																			Line:   53,
																		},
																		File:   "monitor.flux",
																		Source: "\"_source_timestamp\"",
																		Start: ast.Position{
																			Column: 27,
																			Line:   53,
																		},
																	},
																},
																Value: "_source_timestamp",
															}},
															Lbrack: nil,
															Rbrack: nil,
														},
													}, &ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   53,
																},
																File:   "monitor.flux",
																Source: "desc: false",
																Start: ast.Position{
																	Column: 49,
																	Line:   53,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 53,
																		Line:   53,
																	},
																	File:   "monitor.flux",
																	Source: "desc",
																	Start: ast.Position{
																		Column: 49,
																		Line:   53,
																	},
																},
															},
															Name: "desc",
														},
														Separator: nil,
														Value: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 60,
																		Line:   53,
																	},
																	File:   "monitor.flux",
																	Source: "false",
																	Start: ast.Position{
																		Column: 55,
																		Line:   53,
																	},
																},
															},
															Name: "false",
														},
													}},
													Rbrace: nil,
													With:   nil,
												}},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 61,
															Line:   53,
														},
														File:   "monitor.flux",
														Source: "sort(columns: [\"_source_timestamp\"], desc: false)",
														Start: ast.Position{
															Column: 12,
															Line:   53,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 16,
																Line:   53,
															},
															File:   "monitor.flux",
															Source: "sort",
															Start: ast.Position{
																Column: 12,
																Line:   53,
															},
														},
													},
													Name: "sort",
												},
												Lparen: nil,
												Rparen: nil,
											},
										},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   54,
												},
												File:   "monitor.flux",
												Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])",
												Start: ast.Position{
													Column: 12,
													Line:   39,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   54,
														},
														File:   "monitor.flux",
														Source: "columns: [\"level_value\"]",
														Start: ast.Position{
															Column: 23,
															Line:   54,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   54,
															},
															File:   "monitor.flux",
															Source: "columns: [\"level_value\"]",
															Start: ast.Position{
																Column: 23,
																Line:   54,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   54,
																},
																File:   "monitor.flux",
																Source: "columns",
																Start: ast.Position{
																	Column: 23,
																	Line:   54,
																},
															},
														},
														Name: "columns",
													},
													Separator: nil,
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   54,
																},
																File:   "monitor.flux",
																Source: "[\"level_value\"]",
																Start: ast.Position{
																	Column: 32,
																	Line:   54,
																},
															},
														},
														Elements: []ast.Expression{&ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   54,
																	},
																	File:   "monitor.flux",
																	Source: "\"level_value\"",
																	Start: ast.Position{
																		Column: 33,
																		Line:   54,
																	},
																},
															},
															Value: "level_value",
														}},
														Lbrack: nil,
														Rbrack: nil,
													},
												}},
												Rbrace: nil,
												With:   nil,
											}},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   54,
													},
													File:   "monitor.flux",
													Source: "difference(columns: [\"level_value\"])",
													Start: ast.Position{
														Column: 12,
														Line:   54,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   54,
														},
														File:   "monitor.flux",
														Source: "difference",
														Start: ast.Position{
															Column: 12,
															Line:   54,
														},
													},
												},
												Name: "difference",
											},
											Lparen: nil,
											Rparen: nil,
										},
									},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   55,
											},
											File:   "monitor.flux",
											Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)",
											Start: ast.Position{
												Column: 12,
												Line:   39,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   55,
													},
													File:   "monitor.flux",
													Source: "fn: (r) => r.level_value == 1",
													Start: ast.Position{
														Column: 19,
														Line:   55,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   55,
														},
														File:   "monitor.flux",
														Source: "fn: (r) => r.level_value == 1",
														Start: ast.Position{
															Column: 19,
															Line:   55,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   55,
															},
															File:   "monitor.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 19,
																Line:   55,
															},
														},
													},
													Name: "fn",
												},
												Separator: nil,
												Value: &ast.FunctionExpression{
													Arrow: nil,
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   55,
															},
															File:   "monitor.flux",
															Source: "(r) => r.level_value == 1",
															Start: ast.Position{
																Column: 23,
																Line:   55,
															},
														},
													},
													Body: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 48,
																	Line:   55,
																},
																File:   "monitor.flux",
																Source: "r.level_value == 1",
																Start: ast.Position{
																	Column: 30,
																	Line:   55,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   55,
																	},
																	File:   "monitor.flux",
																	Source: "r.level_value",
																	Start: ast.Position{
																		Column: 30,
																		Line:   55,
																	},
																},
															},
															Lbrack: nil,
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 31,
																			Line:   55,
																		},
																		File:   "monitor.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 30,
																			Line:   55,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 43,
																			Line:   55,
																		},
																		File:   "monitor.flux",
																		Source: "level_value",
																		Start: ast.Position{
																			Column: 32,
																			Line:   55,
																		},
																	},
																},
																Name: "level_value",
															},
															Rbrack: nil,
														},
														Operator: 17,
														Right: &ast.IntegerLiteral{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 48,
																		Line:   55,
																	},
																	File:   "monitor.flux",
																	Source: "1",
																	Start: ast.Position{
																		Column: 47,
																		Line:   55,
																	},
																},
															},
															Value: int64(1),
														},
													},
													Lparen: nil,
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 25,
																	Line:   55,
																},
																File:   "monitor.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 24,
																	Line:   55,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 25,
																		Line:   55,
																	},
																	File:   "monitor.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 24,
																		Line:   55,
																	},
																},
															},
															Name: "r",
														},
														Separator: nil,
														Value:     nil,
													}},
													Rparan: nil,
												},
											}},
											Rbrace: nil,
											With:   nil,
										}},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   55,
												},
												File:   "monitor.flux",
												Source: "filter(fn: (r) => r.level_value == 1)",
												Start: ast.Position{
													Column: 12,
													Line:   55,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   55,
													},
													File:   "monitor.flux",
													Source: "filter",
													Start: ast.Position{
														Column: 12,
														Line:   55,
													},
												},
											},
											Name: "filter",
										},
										Lparen: nil,
										Rparen: nil,
									},
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   56,
										},
										File:   "monitor.flux",
										Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)\n        |> drop(columns: [\"level_value\"])",
										Start: ast.Position{
											Column: 12,
											Line:   39,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   56,
												},
												File:   "monitor.flux",
												Source: "columns: [\"level_value\"]",
												Start: ast.Position{
													Column: 17,
													Line:   56,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   56,
													},
													File:   "monitor.flux",
													Source: "columns: [\"level_value\"]",
													Start: ast.Position{
														Column: 17,
														Line:   56,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   56,
														},
														File:   "monitor.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 17,
															Line:   56,
														},
													},
												},
												Name: "columns",
											},
											Separator: nil,
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   56,
														},
														File:   "monitor.flux",
														Source: "[\"level_value\"]",
														Start: ast.Position{
															Column: 26,
															Line:   56,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   56,
															},
															File:   "monitor.flux",
															Source: "\"level_value\"",
															Start: ast.Position{
																Column: 27,
																Line:   56,
															},
														},
													},
													Value: "level_value",
												}},
												Lbrack: nil,
												Rbrack: nil,
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   56,
											},
											File:   "monitor.flux",
											Source: "drop(columns: [\"level_value\"])",
											Start: ast.Position{
												Column: 12,
												Line:   56,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   56,
												},
												File:   "monitor.flux",
												Source: "drop",
												Start: ast.Position{
													Column: 12,
													Line:   56,
												},
											},
										},
										Name: "drop",
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   57,
									},
									File:   "monitor.flux",
									Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])",
									Start: ast.Position{
										Column: 12,
										Line:   39,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   57,
											},
											File:   "monitor.flux",
											Source: "mode: \"extend\", columns: [\"_level\"]",
											Start: ast.Position{
												Column: 31,
												Line:   57,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   57,
												},
												File:   "monitor.flux",
												Source: "mode: \"extend\"",
												Start: ast.Position{
													Column: 31,
													Line:   57,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   57,
													},
													File:   "monitor.flux",
													Source: "mode",
													Start: ast.Position{
														Column: 31,
														Line:   57,
													},
												},
											},
											Name: "mode",
										},
										Separator: nil,
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   57,
													},
													File:   "monitor.flux",
													Source: "\"extend\"",
													Start: ast.Position{
														Column: 37,
														Line:   57,
													},
												},
											},
											Value: "extend",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   57,
												},
												File:   "monitor.flux",
												Source: "columns: [\"_level\"]",
												Start: ast.Position{
													Column: 47,
													Line:   57,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 54,
														Line:   57,
													},
													File:   "monitor.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 47,
														Line:   57,
													},
												},
											},
											Name: "columns",
										},
										Separator: nil,
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 66,
														Line:   57,
													},
													File:   "monitor.flux",
													Source: "[\"_level\"]",
													Start: ast.Position{
														Column: 56,
														Line:   57,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 65,
															Line:   57,
														},
														File:   "monitor.flux",
														Source: "\"_level\"",
														Start: ast.Position{
															Column: 57,
															Line:   57,
														},
													},
												},
												Value: "_level",
											}},
											Lbrack: nil,
											Rbrack: nil,
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   57,
										},
										File:   "monitor.flux",
										Source: "experimental.group(mode: \"extend\", columns: [\"_level\"])",
										Start: ast.Position{
											Column: 12,
											Line:   57,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   57,
											},
											File:   "monitor.flux",
											Source: "experimental.group",
											Start: ast.Position{
												Column: 12,
												Line:   57,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   57,
												},
												File:   "monitor.flux",
												Source: "experimental",
												Start: ast.Position{
													Column: 12,
													Line:   57,
												},
											},
										},
										Name: "experimental",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   57,
												},
												File:   "monitor.flux",
												Source: "group",
												Start: ast.Position{
													Column: 25,
													Line:   57,
												},
											},
										},
										Name: "group",
									},
									Rbrack: nil,
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 67,
									Line:   57,
								},
								File:   "monitor.flux",
								Source: "return tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if toLevelFilter(r: r) then\n                    1\n                else if fromLevelFilter(r: r) then\n                    0\n                else\n                    -10,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])",
								Start: ast.Position{
									Column: 5,
									Line:   39,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   29,
							},
							File:   "monitor.flux",
							Source: "fromLevel=\"any\"",
							Start: ast.Position{
								Column: 18,
								Line:   29,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   29,
								},
								File:   "monitor.flux",
								Source: "fromLevel",
								Start: ast.Position{
									Column: 18,
									Line:   29,
								},
							},
						},
						Name: "fromLevel",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   29,
								},
								File:   "monitor.flux",
								Source: "\"any\"",
								Start: ast.Position{
									Column: 28,
									Line:   29,
								},
							},
						},
						Value: "any",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 48,
								Line:   29,
							},
							File:   "monitor.flux",
							Source: "toLevel=\"any\"",
							Start: ast.Position{
								Column: 35,
								Line:   29,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   29,
								},
								File:   "monitor.flux",
								Source: "toLevel",
								Start: ast.Position{
									Column: 35,
									Line:   29,
								},
							},
						},
						Name: "toLevel",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   29,
								},
								File:   "monitor.flux",
								Source: "\"any\"",
								Start: ast.Position{
									Column: 43,
									Line:   29,
								},
							},
						},
						Value: "any",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 59,
								Line:   29,
							},
							File:   "monitor.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 50,
								Line:   29,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   29,
								},
								File:   "monitor.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 50,
									Line:   29,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 59,
								Line:   29,
							},
							File:   "monitor.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 57,
								Line:   29,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   90,
					},
					File:   "monitor.flux",
					Source: "stateChangesOnly = (tables=<-) => {\n    return tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value != 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
					Start: ast.Position{
						Column: 1,
						Line:   66,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// stateChangesOnly takes a stream of tables that contains a _level column and\n"}, ast.Comment{Text: "// returns a stream of tables where each record in a table represents a state change\n"}, ast.Comment{Text: "// of the _level column.\n"}, ast.Comment{Text: "// Statuses are sorted by source timestamp, because default sort order of statuses may differ\n"}, ast.Comment{Text: "// (`_time` column holds the time when check was executed) and that could result in detecting\n"}, ast.Comment{Text: "// status changes at the wrong time or even false changes.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   66,
						},
						File:   "monitor.flux",
						Source: "stateChangesOnly",
						Start: ast.Position{
							Column: 1,
							Line:   66,
						},
					},
				},
				Name: "stateChangesOnly",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   90,
						},
						File:   "monitor.flux",
						Source: "(tables=<-) => {\n    return tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value != 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
						Start: ast.Position{
							Column: 20,
							Line:   66,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   90,
							},
							File:   "monitor.flux",
							Source: "{\n    return tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value != 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
							Start: ast.Position{
								Column: 35,
								Line:   66,
							},
						},
					},
					Body: []ast.Statement{&ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.PipeExpression{
													Argument: &ast.PipeExpression{
														Argument: &ast.PipeExpression{
															Argument: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   67,
																		},
																		File:   "monitor.flux",
																		Source: "tables",
																		Start: ast.Position{
																			Column: 12,
																			Line:   67,
																		},
																	},
																},
																Name: "tables",
															},
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 10,
																		Line:   81,
																	},
																	File:   "monitor.flux",
																	Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )",
																	Start: ast.Position{
																		Column: 12,
																		Line:   67,
																	},
																},
															},
															Call: &ast.CallExpression{
																Arguments: []ast.Expression{&ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 15,
																				Line:   80,
																			},
																			File:   "monitor.flux",
																			Source: "fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            })",
																			Start: ast.Position{
																				Column: 13,
																				Line:   69,
																			},
																		},
																	},
																	Lbrace: nil,
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 15,
																					Line:   80,
																				},
																				File:   "monitor.flux",
																				Source: "fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            })",
																				Start: ast.Position{
																					Column: 13,
																					Line:   69,
																				},
																			},
																		},
																		Comma: nil,
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 15,
																						Line:   69,
																					},
																					File:   "monitor.flux",
																					Source: "fn",
																					Start: ast.Position{
																						Column: 13,
																						Line:   69,
																					},
																				},
																			},
																			Name: "fn",
																		},
																		Separator: nil,
																		Value: &ast.FunctionExpression{
																			Arrow: nil,
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 15,
																						Line:   80,
																					},
																					File:   "monitor.flux",
																					Source: "(r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            })",
																					Start: ast.Position{
																						Column: 17,
																						Line:   69,
																					},
																				},
																			},
																			Body: &ast.ParenExpression{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 15,
																							Line:   80,
																						},
																						File:   "monitor.flux",
																						Source: "({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            })",
																						Start: ast.Position{
																							Column: 24,
																							Line:   69,
																						},
																					},
																				},
																				Expression: &ast.ObjectExpression{
																					BaseNode: ast.BaseNode{
																						Comments: nil,
																						Errors:   nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 14,
																								Line:   80,
																							},
																							File:   "monitor.flux",
																							Source: "{r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }",
																							Start: ast.Position{
																								Column: 25,
																								Line:   69,
																							},
																						},
																					},
																					Lbrace: nil,
																					Properties: []*ast.Property{&ast.Property{
																						BaseNode: ast.BaseNode{
																							Comments: nil,
																							Errors:   nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 22,
																									Line:   79,
																								},
																								File:   "monitor.flux",
																								Source: "level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0",
																								Start: ast.Position{
																									Column: 17,
																									Line:   70,
																								},
																							},
																						},
																						Comma: nil,
																						Key: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Comments: nil,
																								Errors:   nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 28,
																										Line:   70,
																									},
																									File:   "monitor.flux",
																									Source: "level_value",
																									Start: ast.Position{
																										Column: 17,
																										Line:   70,
																									},
																								},
																							},
																							Name: "level_value",
																						},
																						Separator: nil,
																						Value: &ast.ConditionalExpression{
																							Alternate: &ast.ConditionalExpression{
																								Alternate: &ast.ConditionalExpression{
																									Alternate: &ast.ConditionalExpression{
																										Alternate: &ast.IntegerLiteral{
																											BaseNode: ast.BaseNode{
																												Comments: nil,
																												Errors:   nil,
																												Loc: &ast.SourceLocation{
																													End: ast.Position{
																														Column: 22,
																														Line:   79,
																													},
																													File:   "monitor.flux",
																													Source: "0",
																													Start: ast.Position{
																														Column: 21,
																														Line:   79,
																													},
																												},
																											},
																											Value: int64(0),
																										},
																										BaseNode: ast.BaseNode{
																											Comments: nil,
																											Errors:   nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 22,
																													Line:   79,
																												},
																												File:   "monitor.flux",
																												Source: "if r._level == levelOK then\n                    1\n                else\n                    0",
																												Start: ast.Position{
																													Column: 22,
																													Line:   76,
																												},
																											},
																										},
																										Consequent: &ast.IntegerLiteral{
																											BaseNode: ast.BaseNode{
																												Comments: nil,
																												Errors:   nil,
																												Loc: &ast.SourceLocation{
																													End: ast.Position{
																														Column: 22,
																														Line:   77,
																													},
																													File:   "monitor.flux",
																													Source: "1",
																													Start: ast.Position{
																														Column: 21,
																														Line:   77,
																													},
																												},
																											},
																											Value: int64(1),
																										},
																										Test: &ast.BinaryExpression{
																											BaseNode: ast.BaseNode{
																												Comments: nil,
																												Errors:   nil,
																												Loc: &ast.SourceLocation{
																													End: ast.Position{
																														Column: 44,
																														Line:   76,
																													},
																													File:   "monitor.flux",
																													Source: "r._level == levelOK",
																													Start: ast.Position{
																														Column: 25,
																														Line:   76,
																													},
																												},
																											},
																											Left: &ast.MemberExpression{
																												BaseNode: ast.BaseNode{
																													Comments: nil,
																													Errors:   nil,
																													Loc: &ast.SourceLocation{
																														End: ast.Position{
																															Column: 33,
																															Line:   76,
																														},
																														File:   "monitor.flux",
																														Source: "r._level",
																														Start: ast.Position{
																															Column: 25,
																															Line:   76,
																														},
																													},
																												},
																												Lbrack: nil,
																												Object: &ast.Identifier{
																													BaseNode: ast.BaseNode{
																														Comments: nil,
																														Errors:   nil,
																														Loc: &ast.SourceLocation{
																															End: ast.Position{
																																Column: 26,
																																Line:   76,
																															},
																															File:   "monitor.flux",
																															Source: "r",
																															Start: ast.Position{
																																Column: 25,
																																Line:   76,
																															},
																														},
																													},
																													Name: "r",
																												},
																												Property: &ast.Identifier{
																													BaseNode: ast.BaseNode{
																														Comments: nil,
																														Errors:   nil,
																														Loc: &ast.SourceLocation{
																															End: ast.Position{
																																Column: 33,
																																Line:   76,
																															},
																															File:   "monitor.flux",
																															Source: "_level",
																															Start: ast.Position{
																																Column: 27,
																																Line:   76,
																															},
																														},
																													},
																													Name: "_level",
																												},
																												Rbrack: nil,
																											},
																											Operator: 17,
																											Right: &ast.Identifier{
																												BaseNode: ast.BaseNode{
																													Comments: nil,
																													Errors:   nil,
																													Loc: &ast.SourceLocation{
																														End: ast.Position{
																															Column: 44,
																															Line:   76,
																														},
																														File:   "monitor.flux",
																														Source: "levelOK",
																														Start: ast.Position{
																															Column: 37,
																															Line:   76,
																														},
																													},
																												},
																												Name: "levelOK",
																											},
																										},
																										Tk_else: nil,
																										Tk_if:   nil,
																										Tk_then: nil,
																									},
																									BaseNode: ast.BaseNode{
																										Comments: nil,
																										Errors:   nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 22,
																												Line:   79,
																											},
																											File:   "monitor.flux",
																											Source: "if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0",
																											Start: ast.Position{
																												Column: 22,
																												Line:   74,
																											},
																										},
																									},
																									Consequent: &ast.IntegerLiteral{
																										BaseNode: ast.BaseNode{
																											Comments: nil,
																											Errors:   nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 22,
																													Line:   75,
																												},
																												File:   "monitor.flux",
																												Source: "2",
																												Start: ast.Position{
																													Column: 21,
																													Line:   75,
																												},
																											},
																										},
																										Value: int64(2),
																									},
																									Test: &ast.BinaryExpression{
																										BaseNode: ast.BaseNode{
																											Comments: nil,
																											Errors:   nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 46,
																													Line:   74,
																												},
																												File:   "monitor.flux",
																												Source: "r._level == levelInfo",
																												Start: ast.Position{
																													Column: 25,
																													Line:   74,
																												},
																											},
																										},
																										Left: &ast.MemberExpression{
																											BaseNode: ast.BaseNode{
																												Comments: nil,
																												Errors:   nil,
																												Loc: &ast.SourceLocation{
																													End: ast.Position{
																														Column: 33,
																														Line:   74,
																													},
																													File:   "monitor.flux",
																													Source: "r._level",
																													Start: ast.Position{
																														Column: 25,
																														Line:   74,
																													},
																												},
																											},
																											Lbrack: nil,
																											Object: &ast.Identifier{
																												BaseNode: ast.BaseNode{
																													Comments: nil,
																													Errors:   nil,
																													Loc: &ast.SourceLocation{
																														End: ast.Position{
																															Column: 26,
																															Line:   74,
																														},
																														File:   "monitor.flux",
																														Source: "r",
																														Start: ast.Position{
																															Column: 25,
																															Line:   74,
																														},
																													},
																												},
																												Name: "r",
																											},
																											Property: &ast.Identifier{
																												BaseNode: ast.BaseNode{
																													Comments: nil,
																													Errors:   nil,
																													Loc: &ast.SourceLocation{
																														End: ast.Position{
																															Column: 33,
																															Line:   74,
																														},
																														File:   "monitor.flux",
																														Source: "_level",
																														Start: ast.Position{
																															Column: 27,
																															Line:   74,
																														},
																													},
																												},
																												Name: "_level",
																											},
																											Rbrack: nil,
																										},
																										Operator: 17,
																										Right: &ast.Identifier{
																											BaseNode: ast.BaseNode{
																												Comments: nil,
																												Errors:   nil,
																												Loc: &ast.SourceLocation{
																													End: ast.Position{
																														Column: 46,
																														Line:   74,
																													},
																													File:   "monitor.flux",
																													Source: "levelInfo",
																													Start: ast.Position{
																														Column: 37,
																														Line:   74,
																													},
																												},
																											},
																											Name: "levelInfo",
																										},
																									},
																									Tk_else: nil,
																									Tk_if:   nil,
																									Tk_then: nil,
																								},
																								BaseNode: ast.BaseNode{
																									Comments: nil,
																									Errors:   nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 22,
																											Line:   79,
																										},
																										File:   "monitor.flux",
																										Source: "if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0",
																										Start: ast.Position{
																											Column: 22,
																											Line:   72,
																										},
																									},
																								},
																								Consequent: &ast.IntegerLiteral{
																									BaseNode: ast.BaseNode{
																										Comments: nil,
																										Errors:   nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 22,
																												Line:   73,
																											},
																											File:   "monitor.flux",
																											Source: "3",
																											Start: ast.Position{
																												Column: 21,
																												Line:   73,
																											},
																										},
																									},
																									Value: int64(3),
																								},
																								Test: &ast.BinaryExpression{
																									BaseNode: ast.BaseNode{
																										Comments: nil,
																										Errors:   nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 46,
																												Line:   72,
																											},
																											File:   "monitor.flux",
																											Source: "r._level == levelWarn",
																											Start: ast.Position{
																												Column: 25,
																												Line:   72,
																											},
																										},
																									},
																									Left: &ast.MemberExpression{
																										BaseNode: ast.BaseNode{
																											Comments: nil,
																											Errors:   nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 33,
																													Line:   72,
																												},
																												File:   "monitor.flux",
																												Source: "r._level",
																												Start: ast.Position{
																													Column: 25,
																													Line:   72,
																												},
																											},
																										},
																										Lbrack: nil,
																										Object: &ast.Identifier{
																											BaseNode: ast.BaseNode{
																												Comments: nil,
																												Errors:   nil,
																												Loc: &ast.SourceLocation{
																													End: ast.Position{
																														Column: 26,
																														Line:   72,
																													},
																													File:   "monitor.flux",
																													Source: "r",
																													Start: ast.Position{
																														Column: 25,
																														Line:   72,
																													},
																												},
																											},
																											Name: "r",
																										},
																										Property: &ast.Identifier{
																											BaseNode: ast.BaseNode{
																												Comments: nil,
																												Errors:   nil,
																												Loc: &ast.SourceLocation{
																													End: ast.Position{
																														Column: 33,
																														Line:   72,
																													},
																													File:   "monitor.flux",
																													Source: "_level",
																													Start: ast.Position{
																														Column: 27,
																														Line:   72,
																													},
																												},
																											},
																											Name: "_level",
																										},
																										Rbrack: nil,
																									},
																									Operator: 17,
																									Right: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Comments: nil,
																											Errors:   nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 46,
																													Line:   72,
																												},
																												File:   "monitor.flux",
																												Source: "levelWarn",
																												Start: ast.Position{
																													Column: 37,
																													Line:   72,
																												},
																											},
																										},
																										Name: "levelWarn",
																									},
																								},
																								Tk_else: nil,
																								Tk_if:   nil,
																								Tk_then: nil,
																							},
																							BaseNode: ast.BaseNode{
																								Comments: nil,
																								Errors:   nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 22,
																										Line:   79,
																									},
																									File:   "monitor.flux",
																									Source: "if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0",
																									Start: ast.Position{
																										Column: 30,
																										Line:   70,
																									},
																								},
																							},
																							Consequent: &ast.IntegerLiteral{
																								BaseNode: ast.BaseNode{
																									Comments: nil,
																									Errors:   nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 22,
																											Line:   71,
																										},
																										File:   "monitor.flux",
																										Source: "4",
																										Start: ast.Position{
																											Column: 21,
																											Line:   71,
																										},
																									},
																								},
																								Value: int64(4),
																							},
																							Test: &ast.BinaryExpression{
																								BaseNode: ast.BaseNode{
																									Comments: nil,
																									Errors:   nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 54,
																											Line:   70,
																										},
																										File:   "monitor.flux",
																										Source: "r._level == levelCrit",
																										Start: ast.Position{
																											Column: 33,
																											Line:   70,
																										},
																									},
																								},
																								Left: &ast.MemberExpression{
																									BaseNode: ast.BaseNode{
																										Comments: nil,
																										Errors:   nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 41,
																												Line:   70,
																											},
																											File:   "monitor.flux",
																											Source: "r._level",
																											Start: ast.Position{
																												Column: 33,
																												Line:   70,
																											},
																										},
																									},
																									Lbrack: nil,
																									Object: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Comments: nil,
																											Errors:   nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 34,
																													Line:   70,
																												},
																												File:   "monitor.flux",
																												Source: "r",
																												Start: ast.Position{
																													Column: 33,
																													Line:   70,
																												},
																											},
																										},
																										Name: "r",
																									},
																									Property: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Comments: nil,
																											Errors:   nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 41,
																													Line:   70,
																												},
																												File:   "monitor.flux",
																												Source: "_level",
																												Start: ast.Position{
																													Column: 35,
																													Line:   70,
																												},
																											},
																										},
																										Name: "_level",
																									},
																									Rbrack: nil,
																								},
																								Operator: 17,
																								Right: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Comments: nil,
																										Errors:   nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 54,
																												Line:   70,
																											},
																											File:   "monitor.flux",
																											Source: "levelCrit",
																											Start: ast.Position{
																												Column: 45,
																												Line:   70,
																											},
																										},
																									},
																									Name: "levelCrit",
																								},
																							},
																							Tk_else: nil,
																							Tk_if:   nil,
																							Tk_then: nil,
																						},
																					}},
																					Rbrace: nil,
																					With: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Comments: nil,
																							Errors:   nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 27,
																									Line:   69,
																								},
																								File:   "monitor.flux",
																								Source: "r",
																								Start: ast.Position{
																									Column: 26,
																									Line:   69,
																								},
																							},
																						},
																						Name: "r",
																					},
																				},
																				Lparen: nil,
																				Rparen: nil,
																			},
																			Lparen: nil,
																			Params: []*ast.Property{&ast.Property{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 19,
																							Line:   69,
																						},
																						File:   "monitor.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 18,
																							Line:   69,
																						},
																					},
																				},
																				Comma: nil,
																				Key: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Comments: nil,
																						Errors:   nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 19,
																								Line:   69,
																							},
																							File:   "monitor.flux",
																							Source: "r",
																							Start: ast.Position{
																								Column: 18,
																								Line:   69,
																							},
																						},
																					},
																					Name: "r",
																				},
																				Separator: nil,
																				Value:     nil,
																			}},
																			Rparan: nil,
																		},
																	}},
																	Rbrace: nil,
																	With:   nil,
																}},
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 10,
																			Line:   81,
																		},
																		File:   "monitor.flux",
																		Source: "map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )",
																		Start: ast.Position{
																			Column: 12,
																			Line:   68,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 15,
																				Line:   68,
																			},
																			File:   "monitor.flux",
																			Source: "map",
																			Start: ast.Position{
																				Column: 12,
																				Line:   68,
																			},
																		},
																	},
																	Name: "map",
																},
																Lparen: nil,
																Rparen: nil,
															},
														},
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 65,
																	Line:   82,
																},
																File:   "monitor.flux",
																Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")",
																Start: ast.Position{
																	Column: 12,
																	Line:   67,
																},
															},
														},
														Call: &ast.CallExpression{
															Arguments: []ast.Expression{&ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 64,
																			Line:   82,
																		},
																		File:   "monitor.flux",
																		Source: "column: \"_level\", as: \"____temp_level____\"",
																		Start: ast.Position{
																			Column: 22,
																			Line:   82,
																		},
																	},
																},
																Lbrace: nil,
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 38,
																				Line:   82,
																			},
																			File:   "monitor.flux",
																			Source: "column: \"_level\"",
																			Start: ast.Position{
																				Column: 22,
																				Line:   82,
																			},
																		},
																	},
																	Comma: nil,
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 28,
																					Line:   82,
																				},
																				File:   "monitor.flux",
																				Source: "column",
																				Start: ast.Position{
																					Column: 22,
																					Line:   82,
																				},
																			},
																		},
																		Name: "column",
																	},
																	Separator: nil,
																	Value: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 38,
																					Line:   82,
																				},
																				File:   "monitor.flux",
																				Source: "\"_level\"",
																				Start: ast.Position{
																					Column: 30,
																					Line:   82,
																				},
																			},
																		},
																		Value: "_level",
																	},
																}, &ast.Property{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 64,
																				Line:   82,
																			},
																			File:   "monitor.flux",
																			Source: "as: \"____temp_level____\"",
																			Start: ast.Position{
																				Column: 40,
																				Line:   82,
																			},
																		},
																	},
																	Comma: nil,
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 42,
																					Line:   82,
																				},
																				File:   "monitor.flux",
																				Source: "as",
																				Start: ast.Position{
																					Column: 40,
																					Line:   82,
																				},
																			},
																		},
																		Name: "as",
																	},
																	Separator: nil,
																	Value: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 64,
																					Line:   82,
																				},
																				File:   "monitor.flux",
																				Source: "\"____temp_level____\"",
																				Start: ast.Position{
																					Column: 44,
																					Line:   82,
																				},
																			},
																		},
																		Value: "____temp_level____",
																	},
																}},
																Rbrace: nil,
																With:   nil,
															}},
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 65,
																		Line:   82,
																	},
																	File:   "monitor.flux",
																	Source: "duplicate(column: \"_level\", as: \"____temp_level____\")",
																	Start: ast.Position{
																		Column: 12,
																		Line:   82,
																	},
																},
															},
															Callee: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 21,
																			Line:   82,
																		},
																		File:   "monitor.flux",
																		Source: "duplicate",
																		Start: ast.Position{
																			Column: 12,
																			Line:   82,
																		},
																	},
																},
																Name: "duplicate",
															},
															Lparen: nil,
															Rparen: nil,
														},
													},
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   83,
															},
															File:   "monitor.flux",
															Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])",
															Start: ast.Position{
																Column: 12,
																Line:   67,
															},
														},
													},
													Call: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   83,
																	},
																	File:   "monitor.flux",
																	Source: "columns: [\"_level\"]",
																	Start: ast.Position{
																		Column: 17,
																		Line:   83,
																	},
																},
															},
															Lbrace: nil,
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 36,
																			Line:   83,
																		},
																		File:   "monitor.flux",
																		Source: "columns: [\"_level\"]",
																		Start: ast.Position{
																			Column: 17,
																			Line:   83,
																		},
																	},
																},
																Comma: nil,
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 24,
																				Line:   83,
																			},
																			File:   "monitor.flux",
																			Source: "columns",
																			Start: ast.Position{
																				Column: 17,
																				Line:   83,
																			},
																		},
																	},
																	Name: "columns",
																},
																Separator: nil,
																Value: &ast.ArrayExpression{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 36,
																				Line:   83,
																			},
																			File:   "monitor.flux",
																			Source: "[\"_level\"]",
																			Start: ast.Position{
																				Column: 26,
																				Line:   83,
																			},
																		},
																	},
																	Elements: []ast.Expression{&ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 35,
																					Line:   83,
																				},
																				File:   "monitor.flux",
																				Source: "\"_level\"",
																				Start: ast.Position{
																					Column: 27,
																					Line:   83,
																				},
																			},
																		},
																		Value: "_level",
																	}},
																	Lbrack: nil,
																	Rbrack: nil,
																},
															}},
															Rbrace: nil,
															With:   nil,
														}},
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   83,
																},
																File:   "monitor.flux",
																Source: "drop(columns: [\"_level\"])",
																Start: ast.Position{
																	Column: 12,
																	Line:   83,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 16,
																		Line:   83,
																	},
																	File:   "monitor.flux",
																	Source: "drop",
																	Start: ast.Position{
																		Column: 12,
																		Line:   83,
																	},
																},
															},
															Name: "drop",
														},
														Lparen: nil,
														Rparen: nil,
													},
												},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 61,
															Line:   84,
														},
														File:   "monitor.flux",
														Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})",
														Start: ast.Position{
															Column: 12,
															Line:   67,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   84,
																},
																File:   "monitor.flux",
																Source: "columns: {\"____temp_level____\": \"_level\"}",
																Start: ast.Position{
																	Column: 19,
																	Line:   84,
																},
															},
														},
														Lbrace: nil,
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 60,
																		Line:   84,
																	},
																	File:   "monitor.flux",
																	Source: "columns: {\"____temp_level____\": \"_level\"}",
																	Start: ast.Position{
																		Column: 19,
																		Line:   84,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 26,
																			Line:   84,
																		},
																		File:   "monitor.flux",
																		Source: "columns",
																		Start: ast.Position{
																			Column: 19,
																			Line:   84,
																		},
																	},
																},
																Name: "columns",
															},
															Separator: nil,
															Value: &ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 60,
																			Line:   84,
																		},
																		File:   "monitor.flux",
																		Source: "{\"____temp_level____\": \"_level\"}",
																		Start: ast.Position{
																			Column: 28,
																			Line:   84,
																		},
																	},
																},
																Lbrace: nil,
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 59,
																				Line:   84,
																			},
																			File:   "monitor.flux",
																			Source: "\"____temp_level____\": \"_level\"",
																			Start: ast.Position{
																				Column: 29,
																				Line:   84,
																			},
																		},
																	},
																	Comma: nil,
																	Key: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 49,
																					Line:   84,
																				},
																				File:   "monitor.flux",
																				Source: "\"____temp_level____\"",
																				Start: ast.Position{
																					Column: 29,
																					Line:   84,
																				},
																			},
																		},
																		Value: "____temp_level____",
																	},
																	Separator: nil,
																	Value: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 59,
																					Line:   84,
																				},
																				File:   "monitor.flux",
																				Source: "\"_level\"",
																				Start: ast.Position{
																					Column: 51,
																					Line:   84,
																				},
																			},
																		},
																		Value: "_level",
																	},
																}},
																Rbrace: nil,
																With:   nil,
															},
														}},
														Rbrace: nil,
														With:   nil,
													}},
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 61,
																Line:   84,
															},
															File:   "monitor.flux",
															Source: "rename(columns: {\"____temp_level____\": \"_level\"})",
															Start: ast.Position{
																Column: 12,
																Line:   84,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   84,
																},
																File:   "monitor.flux",
																Source: "rename",
																Start: ast.Position{
																	Column: 12,
																	Line:   84,
																},
															},
														},
														Name: "rename",
													},
													Lparen: nil,
													Rparen: nil,
												},
											},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 61,
														Line:   85,
													},
													File:   "monitor.flux",
													Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)",
													Start: ast.Position{
														Column: 12,
														Line:   67,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 60,
																Line:   85,
															},
															File:   "monitor.flux",
															Source: "columns: [\"_source_timestamp\"], desc: false",
															Start: ast.Position{
																Column: 17,
																Line:   85,
															},
														},
													},
													Lbrace: nil,
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   85,
																},
																File:   "monitor.flux",
																Source: "columns: [\"_source_timestamp\"]",
																Start: ast.Position{
																	Column: 17,
																	Line:   85,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 24,
																		Line:   85,
																	},
																	File:   "monitor.flux",
																	Source: "columns",
																	Start: ast.Position{
																		Column: 17,
																		Line:   85,
																	},
																},
															},
															Name: "columns",
														},
														Separator: nil,
														Value: &ast.ArrayExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   85,
																	},
																	File:   "monitor.flux",
																	Source: "[\"_source_timestamp\"]",
																	Start: ast.Position{
																		Column: 26,
																		Line:   85,
																	},
																},
															},
															Elements: []ast.Expression{&ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 46,
																			Line:   85,
																		},
																		File:   "monitor.flux",
																		Source: "\"_source_timestamp\"",
																		Start: ast.Position{
																			Column: 27,
																			Line:   85,
																		},
																	},
																},
																Value: "_source_timestamp",
															}},
															Lbrack: nil,
															Rbrack: nil,
														},
													}, &ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 60,
																	Line:   85,
																},
																File:   "monitor.flux",
																Source: "desc: false",
																Start: ast.Position{
																	Column: 49,
																	Line:   85,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 53,
																		Line:   85,
																	},
																	File:   "monitor.flux",
																	Source: "desc",
																	Start: ast.Position{
																		Column: 49,
																		Line:   85,
																	},
																},
															},
															Name: "desc",
														},
														Separator: nil,
														Value: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 60,
																		Line:   85,
																	},
																	File:   "monitor.flux",
																	Source: "false",
																	Start: ast.Position{
																		Column: 55,
																		Line:   85,
																	},
																},
															},
															Name: "false",
														},
													}},
													Rbrace: nil,
													With:   nil,
												}},
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 61,
															Line:   85,
														},
														File:   "monitor.flux",
														Source: "sort(columns: [\"_source_timestamp\"], desc: false)",
														Start: ast.Position{
															Column: 12,
															Line:   85,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 16,
																Line:   85,
															},
															File:   "monitor.flux",
															Source: "sort",
															Start: ast.Position{
																Column: 12,
																Line:   85,
															},
														},
													},
													Name: "sort",
												},
												Lparen: nil,
												Rparen: nil,
											},
										},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   86,
												},
												File:   "monitor.flux",
												Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])",
												Start: ast.Position{
													Column: 12,
													Line:   67,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   86,
														},
														File:   "monitor.flux",
														Source: "columns: [\"level_value\"]",
														Start: ast.Position{
															Column: 23,
															Line:   86,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   86,
															},
															File:   "monitor.flux",
															Source: "columns: [\"level_value\"]",
															Start: ast.Position{
																Column: 23,
																Line:   86,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   86,
																},
																File:   "monitor.flux",
																Source: "columns",
																Start: ast.Position{
																	Column: 23,
																	Line:   86,
																},
															},
														},
														Name: "columns",
													},
													Separator: nil,
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   86,
																},
																File:   "monitor.flux",
																Source: "[\"level_value\"]",
																Start: ast.Position{
																	Column: 32,
																	Line:   86,
																},
															},
														},
														Elements: []ast.Expression{&ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   86,
																	},
																	File:   "monitor.flux",
																	Source: "\"level_value\"",
																	Start: ast.Position{
																		Column: 33,
																		Line:   86,
																	},
																},
															},
															Value: "level_value",
														}},
														Lbrack: nil,
														Rbrack: nil,
													},
												}},
												Rbrace: nil,
												With:   nil,
											}},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   86,
													},
													File:   "monitor.flux",
													Source: "difference(columns: [\"level_value\"])",
													Start: ast.Position{
														Column: 12,
														Line:   86,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   86,
														},
														File:   "monitor.flux",
														Source: "difference",
														Start: ast.Position{
															Column: 12,
															Line:   86,
														},
													},
												},
												Name: "difference",
											},
											Lparen: nil,
											Rparen: nil,
										},
									},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   87,
											},
											File:   "monitor.flux",
											Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value != 0)",
											Start: ast.Position{
												Column: 12,
												Line:   67,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   87,
													},
													File:   "monitor.flux",
													Source: "fn: (r) => r.level_value != 0",
													Start: ast.Position{
														Column: 19,
														Line:   87,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   87,
														},
														File:   "monitor.flux",
														Source: "fn: (r) => r.level_value != 0",
														Start: ast.Position{
															Column: 19,
															Line:   87,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   87,
															},
															File:   "monitor.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 19,
																Line:   87,
															},
														},
													},
													Name: "fn",
												},
												Separator: nil,
												Value: &ast.FunctionExpression{
													Arrow: nil,
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   87,
															},
															File:   "monitor.flux",
															Source: "(r) => r.level_value != 0",
															Start: ast.Position{
																Column: 23,
																Line:   87,
															},
														},
													},
													Body: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 48,
																	Line:   87,
																},
																File:   "monitor.flux",
																Source: "r.level_value != 0",
																Start: ast.Position{
																	Column: 30,
																	Line:   87,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   87,
																	},
																	File:   "monitor.flux",
																	Source: "r.level_value",
																	Start: ast.Position{
																		Column: 30,
																		Line:   87,
																	},
																},
															},
															Lbrack: nil,
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 31,
																			Line:   87,
																		},
																		File:   "monitor.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 30,
																			Line:   87,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 43,
																			Line:   87,
																		},
																		File:   "monitor.flux",
																		Source: "level_value",
																		Start: ast.Position{
																			Column: 32,
																			Line:   87,
																		},
																	},
																},
																Name: "level_value",
															},
															Rbrack: nil,
														},
														Operator: 18,
														Right: &ast.IntegerLiteral{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 48,
																		Line:   87,
																	},
																	File:   "monitor.flux",
																	Source: "0",
																	Start: ast.Position{
																		Column: 47,
																		Line:   87,
																	},
																},
															},
															Value: int64(0),
														},
													},
													Lparen: nil,
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 25,
																	Line:   87,
																},
																File:   "monitor.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 24,
																	Line:   87,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 25,
																		Line:   87,
																	},
																	File:   "monitor.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 24,
																		Line:   87,
																	},
																},
															},
															Name: "r",
														},
														Separator: nil,
														Value:     nil,
													}},
													Rparan: nil,
												},
											}},
											Rbrace: nil,
											With:   nil,
										}},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   87,
												},
												File:   "monitor.flux",
												Source: "filter(fn: (r) => r.level_value != 0)",
												Start: ast.Position{
													Column: 12,
													Line:   87,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   87,
													},
													File:   "monitor.flux",
													Source: "filter",
													Start: ast.Position{
														Column: 12,
														Line:   87,
													},
												},
											},
											Name: "filter",
										},
										Lparen: nil,
										Rparen: nil,
									},
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   88,
										},
										File:   "monitor.flux",
										Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value != 0)\n        |> drop(columns: [\"level_value\"])",
										Start: ast.Position{
											Column: 12,
											Line:   67,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   88,
												},
												File:   "monitor.flux",
												Source: "columns: [\"level_value\"]",
												Start: ast.Position{
													Column: 17,
													Line:   88,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   88,
													},
													File:   "monitor.flux",
													Source: "columns: [\"level_value\"]",
													Start: ast.Position{
														Column: 17,
														Line:   88,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   88,
														},
														File:   "monitor.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 17,
															Line:   88,
														},
													},
												},
												Name: "columns",
											},
											Separator: nil,
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   88,
														},
														File:   "monitor.flux",
														Source: "[\"level_value\"]",
														Start: ast.Position{
															Column: 26,
															Line:   88,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   88,
															},
															File:   "monitor.flux",
															Source: "\"level_value\"",
															Start: ast.Position{
																Column: 27,
																Line:   88,
															},
														},
													},
													Value: "level_value",
												}},
												Lbrack: nil,
												Rbrack: nil,
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   88,
											},
											File:   "monitor.flux",
											Source: "drop(columns: [\"level_value\"])",
											Start: ast.Position{
												Column: 12,
												Line:   88,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   88,
												},
												File:   "monitor.flux",
												Source: "drop",
												Start: ast.Position{
													Column: 12,
													Line:   88,
												},
											},
										},
										Name: "drop",
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   89,
									},
									File:   "monitor.flux",
									Source: "tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value != 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])",
									Start: ast.Position{
										Column: 12,
										Line:   67,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   89,
											},
											File:   "monitor.flux",
											Source: "mode: \"extend\", columns: [\"_level\"]",
											Start: ast.Position{
												Column: 31,
												Line:   89,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   89,
												},
												File:   "monitor.flux",
												Source: "mode: \"extend\"",
												Start: ast.Position{
													Column: 31,
													Line:   89,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   89,
													},
													File:   "monitor.flux",
													Source: "mode",
													Start: ast.Position{
														Column: 31,
														Line:   89,
													},
												},
											},
											Name: "mode",
										},
										Separator: nil,
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   89,
													},
													File:   "monitor.flux",
													Source: "\"extend\"",
													Start: ast.Position{
														Column: 37,
														Line:   89,
													},
												},
											},
											Value: "extend",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   89,
												},
												File:   "monitor.flux",
												Source: "columns: [\"_level\"]",
												Start: ast.Position{
													Column: 47,
													Line:   89,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 54,
														Line:   89,
													},
													File:   "monitor.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 47,
														Line:   89,
													},
												},
											},
											Name: "columns",
										},
										Separator: nil,
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 66,
														Line:   89,
													},
													File:   "monitor.flux",
													Source: "[\"_level\"]",
													Start: ast.Position{
														Column: 56,
														Line:   89,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 65,
															Line:   89,
														},
														File:   "monitor.flux",
														Source: "\"_level\"",
														Start: ast.Position{
															Column: 57,
															Line:   89,
														},
													},
												},
												Value: "_level",
											}},
											Lbrack: nil,
											Rbrack: nil,
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   89,
										},
										File:   "monitor.flux",
										Source: "experimental.group(mode: \"extend\", columns: [\"_level\"])",
										Start: ast.Position{
											Column: 12,
											Line:   89,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   89,
											},
											File:   "monitor.flux",
											Source: "experimental.group",
											Start: ast.Position{
												Column: 12,
												Line:   89,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   89,
												},
												File:   "monitor.flux",
												Source: "experimental",
												Start: ast.Position{
													Column: 12,
													Line:   89,
												},
											},
										},
										Name: "experimental",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   89,
												},
												File:   "monitor.flux",
												Source: "group",
												Start: ast.Position{
													Column: 25,
													Line:   89,
												},
											},
										},
										Name: "group",
									},
									Rbrack: nil,
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 67,
									Line:   89,
								},
								File:   "monitor.flux",
								Source: "return tables\n        |> map(\n            fn: (r) => ({r with\n                level_value: if r._level == levelCrit then\n                    4\n                else if r._level == levelWarn then\n                    3\n                else if r._level == levelInfo then\n                    2\n                else if r._level == levelOK then\n                    1\n                else\n                    0,\n            }),\n        )\n        |> duplicate(column: \"_level\", as: \"____temp_level____\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"____temp_level____\": \"_level\"})\n        |> sort(columns: [\"_source_timestamp\"], desc: false)\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value != 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])",
								Start: ast.Position{
									Column: 5,
									Line:   67,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   66,
							},
							File:   "monitor.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 21,
								Line:   66,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   66,
								},
								File:   "monitor.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 21,
									Line:   66,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   66,
							},
							File:   "monitor.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 28,
								Line:   66,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   101,
					},
					File:   "monitor.flux",
					Source: "stateChanges = (fromLevel=\"any\", toLevel=\"any\", tables=<-) => {\n    return if fromLevel == \"any\" and toLevel == \"any\" then\n        tables |> stateChangesOnly()\n    else\n        tables |> _stateChanges(fromLevel: fromLevel, toLevel: toLevel)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   96,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// StateChanges takes a stream of tables, fromLevel, and toLevel and returns\n"}, ast.Comment{Text: "// a stream of tables where status has gone from fromLevel to toLevel.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// StateChanges only operates on data with data where r._level exists.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   96,
						},
						File:   "monitor.flux",
						Source: "stateChanges",
						Start: ast.Position{
							Column: 1,
							Line:   96,
						},
					},
				},
				Name: "stateChanges",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   101,
						},
						File:   "monitor.flux",
						Source: "(fromLevel=\"any\", toLevel=\"any\", tables=<-) => {\n    return if fromLevel == \"any\" and toLevel == \"any\" then\n        tables |> stateChangesOnly()\n    else\n        tables |> _stateChanges(fromLevel: fromLevel, toLevel: toLevel)\n}",
						Start: ast.Position{
							Column: 16,
							Line:   96,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   101,
							},
							File:   "monitor.flux",
							Source: "{\n    return if fromLevel == \"any\" and toLevel == \"any\" then\n        tables |> stateChangesOnly()\n    else\n        tables |> _stateChanges(fromLevel: fromLevel, toLevel: toLevel)\n}",
							Start: ast.Position{
								Column: 63,
								Line:   96,
							},
						},
					},
					Body: []ast.Statement{&ast.ReturnStatement{
						Argument: &ast.ConditionalExpression{
							Alternate: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   100,
											},
											File:   "monitor.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 9,
												Line:   100,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 72,
											Line:   100,
										},
										File:   "monitor.flux",
										Source: "tables |> _stateChanges(fromLevel: fromLevel, toLevel: toLevel)",
										Start: ast.Position{
											Column: 9,
											Line:   100,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 71,
													Line:   100,
												},
												File:   "monitor.flux",
												Source: "fromLevel: fromLevel, toLevel: toLevel",
												Start: ast.Position{
													Column: 33,
													Line:   100,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 53,
														Line:   100,
													},
													File:   "monitor.flux",
													Source: "fromLevel: fromLevel",
													Start: ast.Position{
														Column: 33,
														Line:   100,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   100,
														},
														File:   "monitor.flux",
														Source: "fromLevel",
														Start: ast.Position{
															Column: 33,
															Line:   100,
														},
													},
												},
												Name: "fromLevel",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 53,
															Line:   100,
														},
														File:   "monitor.flux",
														Source: "fromLevel",
														Start: ast.Position{
															Column: 44,
															Line:   100,
														},
													},
												},
												Name: "fromLevel",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 71,
														Line:   100,
													},
													File:   "monitor.flux",
													Source: "toLevel: toLevel",
													Start: ast.Position{
														Column: 55,
														Line:   100,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 62,
															Line:   100,
														},
														File:   "monitor.flux",
														Source: "toLevel",
														Start: ast.Position{
															Column: 55,
															Line:   100,
														},
													},
												},
												Name: "toLevel",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 71,
															Line:   100,
														},
														File:   "monitor.flux",
														Source: "toLevel",
														Start: ast.Position{
															Column: 64,
															Line:   100,
														},
													},
												},
												Name: "toLevel",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 72,
												Line:   100,
											},
											File:   "monitor.flux",
											Source: "_stateChanges(fromLevel: fromLevel, toLevel: toLevel)",
											Start: ast.Position{
												Column: 19,
												Line:   100,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 32,
													Line:   100,
												},
												File:   "monitor.flux",
												Source: "_stateChanges",
												Start: ast.Position{
													Column: 19,
													Line:   100,
												},
											},
										},
										Name: "_stateChanges",
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   100,
									},
									File:   "monitor.flux",
									Source: "if fromLevel == \"any\" and toLevel == \"any\" then\n        tables |> stateChangesOnly()\n    else\n        tables |> _stateChanges(fromLevel: fromLevel, toLevel: toLevel)",
									Start: ast.Position{
										Column: 12,
										Line:   97,
									},
								},
							},
							Consequent: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   98,
											},
											File:   "monitor.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 9,
												Line:   98,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   98,
										},
										File:   "monitor.flux",
										Source: "tables |> stateChangesOnly()",
										Start: ast.Position{
											Column: 9,
											Line:   98,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: nil,
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   98,
											},
											File:   "monitor.flux",
											Source: "stateChangesOnly()",
											Start: ast.Position{
												Column: 19,
												Line:   98,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   98,
												},
												File:   "monitor.flux",
												Source: "stateChangesOnly",
												Start: ast.Position{
													Column: 19,
													Line:   98,
												},
											},
										},
										Name: "stateChangesOnly",
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							Test: &ast.LogicalExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   97,
										},
										File:   "monitor.flux",
										Source: "fromLevel == \"any\" and toLevel == \"any\"",
										Start: ast.Position{
											Column: 15,
											Line:   97,
										},
									},
								},
								Left: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   97,
											},
											File:   "monitor.flux",
											Source: "fromLevel == \"any\"",
											Start: ast.Position{
												Column: 15,
												Line:   97,
											},
										},
									},
									Left: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   97,
												},
												File:   "monitor.flux",
												Source: "fromLevel",
												Start: ast.Position{
													Column: 15,
													Line:   97,
												},
											},
										},
										Name: "fromLevel",
									},
									Operator: 17,
									Right: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   97,
												},
												File:   "monitor.flux",
												Source: "\"any\"",
												Start: ast.Position{
													Column: 28,
													Line:   97,
												},
											},
										},
										Value: "any",
									},
								},
								Operator: 1,
								Right: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   97,
											},
											File:   "monitor.flux",
											Source: "toLevel == \"any\"",
											Start: ast.Position{
												Column: 38,
												Line:   97,
											},
										},
									},
									Left: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   97,
												},
												File:   "monitor.flux",
												Source: "toLevel",
												Start: ast.Position{
													Column: 38,
													Line:   97,
												},
											},
										},
										Name: "toLevel",
									},
									Operator: 17,
									Right: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   97,
												},
												File:   "monitor.flux",
												Source: "\"any\"",
												Start: ast.Position{
													Column: 49,
													Line:   97,
												},
											},
										},
										Value: "any",
									},
								},
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   100,
								},
								File:   "monitor.flux",
								Source: "return if fromLevel == \"any\" and toLevel == \"any\" then\n        tables |> stateChangesOnly()\n    else\n        tables |> _stateChanges(fromLevel: fromLevel, toLevel: toLevel)",
								Start: ast.Position{
									Column: 5,
									Line:   97,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   96,
							},
							File:   "monitor.flux",
							Source: "fromLevel=\"any\"",
							Start: ast.Position{
								Column: 17,
								Line:   96,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   96,
								},
								File:   "monitor.flux",
								Source: "fromLevel",
								Start: ast.Position{
									Column: 17,
									Line:   96,
								},
							},
						},
						Name: "fromLevel",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   96,
								},
								File:   "monitor.flux",
								Source: "\"any\"",
								Start: ast.Position{
									Column: 27,
									Line:   96,
								},
							},
						},
						Value: "any",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 47,
								Line:   96,
							},
							File:   "monitor.flux",
							Source: "toLevel=\"any\"",
							Start: ast.Position{
								Column: 34,
								Line:   96,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   96,
								},
								File:   "monitor.flux",
								Source: "toLevel",
								Start: ast.Position{
									Column: 34,
									Line:   96,
								},
							},
						},
						Name: "toLevel",
					},
					Separator: nil,
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   96,
								},
								File:   "monitor.flux",
								Source: "\"any\"",
								Start: ast.Position{
									Column: 42,
									Line:   96,
								},
							},
						},
						Value: "any",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 58,
								Line:   96,
							},
							File:   "monitor.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 49,
								Line:   96,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   96,
								},
								File:   "monitor.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 49,
									Line:   96,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 58,
								Line:   96,
							},
							File:   "monitor.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 56,
								Line:   96,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   116,
					},
					File:   "monitor.flux",
					Source: "notify = (tables=<-, endpoint, data) => tables\n    |> experimental.set(o: data)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n    |> map(\n        fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )\n    |> endpoint()\n    |> experimental.group(mode: \"extend\", columns: [\"_sent\"])\n    |> log()",
					Start: ast.Position{
						Column: 1,
						Line:   104,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// Notify will call the endpoint and log the results.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   104,
						},
						File:   "monitor.flux",
						Source: "notify",
						Start: ast.Position{
							Column: 1,
							Line:   104,
						},
					},
				},
				Name: "notify",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   116,
						},
						File:   "monitor.flux",
						Source: "(tables=<-, endpoint, data) => tables\n    |> experimental.set(o: data)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n    |> map(\n        fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )\n    |> endpoint()\n    |> experimental.group(mode: \"extend\", columns: [\"_sent\"])\n    |> log()",
						Start: ast.Position{
							Column: 10,
							Line:   104,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 47,
														Line:   104,
													},
													File:   "monitor.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 41,
														Line:   104,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   105,
												},
												File:   "monitor.flux",
												Source: "tables\n    |> experimental.set(o: data)",
												Start: ast.Position{
													Column: 41,
													Line:   104,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   105,
														},
														File:   "monitor.flux",
														Source: "o: data",
														Start: ast.Position{
															Column: 25,
															Line:   105,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 32,
																Line:   105,
															},
															File:   "monitor.flux",
															Source: "o: data",
															Start: ast.Position{
																Column: 25,
																Line:   105,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 26,
																	Line:   105,
																},
																File:   "monitor.flux",
																Source: "o",
																Start: ast.Position{
																	Column: 25,
																	Line:   105,
																},
															},
														},
														Name: "o",
													},
													Separator: nil,
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 32,
																	Line:   105,
																},
																File:   "monitor.flux",
																Source: "data",
																Start: ast.Position{
																	Column: 28,
																	Line:   105,
																},
															},
														},
														Name: "data",
													},
												}},
												Rbrace: nil,
												With:   nil,
											}},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   105,
													},
													File:   "monitor.flux",
													Source: "experimental.set(o: data)",
													Start: ast.Position{
														Column: 8,
														Line:   105,
													},
												},
											},
											Callee: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   105,
														},
														File:   "monitor.flux",
														Source: "experimental.set",
														Start: ast.Position{
															Column: 8,
															Line:   105,
														},
													},
												},
												Lbrack: nil,
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 20,
																Line:   105,
															},
															File:   "monitor.flux",
															Source: "experimental",
															Start: ast.Position{
																Column: 8,
																Line:   105,
															},
														},
													},
													Name: "experimental",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   105,
															},
															File:   "monitor.flux",
															Source: "set",
															Start: ast.Position{
																Column: 21,
																Line:   105,
															},
														},
													},
													Name: "set",
												},
												Rbrack: nil,
											},
											Lparen: nil,
											Rparen: nil,
										},
									},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 85,
												Line:   106,
											},
											File:   "monitor.flux",
											Source: "tables\n    |> experimental.set(o: data)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))",
											Start: ast.Position{
												Column: 41,
												Line:   104,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 84,
														Line:   106,
													},
													File:   "monitor.flux",
													Source: "mode: \"extend\", columns: experimental.objectKeys(o: data)",
													Start: ast.Position{
														Column: 27,
														Line:   106,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   106,
														},
														File:   "monitor.flux",
														Source: "mode: \"extend\"",
														Start: ast.Position{
															Column: 27,
															Line:   106,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   106,
															},
															File:   "monitor.flux",
															Source: "mode",
															Start: ast.Position{
																Column: 27,
																Line:   106,
															},
														},
													},
													Name: "mode",
												},
												Separator: nil,
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 41,
																Line:   106,
															},
															File:   "monitor.flux",
															Source: "\"extend\"",
															Start: ast.Position{
																Column: 33,
																Line:   106,
															},
														},
													},
													Value: "extend",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 84,
															Line:   106,
														},
														File:   "monitor.flux",
														Source: "columns: experimental.objectKeys(o: data)",
														Start: ast.Position{
															Column: 43,
															Line:   106,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 50,
																Line:   106,
															},
															File:   "monitor.flux",
															Source: "columns",
															Start: ast.Position{
																Column: 43,
																Line:   106,
															},
														},
													},
													Name: "columns",
												},
												Separator: nil,
												Value: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 83,
																	Line:   106,
																},
																File:   "monitor.flux",
																Source: "o: data",
																Start: ast.Position{
																	Column: 76,
																	Line:   106,
																},
															},
														},
														Lbrace: nil,
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 83,
																		Line:   106,
																	},
																	File:   "monitor.flux",
																	Source: "o: data",
																	Start: ast.Position{
																		Column: 76,
																		Line:   106,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 77,
																			Line:   106,
																		},
																		File:   "monitor.flux",
																		Source: "o",
																		Start: ast.Position{
																			Column: 76,
																			Line:   106,
																		},
																	},
																},
																Name: "o",
															},
															Separator: nil,
															Value: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 83,
																			Line:   106,
																		},
																		File:   "monitor.flux",
																		Source: "data",
																		Start: ast.Position{
																			Column: 79,
																			Line:   106,
																		},
																	},
																},
																Name: "data",
															},
														}},
														Rbrace: nil,
														With:   nil,
													}},
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 84,
																Line:   106,
															},
															File:   "monitor.flux",
															Source: "experimental.objectKeys(o: data)",
															Start: ast.Position{
																Column: 52,
																Line:   106,
															},
														},
													},
													Callee: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 75,
																	Line:   106,
																},
																File:   "monitor.flux",
																Source: "experimental.objectKeys",
																Start: ast.Position{
																	Column: 52,
																	Line:   106,
																},
															},
														},
														Lbrack: nil,
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 64,
																		Line:   106,
																	},
																	File:   "monitor.flux",
																	Source: "experimental",
																	Start: ast.Position{
																		Column: 52,
																		Line:   106,
																	},
																},
															},
															Name: "experimental",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 75,
																		Line:   106,
																	},
																	File:   "monitor.flux",
																	Source: "objectKeys",
																	Start: ast.Position{
																		Column: 65,
																		Line:   106,
																	},
																},
															},
															Name: "objectKeys",
														},
														Rbrack: nil,
													},
													Lparen: nil,
													Rparen: nil,
												},
											}},
											Rbrace: nil,
											With:   nil,
										}},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 85,
													Line:   106,
												},
												File:   "monitor.flux",
												Source: "experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))",
												Start: ast.Position{
													Column: 8,
													Line:   106,
												},
											},
										},
										Callee: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   106,
													},
													File:   "monitor.flux",
													Source: "experimental.group",
													Start: ast.Position{
														Column: 8,
														Line:   106,
													},
												},
											},
											Lbrack: nil,
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 20,
															Line:   106,
														},
														File:   "monitor.flux",
														Source: "experimental",
														Start: ast.Position{
															Column: 8,
															Line:   106,
														},
													},
												},
												Name: "experimental",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 26,
															Line:   106,
														},
														File:   "monitor.flux",
														Source: "group",
														Start: ast.Position{
															Column: 21,
															Line:   106,
														},
													},
												},
												Name: "group",
											},
											Rbrack: nil,
										},
										Lparen: nil,
										Rparen: nil,
									},
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   113,
										},
										File:   "monitor.flux",
										Source: "tables\n    |> experimental.set(o: data)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n    |> map(\n        fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )",
										Start: ast.Position{
											Column: 41,
											Line:   104,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   112,
												},
												File:   "monitor.flux",
												Source: "fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        })",
												Start: ast.Position{
													Column: 9,
													Line:   108,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   112,
													},
													File:   "monitor.flux",
													Source: "fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        })",
													Start: ast.Position{
														Column: 9,
														Line:   108,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   108,
														},
														File:   "monitor.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 9,
															Line:   108,
														},
													},
												},
												Name: "fn",
											},
											Separator: nil,
											Value: &ast.FunctionExpression{
												Arrow: nil,
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   112,
														},
														File:   "monitor.flux",
														Source: "(r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        })",
														Start: ast.Position{
															Column: 13,
															Line:   108,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 11,
																Line:   112,
															},
															File:   "monitor.flux",
															Source: "({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        })",
															Start: ast.Position{
																Column: 20,
																Line:   108,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 10,
																	Line:   112,
																},
																File:   "monitor.flux",
																Source: "{r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }",
																Start: ast.Position{
																	Column: 21,
																	Line:   108,
																},
															},
														},
														Lbrace: nil,
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   109,
																	},
																	File:   "monitor.flux",
																	Source: "_measurement: \"notifications\"",
																	Start: ast.Position{
																		Column: 13,
																		Line:   109,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   109,
																		},
																		File:   "monitor.flux",
																		Source: "_measurement",
																		Start: ast.Position{
																			Column: 13,
																			Line:   109,
																		},
																	},
																},
																Name: "_measurement",
															},
															Separator: nil,
															Value: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 42,
																			Line:   109,
																		},
																		File:   "monitor.flux",
																		Source: "\"notifications\"",
																		Start: ast.Position{
																			Column: 27,
																			Line:   109,
																		},
																	},
																},
																Value: "notifications",
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   110,
																	},
																	File:   "monitor.flux",
																	Source: "_status_timestamp: int(v: r._time)",
																	Start: ast.Position{
																		Column: 13,
																		Line:   110,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 30,
																			Line:   110,
																		},
																		File:   "monitor.flux",
																		Source: "_status_timestamp",
																		Start: ast.Position{
																			Column: 13,
																			Line:   110,
																		},
																	},
																},
																Name: "_status_timestamp",
															},
															Separator: nil,
															Value: &ast.CallExpression{
																Arguments: []ast.Expression{&ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 46,
																				Line:   110,
																			},
																			File:   "monitor.flux",
																			Source: "v: r._time",
																			Start: ast.Position{
																				Column: 36,
																				Line:   110,
																			},
																		},
																	},
																	Lbrace: nil,
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 46,
																					Line:   110,
																				},
																				File:   "monitor.flux",
																				Source: "v: r._time",
																				Start: ast.Position{
																					Column: 36,
																					Line:   110,
																				},
																			},
																		},
																		Comma: nil,
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 37,
																						Line:   110,
																					},
																					File:   "monitor.flux",
																					Source: "v",
																					Start: ast.Position{
																						Column: 36,
																						Line:   110,
																					},
																				},
																			},
																			Name: "v",
																		},
																		Separator: nil,
																		Value: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 46,
																						Line:   110,
																					},
																					File:   "monitor.flux",
																					Source: "r._time",
																					Start: ast.Position{
																						Column: 39,
																						Line:   110,
																					},
																				},
																			},
																			Lbrack: nil,
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 40,
																							Line:   110,
																						},
																						File:   "monitor.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 39,
																							Line:   110,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 46,
																							Line:   110,
																						},
																						File:   "monitor.flux",
																						Source: "_time",
																						Start: ast.Position{
																							Column: 41,
																							Line:   110,
																						},
																					},
																				},
																				Name: "_time",
																			},
																			Rbrack: nil,
																		},
																	}},
																	Rbrace: nil,
																	With:   nil,
																}},
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 47,
																			Line:   110,
																		},
																		File:   "monitor.flux",
																		Source: "int(v: r._time)",
																		Start: ast.Position{
																			Column: 32,
																			Line:   110,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 35,
																				Line:   110,
																			},
																			File:   "monitor.flux",
																			Source: "int",
																			Start: ast.Position{
																				Column: 32,
																				Line:   110,
																			},
																		},
																	},
																	Name: "int",
																},
																Lparen: nil,
																Rparen: nil,
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 25,
																		Line:   111,
																	},
																	File:   "monitor.flux",
																	Source: "_time: now()",
																	Start: ast.Position{
																		Column: 13,
																		Line:   111,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   111,
																		},
																		File:   "monitor.flux",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 13,
																			Line:   111,
																		},
																	},
																},
																Name: "_time",
															},
															Separator: nil,
															Value: &ast.CallExpression{
																Arguments: nil,
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   111,
																		},
																		File:   "monitor.flux",
																		Source: "now()",
																		Start: ast.Position{
																			Column: 20,
																			Line:   111,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 23,
																				Line:   111,
																			},
																			File:   "monitor.flux",
																			Source: "now",
																			Start: ast.Position{
																				Column: 20,
																				Line:   111,
																			},
																		},
																	},
																	Name: "now",
																},
																Lparen: nil,
																Rparen: nil,
															},
														}},
														Rbrace: nil,
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 23,
																		Line:   108,
																	},
																	File:   "monitor.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 22,
																		Line:   108,
																	},
																},
															},
															Name: "r",
														},
													},
													Lparen: nil,
													Rparen: nil,
												},
												Lparen: nil,
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 15,
																Line:   108,
															},
															File:   "monitor.flux",
															Source: "r",
															Start: ast.Position{
																Column: 14,
																Line:   108,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 15,
																	Line:   108,
																},
																File:   "monitor.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 14,
																	Line:   108,
																},
															},
														},
														Name: "r",
													},
													Separator: nil,
													Value:     nil,
												}},
												Rparan: nil,
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   113,
											},
											File:   "monitor.flux",
											Source: "map(\n        fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )",
											Start: ast.Position{
												Column: 8,
												Line:   107,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   107,
												},
												File:   "monitor.flux",
												Source: "map",
												Start: ast.Position{
													Column: 8,
													Line:   107,
												},
											},
										},
										Name: "map",
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   114,
									},
									File:   "monitor.flux",
									Source: "tables\n    |> experimental.set(o: data)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n    |> map(\n        fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )\n    |> endpoint()",
									Start: ast.Position{
										Column: 41,
										Line:   104,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   114,
										},
										File:   "monitor.flux",
										Source: "endpoint()",
										Start: ast.Position{
											Column: 8,
											Line:   114,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   114,
											},
											File:   "monitor.flux",
											Source: "endpoint",
											Start: ast.Position{
												Column: 8,
												Line:   114,
											},
										},
									},
									Name: "endpoint",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 62,
									Line:   115,
								},
								File:   "monitor.flux",
								Source: "tables\n    |> experimental.set(o: data)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n    |> map(\n        fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )\n    |> endpoint()\n    |> experimental.group(mode: \"extend\", columns: [\"_sent\"])",
								Start: ast.Position{
									Column: 41,
									Line:   104,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   115,
										},
										File:   "monitor.flux",
										Source: "mode: \"extend\", columns: [\"_sent\"]",
										Start: ast.Position{
											Column: 27,
											Line:   115,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   115,
											},
											File:   "monitor.flux",
											Source: "mode: \"extend\"",
											Start: ast.Position{
												Column: 27,
												Line:   115,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   115,
												},
												File:   "monitor.flux",
												Source: "mode",
												Start: ast.Position{
													Column: 27,
													Line:   115,
												},
											},
										},
										Name: "mode",
									},
									Separator: nil,
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   115,
												},
												File:   "monitor.flux",
												Source: "\"extend\"",
												Start: ast.Position{
													Column: 33,
													Line:   115,
												},
											},
										},
										Value: "extend",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 61,
												Line:   115,
											},
											File:   "monitor.flux",
											Source: "columns: [\"_sent\"]",
											Start: ast.Position{
												Column: 43,
												Line:   115,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 50,
													Line:   115,
												},
												File:   "monitor.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 43,
													Line:   115,
												},
											},
										},
										Name: "columns",
									},
									Separator: nil,
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 61,
													Line:   115,
												},
												File:   "monitor.flux",
												Source: "[\"_sent\"]",
												Start: ast.Position{
													Column: 52,
													Line:   115,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 60,
														Line:   115,
													},
													File:   "monitor.flux",
													Source: "\"_sent\"",
													Start: ast.Position{
														Column: 53,
														Line:   115,
													},
												},
											},
											Value: "_sent",
										}},
										Lbrack: nil,
										Rbrack: nil,
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 62,
										Line:   115,
									},
									File:   "monitor.flux",
									Source: "experimental.group(mode: \"extend\", columns: [\"_sent\"])",
									Start: ast.Position{
										Column: 8,
										Line:   115,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   115,
										},
										File:   "monitor.flux",
										Source: "experimental.group",
										Start: ast.Position{
											Column: 8,
											Line:   115,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   115,
											},
											File:   "monitor.flux",
											Source: "experimental",
											Start: ast.Position{
												Column: 8,
												Line:   115,
											},
										},
									},
									Name: "experimental",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   115,
											},
											File:   "monitor.flux",
											Source: "group",
											Start: ast.Position{
												Column: 21,
												Line:   115,
											},
										},
									},
									Name: "group",
								},
								Rbrack: nil,
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   116,
							},
							File:   "monitor.flux",
							Source: "tables\n    |> experimental.set(o: data)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n    |> map(\n        fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )\n    |> endpoint()\n    |> experimental.group(mode: \"extend\", columns: [\"_sent\"])\n    |> log()",
							Start: ast.Position{
								Column: 41,
								Line:   104,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   116,
								},
								File:   "monitor.flux",
								Source: "log()",
								Start: ast.Position{
									Column: 8,
									Line:   116,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   116,
									},
									File:   "monitor.flux",
									Source: "log",
									Start: ast.Position{
										Column: 8,
										Line:   116,
									},
								},
							},
							Name: "log",
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   104,
							},
							File:   "monitor.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 11,
								Line:   104,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   104,
								},
								File:   "monitor.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 11,
									Line:   104,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   104,
							},
							File:   "monitor.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 18,
								Line:   104,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   104,
							},
							File:   "monitor.flux",
							Source: "endpoint",
							Start: ast.Position{
								Column: 22,
								Line:   104,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   104,
								},
								File:   "monitor.flux",
								Source: "endpoint",
								Start: ast.Position{
									Column: 22,
									Line:   104,
								},
							},
						},
						Name: "endpoint",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   104,
							},
							File:   "monitor.flux",
							Source: "data",
							Start: ast.Position{
								Column: 32,
								Line:   104,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   104,
								},
								File:   "monitor.flux",
								Source: "data",
								Start: ast.Position{
									Column: 32,
									Line:   104,
								},
							},
						},
						Name: "data",
					},
					Separator: nil,
					Value:     nil,
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 25,
						Line:   123,
					},
					File:   "monitor.flux",
					Source: "logs = (start, stop=now(), fn) => influxdb.from(bucket: bucket)\n    |> range(start: start, stop: stop)\n    |> filter(fn: (r) => r._measurement == \"notifications\")\n    |> filter(fn: fn)\n    |> v1.fieldsAsCols()",
					Start: ast.Position{
						Column: 1,
						Line:   119,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// Logs retrieves notification events that have been logged.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   119,
						},
						File:   "monitor.flux",
						Source: "logs",
						Start: ast.Position{
							Column: 1,
							Line:   119,
						},
					},
				},
				Name: "logs",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   123,
						},
						File:   "monitor.flux",
						Source: "(start, stop=now(), fn) => influxdb.from(bucket: bucket)\n    |> range(start: start, stop: stop)\n    |> filter(fn: (r) => r._measurement == \"notifications\")\n    |> filter(fn: fn)\n    |> v1.fieldsAsCols()",
						Start: ast.Position{
							Column: 8,
							Line:   119,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 63,
													Line:   119,
												},
												File:   "monitor.flux",
												Source: "bucket: bucket",
												Start: ast.Position{
													Column: 49,
													Line:   119,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 63,
														Line:   119,
													},
													File:   "monitor.flux",
													Source: "bucket: bucket",
													Start: ast.Position{
														Column: 49,
														Line:   119,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 55,
															Line:   119,
														},
														File:   "monitor.flux",
														Source: "bucket",
														Start: ast.Position{
															Column: 49,
															Line:   119,
														},
													},
												},
												Name: "bucket",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 63,
															Line:   119,
														},
														File:   "monitor.flux",
														Source: "bucket",
														Start: ast.Position{
															Column: 57,
															Line:   119,
														},
													},
												},
												Name: "bucket",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 64,
												Line:   119,
											},
											File:   "monitor.flux",
											Source: "influxdb.from(bucket: bucket)",
											Start: ast.Position{
												Column: 35,
												Line:   119,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   119,
												},
												File:   "monitor.flux",
												Source: "influxdb.from",
												Start: ast.Position{
													Column: 35,
													Line:   119,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 43,
														Line:   119,
													},
													File:   "monitor.flux",
													Source: "influxdb",
													Start: ast.Position{
														Column: 35,
														Line:   119,
													},
												},
											},
											Name: "influxdb",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   119,
													},
													File:   "monitor.flux",
													Source: "from",
													Start: ast.Position{
														Column: 44,
														Line:   119,
													},
												},
											},
											Name: "from",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   120,
										},
										File:   "monitor.flux",
										Source: "influxdb.from(bucket: bucket)\n    |> range(start: start, stop: stop)",
										Start: ast.Position{
											Column: 35,
											Line:   119,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   120,
												},
												File:   "monitor.flux",
												Source: "start: start, stop: stop",
												Start: ast.Position{
													Column: 14,
													Line:   120,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   120,
													},
													File:   "monitor.flux",
													Source: "start: start",
													Start: ast.Position{
														Column: 14,
														Line:   120,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 19,
															Line:   120,
														},
														File:   "monitor.flux",
														Source: "start",
														Start: ast.Position{
															Column: 14,
															Line:   120,
														},
													},
												},
												Name: "start",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 26,
															Line:   120,
														},
														File:   "monitor.flux",
														Source: "start",
														Start: ast.Position{
															Column: 21,
															Line:   120,
														},
													},
												},
												Name: "start",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   120,
													},
													File:   "monitor.flux",
													Source: "stop: stop",
													Start: ast.Position{
														Column: 28,
														Line:   120,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 32,
															Line:   120,
														},
														File:   "monitor.flux",
														Source: "stop",
														Start: ast.Position{
															Column: 28,
															Line:   120,
														},
													},
												},
												Name: "stop",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   120,
														},
														File:   "monitor.flux",
														Source: "stop",
														Start: ast.Position{
															Column: 34,
															Line:   120,
														},
													},
												},
												Name: "stop",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   120,
											},
											File:   "monitor.flux",
											Source: "range(start: start, stop: stop)",
											Start: ast.Position{
												Column: 8,
												Line:   120,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   120,
												},
												File:   "monitor.flux",
												Source: "range",
												Start: ast.Position{
													Column: 8,
													Line:   120,
												},
											},
										},
										Name: "range",
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   121,
									},
									File:   "monitor.flux",
									Source: "influxdb.from(bucket: bucket)\n    |> range(start: start, stop: stop)\n    |> filter(fn: (r) => r._measurement == \"notifications\")",
									Start: ast.Position{
										Column: 35,
										Line:   119,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   121,
											},
											File:   "monitor.flux",
											Source: "fn: (r) => r._measurement == \"notifications\"",
											Start: ast.Position{
												Column: 15,
												Line:   121,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 59,
													Line:   121,
												},
												File:   "monitor.flux",
												Source: "fn: (r) => r._measurement == \"notifications\"",
												Start: ast.Position{
													Column: 15,
													Line:   121,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 17,
														Line:   121,
													},
													File:   "monitor.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 15,
														Line:   121,
													},
												},
											},
											Name: "fn",
										},
										Separator: nil,
										Value: &ast.FunctionExpression{
											Arrow: nil,
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 59,
														Line:   121,
													},
													File:   "monitor.flux",
													Source: "(r) => r._measurement == \"notifications\"",
													Start: ast.Position{
														Column: 19,
														Line:   121,
													},
												},
											},
											Body: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   121,
														},
														File:   "monitor.flux",
														Source: "r._measurement == \"notifications\"",
														Start: ast.Position{
															Column: 26,
															Line:   121,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   121,
															},
															File:   "monitor.flux",
															Source: "r._measurement",
															Start: ast.Position{
																Column: 26,
																Line:   121,
															},
														},
													},
													Lbrack: nil,
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 27,
																	Line:   121,
																},
																File:   "monitor.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 26,
																	Line:   121,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   121,
																},
																File:   "monitor.flux",
																Source: "_measurement",
																Start: ast.Position{
																	Column: 28,
																	Line:   121,
																},
															},
														},
														Name: "_measurement",
													},
													Rbrack: nil,
												},
												Operator: 17,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 59,
																Line:   121,
															},
															File:   "monitor.flux",
															Source: "\"notifications\"",
															Start: ast.Position{
																Column: 44,
																Line:   121,
															},
														},
													},
													Value: "notifications",
												},
											},
											Lparen: nil,
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 21,
															Line:   121,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 20,
															Line:   121,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   121,
															},
															File:   "monitor.flux",
															Source: "r",
															Start: ast.Position{
																Column: 20,
																Line:   121,
															},
														},
													},
													Name: "r",
												},
												Separator: nil,
												Value:     nil,
											}},
											Rparan: nil,
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 60,
											Line:   121,
										},
										File:   "monitor.flux",
										Source: "filter(fn: (r) => r._measurement == \"notifications\")",
										Start: ast.Position{
											Column: 8,
											Line:   121,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   121,
											},
											File:   "monitor.flux",
											Source: "filter",
											Start: ast.Position{
												Column: 8,
												Line:   121,
											},
										},
									},
									Name: "filter",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   122,
								},
								File:   "monitor.flux",
								Source: "influxdb.from(bucket: bucket)\n    |> range(start: start, stop: stop)\n    |> filter(fn: (r) => r._measurement == \"notifications\")\n    |> filter(fn: fn)",
								Start: ast.Position{
									Column: 35,
									Line:   119,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   122,
										},
										File:   "monitor.flux",
										Source: "fn: fn",
										Start: ast.Position{
											Column: 15,
											Line:   122,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   122,
											},
											File:   "monitor.flux",
											Source: "fn: fn",
											Start: ast.Position{
												Column: 15,
												Line:   122,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   122,
												},
												File:   "monitor.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 15,
													Line:   122,
												},
											},
										},
										Name: "fn",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   122,
												},
												File:   "monitor.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 19,
													Line:   122,
												},
											},
										},
										Name: "fn",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   122,
									},
									File:   "monitor.flux",
									Source: "filter(fn: fn)",
									Start: ast.Position{
										Column: 8,
										Line:   122,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   122,
										},
										File:   "monitor.flux",
										Source: "filter",
										Start: ast.Position{
											Column: 8,
											Line:   122,
										},
									},
								},
								Name: "filter",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   123,
							},
							File:   "monitor.flux",
							Source: "influxdb.from(bucket: bucket)\n    |> range(start: start, stop: stop)\n    |> filter(fn: (r) => r._measurement == \"notifications\")\n    |> filter(fn: fn)\n    |> v1.fieldsAsCols()",
							Start: ast.Position{
								Column: 35,
								Line:   119,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   123,
								},
								File:   "monitor.flux",
								Source: "v1.fieldsAsCols()",
								Start: ast.Position{
									Column: 8,
									Line:   123,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   123,
									},
									File:   "monitor.flux",
									Source: "v1.fieldsAsCols",
									Start: ast.Position{
										Column: 8,
										Line:   123,
									},
								},
							},
							Lbrack: nil,
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   123,
										},
										File:   "monitor.flux",
										Source: "v1",
										Start: ast.Position{
											Column: 8,
											Line:   123,
										},
									},
								},
								Name: "v1",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   123,
										},
										File:   "monitor.flux",
										Source: "fieldsAsCols",
										Start: ast.Position{
											Column: 11,
											Line:   123,
										},
									},
								},
								Name: "fieldsAsCols",
							},
							Rbrack: nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   119,
							},
							File:   "monitor.flux",
							Source: "start",
							Start: ast.Position{
								Column: 9,
								Line:   119,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   119,
								},
								File:   "monitor.flux",
								Source: "start",
								Start: ast.Position{
									Column: 9,
									Line:   119,
								},
							},
						},
						Name: "start",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   119,
							},
							File:   "monitor.flux",
							Source: "stop=now()",
							Start: ast.Position{
								Column: 16,
								Line:   119,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   119,
								},
								File:   "monitor.flux",
								Source: "stop",
								Start: ast.Position{
									Column: 16,
									Line:   119,
								},
							},
						},
						Name: "stop",
					},
					Separator: nil,
					Value: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   119,
								},
								File:   "monitor.flux",
								Source: "now()",
								Start: ast.Position{
									Column: 21,
									Line:   119,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   119,
									},
									File:   "monitor.flux",
									Source: "now",
									Start: ast.Position{
										Column: 21,
										Line:   119,
									},
								},
							},
							Name: "now",
						},
						Lparen: nil,
						Rparen: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   119,
							},
							File:   "monitor.flux",
							Source: "fn",
							Start: ast.Position{
								Column: 28,
								Line:   119,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   119,
								},
								File:   "monitor.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 28,
									Line:   119,
								},
							},
						},
						Name: "fn",
					},
					Separator: nil,
					Value:     nil,
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 52,
						Line:   130,
					},
					File:   "monitor.flux",
					Source: "deadman = (t, tables=<-) => tables\n    |> max(column: \"_time\")\n    |> map(fn: (r) => ({r with dead: r._time < t}))",
					Start: ast.Position{
						Column: 1,
						Line:   128,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// Deadman takes in a stream of tables and reports which tables\n"}, ast.Comment{Text: "// were observed strictly before t and which were observed after.\n"}, ast.Comment{Text: "//\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   128,
						},
						File:   "monitor.flux",
						Source: "deadman",
						Start: ast.Position{
							Column: 1,
							Line:   128,
						},
					},
				},
				Name: "deadman",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 52,
							Line:   130,
						},
						File:   "monitor.flux",
						Source: "(t, tables=<-) => tables\n    |> max(column: \"_time\")\n    |> map(fn: (r) => ({r with dead: r._time < t}))",
						Start: ast.Position{
							Column: 11,
							Line:   128,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   128,
									},
									File:   "monitor.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 29,
										Line:   128,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   129,
								},
								File:   "monitor.flux",
								Source: "tables\n    |> max(column: \"_time\")",
								Start: ast.Position{
									Column: 29,
									Line:   128,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   129,
										},
										File:   "monitor.flux",
										Source: "column: \"_time\"",
										Start: ast.Position{
											Column: 12,
											Line:   129,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   129,
											},
											File:   "monitor.flux",
											Source: "column: \"_time\"",
											Start: ast.Position{
												Column: 12,
												Line:   129,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   129,
												},
												File:   "monitor.flux",
												Source: "column",
												Start: ast.Position{
													Column: 12,
													Line:   129,
												},
											},
										},
										Name: "column",
									},
									Separator: nil,
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   129,
												},
												File:   "monitor.flux",
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 20,
													Line:   129,
												},
											},
										},
										Value: "_time",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   129,
									},
									File:   "monitor.flux",
									Source: "max(column: \"_time\")",
									Start: ast.Position{
										Column: 8,
										Line:   129,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   129,
										},
										File:   "monitor.flux",
										Source: "max",
										Start: ast.Position{
											Column: 8,
											Line:   129,
										},
									},
								},
								Name: "max",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 52,
								Line:   130,
							},
							File:   "monitor.flux",
							Source: "tables\n    |> max(column: \"_time\")\n    |> map(fn: (r) => ({r with dead: r._time < t}))",
							Start: ast.Position{
								Column: 29,
								Line:   128,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   130,
									},
									File:   "monitor.flux",
									Source: "fn: (r) => ({r with dead: r._time < t})",
									Start: ast.Position{
										Column: 12,
										Line:   130,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   130,
										},
										File:   "monitor.flux",
										Source: "fn: (r) => ({r with dead: r._time < t})",
										Start: ast.Position{
											Column: 12,
											Line:   130,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   130,
											},
											File:   "monitor.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 12,
												Line:   130,
											},
										},
									},
									Name: "fn",
								},
								Separator: nil,
								Value: &ast.FunctionExpression{
									Arrow: nil,
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   130,
											},
											File:   "monitor.flux",
											Source: "(r) => ({r with dead: r._time < t})",
											Start: ast.Position{
												Column: 16,
												Line:   130,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   130,
												},
												File:   "monitor.flux",
												Source: "({r with dead: r._time < t})",
												Start: ast.Position{
													Column: 23,
													Line:   130,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 50,
														Line:   130,
													},
													File:   "monitor.flux",
													Source: "{r with dead: r._time < t}",
													Start: ast.Position{
														Column: 24,
														Line:   130,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 49,
															Line:   130,
														},
														File:   "monitor.flux",
														Source: "dead: r._time < t",
														Start: ast.Position{
															Column: 32,
															Line:   130,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   130,
															},
															File:   "monitor.flux",
															Source: "dead",
															Start: ast.Position{
																Column: 32,
																Line:   130,
															},
														},
													},
													Name: "dead",
												},
												Separator: nil,
												Value: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 49,
																Line:   130,
															},
															File:   "monitor.flux",
															Source: "r._time < t",
															Start: ast.Position{
																Column: 38,
																Line:   130,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 45,
																	Line:   130,
																},
																File:   "monitor.flux",
																Source: "r._time",
																Start: ast.Position{
																	Column: 38,
																	Line:   130,
																},
															},
														},
														Lbrack: nil,
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 39,
																		Line:   130,
																	},
																	File:   "monitor.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 38,
																		Line:   130,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 45,
																		Line:   130,
																	},
																	File:   "monitor.flux",
																	Source: "_time",
																	Start: ast.Position{
																		Column: 40,
																		Line:   130,
																	},
																},
															},
															Name: "_time",
														},
														Rbrack: nil,
													},
													Operator: 8,
													Right: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 49,
																	Line:   130,
																},
																File:   "monitor.flux",
																Source: "t",
																Start: ast.Position{
																	Column: 48,
																	Line:   130,
																},
															},
														},
														Name: "t",
													},
												},
											}},
											Rbrace: nil,
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 26,
															Line:   130,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 25,
															Line:   130,
														},
													},
												},
												Name: "r",
											},
										},
										Lparen: nil,
										Rparen: nil,
									},
									Lparen: nil,
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   130,
												},
												File:   "monitor.flux",
												Source: "r",
												Start: ast.Position{
													Column: 17,
													Line:   130,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   130,
													},
													File:   "monitor.flux",
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   130,
													},
												},
											},
											Name: "r",
										},
										Separator: nil,
										Value:     nil,
									}},
									Rparan: nil,
								},
							}},
							Rbrace: nil,
							With:   nil,
						}},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   130,
								},
								File:   "monitor.flux",
								Source: "map(fn: (r) => ({r with dead: r._time < t}))",
								Start: ast.Position{
									Column: 8,
									Line:   130,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   130,
									},
									File:   "monitor.flux",
									Source: "map",
									Start: ast.Position{
										Column: 8,
										Line:   130,
									},
								},
							},
							Name: "map",
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   128,
							},
							File:   "monitor.flux",
							Source: "t",
							Start: ast.Position{
								Column: 12,
								Line:   128,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   128,
								},
								File:   "monitor.flux",
								Source: "t",
								Start: ast.Position{
									Column: 12,
									Line:   128,
								},
							},
						},
						Name: "t",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   128,
							},
							File:   "monitor.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 15,
								Line:   128,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   128,
								},
								File:   "monitor.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 15,
									Line:   128,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   128,
							},
							File:   "monitor.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   128,
							},
						},
					}},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   181,
					},
					File:   "monitor.flux",
					Source: "check = (\n        tables=<-,\n        data,\n        messageFn,\n        crit=(r) => false,\n        warn=(r) => false,\n        info=(r) => false,\n        ok=(r) => true,\n) => tables\n    |> experimental.set(o: data.tags)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n    |> map(\n        fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id: data._check_id,\n            _check_name: data._check_name,\n            _level: if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown,\n            _source_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )\n    |> map(\n        fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }),\n    )\n    |> experimental.group(\n        mode: \"extend\",\n        columns: [\n            \"_source_measurement\",\n            \"_type\",\n            \"_check_id\",\n            \"_check_name\",\n            \"_level\",\n        ],\n    )\n    |> write()",
					Start: ast.Position{
						Column: 1,
						Line:   134,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// Check performs a check against its input using the given ok, info, warn and crit functions\n"}, ast.Comment{Text: "// and writes the result to a system bucket.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   134,
						},
						File:   "monitor.flux",
						Source: "check",
						Start: ast.Position{
							Column: 1,
							Line:   134,
						},
					},
				},
				Name: "check",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   181,
						},
						File:   "monitor.flux",
						Source: "(\n        tables=<-,\n        data,\n        messageFn,\n        crit=(r) => false,\n        warn=(r) => false,\n        info=(r) => false,\n        ok=(r) => true,\n) => tables\n    |> experimental.set(o: data.tags)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n    |> map(\n        fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id: data._check_id,\n            _check_name: data._check_name,\n            _level: if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown,\n            _source_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )\n    |> map(\n        fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }),\n    )\n    |> experimental.group(\n        mode: \"extend\",\n        columns: [\n            \"_source_measurement\",\n            \"_type\",\n            \"_check_id\",\n            \"_check_name\",\n            \"_level\",\n        ],\n    )\n    |> write()",
						Start: ast.Position{
							Column: 9,
							Line:   134,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 12,
														Line:   142,
													},
													File:   "monitor.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 6,
														Line:   142,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   143,
												},
												File:   "monitor.flux",
												Source: "tables\n    |> experimental.set(o: data.tags)",
												Start: ast.Position{
													Column: 6,
													Line:   142,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   143,
														},
														File:   "monitor.flux",
														Source: "o: data.tags",
														Start: ast.Position{
															Column: 25,
															Line:   143,
														},
													},
												},
												Lbrace: nil,
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   143,
															},
															File:   "monitor.flux",
															Source: "o: data.tags",
															Start: ast.Position{
																Column: 25,
																Line:   143,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 26,
																	Line:   143,
																},
																File:   "monitor.flux",
																Source: "o",
																Start: ast.Position{
																	Column: 25,
																	Line:   143,
																},
															},
														},
														Name: "o",
													},
													Separator: nil,
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   143,
																},
																File:   "monitor.flux",
																Source: "data.tags",
																Start: ast.Position{
																	Column: 28,
																	Line:   143,
																},
															},
														},
														Lbrack: nil,
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 32,
																		Line:   143,
																	},
																	File:   "monitor.flux",
																	Source: "data",
																	Start: ast.Position{
																		Column: 28,
																		Line:   143,
																	},
																},
															},
															Name: "data",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 37,
																		Line:   143,
																	},
																	File:   "monitor.flux",
																	Source: "tags",
																	Start: ast.Position{
																		Column: 33,
																		Line:   143,
																	},
																},
															},
															Name: "tags",
														},
														Rbrack: nil,
													},
												}},
												Rbrace: nil,
												With:   nil,
											}},
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 38,
														Line:   143,
													},
													File:   "monitor.flux",
													Source: "experimental.set(o: data.tags)",
													Start: ast.Position{
														Column: 8,
														Line:   143,
													},
												},
											},
											Callee: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   143,
														},
														File:   "monitor.flux",
														Source: "experimental.set",
														Start: ast.Position{
															Column: 8,
															Line:   143,
														},
													},
												},
												Lbrack: nil,
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 20,
																Line:   143,
															},
															File:   "monitor.flux",
															Source: "experimental",
															Start: ast.Position{
																Column: 8,
																Line:   143,
															},
														},
													},
													Name: "experimental",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   143,
															},
															File:   "monitor.flux",
															Source: "set",
															Start: ast.Position{
																Column: 21,
																Line:   143,
															},
														},
													},
													Name: "set",
												},
												Rbrack: nil,
											},
											Lparen: nil,
											Rparen: nil,
										},
									},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 90,
												Line:   144,
											},
											File:   "monitor.flux",
											Source: "tables\n    |> experimental.set(o: data.tags)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))",
											Start: ast.Position{
												Column: 6,
												Line:   142,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 89,
														Line:   144,
													},
													File:   "monitor.flux",
													Source: "mode: \"extend\", columns: experimental.objectKeys(o: data.tags)",
													Start: ast.Position{
														Column: 27,
														Line:   144,
													},
												},
											},
											Lbrace: nil,
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   144,
														},
														File:   "monitor.flux",
														Source: "mode: \"extend\"",
														Start: ast.Position{
															Column: 27,
															Line:   144,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 31,
																Line:   144,
															},
															File:   "monitor.flux",
															Source: "mode",
															Start: ast.Position{
																Column: 27,
																Line:   144,
															},
														},
													},
													Name: "mode",
												},
												Separator: nil,
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 41,
																Line:   144,
															},
															File:   "monitor.flux",
															Source: "\"extend\"",
															Start: ast.Position{
																Column: 33,
																Line:   144,
															},
														},
													},
													Value: "extend",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 89,
															Line:   144,
														},
														File:   "monitor.flux",
														Source: "columns: experimental.objectKeys(o: data.tags)",
														Start: ast.Position{
															Column: 43,
															Line:   144,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 50,
																Line:   144,
															},
															File:   "monitor.flux",
															Source: "columns",
															Start: ast.Position{
																Column: 43,
																Line:   144,
															},
														},
													},
													Name: "columns",
												},
												Separator: nil,
												Value: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 88,
																	Line:   144,
																},
																File:   "monitor.flux",
																Source: "o: data.tags",
																Start: ast.Position{
																	Column: 76,
																	Line:   144,
																},
															},
														},
														Lbrace: nil,
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 88,
																		Line:   144,
																	},
																	File:   "monitor.flux",
																	Source: "o: data.tags",
																	Start: ast.Position{
																		Column: 76,
																		Line:   144,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 77,
																			Line:   144,
																		},
																		File:   "monitor.flux",
																		Source: "o",
																		Start: ast.Position{
																			Column: 76,
																			Line:   144,
																		},
																	},
																},
																Name: "o",
															},
															Separator: nil,
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 88,
																			Line:   144,
																		},
																		File:   "monitor.flux",
																		Source: "data.tags",
																		Start: ast.Position{
																			Column: 79,
																			Line:   144,
																		},
																	},
																},
																Lbrack: nil,
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 83,
																				Line:   144,
																			},
																			File:   "monitor.flux",
																			Source: "data",
																			Start: ast.Position{
																				Column: 79,
																				Line:   144,
																			},
																		},
																	},
																	Name: "data",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 88,
																				Line:   144,
																			},
																			File:   "monitor.flux",
																			Source: "tags",
																			Start: ast.Position{
																				Column: 84,
																				Line:   144,
																			},
																		},
																	},
																	Name: "tags",
																},
																Rbrack: nil,
															},
														}},
														Rbrace: nil,
														With:   nil,
													}},
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 89,
																Line:   144,
															},
															File:   "monitor.flux",
															Source: "experimental.objectKeys(o: data.tags)",
															Start: ast.Position{
																Column: 52,
																Line:   144,
															},
														},
													},
													Callee: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 75,
																	Line:   144,
																},
																File:   "monitor.flux",
																Source: "experimental.objectKeys",
																Start: ast.Position{
																	Column: 52,
																	Line:   144,
																},
															},
														},
														Lbrack: nil,
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 64,
																		Line:   144,
																	},
																	File:   "monitor.flux",
																	Source: "experimental",
																	Start: ast.Position{
																		Column: 52,
																		Line:   144,
																	},
																},
															},
															Name: "experimental",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 75,
																		Line:   144,
																	},
																	File:   "monitor.flux",
																	Source: "objectKeys",
																	Start: ast.Position{
																		Column: 65,
																		Line:   144,
																	},
																},
															},
															Name: "objectKeys",
														},
														Rbrack: nil,
													},
													Lparen: nil,
													Rparen: nil,
												},
											}},
											Rbrace: nil,
											With:   nil,
										}},
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 90,
													Line:   144,
												},
												File:   "monitor.flux",
												Source: "experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))",
												Start: ast.Position{
													Column: 8,
													Line:   144,
												},
											},
										},
										Callee: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   144,
													},
													File:   "monitor.flux",
													Source: "experimental.group",
													Start: ast.Position{
														Column: 8,
														Line:   144,
													},
												},
											},
											Lbrack: nil,
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 20,
															Line:   144,
														},
														File:   "monitor.flux",
														Source: "experimental",
														Start: ast.Position{
															Column: 8,
															Line:   144,
														},
													},
												},
												Name: "experimental",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 26,
															Line:   144,
														},
														File:   "monitor.flux",
														Source: "group",
														Start: ast.Position{
															Column: 21,
															Line:   144,
														},
													},
												},
												Name: "group",
											},
											Rbrack: nil,
										},
										Lparen: nil,
										Rparen: nil,
									},
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   165,
										},
										File:   "monitor.flux",
										Source: "tables\n    |> experimental.set(o: data.tags)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n    |> map(\n        fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id: data._check_id,\n            _check_name: data._check_name,\n            _level: if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown,\n            _source_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )",
										Start: ast.Position{
											Column: 6,
											Line:   142,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   164,
												},
												File:   "monitor.flux",
												Source: "fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id: data._check_id,\n            _check_name: data._check_name,\n            _level: if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown,\n            _source_timestamp: int(v: r._time),\n            _time: now(),\n        })",
												Start: ast.Position{
													Column: 9,
													Line:   146,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   164,
													},
													File:   "monitor.flux",
													Source: "fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id: data._check_id,\n            _check_name: data._check_name,\n            _level: if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown,\n            _source_timestamp: int(v: r._time),\n            _time: now(),\n        })",
													Start: ast.Position{
														Column: 9,
														Line:   146,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   146,
														},
														File:   "monitor.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 9,
															Line:   146,
														},
													},
												},
												Name: "fn",
											},
											Separator: nil,
											Value: &ast.FunctionExpression{
												Arrow: nil,
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   164,
														},
														File:   "monitor.flux",
														Source: "(r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id: data._check_id,\n            _check_name: data._check_name,\n            _level: if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown,\n            _source_timestamp: int(v: r._time),\n            _time: now(),\n        })",
														Start: ast.Position{
															Column: 13,
															Line:   146,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 11,
																Line:   164,
															},
															File:   "monitor.flux",
															Source: "({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id: data._check_id,\n            _check_name: data._check_name,\n            _level: if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown,\n            _source_timestamp: int(v: r._time),\n            _time: now(),\n        })",
															Start: ast.Position{
																Column: 20,
																Line:   146,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 10,
																	Line:   164,
																},
																File:   "monitor.flux",
																Source: "{r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id: data._check_id,\n            _check_name: data._check_name,\n            _level: if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown,\n            _source_timestamp: int(v: r._time),\n            _time: now(),\n        }",
																Start: ast.Position{
																	Column: 21,
																	Line:   146,
																},
															},
														},
														Lbrace: nil,
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 37,
																		Line:   147,
																	},
																	File:   "monitor.flux",
																	Source: "_measurement: \"statuses\"",
																	Start: ast.Position{
																		Column: 13,
																		Line:   147,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   147,
																		},
																		File:   "monitor.flux",
																		Source: "_measurement",
																		Start: ast.Position{
																			Column: 13,
																			Line:   147,
																		},
																	},
																},
																Name: "_measurement",
															},
															Separator: nil,
															Value: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 37,
																			Line:   147,
																		},
																		File:   "monitor.flux",
																		Source: "\"statuses\"",
																		Start: ast.Position{
																			Column: 27,
																			Line:   147,
																		},
																	},
																},
																Value: "statuses",
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 48,
																		Line:   148,
																	},
																	File:   "monitor.flux",
																	Source: "_source_measurement: r._measurement",
																	Start: ast.Position{
																		Column: 13,
																		Line:   148,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 32,
																			Line:   148,
																		},
																		File:   "monitor.flux",
																		Source: "_source_measurement",
																		Start: ast.Position{
																			Column: 13,
																			Line:   148,
																		},
																	},
																},
																Name: "_source_measurement",
															},
															Separator: nil,
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 48,
																			Line:   148,
																		},
																		File:   "monitor.flux",
																		Source: "r._measurement",
																		Start: ast.Position{
																			Column: 34,
																			Line:   148,
																		},
																	},
																},
																Lbrack: nil,
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 35,
																				Line:   148,
																			},
																			File:   "monitor.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 34,
																				Line:   148,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 48,
																				Line:   148,
																			},
																			File:   "monitor.flux",
																			Source: "_measurement",
																			Start: ast.Position{
																				Column: 36,
																				Line:   148,
																			},
																		},
																	},
																	Name: "_measurement",
																},
																Rbrack: nil,
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 30,
																		Line:   149,
																	},
																	File:   "monitor.flux",
																	Source: "_type: data._type",
																	Start: ast.Position{
																		Column: 13,
																		Line:   149,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   149,
																		},
																		File:   "monitor.flux",
																		Source: "_type",
																		Start: ast.Position{
																			Column: 13,
																			Line:   149,
																		},
																	},
																},
																Name: "_type",
															},
															Separator: nil,
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 30,
																			Line:   149,
																		},
																		File:   "monitor.flux",
																		Source: "data._type",
																		Start: ast.Position{
																			Column: 20,
																			Line:   149,
																		},
																	},
																},
																Lbrack: nil,
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 24,
																				Line:   149,
																			},
																			File:   "monitor.flux",
																			Source: "data",
																			Start: ast.Position{
																				Column: 20,
																				Line:   149,
																			},
																		},
																	},
																	Name: "data",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   149,
																			},
																			File:   "monitor.flux",
																			Source: "_type",
																			Start: ast.Position{
																				Column: 25,
																				Line:   149,
																			},
																		},
																	},
																	Name: "_type",
																},
																Rbrack: nil,
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 38,
																		Line:   150,
																	},
																	File:   "monitor.flux",
																	Source: "_check_id: data._check_id",
																	Start: ast.Position{
																		Column: 13,
																		Line:   150,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 22,
																			Line:   150,
																		},
																		File:   "monitor.flux",
																		Source: "_check_id",
																		Start: ast.Position{
																			Column: 13,
																			Line:   150,
																		},
																	},
																},
																Name: "_check_id",
															},
															Separator: nil,
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 38,
																			Line:   150,
																		},
																		File:   "monitor.flux",
																		Source: "data._check_id",
																		Start: ast.Position{
																			Column: 24,
																			Line:   150,
																		},
																	},
																},
																Lbrack: nil,
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 28,
																				Line:   150,
																			},
																			File:   "monitor.flux",
																			Source: "data",
																			Start: ast.Position{
																				Column: 24,
																				Line:   150,
																			},
																		},
																	},
																	Name: "data",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 38,
																				Line:   150,
																			},
																			File:   "monitor.flux",
																			Source: "_check_id",
																			Start: ast.Position{
																				Column: 29,
																				Line:   150,
																			},
																		},
																	},
																	Name: "_check_id",
																},
																Rbrack: nil,
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   151,
																	},
																	File:   "monitor.flux",
																	Source: "_check_name: data._check_name",
																	Start: ast.Position{
																		Column: 13,
																		Line:   151,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 24,
																			Line:   151,
																		},
																		File:   "monitor.flux",
																		Source: "_check_name",
																		Start: ast.Position{
																			Column: 13,
																			Line:   151,
																		},
																	},
																},
																Name: "_check_name",
															},
															Separator: nil,
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 42,
																			Line:   151,
																		},
																		File:   "monitor.flux",
																		Source: "data._check_name",
																		Start: ast.Position{
																			Column: 26,
																			Line:   151,
																		},
																	},
																},
																Lbrack: nil,
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   151,
																			},
																			File:   "monitor.flux",
																			Source: "data",
																			Start: ast.Position{
																				Column: 26,
																				Line:   151,
																			},
																		},
																	},
																	Name: "data",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 42,
																				Line:   151,
																			},
																			File:   "monitor.flux",
																			Source: "_check_name",
																			Start: ast.Position{
																				Column: 31,
																				Line:   151,
																			},
																		},
																	},
																	Name: "_check_name",
																},
																Rbrack: nil,
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 29,
																		Line:   161,
																	},
																	File:   "monitor.flux",
																	Source: "_level: if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown",
																	Start: ast.Position{
																		Column: 13,
																		Line:   152,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 19,
																			Line:   152,
																		},
																		File:   "monitor.flux",
																		Source: "_level",
																		Start: ast.Position{
																			Column: 13,
																			Line:   152,
																		},
																	},
																},
																Name: "_level",
															},
															Separator: nil,
															Value: &ast.ConditionalExpression{
																Alternate: &ast.ConditionalExpression{
																	Alternate: &ast.ConditionalExpression{
																		Alternate: &ast.ConditionalExpression{
																			Alternate: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 29,
																							Line:   161,
																						},
																						File:   "monitor.flux",
																						Source: "levelUnknown",
																						Start: ast.Position{
																							Column: 17,
																							Line:   161,
																						},
																					},
																				},
																				Name: "levelUnknown",
																			},
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 29,
																						Line:   161,
																					},
																					File:   "monitor.flux",
																					Source: "if ok(r: r) then\n                levelOK\n            else\n                levelUnknown",
																					Start: ast.Position{
																						Column: 18,
																						Line:   158,
																					},
																				},
																			},
																			Consequent: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 24,
																							Line:   159,
																						},
																						File:   "monitor.flux",
																						Source: "levelOK",
																						Start: ast.Position{
																							Column: 17,
																							Line:   159,
																						},
																					},
																				},
																				Name: "levelOK",
																			},
																			Test: &ast.CallExpression{
																				Arguments: []ast.Expression{&ast.ObjectExpression{
																					BaseNode: ast.BaseNode{
																						Comments: nil,
																						Errors:   nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 28,
																								Line:   158,
																							},
																							File:   "monitor.flux",
																							Source: "r: r",
																							Start: ast.Position{
																								Column: 24,
																								Line:   158,
																							},
																						},
																					},
																					Lbrace: nil,
																					Properties: []*ast.Property{&ast.Property{
																						BaseNode: ast.BaseNode{
																							Comments: nil,
																							Errors:   nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 28,
																									Line:   158,
																								},
																								File:   "monitor.flux",
																								Source: "r: r",
																								Start: ast.Position{
																									Column: 24,
																									Line:   158,
																								},
																							},
																						},
																						Comma: nil,
																						Key: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Comments: nil,
																								Errors:   nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 25,
																										Line:   158,
																									},
																									File:   "monitor.flux",
																									Source: "r",
																									Start: ast.Position{
																										Column: 24,
																										Line:   158,
																									},
																								},
																							},
																							Name: "r",
																						},
																						Separator: nil,
																						Value: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Comments: nil,
																								Errors:   nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 28,
																										Line:   158,
																									},
																									File:   "monitor.flux",
																									Source: "r",
																									Start: ast.Position{
																										Column: 27,
																										Line:   158,
																									},
																								},
																							},
																							Name: "r",
																						},
																					}},
																					Rbrace: nil,
																					With:   nil,
																				}},
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 29,
																							Line:   158,
																						},
																						File:   "monitor.flux",
																						Source: "ok(r: r)",
																						Start: ast.Position{
																							Column: 21,
																							Line:   158,
																						},
																					},
																				},
																				Callee: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Comments: nil,
																						Errors:   nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 23,
																								Line:   158,
																							},
																							File:   "monitor.flux",
																							Source: "ok",
																							Start: ast.Position{
																								Column: 21,
																								Line:   158,
																							},
																						},
																					},
																					Name: "ok",
																				},
																				Lparen: nil,
																				Rparen: nil,
																			},
																			Tk_else: nil,
																			Tk_if:   nil,
																			Tk_then: nil,
																		},
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 29,
																					Line:   161,
																				},
																				File:   "monitor.flux",
																				Source: "if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown",
																				Start: ast.Position{
																					Column: 18,
																					Line:   156,
																				},
																			},
																		},
																		Consequent: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 26,
																						Line:   157,
																					},
																					File:   "monitor.flux",
																					Source: "levelInfo",
																					Start: ast.Position{
																						Column: 17,
																						Line:   157,
																					},
																				},
																			},
																			Name: "levelInfo",
																		},
																		Test: &ast.CallExpression{
																			Arguments: []ast.Expression{&ast.ObjectExpression{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 30,
																							Line:   156,
																						},
																						File:   "monitor.flux",
																						Source: "r: r",
																						Start: ast.Position{
																							Column: 26,
																							Line:   156,
																						},
																					},
																				},
																				Lbrace: nil,
																				Properties: []*ast.Property{&ast.Property{
																					BaseNode: ast.BaseNode{
																						Comments: nil,
																						Errors:   nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 30,
																								Line:   156,
																							},
																							File:   "monitor.flux",
																							Source: "r: r",
																							Start: ast.Position{
																								Column: 26,
																								Line:   156,
																							},
																						},
																					},
																					Comma: nil,
																					Key: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Comments: nil,
																							Errors:   nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 27,
																									Line:   156,
																								},
																								File:   "monitor.flux",
																								Source: "r",
																								Start: ast.Position{
																									Column: 26,
																									Line:   156,
																								},
																							},
																						},
																						Name: "r",
																					},
																					Separator: nil,
																					Value: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Comments: nil,
																							Errors:   nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 30,
																									Line:   156,
																								},
																								File:   "monitor.flux",
																								Source: "r",
																								Start: ast.Position{
																									Column: 29,
																									Line:   156,
																								},
																							},
																						},
																						Name: "r",
																					},
																				}},
																				Rbrace: nil,
																				With:   nil,
																			}},
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 31,
																						Line:   156,
																					},
																					File:   "monitor.flux",
																					Source: "info(r: r)",
																					Start: ast.Position{
																						Column: 21,
																						Line:   156,
																					},
																				},
																			},
																			Callee: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 25,
																							Line:   156,
																						},
																						File:   "monitor.flux",
																						Source: "info",
																						Start: ast.Position{
																							Column: 21,
																							Line:   156,
																						},
																					},
																				},
																				Name: "info",
																			},
																			Lparen: nil,
																			Rparen: nil,
																		},
																		Tk_else: nil,
																		Tk_if:   nil,
																		Tk_then: nil,
																	},
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 29,
																				Line:   161,
																			},
																			File:   "monitor.flux",
																			Source: "if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown",
																			Start: ast.Position{
																				Column: 18,
																				Line:   154,
																			},
																		},
																	},
																	Consequent: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 26,
																					Line:   155,
																				},
																				File:   "monitor.flux",
																				Source: "levelWarn",
																				Start: ast.Position{
																					Column: 17,
																					Line:   155,
																				},
																			},
																		},
																		Name: "levelWarn",
																	},
																	Test: &ast.CallExpression{
																		Arguments: []ast.Expression{&ast.ObjectExpression{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 30,
																						Line:   154,
																					},
																					File:   "monitor.flux",
																					Source: "r: r",
																					Start: ast.Position{
																						Column: 26,
																						Line:   154,
																					},
																				},
																			},
																			Lbrace: nil,
																			Properties: []*ast.Property{&ast.Property{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 30,
																							Line:   154,
																						},
																						File:   "monitor.flux",
																						Source: "r: r",
																						Start: ast.Position{
																							Column: 26,
																							Line:   154,
																						},
																					},
																				},
																				Comma: nil,
																				Key: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Comments: nil,
																						Errors:   nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 27,
																								Line:   154,
																							},
																							File:   "monitor.flux",
																							Source: "r",
																							Start: ast.Position{
																								Column: 26,
																								Line:   154,
																							},
																						},
																					},
																					Name: "r",
																				},
																				Separator: nil,
																				Value: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Comments: nil,
																						Errors:   nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 30,
																								Line:   154,
																							},
																							File:   "monitor.flux",
																							Source: "r",
																							Start: ast.Position{
																								Column: 29,
																								Line:   154,
																							},
																						},
																					},
																					Name: "r",
																				},
																			}},
																			Rbrace: nil,
																			With:   nil,
																		}},
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 31,
																					Line:   154,
																				},
																				File:   "monitor.flux",
																				Source: "warn(r: r)",
																				Start: ast.Position{
																					Column: 21,
																					Line:   154,
																				},
																			},
																		},
																		Callee: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 25,
																						Line:   154,
																					},
																					File:   "monitor.flux",
																					Source: "warn",
																					Start: ast.Position{
																						Column: 21,
																						Line:   154,
																					},
																				},
																			},
																			Name: "warn",
																		},
																		Lparen: nil,
																		Rparen: nil,
																	},
																	Tk_else: nil,
																	Tk_if:   nil,
																	Tk_then: nil,
																},
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 29,
																			Line:   161,
																		},
																		File:   "monitor.flux",
																		Source: "if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown",
																		Start: ast.Position{
																			Column: 21,
																			Line:   152,
																		},
																	},
																},
																Consequent: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 26,
																				Line:   153,
																			},
																			File:   "monitor.flux",
																			Source: "levelCrit",
																			Start: ast.Position{
																				Column: 17,
																				Line:   153,
																			},
																		},
																	},
																	Name: "levelCrit",
																},
																Test: &ast.CallExpression{
																	Arguments: []ast.Expression{&ast.ObjectExpression{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 33,
																					Line:   152,
																				},
																				File:   "monitor.flux",
																				Source: "r: r",
																				Start: ast.Position{
																					Column: 29,
																					Line:   152,
																				},
																			},
																		},
																		Lbrace: nil,
																		Properties: []*ast.Property{&ast.Property{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 33,
																						Line:   152,
																					},
																					File:   "monitor.flux",
																					Source: "r: r",
																					Start: ast.Position{
																						Column: 29,
																						Line:   152,
																					},
																				},
																			},
																			Comma: nil,
																			Key: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 30,
																							Line:   152,
																						},
																						File:   "monitor.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 29,
																							Line:   152,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Separator: nil,
																			Value: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 33,
																							Line:   152,
																						},
																						File:   "monitor.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 32,
																							Line:   152,
																						},
																					},
																				},
																				Name: "r",
																			},
																		}},
																		Rbrace: nil,
																		With:   nil,
																	}},
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 34,
																				Line:   152,
																			},
																			File:   "monitor.flux",
																			Source: "crit(r: r)",
																			Start: ast.Position{
																				Column: 24,
																				Line:   152,
																			},
																		},
																	},
																	Callee: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 28,
																					Line:   152,
																				},
																				File:   "monitor.flux",
																				Source: "crit",
																				Start: ast.Position{
																					Column: 24,
																					Line:   152,
																				},
																			},
																		},
																		Name: "crit",
																	},
																	Lparen: nil,
																	Rparen: nil,
																},
																Tk_else: nil,
																Tk_if:   nil,
																Tk_then: nil,
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   162,
																	},
																	File:   "monitor.flux",
																	Source: "_source_timestamp: int(v: r._time)",
																	Start: ast.Position{
																		Column: 13,
																		Line:   162,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 30,
																			Line:   162,
																		},
																		File:   "monitor.flux",
																		Source: "_source_timestamp",
																		Start: ast.Position{
																			Column: 13,
																			Line:   162,
																		},
																	},
																},
																Name: "_source_timestamp",
															},
															Separator: nil,
															Value: &ast.CallExpression{
																Arguments: []ast.Expression{&ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 46,
																				Line:   162,
																			},
																			File:   "monitor.flux",
																			Source: "v: r._time",
																			Start: ast.Position{
																				Column: 36,
																				Line:   162,
																			},
																		},
																	},
																	Lbrace: nil,
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 46,
																					Line:   162,
																				},
																				File:   "monitor.flux",
																				Source: "v: r._time",
																				Start: ast.Position{
																					Column: 36,
																					Line:   162,
																				},
																			},
																		},
																		Comma: nil,
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 37,
																						Line:   162,
																					},
																					File:   "monitor.flux",
																					Source: "v",
																					Start: ast.Position{
																						Column: 36,
																						Line:   162,
																					},
																				},
																			},
																			Name: "v",
																		},
																		Separator: nil,
																		Value: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Comments: nil,
																				Errors:   nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 46,
																						Line:   162,
																					},
																					File:   "monitor.flux",
																					Source: "r._time",
																					Start: ast.Position{
																						Column: 39,
																						Line:   162,
																					},
																				},
																			},
																			Lbrack: nil,
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 40,
																							Line:   162,
																						},
																						File:   "monitor.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 39,
																							Line:   162,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Comments: nil,
																					Errors:   nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 46,
																							Line:   162,
																						},
																						File:   "monitor.flux",
																						Source: "_time",
																						Start: ast.Position{
																							Column: 41,
																							Line:   162,
																						},
																					},
																				},
																				Name: "_time",
																			},
																			Rbrack: nil,
																		},
																	}},
																	Rbrace: nil,
																	With:   nil,
																}},
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 47,
																			Line:   162,
																		},
																		File:   "monitor.flux",
																		Source: "int(v: r._time)",
																		Start: ast.Position{
																			Column: 32,
																			Line:   162,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 35,
																				Line:   162,
																			},
																			File:   "monitor.flux",
																			Source: "int",
																			Start: ast.Position{
																				Column: 32,
																				Line:   162,
																			},
																		},
																	},
																	Name: "int",
																},
																Lparen: nil,
																Rparen: nil,
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 25,
																		Line:   163,
																	},
																	File:   "monitor.flux",
																	Source: "_time: now()",
																	Start: ast.Position{
																		Column: 13,
																		Line:   163,
																	},
																},
															},
															Comma: nil,
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   163,
																		},
																		File:   "monitor.flux",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 13,
																			Line:   163,
																		},
																	},
																},
																Name: "_time",
															},
															Separator: nil,
															Value: &ast.CallExpression{
																Arguments: nil,
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   163,
																		},
																		File:   "monitor.flux",
																		Source: "now()",
																		Start: ast.Position{
																			Column: 20,
																			Line:   163,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 23,
																				Line:   163,
																			},
																			File:   "monitor.flux",
																			Source: "now",
																			Start: ast.Position{
																				Column: 20,
																				Line:   163,
																			},
																		},
																	},
																	Name: "now",
																},
																Lparen: nil,
																Rparen: nil,
															},
														}},
														Rbrace: nil,
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 23,
																		Line:   146,
																	},
																	File:   "monitor.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 22,
																		Line:   146,
																	},
																},
															},
															Name: "r",
														},
													},
													Lparen: nil,
													Rparen: nil,
												},
												Lparen: nil,
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 15,
																Line:   146,
															},
															File:   "monitor.flux",
															Source: "r",
															Start: ast.Position{
																Column: 14,
																Line:   146,
															},
														},
													},
													Comma: nil,
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 15,
																	Line:   146,
																},
																File:   "monitor.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 14,
																	Line:   146,
																},
															},
														},
														Name: "r",
													},
													Separator: nil,
													Value:     nil,
												}},
												Rparan: nil,
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 6,
												Line:   165,
											},
											File:   "monitor.flux",
											Source: "map(\n        fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id: data._check_id,\n            _check_name: data._check_name,\n            _level: if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown,\n            _source_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )",
											Start: ast.Position{
												Column: 8,
												Line:   145,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   145,
												},
												File:   "monitor.flux",
												Source: "map",
												Start: ast.Position{
													Column: 8,
													Line:   145,
												},
											},
										},
										Name: "map",
									},
									Lparen: nil,
									Rparen: nil,
								},
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   170,
									},
									File:   "monitor.flux",
									Source: "tables\n    |> experimental.set(o: data.tags)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n    |> map(\n        fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id: data._check_id,\n            _check_name: data._check_name,\n            _level: if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown,\n            _source_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )\n    |> map(\n        fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }),\n    )",
									Start: ast.Position{
										Column: 6,
										Line:   142,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   169,
											},
											File:   "monitor.flux",
											Source: "fn: (r) => ({r with\n            _message: messageFn(r: r),\n        })",
											Start: ast.Position{
												Column: 9,
												Line:   167,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   169,
												},
												File:   "monitor.flux",
												Source: "fn: (r) => ({r with\n            _message: messageFn(r: r),\n        })",
												Start: ast.Position{
													Column: 9,
													Line:   167,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   167,
													},
													File:   "monitor.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 9,
														Line:   167,
													},
												},
											},
											Name: "fn",
										},
										Separator: nil,
										Value: &ast.FunctionExpression{
											Arrow: nil,
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   169,
													},
													File:   "monitor.flux",
													Source: "(r) => ({r with\n            _message: messageFn(r: r),\n        })",
													Start: ast.Position{
														Column: 13,
														Line:   167,
													},
												},
											},
											Body: &ast.ParenExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   169,
														},
														File:   "monitor.flux",
														Source: "({r with\n            _message: messageFn(r: r),\n        })",
														Start: ast.Position{
															Column: 20,
															Line:   167,
														},
													},
												},
												Expression: &ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 10,
																Line:   169,
															},
															File:   "monitor.flux",
															Source: "{r with\n            _message: messageFn(r: r),\n        }",
															Start: ast.Position{
																Column: 21,
																Line:   167,
															},
														},
													},
													Lbrace: nil,
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 38,
																	Line:   168,
																},
																File:   "monitor.flux",
																Source: "_message: messageFn(r: r)",
																Start: ast.Position{
																	Column: 13,
																	Line:   168,
																},
															},
														},
														Comma: nil,
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   168,
																	},
																	File:   "monitor.flux",
																	Source: "_message",
																	Start: ast.Position{
																		Column: 13,
																		Line:   168,
																	},
																},
															},
															Name: "_message",
														},
														Separator: nil,
														Value: &ast.CallExpression{
															Arguments: []ast.Expression{&ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 37,
																			Line:   168,
																		},
																		File:   "monitor.flux",
																		Source: "r: r",
																		Start: ast.Position{
																			Column: 33,
																			Line:   168,
																		},
																	},
																},
																Lbrace: nil,
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Comments: nil,
																		Errors:   nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 37,
																				Line:   168,
																			},
																			File:   "monitor.flux",
																			Source: "r: r",
																			Start: ast.Position{
																				Column: 33,
																				Line:   168,
																			},
																		},
																	},
																	Comma: nil,
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 34,
																					Line:   168,
																				},
																				File:   "monitor.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 33,
																					Line:   168,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Separator: nil,
																	Value: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Comments: nil,
																			Errors:   nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 37,
																					Line:   168,
																				},
																				File:   "monitor.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 36,
																					Line:   168,
																				},
																			},
																		},
																		Name: "r",
																	},
																}},
																Rbrace: nil,
																With:   nil,
															}},
															BaseNode: ast.BaseNode{
																Comments: nil,
																Errors:   nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 38,
																		Line:   168,
																	},
																	File:   "monitor.flux",
																	Source: "messageFn(r: r)",
																	Start: ast.Position{
																		Column: 23,
																		Line:   168,
																	},
																},
															},
															Callee: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Comments: nil,
																	Errors:   nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 32,
																			Line:   168,
																		},
																		File:   "monitor.flux",
																		Source: "messageFn",
																		Start: ast.Position{
																			Column: 23,
																			Line:   168,
																		},
																	},
																},
																Name: "messageFn",
															},
															Lparen: nil,
															Rparen: nil,
														},
													}},
													Rbrace: nil,
													With: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 23,
																	Line:   167,
																},
																File:   "monitor.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 22,
																	Line:   167,
																},
															},
														},
														Name: "r",
													},
												},
												Lparen: nil,
												Rparen: nil,
											},
											Lparen: nil,
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   167,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 14,
															Line:   167,
														},
													},
												},
												Comma: nil,
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 15,
																Line:   167,
															},
															File:   "monitor.flux",
															Source: "r",
															Start: ast.Position{
																Column: 14,
																Line:   167,
															},
														},
													},
													Name: "r",
												},
												Separator: nil,
												Value:     nil,
											}},
											Rparan: nil,
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 6,
											Line:   170,
										},
										File:   "monitor.flux",
										Source: "map(\n        fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }),\n    )",
										Start: ast.Position{
											Column: 8,
											Line:   166,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   166,
											},
											File:   "monitor.flux",
											Source: "map",
											Start: ast.Position{
												Column: 8,
												Line:   166,
											},
										},
									},
									Name: "map",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   180,
								},
								File:   "monitor.flux",
								Source: "tables\n    |> experimental.set(o: data.tags)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n    |> map(\n        fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id: data._check_id,\n            _check_name: data._check_name,\n            _level: if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown,\n            _source_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )\n    |> map(\n        fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }),\n    )\n    |> experimental.group(\n        mode: \"extend\",\n        columns: [\n            \"_source_measurement\",\n            \"_type\",\n            \"_check_id\",\n            \"_check_name\",\n            \"_level\",\n        ],\n    )",
								Start: ast.Position{
									Column: 6,
									Line:   142,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   179,
										},
										File:   "monitor.flux",
										Source: "mode: \"extend\",\n        columns: [\n            \"_source_measurement\",\n            \"_type\",\n            \"_check_id\",\n            \"_check_name\",\n            \"_level\",\n        ]",
										Start: ast.Position{
											Column: 9,
											Line:   172,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   172,
											},
											File:   "monitor.flux",
											Source: "mode: \"extend\"",
											Start: ast.Position{
												Column: 9,
												Line:   172,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 13,
													Line:   172,
												},
												File:   "monitor.flux",
												Source: "mode",
												Start: ast.Position{
													Column: 9,
													Line:   172,
												},
											},
										},
										Name: "mode",
									},
									Separator: nil,
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   172,
												},
												File:   "monitor.flux",
												Source: "\"extend\"",
												Start: ast.Position{
													Column: 15,
													Line:   172,
												},
											},
										},
										Value: "extend",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 10,
												Line:   179,
											},
											File:   "monitor.flux",
											Source: "columns: [\n            \"_source_measurement\",\n            \"_type\",\n            \"_check_id\",\n            \"_check_name\",\n            \"_level\",\n        ]",
											Start: ast.Position{
												Column: 9,
												Line:   173,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   173,
												},
												File:   "monitor.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 9,
													Line:   173,
												},
											},
										},
										Name: "columns",
									},
									Separator: nil,
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 10,
													Line:   179,
												},
												File:   "monitor.flux",
												Source: "[\n            \"_source_measurement\",\n            \"_type\",\n            \"_check_id\",\n            \"_check_name\",\n            \"_level\",\n        ]",
												Start: ast.Position{
													Column: 18,
													Line:   173,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   174,
													},
													File:   "monitor.flux",
													Source: "\"_source_measurement\"",
													Start: ast.Position{
														Column: 13,
														Line:   174,
													},
												},
											},
											Value: "_source_measurement",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 20,
														Line:   175,
													},
													File:   "monitor.flux",
													Source: "\"_type\"",
													Start: ast.Position{
														Column: 13,
														Line:   175,
													},
												},
											},
											Value: "_type",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   176,
													},
													File:   "monitor.flux",
													Source: "\"_check_id\"",
													Start: ast.Position{
														Column: 13,
														Line:   176,
													},
												},
											},
											Value: "_check_id",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   177,
													},
													File:   "monitor.flux",
													Source: "\"_check_name\"",
													Start: ast.Position{
														Column: 13,
														Line:   177,
													},
												},
											},
											Value: "_check_name",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   178,
													},
													File:   "monitor.flux",
													Source: "\"_level\"",
													Start: ast.Position{
														Column: 13,
														Line:   178,
													},
												},
											},
											Value: "_level",
										}},
										Lbrack: nil,
										Rbrack: nil,
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   180,
									},
									File:   "monitor.flux",
									Source: "experimental.group(\n        mode: \"extend\",\n        columns: [\n            \"_source_measurement\",\n            \"_type\",\n            \"_check_id\",\n            \"_check_name\",\n            \"_level\",\n        ],\n    )",
									Start: ast.Position{
										Column: 8,
										Line:   171,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   171,
										},
										File:   "monitor.flux",
										Source: "experimental.group",
										Start: ast.Position{
											Column: 8,
											Line:   171,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   171,
											},
											File:   "monitor.flux",
											Source: "experimental",
											Start: ast.Position{
												Column: 8,
												Line:   171,
											},
										},
									},
									Name: "experimental",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   171,
											},
											File:   "monitor.flux",
											Source: "group",
											Start: ast.Position{
												Column: 21,
												Line:   171,
											},
										},
									},
									Name: "group",
								},
								Rbrack: nil,
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   181,
							},
							File:   "monitor.flux",
							Source: "tables\n    |> experimental.set(o: data.tags)\n    |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n    |> map(\n        fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id: data._check_id,\n            _check_name: data._check_name,\n            _level: if crit(r: r) then\n                levelCrit\n            else if warn(r: r) then\n                levelWarn\n            else if info(r: r) then\n                levelInfo\n            else if ok(r: r) then\n                levelOK\n            else\n                levelUnknown,\n            _source_timestamp: int(v: r._time),\n            _time: now(),\n        }),\n    )\n    |> map(\n        fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }),\n    )\n    |> experimental.group(\n        mode: \"extend\",\n        columns: [\n            \"_source_measurement\",\n            \"_type\",\n            \"_check_id\",\n            \"_check_name\",\n            \"_level\",\n        ],\n    )\n    |> write()",
							Start: ast.Position{
								Column: 6,
								Line:   142,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   181,
								},
								File:   "monitor.flux",
								Source: "write()",
								Start: ast.Position{
									Column: 8,
									Line:   181,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   181,
									},
									File:   "monitor.flux",
									Source: "write",
									Start: ast.Position{
										Column: 8,
										Line:   181,
									},
								},
							},
							Name: "write",
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   135,
							},
							File:   "monitor.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 9,
								Line:   135,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   135,
								},
								File:   "monitor.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 9,
									Line:   135,
								},
							},
						},
						Name: "tables",
					},
					Separator: nil,
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   135,
							},
							File:   "monitor.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 16,
								Line:   135,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   136,
							},
							File:   "monitor.flux",
							Source: "data",
							Start: ast.Position{
								Column: 9,
								Line:   136,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   136,
								},
								File:   "monitor.flux",
								Source: "data",
								Start: ast.Position{
									Column: 9,
									Line:   136,
								},
							},
						},
						Name: "data",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   137,
							},
							File:   "monitor.flux",
							Source: "messageFn",
							Start: ast.Position{
								Column: 9,
								Line:   137,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   137,
								},
								File:   "monitor.flux",
								Source: "messageFn",
								Start: ast.Position{
									Column: 9,
									Line:   137,
								},
							},
						},
						Name: "messageFn",
					},
					Separator: nil,
					Value:     nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   138,
							},
							File:   "monitor.flux",
							Source: "crit=(r) => false",
							Start: ast.Position{
								Column: 9,
								Line:   138,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   138,
								},
								File:   "monitor.flux",
								Source: "crit",
								Start: ast.Position{
									Column: 9,
									Line:   138,
								},
							},
						},
						Name: "crit",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   138,
								},
								File:   "monitor.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 14,
									Line:   138,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   138,
									},
									File:   "monitor.flux",
									Source: "false",
									Start: ast.Position{
										Column: 21,
										Line:   138,
									},
								},
							},
							Name: "false",
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   138,
									},
									File:   "monitor.flux",
									Source: "r",
									Start: ast.Position{
										Column: 15,
										Line:   138,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   138,
										},
										File:   "monitor.flux",
										Source: "r",
										Start: ast.Position{
											Column: 15,
											Line:   138,
										},
									},
								},
								Name: "r",
							},
							Separator: nil,
							Value:     nil,
						}},
						Rparan: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   139,
							},
							File:   "monitor.flux",
							Source: "warn=(r) => false",
							Start: ast.Position{
								Column: 9,
								Line:   139,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   139,
								},
								File:   "monitor.flux",
								Source: "warn",
								Start: ast.Position{
									Column: 9,
									Line:   139,
								},
							},
						},
						Name: "warn",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   139,
								},
								File:   "monitor.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 14,
									Line:   139,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   139,
									},
									File:   "monitor.flux",
									Source: "false",
									Start: ast.Position{
										Column: 21,
										Line:   139,
									},
								},
							},
							Name: "false",
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   139,
									},
									File:   "monitor.flux",
									Source: "r",
									Start: ast.Position{
										Column: 15,
										Line:   139,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   139,
										},
										File:   "monitor.flux",
										Source: "r",
										Start: ast.Position{
											Column: 15,
											Line:   139,
										},
									},
								},
								Name: "r",
							},
							Separator: nil,
							Value:     nil,
						}},
						Rparan: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   140,
							},
							File:   "monitor.flux",
							Source: "info=(r) => false",
							Start: ast.Position{
								Column: 9,
								Line:   140,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   140,
								},
								File:   "monitor.flux",
								Source: "info",
								Start: ast.Position{
									Column: 9,
									Line:   140,
								},
							},
						},
						Name: "info",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   140,
								},
								File:   "monitor.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 14,
									Line:   140,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   140,
									},
									File:   "monitor.flux",
									Source: "false",
									Start: ast.Position{
										Column: 21,
										Line:   140,
									},
								},
							},
							Name: "false",
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   140,
									},
									File:   "monitor.flux",
									Source: "r",
									Start: ast.Position{
										Column: 15,
										Line:   140,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   140,
										},
										File:   "monitor.flux",
										Source: "r",
										Start: ast.Position{
											Column: 15,
											Line:   140,
										},
									},
								},
								Name: "r",
							},
							Separator: nil,
							Value:     nil,
						}},
						Rparan: nil,
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 23,
								Line:   141,
							},
							File:   "monitor.flux",
							Source: "ok=(r) => true",
							Start: ast.Position{
								Column: 9,
								Line:   141,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   141,
								},
								File:   "monitor.flux",
								Source: "ok",
								Start: ast.Position{
									Column: 9,
									Line:   141,
								},
							},
						},
						Name: "ok",
					},
					Separator: nil,
					Value: &ast.FunctionExpression{
						Arrow: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   141,
								},
								File:   "monitor.flux",
								Source: "(r) => true",
								Start: ast.Position{
									Column: 12,
									Line:   141,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   141,
									},
									File:   "monitor.flux",
									Source: "true",
									Start: ast.Position{
										Column: 19,
										Line:   141,
									},
								},
							},
							Name: "true",
						},
						Lparen: nil,
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 14,
										Line:   141,
									},
									File:   "monitor.flux",
									Source: "r",
									Start: ast.Position{
										Column: 13,
										Line:   141,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   141,
										},
										File:   "monitor.flux",
										Source: "r",
										Start: ast.Position{
											Column: 13,
											Line:   141,
										},
									},
								},
								Name: "r",
							},
							Separator: nil,
							Value:     nil,
						}},
						Rparan: nil,
					},
				}},
				Rparan: nil,
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   4,
					},
					File:   "monitor.flux",
					Source: "import \"experimental\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   4,
						},
						File:   "monitor.flux",
						Source: "\"experimental\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "experimental",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 32,
						Line:   5,
					},
					File:   "monitor.flux",
					Source: "import \"influxdata/influxdb/v1\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 32,
							Line:   5,
						},
						File:   "monitor.flux",
						Source: "\"influxdata/influxdb/v1\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "influxdata/influxdb/v1",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   6,
					},
					File:   "monitor.flux",
					Source: "import \"influxdata/influxdb\"",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   6,
						},
						File:   "monitor.flux",
						Source: "\"influxdata/influxdb\"",
						Start: ast.Position{
							Column: 8,
							Line:   6,
						},
					},
				},
				Value: "influxdata/influxdb",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "monitor.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   1,
					},
					File:   "monitor.flux",
					Source: "package monitor",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   1,
						},
						File:   "monitor.flux",
						Source: "monitor",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "monitor",
			},
		},
	}},
	Package: "monitor",
	Path:    "influxdata/influxdb/monitor",
}
