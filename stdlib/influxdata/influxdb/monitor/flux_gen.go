// DO NOT EDIT: This file is autogenerated via the builtin command.

package monitor

import (
	flux "github.com/influxdata/flux"
	ast "github.com/influxdata/flux/ast"
)

func init() {
	flux.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 19,
					Line:   162,
				},
				File:   "monitor.flux",
				Source: "package monitor\n\nimport \"experimental\"\nimport \"influxdata/influxdb/v1\"\nimport \"influxdata/influxdb\"\n\nbucket = \"_monitoring\"\n\n// Write persists the check statuses\noption write = (tables=<-) => tables |> experimental.to(bucket: bucket)\n\n// Log records notification events\noption log = (tables=<-) => tables |> experimental.to(bucket: bucket)\n\n// From retrieves the check statuses that have been stored.\nfrom = (start, stop=now(), fn=(r) => true) =>\n    influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"statuses\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()\n\n// levels describing the result of a check\nlevelOK = \"ok\"\nlevelInfo = \"info\"\nlevelWarn = \"warn\"\nlevelCrit = \"crit\"\nlevelUnknown = \"unknown\"\n\n_stateChanges = (fromLevel=\"any\", toLevel=\"any\", tables=<-) => {\n    otherLevelFilter = if toLevel == \"any\" or fromLevel == \"any\" then (r) => false\n                   else (r) => r._level != toLevel and r._level != fromLevel\n    \n    otherStatuses = tables\n        |> filter(fn: otherLevelFilter)\n        |> map(fn: (r) => ({r with level_value: -10}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        \n    toLevelFilter = if toLevel == \"any\" then (r) => r._level != fromLevel and exists r._level\n                   else (r) => r._level == toLevel\n    \n    toStatuses = tables\n        |> filter(fn: toLevelFilter)\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n    levelFilter = if fromLevel == \"any\" then (r) => r._level != toLevel and exists r._level\n                   else (r) => r._level == fromLevel\n\n    fromStatuses = tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n     allStatuses = union(tables: [toStatuses, fromStatuses, otherStatuses])\n        |> sort(columns: [\"_time\"], desc: false)\n\n    return allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}\n\n// stateChangesOnly takes a stream of tables that contains a _level column and\n// returns a stream of tables where each record in a table represents a state change\n// of the _level column.\nstateChangesOnly = (tables=<-) => {\n    return tables\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        |> map(fn: (r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0}))\n        |> difference(columns: [\"level_value\"])\n        |> yield(name: \"foo\")\n        |> filter(fn: (r) => r.level_value != 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}\n\n// StateChanges takes a stream of tables, fromLevel, and toLevel and returns\n// a stream of tables where status has gone from fromLevel to toLevel.\n//\n// StateChanges only operates on data with data where r._level exists.\nstateChanges = (fromLevel=\"any\", toLevel=\"any\", tables=<-) => {\n    return if fromLevel == \"any\" and toLevel == \"any\" then tables |> stateChangesOnly()\n           else tables |> _stateChanges(fromLevel: fromLevel, toLevel: toLevel)\n}\n\n// Notify will call the endpoint and log the results.\nnotify = (tables=<-, endpoint, data={}) =>\n    tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n        |> map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))\n        |> endpoint()\n        |> experimental.group(mode: \"extend\", columns: [\"_sent\"])\n        |> log()\n\n// Logs retrieves notification events that have been logged.\nlogs = (start, stop=now(), fn) =>\n    influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"notifications\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()\n\n// Deadman takes in a stream of tables and reports which tables\n// were observed strictly before t and which were observed after.\n//\ndeadman = (t, tables=<-) => tables\n    |> max(column: \"_time\")\n    |> map(fn: (r) => ( {r with dead: r._time < t} ))\n\n// Check performs a check against its input using the given ok, info, warn and crit functions\n// and writes the result to a system bucket.\ncheck = (\n    tables=<-,\n    data,\n    messageFn,\n    crit=(r) => false,\n    warn=(r) => false,\n    info=(r) => false,\n    ok=(r) => true\n) =>\n    tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n        |> map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))\n        |> map(fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }))\n        |> experimental.group(mode: \"extend\", columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"])\n        |> write()",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 23,
						Line:   7,
					},
					File:   "monitor.flux",
					Source: "bucket = \"_monitoring\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   7,
						},
						File:   "monitor.flux",
						Source: "bucket",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "bucket",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 23,
							Line:   7,
						},
						File:   "monitor.flux",
						Source: "\"_monitoring\"",
						Start: ast.Position{
							Column: 10,
							Line:   7,
						},
					},
				},
				Value: "_monitoring",
			},
		}, &ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 72,
							Line:   10,
						},
						File:   "monitor.flux",
						Source: "write = (tables=<-) => tables |> experimental.to(bucket: bucket)",
						Start: ast.Position{
							Column: 8,
							Line:   10,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   10,
							},
							File:   "monitor.flux",
							Source: "write",
							Start: ast.Position{
								Column: 8,
								Line:   10,
							},
						},
					},
					Name: "write",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 72,
								Line:   10,
							},
							File:   "monitor.flux",
							Source: "(tables=<-) => tables |> experimental.to(bucket: bucket)",
							Start: ast.Position{
								Column: 16,
								Line:   10,
							},
						},
					},
					Body: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   10,
									},
									File:   "monitor.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 31,
										Line:   10,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 72,
									Line:   10,
								},
								File:   "monitor.flux",
								Source: "tables |> experimental.to(bucket: bucket)",
								Start: ast.Position{
									Column: 31,
									Line:   10,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 71,
											Line:   10,
										},
										File:   "monitor.flux",
										Source: "bucket: bucket",
										Start: ast.Position{
											Column: 57,
											Line:   10,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 71,
												Line:   10,
											},
											File:   "monitor.flux",
											Source: "bucket: bucket",
											Start: ast.Position{
												Column: 57,
												Line:   10,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 63,
													Line:   10,
												},
												File:   "monitor.flux",
												Source: "bucket",
												Start: ast.Position{
													Column: 57,
													Line:   10,
												},
											},
										},
										Name: "bucket",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 71,
													Line:   10,
												},
												File:   "monitor.flux",
												Source: "bucket",
												Start: ast.Position{
													Column: 65,
													Line:   10,
												},
											},
										},
										Name: "bucket",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 72,
										Line:   10,
									},
									File:   "monitor.flux",
									Source: "experimental.to(bucket: bucket)",
									Start: ast.Position{
										Column: 41,
										Line:   10,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 56,
											Line:   10,
										},
										File:   "monitor.flux",
										Source: "experimental.to",
										Start: ast.Position{
											Column: 41,
											Line:   10,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   10,
											},
											File:   "monitor.flux",
											Source: "experimental",
											Start: ast.Position{
												Column: 41,
												Line:   10,
											},
										},
									},
									Name: "experimental",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 56,
												Line:   10,
											},
											File:   "monitor.flux",
											Source: "to",
											Start: ast.Position{
												Column: 54,
												Line:   10,
											},
										},
									},
									Name: "to",
								},
							},
						},
					},
					Params: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   10,
								},
								File:   "monitor.flux",
								Source: "tables=<-",
								Start: ast.Position{
									Column: 17,
									Line:   10,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   10,
									},
									File:   "monitor.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 17,
										Line:   10,
									},
								},
							},
							Name: "tables",
						},
						Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   10,
								},
								File:   "monitor.flux",
								Source: "<-",
								Start: ast.Position{
									Column: 24,
									Line:   10,
								},
							},
						}},
					}},
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 72,
						Line:   10,
					},
					File:   "monitor.flux",
					Source: "option write = (tables=<-) => tables |> experimental.to(bucket: bucket)",
					Start: ast.Position{
						Column: 1,
						Line:   10,
					},
				},
			},
		}, &ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 70,
							Line:   13,
						},
						File:   "monitor.flux",
						Source: "log = (tables=<-) => tables |> experimental.to(bucket: bucket)",
						Start: ast.Position{
							Column: 8,
							Line:   13,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   13,
							},
							File:   "monitor.flux",
							Source: "log",
							Start: ast.Position{
								Column: 8,
								Line:   13,
							},
						},
					},
					Name: "log",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 70,
								Line:   13,
							},
							File:   "monitor.flux",
							Source: "(tables=<-) => tables |> experimental.to(bucket: bucket)",
							Start: ast.Position{
								Column: 14,
								Line:   13,
							},
						},
					},
					Body: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   13,
									},
									File:   "monitor.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 29,
										Line:   13,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 70,
									Line:   13,
								},
								File:   "monitor.flux",
								Source: "tables |> experimental.to(bucket: bucket)",
								Start: ast.Position{
									Column: 29,
									Line:   13,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 69,
											Line:   13,
										},
										File:   "monitor.flux",
										Source: "bucket: bucket",
										Start: ast.Position{
											Column: 55,
											Line:   13,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 69,
												Line:   13,
											},
											File:   "monitor.flux",
											Source: "bucket: bucket",
											Start: ast.Position{
												Column: 55,
												Line:   13,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 61,
													Line:   13,
												},
												File:   "monitor.flux",
												Source: "bucket",
												Start: ast.Position{
													Column: 55,
													Line:   13,
												},
											},
										},
										Name: "bucket",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 69,
													Line:   13,
												},
												File:   "monitor.flux",
												Source: "bucket",
												Start: ast.Position{
													Column: 63,
													Line:   13,
												},
											},
										},
										Name: "bucket",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 70,
										Line:   13,
									},
									File:   "monitor.flux",
									Source: "experimental.to(bucket: bucket)",
									Start: ast.Position{
										Column: 39,
										Line:   13,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   13,
										},
										File:   "monitor.flux",
										Source: "experimental.to",
										Start: ast.Position{
											Column: 39,
											Line:   13,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   13,
											},
											File:   "monitor.flux",
											Source: "experimental",
											Start: ast.Position{
												Column: 39,
												Line:   13,
											},
										},
									},
									Name: "experimental",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   13,
											},
											File:   "monitor.flux",
											Source: "to",
											Start: ast.Position{
												Column: 52,
												Line:   13,
											},
										},
									},
									Name: "to",
								},
							},
						},
					},
					Params: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   13,
								},
								File:   "monitor.flux",
								Source: "tables=<-",
								Start: ast.Position{
									Column: 15,
									Line:   13,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   13,
									},
									File:   "monitor.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 15,
										Line:   13,
									},
								},
							},
							Name: "tables",
						},
						Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   13,
								},
								File:   "monitor.flux",
								Source: "<-",
								Start: ast.Position{
									Column: 22,
									Line:   13,
								},
							},
						}},
					}},
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 70,
						Line:   13,
					},
					File:   "monitor.flux",
					Source: "option log = (tables=<-) => tables |> experimental.to(bucket: bucket)",
					Start: ast.Position{
						Column: 1,
						Line:   13,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   21,
					},
					File:   "monitor.flux",
					Source: "from = (start, stop=now(), fn=(r) => true) =>\n    influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"statuses\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
					Start: ast.Position{
						Column: 1,
						Line:   16,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   16,
						},
						File:   "monitor.flux",
						Source: "from",
						Start: ast.Position{
							Column: 1,
							Line:   16,
						},
					},
				},
				Name: "from",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   21,
						},
						File:   "monitor.flux",
						Source: "(start, stop=now(), fn=(r) => true) =>\n    influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"statuses\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
						Start: ast.Position{
							Column: 8,
							Line:   16,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   17,
												},
												File:   "monitor.flux",
												Source: "bucket: bucket",
												Start: ast.Position{
													Column: 19,
													Line:   17,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   17,
													},
													File:   "monitor.flux",
													Source: "bucket: bucket",
													Start: ast.Position{
														Column: 19,
														Line:   17,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   17,
														},
														File:   "monitor.flux",
														Source: "bucket",
														Start: ast.Position{
															Column: 19,
															Line:   17,
														},
													},
												},
												Name: "bucket",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 33,
															Line:   17,
														},
														File:   "monitor.flux",
														Source: "bucket",
														Start: ast.Position{
															Column: 27,
															Line:   17,
														},
													},
												},
												Name: "bucket",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   17,
											},
											File:   "monitor.flux",
											Source: "influxdb.from(bucket: bucket)",
											Start: ast.Position{
												Column: 5,
												Line:   17,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   17,
												},
												File:   "monitor.flux",
												Source: "influxdb.from",
												Start: ast.Position{
													Column: 5,
													Line:   17,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   17,
													},
													File:   "monitor.flux",
													Source: "influxdb",
													Start: ast.Position{
														Column: 5,
														Line:   17,
													},
												},
											},
											Name: "influxdb",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   17,
													},
													File:   "monitor.flux",
													Source: "from",
													Start: ast.Position{
														Column: 14,
														Line:   17,
													},
												},
											},
											Name: "from",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   18,
										},
										File:   "monitor.flux",
										Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)",
										Start: ast.Position{
											Column: 5,
											Line:   17,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   18,
												},
												File:   "monitor.flux",
												Source: "start: start, stop: stop",
												Start: ast.Position{
													Column: 18,
													Line:   18,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   18,
													},
													File:   "monitor.flux",
													Source: "start: start",
													Start: ast.Position{
														Column: 18,
														Line:   18,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 23,
															Line:   18,
														},
														File:   "monitor.flux",
														Source: "start",
														Start: ast.Position{
															Column: 18,
															Line:   18,
														},
													},
												},
												Name: "start",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   18,
														},
														File:   "monitor.flux",
														Source: "start",
														Start: ast.Position{
															Column: 25,
															Line:   18,
														},
													},
												},
												Name: "start",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   18,
													},
													File:   "monitor.flux",
													Source: "stop: stop",
													Start: ast.Position{
														Column: 32,
														Line:   18,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   18,
														},
														File:   "monitor.flux",
														Source: "stop",
														Start: ast.Position{
															Column: 32,
															Line:   18,
														},
													},
												},
												Name: "stop",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   18,
														},
														File:   "monitor.flux",
														Source: "stop",
														Start: ast.Position{
															Column: 38,
															Line:   18,
														},
													},
												},
												Name: "stop",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   18,
											},
											File:   "monitor.flux",
											Source: "range(start: start, stop: stop)",
											Start: ast.Position{
												Column: 12,
												Line:   18,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   18,
												},
												File:   "monitor.flux",
												Source: "range",
												Start: ast.Position{
													Column: 12,
													Line:   18,
												},
											},
										},
										Name: "range",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 59,
										Line:   19,
									},
									File:   "monitor.flux",
									Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"statuses\")",
									Start: ast.Position{
										Column: 5,
										Line:   17,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 58,
												Line:   19,
											},
											File:   "monitor.flux",
											Source: "fn: (r) => r._measurement == \"statuses\"",
											Start: ast.Position{
												Column: 19,
												Line:   19,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 58,
													Line:   19,
												},
												File:   "monitor.flux",
												Source: "fn: (r) => r._measurement == \"statuses\"",
												Start: ast.Position{
													Column: 19,
													Line:   19,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   19,
													},
													File:   "monitor.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 19,
														Line:   19,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 58,
														Line:   19,
													},
													File:   "monitor.flux",
													Source: "(r) => r._measurement == \"statuses\"",
													Start: ast.Position{
														Column: 23,
														Line:   19,
													},
												},
											},
											Body: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   19,
														},
														File:   "monitor.flux",
														Source: "r._measurement == \"statuses\"",
														Start: ast.Position{
															Column: 30,
															Line:   19,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   19,
															},
															File:   "monitor.flux",
															Source: "r._measurement",
															Start: ast.Position{
																Column: 30,
																Line:   19,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   19,
																},
																File:   "monitor.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 30,
																	Line:   19,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   19,
																},
																File:   "monitor.flux",
																Source: "_measurement",
																Start: ast.Position{
																	Column: 32,
																	Line:   19,
																},
															},
														},
														Name: "_measurement",
													},
												},
												Operator: 17,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 58,
																Line:   19,
															},
															File:   "monitor.flux",
															Source: "\"statuses\"",
															Start: ast.Position{
																Column: 48,
																Line:   19,
															},
														},
													},
													Value: "statuses",
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   19,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 24,
															Line:   19,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 25,
																Line:   19,
															},
															File:   "monitor.flux",
															Source: "r",
															Start: ast.Position{
																Column: 24,
																Line:   19,
															},
														},
													},
													Name: "r",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   19,
										},
										File:   "monitor.flux",
										Source: "filter(fn: (r) => r._measurement == \"statuses\")",
										Start: ast.Position{
											Column: 12,
											Line:   19,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   19,
											},
											File:   "monitor.flux",
											Source: "filter",
											Start: ast.Position{
												Column: 12,
												Line:   19,
											},
										},
									},
									Name: "filter",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   20,
								},
								File:   "monitor.flux",
								Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"statuses\")\n        |> filter(fn: fn)",
								Start: ast.Position{
									Column: 5,
									Line:   17,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   20,
										},
										File:   "monitor.flux",
										Source: "fn: fn",
										Start: ast.Position{
											Column: 19,
											Line:   20,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   20,
											},
											File:   "monitor.flux",
											Source: "fn: fn",
											Start: ast.Position{
												Column: 19,
												Line:   20,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   20,
												},
												File:   "monitor.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 19,
													Line:   20,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   20,
												},
												File:   "monitor.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 23,
													Line:   20,
												},
											},
										},
										Name: "fn",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   20,
									},
									File:   "monitor.flux",
									Source: "filter(fn: fn)",
									Start: ast.Position{
										Column: 12,
										Line:   20,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   20,
										},
										File:   "monitor.flux",
										Source: "filter",
										Start: ast.Position{
											Column: 12,
											Line:   20,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   21,
							},
							File:   "monitor.flux",
							Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"statuses\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
							Start: ast.Position{
								Column: 5,
								Line:   17,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   21,
								},
								File:   "monitor.flux",
								Source: "v1.fieldsAsCols()",
								Start: ast.Position{
									Column: 12,
									Line:   21,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   21,
									},
									File:   "monitor.flux",
									Source: "v1.fieldsAsCols",
									Start: ast.Position{
										Column: 12,
										Line:   21,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   21,
										},
										File:   "monitor.flux",
										Source: "v1",
										Start: ast.Position{
											Column: 12,
											Line:   21,
										},
									},
								},
								Name: "v1",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   21,
										},
										File:   "monitor.flux",
										Source: "fieldsAsCols",
										Start: ast.Position{
											Column: 15,
											Line:   21,
										},
									},
								},
								Name: "fieldsAsCols",
							},
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   16,
							},
							File:   "monitor.flux",
							Source: "start",
							Start: ast.Position{
								Column: 9,
								Line:   16,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   16,
								},
								File:   "monitor.flux",
								Source: "start",
								Start: ast.Position{
									Column: 9,
									Line:   16,
								},
							},
						},
						Name: "start",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   16,
							},
							File:   "monitor.flux",
							Source: "stop=now()",
							Start: ast.Position{
								Column: 16,
								Line:   16,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   16,
								},
								File:   "monitor.flux",
								Source: "stop",
								Start: ast.Position{
									Column: 16,
									Line:   16,
								},
							},
						},
						Name: "stop",
					},
					Value: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   16,
								},
								File:   "monitor.flux",
								Source: "now()",
								Start: ast.Position{
									Column: 21,
									Line:   16,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   16,
									},
									File:   "monitor.flux",
									Source: "now",
									Start: ast.Position{
										Column: 21,
										Line:   16,
									},
								},
							},
							Name: "now",
						},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   16,
							},
							File:   "monitor.flux",
							Source: "fn=(r) => true",
							Start: ast.Position{
								Column: 28,
								Line:   16,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   16,
								},
								File:   "monitor.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 28,
									Line:   16,
								},
							},
						},
						Name: "fn",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   16,
								},
								File:   "monitor.flux",
								Source: "(r) => true",
								Start: ast.Position{
									Column: 31,
									Line:   16,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   16,
									},
									File:   "monitor.flux",
									Source: "true",
									Start: ast.Position{
										Column: 38,
										Line:   16,
									},
								},
							},
							Name: "true",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   16,
									},
									File:   "monitor.flux",
									Source: "r",
									Start: ast.Position{
										Column: 32,
										Line:   16,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   16,
										},
										File:   "monitor.flux",
										Source: "r",
										Start: ast.Position{
											Column: 32,
											Line:   16,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   24,
					},
					File:   "monitor.flux",
					Source: "levelOK = \"ok\"",
					Start: ast.Position{
						Column: 1,
						Line:   24,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   24,
						},
						File:   "monitor.flux",
						Source: "levelOK",
						Start: ast.Position{
							Column: 1,
							Line:   24,
						},
					},
				},
				Name: "levelOK",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   24,
						},
						File:   "monitor.flux",
						Source: "\"ok\"",
						Start: ast.Position{
							Column: 11,
							Line:   24,
						},
					},
				},
				Value: "ok",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   25,
					},
					File:   "monitor.flux",
					Source: "levelInfo = \"info\"",
					Start: ast.Position{
						Column: 1,
						Line:   25,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   25,
						},
						File:   "monitor.flux",
						Source: "levelInfo",
						Start: ast.Position{
							Column: 1,
							Line:   25,
						},
					},
				},
				Name: "levelInfo",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   25,
						},
						File:   "monitor.flux",
						Source: "\"info\"",
						Start: ast.Position{
							Column: 13,
							Line:   25,
						},
					},
				},
				Value: "info",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   26,
					},
					File:   "monitor.flux",
					Source: "levelWarn = \"warn\"",
					Start: ast.Position{
						Column: 1,
						Line:   26,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   26,
						},
						File:   "monitor.flux",
						Source: "levelWarn",
						Start: ast.Position{
							Column: 1,
							Line:   26,
						},
					},
				},
				Name: "levelWarn",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   26,
						},
						File:   "monitor.flux",
						Source: "\"warn\"",
						Start: ast.Position{
							Column: 13,
							Line:   26,
						},
					},
				},
				Value: "warn",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   27,
					},
					File:   "monitor.flux",
					Source: "levelCrit = \"crit\"",
					Start: ast.Position{
						Column: 1,
						Line:   27,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   27,
						},
						File:   "monitor.flux",
						Source: "levelCrit",
						Start: ast.Position{
							Column: 1,
							Line:   27,
						},
					},
				},
				Name: "levelCrit",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   27,
						},
						File:   "monitor.flux",
						Source: "\"crit\"",
						Start: ast.Position{
							Column: 13,
							Line:   27,
						},
					},
				},
				Value: "crit",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 25,
						Line:   28,
					},
					File:   "monitor.flux",
					Source: "levelUnknown = \"unknown\"",
					Start: ast.Position{
						Column: 1,
						Line:   28,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   28,
						},
						File:   "monitor.flux",
						Source: "levelUnknown",
						Start: ast.Position{
							Column: 1,
							Line:   28,
						},
					},
				},
				Name: "levelUnknown",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 25,
							Line:   28,
						},
						File:   "monitor.flux",
						Source: "\"unknown\"",
						Start: ast.Position{
							Column: 16,
							Line:   28,
						},
					},
				},
				Value: "unknown",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   69,
					},
					File:   "monitor.flux",
					Source: "_stateChanges = (fromLevel=\"any\", toLevel=\"any\", tables=<-) => {\n    otherLevelFilter = if toLevel == \"any\" or fromLevel == \"any\" then (r) => false\n                   else (r) => r._level != toLevel and r._level != fromLevel\n    \n    otherStatuses = tables\n        |> filter(fn: otherLevelFilter)\n        |> map(fn: (r) => ({r with level_value: -10}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        \n    toLevelFilter = if toLevel == \"any\" then (r) => r._level != fromLevel and exists r._level\n                   else (r) => r._level == toLevel\n    \n    toStatuses = tables\n        |> filter(fn: toLevelFilter)\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n    levelFilter = if fromLevel == \"any\" then (r) => r._level != toLevel and exists r._level\n                   else (r) => r._level == fromLevel\n\n    fromStatuses = tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n     allStatuses = union(tables: [toStatuses, fromStatuses, otherStatuses])\n        |> sort(columns: [\"_time\"], desc: false)\n\n    return allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
					Start: ast.Position{
						Column: 1,
						Line:   30,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   30,
						},
						File:   "monitor.flux",
						Source: "_stateChanges",
						Start: ast.Position{
							Column: 1,
							Line:   30,
						},
					},
				},
				Name: "_stateChanges",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   69,
						},
						File:   "monitor.flux",
						Source: "(fromLevel=\"any\", toLevel=\"any\", tables=<-) => {\n    otherLevelFilter = if toLevel == \"any\" or fromLevel == \"any\" then (r) => false\n                   else (r) => r._level != toLevel and r._level != fromLevel\n    \n    otherStatuses = tables\n        |> filter(fn: otherLevelFilter)\n        |> map(fn: (r) => ({r with level_value: -10}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        \n    toLevelFilter = if toLevel == \"any\" then (r) => r._level != fromLevel and exists r._level\n                   else (r) => r._level == toLevel\n    \n    toStatuses = tables\n        |> filter(fn: toLevelFilter)\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n    levelFilter = if fromLevel == \"any\" then (r) => r._level != toLevel and exists r._level\n                   else (r) => r._level == fromLevel\n\n    fromStatuses = tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n     allStatuses = union(tables: [toStatuses, fromStatuses, otherStatuses])\n        |> sort(columns: [\"_time\"], desc: false)\n\n    return allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
						Start: ast.Position{
							Column: 17,
							Line:   30,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   69,
							},
							File:   "monitor.flux",
							Source: "{\n    otherLevelFilter = if toLevel == \"any\" or fromLevel == \"any\" then (r) => false\n                   else (r) => r._level != toLevel and r._level != fromLevel\n    \n    otherStatuses = tables\n        |> filter(fn: otherLevelFilter)\n        |> map(fn: (r) => ({r with level_value: -10}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        \n    toLevelFilter = if toLevel == \"any\" then (r) => r._level != fromLevel and exists r._level\n                   else (r) => r._level == toLevel\n    \n    toStatuses = tables\n        |> filter(fn: toLevelFilter)\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n    levelFilter = if fromLevel == \"any\" then (r) => r._level != toLevel and exists r._level\n                   else (r) => r._level == fromLevel\n\n    fromStatuses = tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n\n     allStatuses = union(tables: [toStatuses, fromStatuses, otherStatuses])\n        |> sort(columns: [\"_time\"], desc: false)\n\n    return allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
							Start: ast.Position{
								Column: 64,
								Line:   30,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 77,
									Line:   32,
								},
								File:   "monitor.flux",
								Source: "otherLevelFilter = if toLevel == \"any\" or fromLevel == \"any\" then (r) => false\n                   else (r) => r._level != toLevel and r._level != fromLevel",
								Start: ast.Position{
									Column: 5,
									Line:   31,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   31,
									},
									File:   "monitor.flux",
									Source: "otherLevelFilter",
									Start: ast.Position{
										Column: 5,
										Line:   31,
									},
								},
							},
							Name: "otherLevelFilter",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 77,
											Line:   32,
										},
										File:   "monitor.flux",
										Source: "(r) => r._level != toLevel and r._level != fromLevel",
										Start: ast.Position{
											Column: 25,
											Line:   32,
										},
									},
								},
								Body: &ast.LogicalExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 77,
												Line:   32,
											},
											File:   "monitor.flux",
											Source: "r._level != toLevel and r._level != fromLevel",
											Start: ast.Position{
												Column: 32,
												Line:   32,
											},
										},
									},
									Left: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   32,
												},
												File:   "monitor.flux",
												Source: "r._level != toLevel",
												Start: ast.Position{
													Column: 32,
													Line:   32,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   32,
													},
													File:   "monitor.flux",
													Source: "r._level",
													Start: ast.Position{
														Column: 32,
														Line:   32,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 33,
															Line:   32,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 32,
															Line:   32,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   32,
														},
														File:   "monitor.flux",
														Source: "_level",
														Start: ast.Position{
															Column: 34,
															Line:   32,
														},
													},
												},
												Name: "_level",
											},
										},
										Operator: 18,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   32,
													},
													File:   "monitor.flux",
													Source: "toLevel",
													Start: ast.Position{
														Column: 44,
														Line:   32,
													},
												},
											},
											Name: "toLevel",
										},
									},
									Operator: 1,
									Right: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 77,
													Line:   32,
												},
												File:   "monitor.flux",
												Source: "r._level != fromLevel",
												Start: ast.Position{
													Column: 56,
													Line:   32,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 64,
														Line:   32,
													},
													File:   "monitor.flux",
													Source: "r._level",
													Start: ast.Position{
														Column: 56,
														Line:   32,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 57,
															Line:   32,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 56,
															Line:   32,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 64,
															Line:   32,
														},
														File:   "monitor.flux",
														Source: "_level",
														Start: ast.Position{
															Column: 58,
															Line:   32,
														},
													},
												},
												Name: "_level",
											},
										},
										Operator: 18,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 77,
														Line:   32,
													},
													File:   "monitor.flux",
													Source: "fromLevel",
													Start: ast.Position{
														Column: 68,
														Line:   32,
													},
												},
											},
											Name: "fromLevel",
										},
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   32,
											},
											File:   "monitor.flux",
											Source: "r",
											Start: ast.Position{
												Column: 26,
												Line:   32,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   32,
												},
												File:   "monitor.flux",
												Source: "r",
												Start: ast.Position{
													Column: 26,
													Line:   32,
												},
											},
										},
										Name: "r",
									},
									Value: nil,
								}},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 77,
										Line:   32,
									},
									File:   "monitor.flux",
									Source: "if toLevel == \"any\" or fromLevel == \"any\" then (r) => false\n                   else (r) => r._level != toLevel and r._level != fromLevel",
									Start: ast.Position{
										Column: 24,
										Line:   31,
									},
								},
							},
							Consequent: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 83,
											Line:   31,
										},
										File:   "monitor.flux",
										Source: "(r) => false",
										Start: ast.Position{
											Column: 71,
											Line:   31,
										},
									},
								},
								Body: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 83,
												Line:   31,
											},
											File:   "monitor.flux",
											Source: "false",
											Start: ast.Position{
												Column: 78,
												Line:   31,
											},
										},
									},
									Name: "false",
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 73,
												Line:   31,
											},
											File:   "monitor.flux",
											Source: "r",
											Start: ast.Position{
												Column: 72,
												Line:   31,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 73,
													Line:   31,
												},
												File:   "monitor.flux",
												Source: "r",
												Start: ast.Position{
													Column: 72,
													Line:   31,
												},
											},
										},
										Name: "r",
									},
									Value: nil,
								}},
							},
							Test: &ast.LogicalExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   31,
										},
										File:   "monitor.flux",
										Source: "toLevel == \"any\" or fromLevel == \"any\"",
										Start: ast.Position{
											Column: 27,
											Line:   31,
										},
									},
								},
								Left: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   31,
											},
											File:   "monitor.flux",
											Source: "toLevel == \"any\"",
											Start: ast.Position{
												Column: 27,
												Line:   31,
											},
										},
									},
									Left: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   31,
												},
												File:   "monitor.flux",
												Source: "toLevel",
												Start: ast.Position{
													Column: 27,
													Line:   31,
												},
											},
										},
										Name: "toLevel",
									},
									Operator: 17,
									Right: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   31,
												},
												File:   "monitor.flux",
												Source: "\"any\"",
												Start: ast.Position{
													Column: 38,
													Line:   31,
												},
											},
										},
										Value: "any",
									},
								},
								Operator: 2,
								Right: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   31,
											},
											File:   "monitor.flux",
											Source: "fromLevel == \"any\"",
											Start: ast.Position{
												Column: 47,
												Line:   31,
											},
										},
									},
									Left: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 56,
													Line:   31,
												},
												File:   "monitor.flux",
												Source: "fromLevel",
												Start: ast.Position{
													Column: 47,
													Line:   31,
												},
											},
										},
										Name: "fromLevel",
									},
									Operator: 17,
									Right: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 65,
													Line:   31,
												},
												File:   "monitor.flux",
												Source: "\"any\"",
												Start: ast.Position{
													Column: 60,
													Line:   31,
												},
											},
										},
										Value: "any",
									},
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   39,
								},
								File:   "monitor.flux",
								Source: "otherStatuses = tables\n        |> filter(fn: otherLevelFilter)\n        |> map(fn: (r) => ({r with level_value: -10}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})",
								Start: ast.Position{
									Column: 5,
									Line:   34,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   34,
									},
									File:   "monitor.flux",
									Source: "otherStatuses",
									Start: ast.Position{
										Column: 5,
										Line:   34,
									},
								},
							},
							Name: "otherStatuses",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   34,
														},
														File:   "monitor.flux",
														Source: "tables",
														Start: ast.Position{
															Column: 21,
															Line:   34,
														},
													},
												},
												Name: "tables",
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   35,
													},
													File:   "monitor.flux",
													Source: "tables\n        |> filter(fn: otherLevelFilter)",
													Start: ast.Position{
														Column: 21,
														Line:   34,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 39,
																Line:   35,
															},
															File:   "monitor.flux",
															Source: "fn: otherLevelFilter",
															Start: ast.Position{
																Column: 19,
																Line:   35,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 39,
																	Line:   35,
																},
																File:   "monitor.flux",
																Source: "fn: otherLevelFilter",
																Start: ast.Position{
																	Column: 19,
																	Line:   35,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   35,
																	},
																	File:   "monitor.flux",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 19,
																		Line:   35,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 39,
																		Line:   35,
																	},
																	File:   "monitor.flux",
																	Source: "otherLevelFilter",
																	Start: ast.Position{
																		Column: 23,
																		Line:   35,
																	},
																},
															},
															Name: "otherLevelFilter",
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   35,
														},
														File:   "monitor.flux",
														Source: "filter(fn: otherLevelFilter)",
														Start: ast.Position{
															Column: 12,
															Line:   35,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   35,
															},
															File:   "monitor.flux",
															Source: "filter",
															Start: ast.Position{
																Column: 12,
																Line:   35,
															},
														},
													},
													Name: "filter",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 55,
													Line:   36,
												},
												File:   "monitor.flux",
												Source: "tables\n        |> filter(fn: otherLevelFilter)\n        |> map(fn: (r) => ({r with level_value: -10}))",
												Start: ast.Position{
													Column: 21,
													Line:   34,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 54,
															Line:   36,
														},
														File:   "monitor.flux",
														Source: "fn: (r) => ({r with level_value: -10})",
														Start: ast.Position{
															Column: 16,
															Line:   36,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 54,
																Line:   36,
															},
															File:   "monitor.flux",
															Source: "fn: (r) => ({r with level_value: -10})",
															Start: ast.Position{
																Column: 16,
																Line:   36,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   36,
																},
																File:   "monitor.flux",
																Source: "fn",
																Start: ast.Position{
																	Column: 16,
																	Line:   36,
																},
															},
														},
														Name: "fn",
													},
													Value: &ast.FunctionExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 54,
																	Line:   36,
																},
																File:   "monitor.flux",
																Source: "(r) => ({r with level_value: -10})",
																Start: ast.Position{
																	Column: 20,
																	Line:   36,
																},
															},
														},
														Body: &ast.ParenExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 54,
																		Line:   36,
																	},
																	File:   "monitor.flux",
																	Source: "({r with level_value: -10})",
																	Start: ast.Position{
																		Column: 27,
																		Line:   36,
																	},
																},
															},
															Expression: &ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 53,
																			Line:   36,
																		},
																		File:   "monitor.flux",
																		Source: "{r with level_value: -10}",
																		Start: ast.Position{
																			Column: 28,
																			Line:   36,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 52,
																				Line:   36,
																			},
																			File:   "monitor.flux",
																			Source: "level_value: -10",
																			Start: ast.Position{
																				Column: 36,
																				Line:   36,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 47,
																					Line:   36,
																				},
																				File:   "monitor.flux",
																				Source: "level_value",
																				Start: ast.Position{
																					Column: 36,
																					Line:   36,
																				},
																			},
																		},
																		Name: "level_value",
																	},
																	Value: &ast.UnaryExpression{
																		Argument: &ast.IntegerLiteral{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 52,
																						Line:   36,
																					},
																					File:   "monitor.flux",
																					Source: "10",
																					Start: ast.Position{
																						Column: 50,
																						Line:   36,
																					},
																				},
																			},
																			Value: int64(10),
																		},
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 52,
																					Line:   36,
																				},
																				File:   "monitor.flux",
																				Source: "-10",
																				Start: ast.Position{
																					Column: 49,
																					Line:   36,
																				},
																			},
																		},
																		Operator: 6,
																	},
																}},
																With: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   36,
																			},
																			File:   "monitor.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 29,
																				Line:   36,
																			},
																		},
																	},
																	Name: "r",
																},
															},
														},
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 22,
																		Line:   36,
																	},
																	File:   "monitor.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 21,
																		Line:   36,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 22,
																			Line:   36,
																		},
																		File:   "monitor.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 21,
																			Line:   36,
																		},
																	},
																},
																Name: "r",
															},
															Value: nil,
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 55,
														Line:   36,
													},
													File:   "monitor.flux",
													Source: "map(fn: (r) => ({r with level_value: -10}))",
													Start: ast.Position{
														Column: 12,
														Line:   36,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   36,
														},
														File:   "monitor.flux",
														Source: "map",
														Start: ast.Position{
															Column: 12,
															Line:   36,
														},
													},
												},
												Name: "map",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   37,
											},
											File:   "monitor.flux",
											Source: "tables\n        |> filter(fn: otherLevelFilter)\n        |> map(fn: (r) => ({r with level_value: -10}))\n        |> duplicate(column: \"_level\", as: \"l2\")",
											Start: ast.Position{
												Column: 21,
												Line:   34,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   37,
													},
													File:   "monitor.flux",
													Source: "column: \"_level\", as: \"l2\"",
													Start: ast.Position{
														Column: 22,
														Line:   37,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   37,
														},
														File:   "monitor.flux",
														Source: "column: \"_level\"",
														Start: ast.Position{
															Column: 22,
															Line:   37,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   37,
															},
															File:   "monitor.flux",
															Source: "column",
															Start: ast.Position{
																Column: 22,
																Line:   37,
															},
														},
													},
													Name: "column",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   37,
															},
															File:   "monitor.flux",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 30,
																Line:   37,
															},
														},
													},
													Value: "_level",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   37,
														},
														File:   "monitor.flux",
														Source: "as: \"l2\"",
														Start: ast.Position{
															Column: 40,
															Line:   37,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   37,
															},
															File:   "monitor.flux",
															Source: "as",
															Start: ast.Position{
																Column: 40,
																Line:   37,
															},
														},
													},
													Name: "as",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   37,
															},
															File:   "monitor.flux",
															Source: "\"l2\"",
															Start: ast.Position{
																Column: 44,
																Line:   37,
															},
														},
													},
													Value: "l2",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   37,
												},
												File:   "monitor.flux",
												Source: "duplicate(column: \"_level\", as: \"l2\")",
												Start: ast.Position{
													Column: 12,
													Line:   37,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   37,
													},
													File:   "monitor.flux",
													Source: "duplicate",
													Start: ast.Position{
														Column: 12,
														Line:   37,
													},
												},
											},
											Name: "duplicate",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   38,
										},
										File:   "monitor.flux",
										Source: "tables\n        |> filter(fn: otherLevelFilter)\n        |> map(fn: (r) => ({r with level_value: -10}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])",
										Start: ast.Position{
											Column: 21,
											Line:   34,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   38,
												},
												File:   "monitor.flux",
												Source: "columns: [\"_level\"]",
												Start: ast.Position{
													Column: 17,
													Line:   38,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   38,
													},
													File:   "monitor.flux",
													Source: "columns: [\"_level\"]",
													Start: ast.Position{
														Column: 17,
														Line:   38,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   38,
														},
														File:   "monitor.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 17,
															Line:   38,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   38,
														},
														File:   "monitor.flux",
														Source: "[\"_level\"]",
														Start: ast.Position{
															Column: 26,
															Line:   38,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   38,
															},
															File:   "monitor.flux",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 27,
																Line:   38,
															},
														},
													},
													Value: "_level",
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   38,
											},
											File:   "monitor.flux",
											Source: "drop(columns: [\"_level\"])",
											Start: ast.Position{
												Column: 12,
												Line:   38,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   38,
												},
												File:   "monitor.flux",
												Source: "drop",
												Start: ast.Position{
													Column: 12,
													Line:   38,
												},
											},
										},
										Name: "drop",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   39,
									},
									File:   "monitor.flux",
									Source: "tables\n        |> filter(fn: otherLevelFilter)\n        |> map(fn: (r) => ({r with level_value: -10}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})",
									Start: ast.Position{
										Column: 21,
										Line:   34,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   39,
											},
											File:   "monitor.flux",
											Source: "columns: {\"l2\": \"_level\"}",
											Start: ast.Position{
												Column: 19,
												Line:   39,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   39,
												},
												File:   "monitor.flux",
												Source: "columns: {\"l2\": \"_level\"}",
												Start: ast.Position{
													Column: 19,
													Line:   39,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   39,
													},
													File:   "monitor.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 19,
														Line:   39,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   39,
													},
													File:   "monitor.flux",
													Source: "{\"l2\": \"_level\"}",
													Start: ast.Position{
														Column: 28,
														Line:   39,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   39,
														},
														File:   "monitor.flux",
														Source: "\"l2\": \"_level\"",
														Start: ast.Position{
															Column: 29,
															Line:   39,
														},
													},
												},
												Key: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   39,
															},
															File:   "monitor.flux",
															Source: "\"l2\"",
															Start: ast.Position{
																Column: 29,
																Line:   39,
															},
														},
													},
													Value: "l2",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   39,
															},
															File:   "monitor.flux",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 35,
																Line:   39,
															},
														},
													},
													Value: "_level",
												},
											}},
											With: nil,
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   39,
										},
										File:   "monitor.flux",
										Source: "rename(columns: {\"l2\": \"_level\"})",
										Start: ast.Position{
											Column: 12,
											Line:   39,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   39,
											},
											File:   "monitor.flux",
											Source: "rename",
											Start: ast.Position{
												Column: 12,
												Line:   39,
											},
										},
									},
									Name: "rename",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   42,
								},
								File:   "monitor.flux",
								Source: "toLevelFilter = if toLevel == \"any\" then (r) => r._level != fromLevel and exists r._level\n                   else (r) => r._level == toLevel",
								Start: ast.Position{
									Column: 5,
									Line:   41,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   41,
									},
									File:   "monitor.flux",
									Source: "toLevelFilter",
									Start: ast.Position{
										Column: 5,
										Line:   41,
									},
								},
							},
							Name: "toLevelFilter",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   42,
										},
										File:   "monitor.flux",
										Source: "(r) => r._level == toLevel",
										Start: ast.Position{
											Column: 25,
											Line:   42,
										},
									},
								},
								Body: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   42,
											},
											File:   "monitor.flux",
											Source: "r._level == toLevel",
											Start: ast.Position{
												Column: 32,
												Line:   42,
											},
										},
									},
									Left: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   42,
												},
												File:   "monitor.flux",
												Source: "r._level",
												Start: ast.Position{
													Column: 32,
													Line:   42,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   42,
													},
													File:   "monitor.flux",
													Source: "r",
													Start: ast.Position{
														Column: 32,
														Line:   42,
													},
												},
											},
											Name: "r",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   42,
													},
													File:   "monitor.flux",
													Source: "_level",
													Start: ast.Position{
														Column: 34,
														Line:   42,
													},
												},
											},
											Name: "_level",
										},
									},
									Operator: 17,
									Right: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 51,
													Line:   42,
												},
												File:   "monitor.flux",
												Source: "toLevel",
												Start: ast.Position{
													Column: 44,
													Line:   42,
												},
											},
										},
										Name: "toLevel",
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   42,
											},
											File:   "monitor.flux",
											Source: "r",
											Start: ast.Position{
												Column: 26,
												Line:   42,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   42,
												},
												File:   "monitor.flux",
												Source: "r",
												Start: ast.Position{
													Column: 26,
													Line:   42,
												},
											},
										},
										Name: "r",
									},
									Value: nil,
								}},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   42,
									},
									File:   "monitor.flux",
									Source: "if toLevel == \"any\" then (r) => r._level != fromLevel and exists r._level\n                   else (r) => r._level == toLevel",
									Start: ast.Position{
										Column: 21,
										Line:   41,
									},
								},
							},
							Consequent: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 94,
											Line:   41,
										},
										File:   "monitor.flux",
										Source: "(r) => r._level != fromLevel and exists r._level",
										Start: ast.Position{
											Column: 46,
											Line:   41,
										},
									},
								},
								Body: &ast.LogicalExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 94,
												Line:   41,
											},
											File:   "monitor.flux",
											Source: "r._level != fromLevel and exists r._level",
											Start: ast.Position{
												Column: 53,
												Line:   41,
											},
										},
									},
									Left: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 74,
													Line:   41,
												},
												File:   "monitor.flux",
												Source: "r._level != fromLevel",
												Start: ast.Position{
													Column: 53,
													Line:   41,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 61,
														Line:   41,
													},
													File:   "monitor.flux",
													Source: "r._level",
													Start: ast.Position{
														Column: 53,
														Line:   41,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 54,
															Line:   41,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 53,
															Line:   41,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 61,
															Line:   41,
														},
														File:   "monitor.flux",
														Source: "_level",
														Start: ast.Position{
															Column: 55,
															Line:   41,
														},
													},
												},
												Name: "_level",
											},
										},
										Operator: 18,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 74,
														Line:   41,
													},
													File:   "monitor.flux",
													Source: "fromLevel",
													Start: ast.Position{
														Column: 65,
														Line:   41,
													},
												},
											},
											Name: "fromLevel",
										},
									},
									Operator: 1,
									Right: &ast.UnaryExpression{
										Argument: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 94,
														Line:   41,
													},
													File:   "monitor.flux",
													Source: "r._level",
													Start: ast.Position{
														Column: 86,
														Line:   41,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 87,
															Line:   41,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 86,
															Line:   41,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 94,
															Line:   41,
														},
														File:   "monitor.flux",
														Source: "_level",
														Start: ast.Position{
															Column: 88,
															Line:   41,
														},
													},
												},
												Name: "_level",
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 94,
													Line:   41,
												},
												File:   "monitor.flux",
												Source: "exists r._level",
												Start: ast.Position{
													Column: 79,
													Line:   41,
												},
											},
										},
										Operator: 14,
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   41,
											},
											File:   "monitor.flux",
											Source: "r",
											Start: ast.Position{
												Column: 47,
												Line:   41,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   41,
												},
												File:   "monitor.flux",
												Source: "r",
												Start: ast.Position{
													Column: 47,
													Line:   41,
												},
											},
										},
										Name: "r",
									},
									Value: nil,
								}},
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   41,
										},
										File:   "monitor.flux",
										Source: "toLevel == \"any\"",
										Start: ast.Position{
											Column: 24,
											Line:   41,
										},
									},
								},
								Left: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   41,
											},
											File:   "monitor.flux",
											Source: "toLevel",
											Start: ast.Position{
												Column: 24,
												Line:   41,
											},
										},
									},
									Name: "toLevel",
								},
								Operator: 17,
								Right: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   41,
											},
											File:   "monitor.flux",
											Source: "\"any\"",
											Start: ast.Position{
												Column: 35,
												Line:   41,
											},
										},
									},
									Value: "any",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   49,
								},
								File:   "monitor.flux",
								Source: "toStatuses = tables\n        |> filter(fn: toLevelFilter)\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})",
								Start: ast.Position{
									Column: 5,
									Line:   44,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   44,
									},
									File:   "monitor.flux",
									Source: "toStatuses",
									Start: ast.Position{
										Column: 5,
										Line:   44,
									},
								},
							},
							Name: "toStatuses",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   44,
														},
														File:   "monitor.flux",
														Source: "tables",
														Start: ast.Position{
															Column: 18,
															Line:   44,
														},
													},
												},
												Name: "tables",
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   45,
													},
													File:   "monitor.flux",
													Source: "tables\n        |> filter(fn: toLevelFilter)",
													Start: ast.Position{
														Column: 18,
														Line:   44,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   45,
															},
															File:   "monitor.flux",
															Source: "fn: toLevelFilter",
															Start: ast.Position{
																Column: 19,
																Line:   45,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   45,
																},
																File:   "monitor.flux",
																Source: "fn: toLevelFilter",
																Start: ast.Position{
																	Column: 19,
																	Line:   45,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   45,
																	},
																	File:   "monitor.flux",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 19,
																		Line:   45,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   45,
																	},
																	File:   "monitor.flux",
																	Source: "toLevelFilter",
																	Start: ast.Position{
																		Column: 23,
																		Line:   45,
																	},
																},
															},
															Name: "toLevelFilter",
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 37,
															Line:   45,
														},
														File:   "monitor.flux",
														Source: "filter(fn: toLevelFilter)",
														Start: ast.Position{
															Column: 12,
															Line:   45,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   45,
															},
															File:   "monitor.flux",
															Source: "filter",
															Start: ast.Position{
																Column: 12,
																Line:   45,
															},
														},
													},
													Name: "filter",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   46,
												},
												File:   "monitor.flux",
												Source: "tables\n        |> filter(fn: toLevelFilter)\n        |> map(fn: (r) => ({r with level_value: 1}))",
												Start: ast.Position{
													Column: 18,
													Line:   44,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 52,
															Line:   46,
														},
														File:   "monitor.flux",
														Source: "fn: (r) => ({r with level_value: 1})",
														Start: ast.Position{
															Column: 16,
															Line:   46,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 52,
																Line:   46,
															},
															File:   "monitor.flux",
															Source: "fn: (r) => ({r with level_value: 1})",
															Start: ast.Position{
																Column: 16,
																Line:   46,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   46,
																},
																File:   "monitor.flux",
																Source: "fn",
																Start: ast.Position{
																	Column: 16,
																	Line:   46,
																},
															},
														},
														Name: "fn",
													},
													Value: &ast.FunctionExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 52,
																	Line:   46,
																},
																File:   "monitor.flux",
																Source: "(r) => ({r with level_value: 1})",
																Start: ast.Position{
																	Column: 20,
																	Line:   46,
																},
															},
														},
														Body: &ast.ParenExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 52,
																		Line:   46,
																	},
																	File:   "monitor.flux",
																	Source: "({r with level_value: 1})",
																	Start: ast.Position{
																		Column: 27,
																		Line:   46,
																	},
																},
															},
															Expression: &ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 51,
																			Line:   46,
																		},
																		File:   "monitor.flux",
																		Source: "{r with level_value: 1}",
																		Start: ast.Position{
																			Column: 28,
																			Line:   46,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 50,
																				Line:   46,
																			},
																			File:   "monitor.flux",
																			Source: "level_value: 1",
																			Start: ast.Position{
																				Column: 36,
																				Line:   46,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 47,
																					Line:   46,
																				},
																				File:   "monitor.flux",
																				Source: "level_value",
																				Start: ast.Position{
																					Column: 36,
																					Line:   46,
																				},
																			},
																		},
																		Name: "level_value",
																	},
																	Value: &ast.IntegerLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 50,
																					Line:   46,
																				},
																				File:   "monitor.flux",
																				Source: "1",
																				Start: ast.Position{
																					Column: 49,
																					Line:   46,
																				},
																			},
																		},
																		Value: int64(1),
																	},
																}},
																With: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   46,
																			},
																			File:   "monitor.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 29,
																				Line:   46,
																			},
																		},
																	},
																	Name: "r",
																},
															},
														},
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 22,
																		Line:   46,
																	},
																	File:   "monitor.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 21,
																		Line:   46,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 22,
																			Line:   46,
																		},
																		File:   "monitor.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 21,
																			Line:   46,
																		},
																	},
																},
																Name: "r",
															},
															Value: nil,
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 53,
														Line:   46,
													},
													File:   "monitor.flux",
													Source: "map(fn: (r) => ({r with level_value: 1}))",
													Start: ast.Position{
														Column: 12,
														Line:   46,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   46,
														},
														File:   "monitor.flux",
														Source: "map",
														Start: ast.Position{
															Column: 12,
															Line:   46,
														},
													},
												},
												Name: "map",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   47,
											},
											File:   "monitor.flux",
											Source: "tables\n        |> filter(fn: toLevelFilter)\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")",
											Start: ast.Position{
												Column: 18,
												Line:   44,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   47,
													},
													File:   "monitor.flux",
													Source: "column: \"_level\", as: \"l2\"",
													Start: ast.Position{
														Column: 22,
														Line:   47,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   47,
														},
														File:   "monitor.flux",
														Source: "column: \"_level\"",
														Start: ast.Position{
															Column: 22,
															Line:   47,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   47,
															},
															File:   "monitor.flux",
															Source: "column",
															Start: ast.Position{
																Column: 22,
																Line:   47,
															},
														},
													},
													Name: "column",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   47,
															},
															File:   "monitor.flux",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 30,
																Line:   47,
															},
														},
													},
													Value: "_level",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   47,
														},
														File:   "monitor.flux",
														Source: "as: \"l2\"",
														Start: ast.Position{
															Column: 40,
															Line:   47,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   47,
															},
															File:   "monitor.flux",
															Source: "as",
															Start: ast.Position{
																Column: 40,
																Line:   47,
															},
														},
													},
													Name: "as",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   47,
															},
															File:   "monitor.flux",
															Source: "\"l2\"",
															Start: ast.Position{
																Column: 44,
																Line:   47,
															},
														},
													},
													Value: "l2",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   47,
												},
												File:   "monitor.flux",
												Source: "duplicate(column: \"_level\", as: \"l2\")",
												Start: ast.Position{
													Column: 12,
													Line:   47,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   47,
													},
													File:   "monitor.flux",
													Source: "duplicate",
													Start: ast.Position{
														Column: 12,
														Line:   47,
													},
												},
											},
											Name: "duplicate",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   48,
										},
										File:   "monitor.flux",
										Source: "tables\n        |> filter(fn: toLevelFilter)\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])",
										Start: ast.Position{
											Column: 18,
											Line:   44,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   48,
												},
												File:   "monitor.flux",
												Source: "columns: [\"_level\"]",
												Start: ast.Position{
													Column: 17,
													Line:   48,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   48,
													},
													File:   "monitor.flux",
													Source: "columns: [\"_level\"]",
													Start: ast.Position{
														Column: 17,
														Line:   48,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   48,
														},
														File:   "monitor.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 17,
															Line:   48,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   48,
														},
														File:   "monitor.flux",
														Source: "[\"_level\"]",
														Start: ast.Position{
															Column: 26,
															Line:   48,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   48,
															},
															File:   "monitor.flux",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 27,
																Line:   48,
															},
														},
													},
													Value: "_level",
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   48,
											},
											File:   "monitor.flux",
											Source: "drop(columns: [\"_level\"])",
											Start: ast.Position{
												Column: 12,
												Line:   48,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   48,
												},
												File:   "monitor.flux",
												Source: "drop",
												Start: ast.Position{
													Column: 12,
													Line:   48,
												},
											},
										},
										Name: "drop",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   49,
									},
									File:   "monitor.flux",
									Source: "tables\n        |> filter(fn: toLevelFilter)\n        |> map(fn: (r) => ({r with level_value: 1}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})",
									Start: ast.Position{
										Column: 18,
										Line:   44,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   49,
											},
											File:   "monitor.flux",
											Source: "columns: {\"l2\": \"_level\"}",
											Start: ast.Position{
												Column: 19,
												Line:   49,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   49,
												},
												File:   "monitor.flux",
												Source: "columns: {\"l2\": \"_level\"}",
												Start: ast.Position{
													Column: 19,
													Line:   49,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   49,
													},
													File:   "monitor.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 19,
														Line:   49,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   49,
													},
													File:   "monitor.flux",
													Source: "{\"l2\": \"_level\"}",
													Start: ast.Position{
														Column: 28,
														Line:   49,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   49,
														},
														File:   "monitor.flux",
														Source: "\"l2\": \"_level\"",
														Start: ast.Position{
															Column: 29,
															Line:   49,
														},
													},
												},
												Key: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   49,
															},
															File:   "monitor.flux",
															Source: "\"l2\"",
															Start: ast.Position{
																Column: 29,
																Line:   49,
															},
														},
													},
													Value: "l2",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   49,
															},
															File:   "monitor.flux",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 35,
																Line:   49,
															},
														},
													},
													Value: "_level",
												},
											}},
											With: nil,
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   49,
										},
										File:   "monitor.flux",
										Source: "rename(columns: {\"l2\": \"_level\"})",
										Start: ast.Position{
											Column: 12,
											Line:   49,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   49,
											},
											File:   "monitor.flux",
											Source: "rename",
											Start: ast.Position{
												Column: 12,
												Line:   49,
											},
										},
									},
									Name: "rename",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   52,
								},
								File:   "monitor.flux",
								Source: "levelFilter = if fromLevel == \"any\" then (r) => r._level != toLevel and exists r._level\n                   else (r) => r._level == fromLevel",
								Start: ast.Position{
									Column: 5,
									Line:   51,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   51,
									},
									File:   "monitor.flux",
									Source: "levelFilter",
									Start: ast.Position{
										Column: 5,
										Line:   51,
									},
								},
							},
							Name: "levelFilter",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   52,
										},
										File:   "monitor.flux",
										Source: "(r) => r._level == fromLevel",
										Start: ast.Position{
											Column: 25,
											Line:   52,
										},
									},
								},
								Body: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   52,
											},
											File:   "monitor.flux",
											Source: "r._level == fromLevel",
											Start: ast.Position{
												Column: 32,
												Line:   52,
											},
										},
									},
									Left: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   52,
												},
												File:   "monitor.flux",
												Source: "r._level",
												Start: ast.Position{
													Column: 32,
													Line:   52,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   52,
													},
													File:   "monitor.flux",
													Source: "r",
													Start: ast.Position{
														Column: 32,
														Line:   52,
													},
												},
											},
											Name: "r",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   52,
													},
													File:   "monitor.flux",
													Source: "_level",
													Start: ast.Position{
														Column: 34,
														Line:   52,
													},
												},
											},
											Name: "_level",
										},
									},
									Operator: 17,
									Right: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   52,
												},
												File:   "monitor.flux",
												Source: "fromLevel",
												Start: ast.Position{
													Column: 44,
													Line:   52,
												},
											},
										},
										Name: "fromLevel",
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   52,
											},
											File:   "monitor.flux",
											Source: "r",
											Start: ast.Position{
												Column: 26,
												Line:   52,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   52,
												},
												File:   "monitor.flux",
												Source: "r",
												Start: ast.Position{
													Column: 26,
													Line:   52,
												},
											},
										},
										Name: "r",
									},
									Value: nil,
								}},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   52,
									},
									File:   "monitor.flux",
									Source: "if fromLevel == \"any\" then (r) => r._level != toLevel and exists r._level\n                   else (r) => r._level == fromLevel",
									Start: ast.Position{
										Column: 19,
										Line:   51,
									},
								},
							},
							Consequent: &ast.FunctionExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 92,
											Line:   51,
										},
										File:   "monitor.flux",
										Source: "(r) => r._level != toLevel and exists r._level",
										Start: ast.Position{
											Column: 46,
											Line:   51,
										},
									},
								},
								Body: &ast.LogicalExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 92,
												Line:   51,
											},
											File:   "monitor.flux",
											Source: "r._level != toLevel and exists r._level",
											Start: ast.Position{
												Column: 53,
												Line:   51,
											},
										},
									},
									Left: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 72,
													Line:   51,
												},
												File:   "monitor.flux",
												Source: "r._level != toLevel",
												Start: ast.Position{
													Column: 53,
													Line:   51,
												},
											},
										},
										Left: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 61,
														Line:   51,
													},
													File:   "monitor.flux",
													Source: "r._level",
													Start: ast.Position{
														Column: 53,
														Line:   51,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 54,
															Line:   51,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 53,
															Line:   51,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 61,
															Line:   51,
														},
														File:   "monitor.flux",
														Source: "_level",
														Start: ast.Position{
															Column: 55,
															Line:   51,
														},
													},
												},
												Name: "_level",
											},
										},
										Operator: 18,
										Right: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 72,
														Line:   51,
													},
													File:   "monitor.flux",
													Source: "toLevel",
													Start: ast.Position{
														Column: 65,
														Line:   51,
													},
												},
											},
											Name: "toLevel",
										},
									},
									Operator: 1,
									Right: &ast.UnaryExpression{
										Argument: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 92,
														Line:   51,
													},
													File:   "monitor.flux",
													Source: "r._level",
													Start: ast.Position{
														Column: 84,
														Line:   51,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 85,
															Line:   51,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 84,
															Line:   51,
														},
													},
												},
												Name: "r",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 92,
															Line:   51,
														},
														File:   "monitor.flux",
														Source: "_level",
														Start: ast.Position{
															Column: 86,
															Line:   51,
														},
													},
												},
												Name: "_level",
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 92,
													Line:   51,
												},
												File:   "monitor.flux",
												Source: "exists r._level",
												Start: ast.Position{
													Column: 77,
													Line:   51,
												},
											},
										},
										Operator: 14,
									},
								},
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   51,
											},
											File:   "monitor.flux",
											Source: "r",
											Start: ast.Position{
												Column: 47,
												Line:   51,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   51,
												},
												File:   "monitor.flux",
												Source: "r",
												Start: ast.Position{
													Column: 47,
													Line:   51,
												},
											},
										},
										Name: "r",
									},
									Value: nil,
								}},
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   51,
										},
										File:   "monitor.flux",
										Source: "fromLevel == \"any\"",
										Start: ast.Position{
											Column: 22,
											Line:   51,
										},
									},
								},
								Left: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   51,
											},
											File:   "monitor.flux",
											Source: "fromLevel",
											Start: ast.Position{
												Column: 22,
												Line:   51,
											},
										},
									},
									Name: "fromLevel",
								},
								Operator: 17,
								Right: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   51,
											},
											File:   "monitor.flux",
											Source: "\"any\"",
											Start: ast.Position{
												Column: 35,
												Line:   51,
											},
										},
									},
									Value: "any",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 45,
									Line:   59,
								},
								File:   "monitor.flux",
								Source: "fromStatuses = tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})",
								Start: ast.Position{
									Column: 5,
									Line:   54,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   54,
									},
									File:   "monitor.flux",
									Source: "fromStatuses",
									Start: ast.Position{
										Column: 5,
										Line:   54,
									},
								},
							},
							Name: "fromStatuses",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 26,
															Line:   54,
														},
														File:   "monitor.flux",
														Source: "tables",
														Start: ast.Position{
															Column: 20,
															Line:   54,
														},
													},
												},
												Name: "tables",
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   55,
													},
													File:   "monitor.flux",
													Source: "tables\n        |> filter(fn: levelFilter)",
													Start: ast.Position{
														Column: 20,
														Line:   54,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 34,
																Line:   55,
															},
															File:   "monitor.flux",
															Source: "fn: levelFilter",
															Start: ast.Position{
																Column: 19,
																Line:   55,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 34,
																	Line:   55,
																},
																File:   "monitor.flux",
																Source: "fn: levelFilter",
																Start: ast.Position{
																	Column: 19,
																	Line:   55,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   55,
																	},
																	File:   "monitor.flux",
																	Source: "fn",
																	Start: ast.Position{
																		Column: 19,
																		Line:   55,
																	},
																},
															},
															Name: "fn",
														},
														Value: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 34,
																		Line:   55,
																	},
																	File:   "monitor.flux",
																	Source: "levelFilter",
																	Start: ast.Position{
																		Column: 23,
																		Line:   55,
																	},
																},
															},
															Name: "levelFilter",
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 35,
															Line:   55,
														},
														File:   "monitor.flux",
														Source: "filter(fn: levelFilter)",
														Start: ast.Position{
															Column: 12,
															Line:   55,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 18,
																Line:   55,
															},
															File:   "monitor.flux",
															Source: "filter",
															Start: ast.Position{
																Column: 12,
																Line:   55,
															},
														},
													},
													Name: "filter",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   56,
												},
												File:   "monitor.flux",
												Source: "tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))",
												Start: ast.Position{
													Column: 20,
													Line:   54,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 52,
															Line:   56,
														},
														File:   "monitor.flux",
														Source: "fn: (r) => ({r with level_value: 0})",
														Start: ast.Position{
															Column: 16,
															Line:   56,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 52,
																Line:   56,
															},
															File:   "monitor.flux",
															Source: "fn: (r) => ({r with level_value: 0})",
															Start: ast.Position{
																Column: 16,
																Line:   56,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 18,
																	Line:   56,
																},
																File:   "monitor.flux",
																Source: "fn",
																Start: ast.Position{
																	Column: 16,
																	Line:   56,
																},
															},
														},
														Name: "fn",
													},
													Value: &ast.FunctionExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 52,
																	Line:   56,
																},
																File:   "monitor.flux",
																Source: "(r) => ({r with level_value: 0})",
																Start: ast.Position{
																	Column: 20,
																	Line:   56,
																},
															},
														},
														Body: &ast.ParenExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 52,
																		Line:   56,
																	},
																	File:   "monitor.flux",
																	Source: "({r with level_value: 0})",
																	Start: ast.Position{
																		Column: 27,
																		Line:   56,
																	},
																},
															},
															Expression: &ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 51,
																			Line:   56,
																		},
																		File:   "monitor.flux",
																		Source: "{r with level_value: 0}",
																		Start: ast.Position{
																			Column: 28,
																			Line:   56,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 50,
																				Line:   56,
																			},
																			File:   "monitor.flux",
																			Source: "level_value: 0",
																			Start: ast.Position{
																				Column: 36,
																				Line:   56,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 47,
																					Line:   56,
																				},
																				File:   "monitor.flux",
																				Source: "level_value",
																				Start: ast.Position{
																					Column: 36,
																					Line:   56,
																				},
																			},
																		},
																		Name: "level_value",
																	},
																	Value: &ast.IntegerLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 50,
																					Line:   56,
																				},
																				File:   "monitor.flux",
																				Source: "0",
																				Start: ast.Position{
																					Column: 49,
																					Line:   56,
																				},
																			},
																		},
																		Value: int64(0),
																	},
																}},
																With: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   56,
																			},
																			File:   "monitor.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 29,
																				Line:   56,
																			},
																		},
																	},
																	Name: "r",
																},
															},
														},
														Params: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 22,
																		Line:   56,
																	},
																	File:   "monitor.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 21,
																		Line:   56,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 22,
																			Line:   56,
																		},
																		File:   "monitor.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 21,
																			Line:   56,
																		},
																	},
																},
																Name: "r",
															},
															Value: nil,
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 53,
														Line:   56,
													},
													File:   "monitor.flux",
													Source: "map(fn: (r) => ({r with level_value: 0}))",
													Start: ast.Position{
														Column: 12,
														Line:   56,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 15,
															Line:   56,
														},
														File:   "monitor.flux",
														Source: "map",
														Start: ast.Position{
															Column: 12,
															Line:   56,
														},
													},
												},
												Name: "map",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   57,
											},
											File:   "monitor.flux",
											Source: "tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")",
											Start: ast.Position{
												Column: 20,
												Line:   54,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   57,
													},
													File:   "monitor.flux",
													Source: "column: \"_level\", as: \"l2\"",
													Start: ast.Position{
														Column: 22,
														Line:   57,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 38,
															Line:   57,
														},
														File:   "monitor.flux",
														Source: "column: \"_level\"",
														Start: ast.Position{
															Column: 22,
															Line:   57,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   57,
															},
															File:   "monitor.flux",
															Source: "column",
															Start: ast.Position{
																Column: 22,
																Line:   57,
															},
														},
													},
													Name: "column",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 38,
																Line:   57,
															},
															File:   "monitor.flux",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 30,
																Line:   57,
															},
														},
													},
													Value: "_level",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   57,
														},
														File:   "monitor.flux",
														Source: "as: \"l2\"",
														Start: ast.Position{
															Column: 40,
															Line:   57,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 42,
																Line:   57,
															},
															File:   "monitor.flux",
															Source: "as",
															Start: ast.Position{
																Column: 40,
																Line:   57,
															},
														},
													},
													Name: "as",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   57,
															},
															File:   "monitor.flux",
															Source: "\"l2\"",
															Start: ast.Position{
																Column: 44,
																Line:   57,
															},
														},
													},
													Value: "l2",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   57,
												},
												File:   "monitor.flux",
												Source: "duplicate(column: \"_level\", as: \"l2\")",
												Start: ast.Position{
													Column: 12,
													Line:   57,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   57,
													},
													File:   "monitor.flux",
													Source: "duplicate",
													Start: ast.Position{
														Column: 12,
														Line:   57,
													},
												},
											},
											Name: "duplicate",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   58,
										},
										File:   "monitor.flux",
										Source: "tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])",
										Start: ast.Position{
											Column: 20,
											Line:   54,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   58,
												},
												File:   "monitor.flux",
												Source: "columns: [\"_level\"]",
												Start: ast.Position{
													Column: 17,
													Line:   58,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   58,
													},
													File:   "monitor.flux",
													Source: "columns: [\"_level\"]",
													Start: ast.Position{
														Column: 17,
														Line:   58,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   58,
														},
														File:   "monitor.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 17,
															Line:   58,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   58,
														},
														File:   "monitor.flux",
														Source: "[\"_level\"]",
														Start: ast.Position{
															Column: 26,
															Line:   58,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   58,
															},
															File:   "monitor.flux",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 27,
																Line:   58,
															},
														},
													},
													Value: "_level",
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   58,
											},
											File:   "monitor.flux",
											Source: "drop(columns: [\"_level\"])",
											Start: ast.Position{
												Column: 12,
												Line:   58,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   58,
												},
												File:   "monitor.flux",
												Source: "drop",
												Start: ast.Position{
													Column: 12,
													Line:   58,
												},
											},
										},
										Name: "drop",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 45,
										Line:   59,
									},
									File:   "monitor.flux",
									Source: "tables\n        |> filter(fn: levelFilter)\n        |> map(fn: (r) => ({r with level_value: 0}))\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})",
									Start: ast.Position{
										Column: 20,
										Line:   54,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   59,
											},
											File:   "monitor.flux",
											Source: "columns: {\"l2\": \"_level\"}",
											Start: ast.Position{
												Column: 19,
												Line:   59,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 44,
													Line:   59,
												},
												File:   "monitor.flux",
												Source: "columns: {\"l2\": \"_level\"}",
												Start: ast.Position{
													Column: 19,
													Line:   59,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 26,
														Line:   59,
													},
													File:   "monitor.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 19,
														Line:   59,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   59,
													},
													File:   "monitor.flux",
													Source: "{\"l2\": \"_level\"}",
													Start: ast.Position{
														Column: 28,
														Line:   59,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 43,
															Line:   59,
														},
														File:   "monitor.flux",
														Source: "\"l2\": \"_level\"",
														Start: ast.Position{
															Column: 29,
															Line:   59,
														},
													},
												},
												Key: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   59,
															},
															File:   "monitor.flux",
															Source: "\"l2\"",
															Start: ast.Position{
																Column: 29,
																Line:   59,
															},
														},
													},
													Value: "l2",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 43,
																Line:   59,
															},
															File:   "monitor.flux",
															Source: "\"_level\"",
															Start: ast.Position{
																Column: 35,
																Line:   59,
															},
														},
													},
													Value: "_level",
												},
											}},
											With: nil,
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   59,
										},
										File:   "monitor.flux",
										Source: "rename(columns: {\"l2\": \"_level\"})",
										Start: ast.Position{
											Column: 12,
											Line:   59,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   59,
											},
											File:   "monitor.flux",
											Source: "rename",
											Start: ast.Position{
												Column: 12,
												Line:   59,
											},
										},
									},
									Name: "rename",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   62,
								},
								File:   "monitor.flux",
								Source: "allStatuses = union(tables: [toStatuses, fromStatuses, otherStatuses])\n        |> sort(columns: [\"_time\"], desc: false)",
								Start: ast.Position{
									Column: 6,
									Line:   61,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   61,
									},
									File:   "monitor.flux",
									Source: "allStatuses",
									Start: ast.Position{
										Column: 6,
										Line:   61,
									},
								},
							},
							Name: "allStatuses",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 75,
												Line:   61,
											},
											File:   "monitor.flux",
											Source: "tables: [toStatuses, fromStatuses, otherStatuses]",
											Start: ast.Position{
												Column: 26,
												Line:   61,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 75,
													Line:   61,
												},
												File:   "monitor.flux",
												Source: "tables: [toStatuses, fromStatuses, otherStatuses]",
												Start: ast.Position{
													Column: 26,
													Line:   61,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   61,
													},
													File:   "monitor.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 26,
														Line:   61,
													},
												},
											},
											Name: "tables",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 75,
														Line:   61,
													},
													File:   "monitor.flux",
													Source: "[toStatuses, fromStatuses, otherStatuses]",
													Start: ast.Position{
														Column: 34,
														Line:   61,
													},
												},
											},
											Elements: []ast.Expression{&ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   61,
														},
														File:   "monitor.flux",
														Source: "toStatuses",
														Start: ast.Position{
															Column: 35,
															Line:   61,
														},
													},
												},
												Name: "toStatuses",
											}, &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 59,
															Line:   61,
														},
														File:   "monitor.flux",
														Source: "fromStatuses",
														Start: ast.Position{
															Column: 47,
															Line:   61,
														},
													},
												},
												Name: "fromStatuses",
											}, &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 74,
															Line:   61,
														},
														File:   "monitor.flux",
														Source: "otherStatuses",
														Start: ast.Position{
															Column: 61,
															Line:   61,
														},
													},
												},
												Name: "otherStatuses",
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 76,
											Line:   61,
										},
										File:   "monitor.flux",
										Source: "union(tables: [toStatuses, fromStatuses, otherStatuses])",
										Start: ast.Position{
											Column: 20,
											Line:   61,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   61,
											},
											File:   "monitor.flux",
											Source: "union",
											Start: ast.Position{
												Column: 20,
												Line:   61,
											},
										},
									},
									Name: "union",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   62,
									},
									File:   "monitor.flux",
									Source: "union(tables: [toStatuses, fromStatuses, otherStatuses])\n        |> sort(columns: [\"_time\"], desc: false)",
									Start: ast.Position{
										Column: 20,
										Line:   61,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 48,
												Line:   62,
											},
											File:   "monitor.flux",
											Source: "columns: [\"_time\"], desc: false",
											Start: ast.Position{
												Column: 17,
												Line:   62,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   62,
												},
												File:   "monitor.flux",
												Source: "columns: [\"_time\"]",
												Start: ast.Position{
													Column: 17,
													Line:   62,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   62,
													},
													File:   "monitor.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 17,
														Line:   62,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   62,
													},
													File:   "monitor.flux",
													Source: "[\"_time\"]",
													Start: ast.Position{
														Column: 26,
														Line:   62,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 34,
															Line:   62,
														},
														File:   "monitor.flux",
														Source: "\"_time\"",
														Start: ast.Position{
															Column: 27,
															Line:   62,
														},
													},
												},
												Value: "_time",
											}},
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   62,
												},
												File:   "monitor.flux",
												Source: "desc: false",
												Start: ast.Position{
													Column: 37,
													Line:   62,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   62,
													},
													File:   "monitor.flux",
													Source: "desc",
													Start: ast.Position{
														Column: 37,
														Line:   62,
													},
												},
											},
											Name: "desc",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   62,
													},
													File:   "monitor.flux",
													Source: "false",
													Start: ast.Position{
														Column: 43,
														Line:   62,
													},
												},
											},
											Name: "false",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   62,
										},
										File:   "monitor.flux",
										Source: "sort(columns: [\"_time\"], desc: false)",
										Start: ast.Position{
											Column: 12,
											Line:   62,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   62,
											},
											File:   "monitor.flux",
											Source: "sort",
											Start: ast.Position{
												Column: 12,
												Line:   62,
											},
										},
									},
									Name: "sort",
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   64,
													},
													File:   "monitor.flux",
													Source: "allStatuses",
													Start: ast.Position{
														Column: 12,
														Line:   64,
													},
												},
											},
											Name: "allStatuses",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 48,
													Line:   65,
												},
												File:   "monitor.flux",
												Source: "allStatuses\n        |> difference(columns: [\"level_value\"])",
												Start: ast.Position{
													Column: 12,
													Line:   64,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 47,
															Line:   65,
														},
														File:   "monitor.flux",
														Source: "columns: [\"level_value\"]",
														Start: ast.Position{
															Column: 23,
															Line:   65,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   65,
															},
															File:   "monitor.flux",
															Source: "columns: [\"level_value\"]",
															Start: ast.Position{
																Column: 23,
																Line:   65,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   65,
																},
																File:   "monitor.flux",
																Source: "columns",
																Start: ast.Position{
																	Column: 23,
																	Line:   65,
																},
															},
														},
														Name: "columns",
													},
													Value: &ast.ArrayExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   65,
																},
																File:   "monitor.flux",
																Source: "[\"level_value\"]",
																Start: ast.Position{
																	Column: 32,
																	Line:   65,
																},
															},
														},
														Elements: []ast.Expression{&ast.StringLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   65,
																	},
																	File:   "monitor.flux",
																	Source: "\"level_value\"",
																	Start: ast.Position{
																		Column: 33,
																		Line:   65,
																	},
																},
															},
															Value: "level_value",
														}},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   65,
													},
													File:   "monitor.flux",
													Source: "difference(columns: [\"level_value\"])",
													Start: ast.Position{
														Column: 12,
														Line:   65,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   65,
														},
														File:   "monitor.flux",
														Source: "difference",
														Start: ast.Position{
															Column: 12,
															Line:   65,
														},
													},
												},
												Name: "difference",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   66,
											},
											File:   "monitor.flux",
											Source: "allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)",
											Start: ast.Position{
												Column: 12,
												Line:   64,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   66,
													},
													File:   "monitor.flux",
													Source: "fn: (r) => r.level_value == 1",
													Start: ast.Position{
														Column: 19,
														Line:   66,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   66,
														},
														File:   "monitor.flux",
														Source: "fn: (r) => r.level_value == 1",
														Start: ast.Position{
															Column: 19,
															Line:   66,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   66,
															},
															File:   "monitor.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 19,
																Line:   66,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   66,
															},
															File:   "monitor.flux",
															Source: "(r) => r.level_value == 1",
															Start: ast.Position{
																Column: 23,
																Line:   66,
															},
														},
													},
													Body: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 48,
																	Line:   66,
																},
																File:   "monitor.flux",
																Source: "r.level_value == 1",
																Start: ast.Position{
																	Column: 30,
																	Line:   66,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   66,
																	},
																	File:   "monitor.flux",
																	Source: "r.level_value",
																	Start: ast.Position{
																		Column: 30,
																		Line:   66,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 31,
																			Line:   66,
																		},
																		File:   "monitor.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 30,
																			Line:   66,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 43,
																			Line:   66,
																		},
																		File:   "monitor.flux",
																		Source: "level_value",
																		Start: ast.Position{
																			Column: 32,
																			Line:   66,
																		},
																	},
																},
																Name: "level_value",
															},
														},
														Operator: 17,
														Right: &ast.IntegerLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 48,
																		Line:   66,
																	},
																	File:   "monitor.flux",
																	Source: "1",
																	Start: ast.Position{
																		Column: 47,
																		Line:   66,
																	},
																},
															},
															Value: int64(1),
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 25,
																	Line:   66,
																},
																File:   "monitor.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 24,
																	Line:   66,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 25,
																		Line:   66,
																	},
																	File:   "monitor.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 24,
																		Line:   66,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   66,
												},
												File:   "monitor.flux",
												Source: "filter(fn: (r) => r.level_value == 1)",
												Start: ast.Position{
													Column: 12,
													Line:   66,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   66,
													},
													File:   "monitor.flux",
													Source: "filter",
													Start: ast.Position{
														Column: 12,
														Line:   66,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   67,
										},
										File:   "monitor.flux",
										Source: "allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)\n        |> drop(columns: [\"level_value\"])",
										Start: ast.Position{
											Column: 12,
											Line:   64,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   67,
												},
												File:   "monitor.flux",
												Source: "columns: [\"level_value\"]",
												Start: ast.Position{
													Column: 17,
													Line:   67,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   67,
													},
													File:   "monitor.flux",
													Source: "columns: [\"level_value\"]",
													Start: ast.Position{
														Column: 17,
														Line:   67,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   67,
														},
														File:   "monitor.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 17,
															Line:   67,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   67,
														},
														File:   "monitor.flux",
														Source: "[\"level_value\"]",
														Start: ast.Position{
															Column: 26,
															Line:   67,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   67,
															},
															File:   "monitor.flux",
															Source: "\"level_value\"",
															Start: ast.Position{
																Column: 27,
																Line:   67,
															},
														},
													},
													Value: "level_value",
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   67,
											},
											File:   "monitor.flux",
											Source: "drop(columns: [\"level_value\"])",
											Start: ast.Position{
												Column: 12,
												Line:   67,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   67,
												},
												File:   "monitor.flux",
												Source: "drop",
												Start: ast.Position{
													Column: 12,
													Line:   67,
												},
											},
										},
										Name: "drop",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   68,
									},
									File:   "monitor.flux",
									Source: "allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])",
									Start: ast.Position{
										Column: 12,
										Line:   64,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   68,
											},
											File:   "monitor.flux",
											Source: "mode: \"extend\", columns: [\"_level\"]",
											Start: ast.Position{
												Column: 31,
												Line:   68,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   68,
												},
												File:   "monitor.flux",
												Source: "mode: \"extend\"",
												Start: ast.Position{
													Column: 31,
													Line:   68,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   68,
													},
													File:   "monitor.flux",
													Source: "mode",
													Start: ast.Position{
														Column: 31,
														Line:   68,
													},
												},
											},
											Name: "mode",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   68,
													},
													File:   "monitor.flux",
													Source: "\"extend\"",
													Start: ast.Position{
														Column: 37,
														Line:   68,
													},
												},
											},
											Value: "extend",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   68,
												},
												File:   "monitor.flux",
												Source: "columns: [\"_level\"]",
												Start: ast.Position{
													Column: 47,
													Line:   68,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 54,
														Line:   68,
													},
													File:   "monitor.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 47,
														Line:   68,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 66,
														Line:   68,
													},
													File:   "monitor.flux",
													Source: "[\"_level\"]",
													Start: ast.Position{
														Column: 56,
														Line:   68,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 65,
															Line:   68,
														},
														File:   "monitor.flux",
														Source: "\"_level\"",
														Start: ast.Position{
															Column: 57,
															Line:   68,
														},
													},
												},
												Value: "_level",
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   68,
										},
										File:   "monitor.flux",
										Source: "experimental.group(mode: \"extend\", columns: [\"_level\"])",
										Start: ast.Position{
											Column: 12,
											Line:   68,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   68,
											},
											File:   "monitor.flux",
											Source: "experimental.group",
											Start: ast.Position{
												Column: 12,
												Line:   68,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   68,
												},
												File:   "monitor.flux",
												Source: "experimental",
												Start: ast.Position{
													Column: 12,
													Line:   68,
												},
											},
										},
										Name: "experimental",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   68,
												},
												File:   "monitor.flux",
												Source: "group",
												Start: ast.Position{
													Column: 25,
													Line:   68,
												},
											},
										},
										Name: "group",
									},
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 67,
									Line:   68,
								},
								File:   "monitor.flux",
								Source: "return allStatuses\n        |> difference(columns: [\"level_value\"])\n        |> filter(fn: (r) => r.level_value == 1)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])",
								Start: ast.Position{
									Column: 5,
									Line:   64,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   30,
							},
							File:   "monitor.flux",
							Source: "fromLevel=\"any\"",
							Start: ast.Position{
								Column: 18,
								Line:   30,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   30,
								},
								File:   "monitor.flux",
								Source: "fromLevel",
								Start: ast.Position{
									Column: 18,
									Line:   30,
								},
							},
						},
						Name: "fromLevel",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   30,
								},
								File:   "monitor.flux",
								Source: "\"any\"",
								Start: ast.Position{
									Column: 28,
									Line:   30,
								},
							},
						},
						Value: "any",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 48,
								Line:   30,
							},
							File:   "monitor.flux",
							Source: "toLevel=\"any\"",
							Start: ast.Position{
								Column: 35,
								Line:   30,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   30,
								},
								File:   "monitor.flux",
								Source: "toLevel",
								Start: ast.Position{
									Column: 35,
									Line:   30,
								},
							},
						},
						Name: "toLevel",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   30,
								},
								File:   "monitor.flux",
								Source: "\"any\"",
								Start: ast.Position{
									Column: 43,
									Line:   30,
								},
							},
						},
						Value: "any",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 59,
								Line:   30,
							},
							File:   "monitor.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 50,
								Line:   30,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 56,
									Line:   30,
								},
								File:   "monitor.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 50,
									Line:   30,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 59,
								Line:   30,
							},
							File:   "monitor.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 57,
								Line:   30,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   89,
					},
					File:   "monitor.flux",
					Source: "stateChangesOnly = (tables=<-) => {\n    return tables\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        |> map(fn: (r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0}))\n        |> difference(columns: [\"level_value\"])\n        |> yield(name: \"foo\")\n        |> filter(fn: (r) => r.level_value != 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
					Start: ast.Position{
						Column: 1,
						Line:   74,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   74,
						},
						File:   "monitor.flux",
						Source: "stateChangesOnly",
						Start: ast.Position{
							Column: 1,
							Line:   74,
						},
					},
				},
				Name: "stateChangesOnly",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   89,
						},
						File:   "monitor.flux",
						Source: "(tables=<-) => {\n    return tables\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        |> map(fn: (r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0}))\n        |> difference(columns: [\"level_value\"])\n        |> yield(name: \"foo\")\n        |> filter(fn: (r) => r.level_value != 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
						Start: ast.Position{
							Column: 20,
							Line:   74,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   89,
							},
							File:   "monitor.flux",
							Source: "{\n    return tables\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        |> map(fn: (r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0}))\n        |> difference(columns: [\"level_value\"])\n        |> yield(name: \"foo\")\n        |> filter(fn: (r) => r.level_value != 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])\n}",
							Start: ast.Position{
								Column: 35,
								Line:   74,
							},
						},
					},
					Body: []ast.Statement{&ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.PipeExpression{
											Argument: &ast.PipeExpression{
												Argument: &ast.PipeExpression{
													Argument: &ast.PipeExpression{
														Argument: &ast.PipeExpression{
															Argument: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   75,
																		},
																		File:   "monitor.flux",
																		Source: "tables",
																		Start: ast.Position{
																			Column: 12,
																			Line:   75,
																		},
																	},
																},
																Name: "tables",
															},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 49,
																		Line:   76,
																	},
																	File:   "monitor.flux",
																	Source: "tables\n        |> duplicate(column: \"_level\", as: \"l2\")",
																	Start: ast.Position{
																		Column: 12,
																		Line:   75,
																	},
																},
															},
															Call: &ast.CallExpression{
																Arguments: []ast.Expression{&ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 48,
																				Line:   76,
																			},
																			File:   "monitor.flux",
																			Source: "column: \"_level\", as: \"l2\"",
																			Start: ast.Position{
																				Column: 22,
																				Line:   76,
																			},
																		},
																	},
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 38,
																					Line:   76,
																				},
																				File:   "monitor.flux",
																				Source: "column: \"_level\"",
																				Start: ast.Position{
																					Column: 22,
																					Line:   76,
																				},
																			},
																		},
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 28,
																						Line:   76,
																					},
																					File:   "monitor.flux",
																					Source: "column",
																					Start: ast.Position{
																						Column: 22,
																						Line:   76,
																					},
																				},
																			},
																			Name: "column",
																		},
																		Value: &ast.StringLiteral{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 38,
																						Line:   76,
																					},
																					File:   "monitor.flux",
																					Source: "\"_level\"",
																					Start: ast.Position{
																						Column: 30,
																						Line:   76,
																					},
																				},
																			},
																			Value: "_level",
																		},
																	}, &ast.Property{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 48,
																					Line:   76,
																				},
																				File:   "monitor.flux",
																				Source: "as: \"l2\"",
																				Start: ast.Position{
																					Column: 40,
																					Line:   76,
																				},
																			},
																		},
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 42,
																						Line:   76,
																					},
																					File:   "monitor.flux",
																					Source: "as",
																					Start: ast.Position{
																						Column: 40,
																						Line:   76,
																					},
																				},
																			},
																			Name: "as",
																		},
																		Value: &ast.StringLiteral{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 48,
																						Line:   76,
																					},
																					File:   "monitor.flux",
																					Source: "\"l2\"",
																					Start: ast.Position{
																						Column: 44,
																						Line:   76,
																					},
																				},
																			},
																			Value: "l2",
																		},
																	}},
																	With: nil,
																}},
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 49,
																			Line:   76,
																		},
																		File:   "monitor.flux",
																		Source: "duplicate(column: \"_level\", as: \"l2\")",
																		Start: ast.Position{
																			Column: 12,
																			Line:   76,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 21,
																				Line:   76,
																			},
																			File:   "monitor.flux",
																			Source: "duplicate",
																			Start: ast.Position{
																				Column: 12,
																				Line:   76,
																			},
																		},
																	},
																	Name: "duplicate",
																},
															},
														},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 37,
																	Line:   77,
																},
																File:   "monitor.flux",
																Source: "tables\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])",
																Start: ast.Position{
																	Column: 12,
																	Line:   75,
																},
															},
														},
														Call: &ast.CallExpression{
															Arguments: []ast.Expression{&ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 36,
																			Line:   77,
																		},
																		File:   "monitor.flux",
																		Source: "columns: [\"_level\"]",
																		Start: ast.Position{
																			Column: 17,
																			Line:   77,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 36,
																				Line:   77,
																			},
																			File:   "monitor.flux",
																			Source: "columns: [\"_level\"]",
																			Start: ast.Position{
																				Column: 17,
																				Line:   77,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 24,
																					Line:   77,
																				},
																				File:   "monitor.flux",
																				Source: "columns",
																				Start: ast.Position{
																					Column: 17,
																					Line:   77,
																				},
																			},
																		},
																		Name: "columns",
																	},
																	Value: &ast.ArrayExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 36,
																					Line:   77,
																				},
																				File:   "monitor.flux",
																				Source: "[\"_level\"]",
																				Start: ast.Position{
																					Column: 26,
																					Line:   77,
																				},
																			},
																		},
																		Elements: []ast.Expression{&ast.StringLiteral{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 35,
																						Line:   77,
																					},
																					File:   "monitor.flux",
																					Source: "\"_level\"",
																					Start: ast.Position{
																						Column: 27,
																						Line:   77,
																					},
																				},
																			},
																			Value: "_level",
																		}},
																	},
																}},
																With: nil,
															}},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 37,
																		Line:   77,
																	},
																	File:   "monitor.flux",
																	Source: "drop(columns: [\"_level\"])",
																	Start: ast.Position{
																		Column: 12,
																		Line:   77,
																	},
																},
															},
															Callee: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 16,
																			Line:   77,
																		},
																		File:   "monitor.flux",
																		Source: "drop",
																		Start: ast.Position{
																			Column: 12,
																			Line:   77,
																		},
																	},
																},
																Name: "drop",
															},
														},
													},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   78,
															},
															File:   "monitor.flux",
															Source: "tables\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})",
															Start: ast.Position{
																Column: 12,
																Line:   75,
															},
														},
													},
													Call: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 44,
																		Line:   78,
																	},
																	File:   "monitor.flux",
																	Source: "columns: {\"l2\": \"_level\"}",
																	Start: ast.Position{
																		Column: 19,
																		Line:   78,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 44,
																			Line:   78,
																		},
																		File:   "monitor.flux",
																		Source: "columns: {\"l2\": \"_level\"}",
																		Start: ast.Position{
																			Column: 19,
																			Line:   78,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 26,
																				Line:   78,
																			},
																			File:   "monitor.flux",
																			Source: "columns",
																			Start: ast.Position{
																				Column: 19,
																				Line:   78,
																			},
																		},
																	},
																	Name: "columns",
																},
																Value: &ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 44,
																				Line:   78,
																			},
																			File:   "monitor.flux",
																			Source: "{\"l2\": \"_level\"}",
																			Start: ast.Position{
																				Column: 28,
																				Line:   78,
																			},
																		},
																	},
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 43,
																					Line:   78,
																				},
																				File:   "monitor.flux",
																				Source: "\"l2\": \"_level\"",
																				Start: ast.Position{
																					Column: 29,
																					Line:   78,
																				},
																			},
																		},
																		Key: &ast.StringLiteral{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 33,
																						Line:   78,
																					},
																					File:   "monitor.flux",
																					Source: "\"l2\"",
																					Start: ast.Position{
																						Column: 29,
																						Line:   78,
																					},
																				},
																			},
																			Value: "l2",
																		},
																		Value: &ast.StringLiteral{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 43,
																						Line:   78,
																					},
																					File:   "monitor.flux",
																					Source: "\"_level\"",
																					Start: ast.Position{
																						Column: 35,
																						Line:   78,
																					},
																				},
																			},
																			Value: "_level",
																		},
																	}},
																	With: nil,
																},
															}},
															With: nil,
														}},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 45,
																	Line:   78,
																},
																File:   "monitor.flux",
																Source: "rename(columns: {\"l2\": \"_level\"})",
																Start: ast.Position{
																	Column: 12,
																	Line:   78,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 18,
																		Line:   78,
																	},
																	File:   "monitor.flux",
																	Source: "rename",
																	Start: ast.Position{
																		Column: 12,
																		Line:   78,
																	},
																},
															},
															Name: "rename",
														},
													},
												},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   83,
														},
														File:   "monitor.flux",
														Source: "tables\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        |> map(fn: (r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0}))",
														Start: ast.Position{
															Column: 12,
															Line:   75,
														},
													},
												},
												Call: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 57,
																	Line:   83,
																},
																File:   "monitor.flux",
																Source: "fn: (r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0})",
																Start: ast.Position{
																	Column: 16,
																	Line:   79,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 57,
																		Line:   83,
																	},
																	File:   "monitor.flux",
																	Source: "fn: (r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0})",
																	Start: ast.Position{
																		Column: 16,
																		Line:   79,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   79,
																		},
																		File:   "monitor.flux",
																		Source: "fn",
																		Start: ast.Position{
																			Column: 16,
																			Line:   79,
																		},
																	},
																},
																Name: "fn",
															},
															Value: &ast.FunctionExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 57,
																			Line:   83,
																		},
																		File:   "monitor.flux",
																		Source: "(r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0})",
																		Start: ast.Position{
																			Column: 20,
																			Line:   79,
																		},
																	},
																},
																Body: &ast.ParenExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 57,
																				Line:   83,
																			},
																			File:   "monitor.flux",
																			Source: "({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0})",
																			Start: ast.Position{
																				Column: 27,
																				Line:   79,
																			},
																		},
																	},
																	Expression: &ast.ObjectExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 56,
																					Line:   83,
																				},
																				File:   "monitor.flux",
																				Source: "{r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0}",
																				Start: ast.Position{
																					Column: 28,
																					Line:   79,
																				},
																			},
																		},
																		Properties: []*ast.Property{&ast.Property{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 55,
																						Line:   83,
																					},
																					File:   "monitor.flux",
																					Source: "level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0",
																					Start: ast.Position{
																						Column: 36,
																						Line:   79,
																					},
																				},
																			},
																			Key: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 47,
																							Line:   79,
																						},
																						File:   "monitor.flux",
																						Source: "level_value",
																						Start: ast.Position{
																							Column: 36,
																							Line:   79,
																						},
																					},
																				},
																				Name: "level_value",
																			},
																			Value: &ast.ConditionalExpression{
																				Alternate: &ast.ConditionalExpression{
																					Alternate: &ast.ConditionalExpression{
																						Alternate: &ast.ConditionalExpression{
																							Alternate: &ast.IntegerLiteral{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 55,
																											Line:   83,
																										},
																										File:   "monitor.flux",
																										Source: "0",
																										Start: ast.Position{
																											Column: 54,
																											Line:   83,
																										},
																									},
																								},
																								Value: int64(0),
																							},
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 55,
																										Line:   83,
																									},
																									File:   "monitor.flux",
																									Source: "if r._level == levelOK then 1\n                                                else 0",
																									Start: ast.Position{
																										Column: 54,
																										Line:   82,
																									},
																								},
																							},
																							Consequent: &ast.IntegerLiteral{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 83,
																											Line:   82,
																										},
																										File:   "monitor.flux",
																										Source: "1",
																										Start: ast.Position{
																											Column: 82,
																											Line:   82,
																										},
																									},
																								},
																								Value: int64(1),
																							},
																							Test: &ast.BinaryExpression{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 76,
																											Line:   82,
																										},
																										File:   "monitor.flux",
																										Source: "r._level == levelOK",
																										Start: ast.Position{
																											Column: 57,
																											Line:   82,
																										},
																									},
																								},
																								Left: &ast.MemberExpression{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 65,
																												Line:   82,
																											},
																											File:   "monitor.flux",
																											Source: "r._level",
																											Start: ast.Position{
																												Column: 57,
																												Line:   82,
																											},
																										},
																									},
																									Object: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 58,
																													Line:   82,
																												},
																												File:   "monitor.flux",
																												Source: "r",
																												Start: ast.Position{
																													Column: 57,
																													Line:   82,
																												},
																											},
																										},
																										Name: "r",
																									},
																									Property: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 65,
																													Line:   82,
																												},
																												File:   "monitor.flux",
																												Source: "_level",
																												Start: ast.Position{
																													Column: 59,
																													Line:   82,
																												},
																											},
																										},
																										Name: "_level",
																									},
																								},
																								Operator: 17,
																								Right: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 76,
																												Line:   82,
																											},
																											File:   "monitor.flux",
																											Source: "levelOK",
																											Start: ast.Position{
																												Column: 69,
																												Line:   82,
																											},
																										},
																									},
																									Name: "levelOK",
																								},
																							},
																						},
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 55,
																									Line:   83,
																								},
																								File:   "monitor.flux",
																								Source: "if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0",
																								Start: ast.Position{
																									Column: 54,
																									Line:   81,
																								},
																							},
																						},
																						Consequent: &ast.IntegerLiteral{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 85,
																										Line:   81,
																									},
																									File:   "monitor.flux",
																									Source: "2",
																									Start: ast.Position{
																										Column: 84,
																										Line:   81,
																									},
																								},
																							},
																							Value: int64(2),
																						},
																						Test: &ast.BinaryExpression{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 78,
																										Line:   81,
																									},
																									File:   "monitor.flux",
																									Source: "r._level == levelInfo",
																									Start: ast.Position{
																										Column: 57,
																										Line:   81,
																									},
																								},
																							},
																							Left: &ast.MemberExpression{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 65,
																											Line:   81,
																										},
																										File:   "monitor.flux",
																										Source: "r._level",
																										Start: ast.Position{
																											Column: 57,
																											Line:   81,
																										},
																									},
																								},
																								Object: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 58,
																												Line:   81,
																											},
																											File:   "monitor.flux",
																											Source: "r",
																											Start: ast.Position{
																												Column: 57,
																												Line:   81,
																											},
																										},
																									},
																									Name: "r",
																								},
																								Property: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 65,
																												Line:   81,
																											},
																											File:   "monitor.flux",
																											Source: "_level",
																											Start: ast.Position{
																												Column: 59,
																												Line:   81,
																											},
																										},
																									},
																									Name: "_level",
																								},
																							},
																							Operator: 17,
																							Right: &ast.Identifier{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 78,
																											Line:   81,
																										},
																										File:   "monitor.flux",
																										Source: "levelInfo",
																										Start: ast.Position{
																											Column: 69,
																											Line:   81,
																										},
																									},
																								},
																								Name: "levelInfo",
																							},
																						},
																					},
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 55,
																								Line:   83,
																							},
																							File:   "monitor.flux",
																							Source: "if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0",
																							Start: ast.Position{
																								Column: 54,
																								Line:   80,
																							},
																						},
																					},
																					Consequent: &ast.IntegerLiteral{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 85,
																									Line:   80,
																								},
																								File:   "monitor.flux",
																								Source: "3",
																								Start: ast.Position{
																									Column: 84,
																									Line:   80,
																								},
																							},
																						},
																						Value: int64(3),
																					},
																					Test: &ast.BinaryExpression{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 78,
																									Line:   80,
																								},
																								File:   "monitor.flux",
																								Source: "r._level == levelWarn",
																								Start: ast.Position{
																									Column: 57,
																									Line:   80,
																								},
																							},
																						},
																						Left: &ast.MemberExpression{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 65,
																										Line:   80,
																									},
																									File:   "monitor.flux",
																									Source: "r._level",
																									Start: ast.Position{
																										Column: 57,
																										Line:   80,
																									},
																								},
																							},
																							Object: &ast.Identifier{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 58,
																											Line:   80,
																										},
																										File:   "monitor.flux",
																										Source: "r",
																										Start: ast.Position{
																											Column: 57,
																											Line:   80,
																										},
																									},
																								},
																								Name: "r",
																							},
																							Property: &ast.Identifier{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 65,
																											Line:   80,
																										},
																										File:   "monitor.flux",
																										Source: "_level",
																										Start: ast.Position{
																											Column: 59,
																											Line:   80,
																										},
																									},
																								},
																								Name: "_level",
																							},
																						},
																						Operator: 17,
																						Right: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 78,
																										Line:   80,
																									},
																									File:   "monitor.flux",
																									Source: "levelWarn",
																									Start: ast.Position{
																										Column: 69,
																										Line:   80,
																									},
																								},
																							},
																							Name: "levelWarn",
																						},
																					},
																				},
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 55,
																							Line:   83,
																						},
																						File:   "monitor.flux",
																						Source: "if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0",
																						Start: ast.Position{
																							Column: 49,
																							Line:   79,
																						},
																					},
																				},
																				Consequent: &ast.IntegerLiteral{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 80,
																								Line:   79,
																							},
																							File:   "monitor.flux",
																							Source: "4",
																							Start: ast.Position{
																								Column: 79,
																								Line:   79,
																							},
																						},
																					},
																					Value: int64(4),
																				},
																				Test: &ast.BinaryExpression{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 73,
																								Line:   79,
																							},
																							File:   "monitor.flux",
																							Source: "r._level == levelCrit",
																							Start: ast.Position{
																								Column: 52,
																								Line:   79,
																							},
																						},
																					},
																					Left: &ast.MemberExpression{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 60,
																									Line:   79,
																								},
																								File:   "monitor.flux",
																								Source: "r._level",
																								Start: ast.Position{
																									Column: 52,
																									Line:   79,
																								},
																							},
																						},
																						Object: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 53,
																										Line:   79,
																									},
																									File:   "monitor.flux",
																									Source: "r",
																									Start: ast.Position{
																										Column: 52,
																										Line:   79,
																									},
																								},
																							},
																							Name: "r",
																						},
																						Property: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 60,
																										Line:   79,
																									},
																									File:   "monitor.flux",
																									Source: "_level",
																									Start: ast.Position{
																										Column: 54,
																										Line:   79,
																									},
																								},
																							},
																							Name: "_level",
																						},
																					},
																					Operator: 17,
																					Right: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 73,
																									Line:   79,
																								},
																								File:   "monitor.flux",
																								Source: "levelCrit",
																								Start: ast.Position{
																									Column: 64,
																									Line:   79,
																								},
																							},
																						},
																						Name: "levelCrit",
																					},
																				},
																			},
																		}},
																		With: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 30,
																						Line:   79,
																					},
																					File:   "monitor.flux",
																					Source: "r",
																					Start: ast.Position{
																						Column: 29,
																						Line:   79,
																					},
																				},
																			},
																			Name: "r",
																		},
																	},
																},
																Params: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 22,
																				Line:   79,
																			},
																			File:   "monitor.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 21,
																				Line:   79,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 22,
																					Line:   79,
																				},
																				File:   "monitor.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 21,
																					Line:   79,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Value: nil,
																}},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 58,
																Line:   83,
															},
															File:   "monitor.flux",
															Source: "map(fn: (r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0}))",
															Start: ast.Position{
																Column: 12,
																Line:   79,
															},
														},
													},
													Callee: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 15,
																	Line:   79,
																},
																File:   "monitor.flux",
																Source: "map",
																Start: ast.Position{
																	Column: 12,
																	Line:   79,
																},
															},
														},
														Name: "map",
													},
												},
											},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   84,
													},
													File:   "monitor.flux",
													Source: "tables\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        |> map(fn: (r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0}))\n        |> difference(columns: [\"level_value\"])",
													Start: ast.Position{
														Column: 12,
														Line:   75,
													},
												},
											},
											Call: &ast.CallExpression{
												Arguments: []ast.Expression{&ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 47,
																Line:   84,
															},
															File:   "monitor.flux",
															Source: "columns: [\"level_value\"]",
															Start: ast.Position{
																Column: 23,
																Line:   84,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 47,
																	Line:   84,
																},
																File:   "monitor.flux",
																Source: "columns: [\"level_value\"]",
																Start: ast.Position{
																	Column: 23,
																	Line:   84,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 30,
																		Line:   84,
																	},
																	File:   "monitor.flux",
																	Source: "columns",
																	Start: ast.Position{
																		Column: 23,
																		Line:   84,
																	},
																},
															},
															Name: "columns",
														},
														Value: &ast.ArrayExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   84,
																	},
																	File:   "monitor.flux",
																	Source: "[\"level_value\"]",
																	Start: ast.Position{
																		Column: 32,
																		Line:   84,
																	},
																},
															},
															Elements: []ast.Expression{&ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 46,
																			Line:   84,
																		},
																		File:   "monitor.flux",
																		Source: "\"level_value\"",
																		Start: ast.Position{
																			Column: 33,
																			Line:   84,
																		},
																	},
																},
																Value: "level_value",
															}},
														},
													}},
													With: nil,
												}},
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   84,
														},
														File:   "monitor.flux",
														Source: "difference(columns: [\"level_value\"])",
														Start: ast.Position{
															Column: 12,
															Line:   84,
														},
													},
												},
												Callee: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 22,
																Line:   84,
															},
															File:   "monitor.flux",
															Source: "difference",
															Start: ast.Position{
																Column: 12,
																Line:   84,
															},
														},
													},
													Name: "difference",
												},
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   85,
												},
												File:   "monitor.flux",
												Source: "tables\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        |> map(fn: (r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0}))\n        |> difference(columns: [\"level_value\"])\n        |> yield(name: \"foo\")",
												Start: ast.Position{
													Column: 12,
													Line:   75,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 29,
															Line:   85,
														},
														File:   "monitor.flux",
														Source: "name: \"foo\"",
														Start: ast.Position{
															Column: 18,
															Line:   85,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 29,
																Line:   85,
															},
															File:   "monitor.flux",
															Source: "name: \"foo\"",
															Start: ast.Position{
																Column: 18,
																Line:   85,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   85,
																},
																File:   "monitor.flux",
																Source: "name",
																Start: ast.Position{
																	Column: 18,
																	Line:   85,
																},
															},
														},
														Name: "name",
													},
													Value: &ast.StringLiteral{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 29,
																	Line:   85,
																},
																File:   "monitor.flux",
																Source: "\"foo\"",
																Start: ast.Position{
																	Column: 24,
																	Line:   85,
																},
															},
														},
														Value: "foo",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   85,
													},
													File:   "monitor.flux",
													Source: "yield(name: \"foo\")",
													Start: ast.Position{
														Column: 12,
														Line:   85,
													},
												},
											},
											Callee: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 17,
															Line:   85,
														},
														File:   "monitor.flux",
														Source: "yield",
														Start: ast.Position{
															Column: 12,
															Line:   85,
														},
													},
												},
												Name: "yield",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   86,
											},
											File:   "monitor.flux",
											Source: "tables\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        |> map(fn: (r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0}))\n        |> difference(columns: [\"level_value\"])\n        |> yield(name: \"foo\")\n        |> filter(fn: (r) => r.level_value != 0)",
											Start: ast.Position{
												Column: 12,
												Line:   75,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 48,
														Line:   86,
													},
													File:   "monitor.flux",
													Source: "fn: (r) => r.level_value != 0",
													Start: ast.Position{
														Column: 19,
														Line:   86,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   86,
														},
														File:   "monitor.flux",
														Source: "fn: (r) => r.level_value != 0",
														Start: ast.Position{
															Column: 19,
															Line:   86,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   86,
															},
															File:   "monitor.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 19,
																Line:   86,
															},
														},
													},
													Name: "fn",
												},
												Value: &ast.FunctionExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 48,
																Line:   86,
															},
															File:   "monitor.flux",
															Source: "(r) => r.level_value != 0",
															Start: ast.Position{
																Column: 23,
																Line:   86,
															},
														},
													},
													Body: &ast.BinaryExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 48,
																	Line:   86,
																},
																File:   "monitor.flux",
																Source: "r.level_value != 0",
																Start: ast.Position{
																	Column: 30,
																	Line:   86,
																},
															},
														},
														Left: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   86,
																	},
																	File:   "monitor.flux",
																	Source: "r.level_value",
																	Start: ast.Position{
																		Column: 30,
																		Line:   86,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 31,
																			Line:   86,
																		},
																		File:   "monitor.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 30,
																			Line:   86,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 43,
																			Line:   86,
																		},
																		File:   "monitor.flux",
																		Source: "level_value",
																		Start: ast.Position{
																			Column: 32,
																			Line:   86,
																		},
																	},
																},
																Name: "level_value",
															},
														},
														Operator: 18,
														Right: &ast.IntegerLiteral{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 48,
																		Line:   86,
																	},
																	File:   "monitor.flux",
																	Source: "0",
																	Start: ast.Position{
																		Column: 47,
																		Line:   86,
																	},
																},
															},
															Value: int64(0),
														},
													},
													Params: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 25,
																	Line:   86,
																},
																File:   "monitor.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 24,
																	Line:   86,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 25,
																		Line:   86,
																	},
																	File:   "monitor.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 24,
																		Line:   86,
																	},
																},
															},
															Name: "r",
														},
														Value: nil,
													}},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   86,
												},
												File:   "monitor.flux",
												Source: "filter(fn: (r) => r.level_value != 0)",
												Start: ast.Position{
													Column: 12,
													Line:   86,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   86,
													},
													File:   "monitor.flux",
													Source: "filter",
													Start: ast.Position{
														Column: 12,
														Line:   86,
													},
												},
											},
											Name: "filter",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   87,
										},
										File:   "monitor.flux",
										Source: "tables\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        |> map(fn: (r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0}))\n        |> difference(columns: [\"level_value\"])\n        |> yield(name: \"foo\")\n        |> filter(fn: (r) => r.level_value != 0)\n        |> drop(columns: [\"level_value\"])",
										Start: ast.Position{
											Column: 12,
											Line:   75,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   87,
												},
												File:   "monitor.flux",
												Source: "columns: [\"level_value\"]",
												Start: ast.Position{
													Column: 17,
													Line:   87,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   87,
													},
													File:   "monitor.flux",
													Source: "columns: [\"level_value\"]",
													Start: ast.Position{
														Column: 17,
														Line:   87,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   87,
														},
														File:   "monitor.flux",
														Source: "columns",
														Start: ast.Position{
															Column: 17,
															Line:   87,
														},
													},
												},
												Name: "columns",
											},
											Value: &ast.ArrayExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   87,
														},
														File:   "monitor.flux",
														Source: "[\"level_value\"]",
														Start: ast.Position{
															Column: 26,
															Line:   87,
														},
													},
												},
												Elements: []ast.Expression{&ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   87,
															},
															File:   "monitor.flux",
															Source: "\"level_value\"",
															Start: ast.Position{
																Column: 27,
																Line:   87,
															},
														},
													},
													Value: "level_value",
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   87,
											},
											File:   "monitor.flux",
											Source: "drop(columns: [\"level_value\"])",
											Start: ast.Position{
												Column: 12,
												Line:   87,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   87,
												},
												File:   "monitor.flux",
												Source: "drop",
												Start: ast.Position{
													Column: 12,
													Line:   87,
												},
											},
										},
										Name: "drop",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 67,
										Line:   88,
									},
									File:   "monitor.flux",
									Source: "tables\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        |> map(fn: (r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0}))\n        |> difference(columns: [\"level_value\"])\n        |> yield(name: \"foo\")\n        |> filter(fn: (r) => r.level_value != 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])",
									Start: ast.Position{
										Column: 12,
										Line:   75,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   88,
											},
											File:   "monitor.flux",
											Source: "mode: \"extend\", columns: [\"_level\"]",
											Start: ast.Position{
												Column: 31,
												Line:   88,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   88,
												},
												File:   "monitor.flux",
												Source: "mode: \"extend\"",
												Start: ast.Position{
													Column: 31,
													Line:   88,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 35,
														Line:   88,
													},
													File:   "monitor.flux",
													Source: "mode",
													Start: ast.Position{
														Column: 31,
														Line:   88,
													},
												},
											},
											Name: "mode",
										},
										Value: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   88,
													},
													File:   "monitor.flux",
													Source: "\"extend\"",
													Start: ast.Position{
														Column: 37,
														Line:   88,
													},
												},
											},
											Value: "extend",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 66,
													Line:   88,
												},
												File:   "monitor.flux",
												Source: "columns: [\"_level\"]",
												Start: ast.Position{
													Column: 47,
													Line:   88,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 54,
														Line:   88,
													},
													File:   "monitor.flux",
													Source: "columns",
													Start: ast.Position{
														Column: 47,
														Line:   88,
													},
												},
											},
											Name: "columns",
										},
										Value: &ast.ArrayExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 66,
														Line:   88,
													},
													File:   "monitor.flux",
													Source: "[\"_level\"]",
													Start: ast.Position{
														Column: 56,
														Line:   88,
													},
												},
											},
											Elements: []ast.Expression{&ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 65,
															Line:   88,
														},
														File:   "monitor.flux",
														Source: "\"_level\"",
														Start: ast.Position{
															Column: 57,
															Line:   88,
														},
													},
												},
												Value: "_level",
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 67,
											Line:   88,
										},
										File:   "monitor.flux",
										Source: "experimental.group(mode: \"extend\", columns: [\"_level\"])",
										Start: ast.Position{
											Column: 12,
											Line:   88,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   88,
											},
											File:   "monitor.flux",
											Source: "experimental.group",
											Start: ast.Position{
												Column: 12,
												Line:   88,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   88,
												},
												File:   "monitor.flux",
												Source: "experimental",
												Start: ast.Position{
													Column: 12,
													Line:   88,
												},
											},
										},
										Name: "experimental",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   88,
												},
												File:   "monitor.flux",
												Source: "group",
												Start: ast.Position{
													Column: 25,
													Line:   88,
												},
											},
										},
										Name: "group",
									},
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 67,
									Line:   88,
								},
								File:   "monitor.flux",
								Source: "return tables\n        |> duplicate(column: \"_level\", as: \"l2\")\n        |> drop(columns: [\"_level\"])\n        |> rename(columns: {\"l2\": \"_level\"})\n        |> map(fn: (r) => ({r with level_value: if r._level == levelCrit then 4\n                                                else if r._level == levelWarn then 3\n                                                else if r._level == levelInfo then 2\n                                                else if r._level == levelOK then 1\n                                                else 0}))\n        |> difference(columns: [\"level_value\"])\n        |> yield(name: \"foo\")\n        |> filter(fn: (r) => r.level_value != 0)\n        |> drop(columns: [\"level_value\"])\n        |> experimental.group(mode: \"extend\", columns: [\"_level\"])",
								Start: ast.Position{
									Column: 5,
									Line:   75,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   74,
							},
							File:   "monitor.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 21,
								Line:   74,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   74,
								},
								File:   "monitor.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 21,
									Line:   74,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   74,
							},
							File:   "monitor.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 28,
								Line:   74,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   98,
					},
					File:   "monitor.flux",
					Source: "stateChanges = (fromLevel=\"any\", toLevel=\"any\", tables=<-) => {\n    return if fromLevel == \"any\" and toLevel == \"any\" then tables |> stateChangesOnly()\n           else tables |> _stateChanges(fromLevel: fromLevel, toLevel: toLevel)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   95,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   95,
						},
						File:   "monitor.flux",
						Source: "stateChanges",
						Start: ast.Position{
							Column: 1,
							Line:   95,
						},
					},
				},
				Name: "stateChanges",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   98,
						},
						File:   "monitor.flux",
						Source: "(fromLevel=\"any\", toLevel=\"any\", tables=<-) => {\n    return if fromLevel == \"any\" and toLevel == \"any\" then tables |> stateChangesOnly()\n           else tables |> _stateChanges(fromLevel: fromLevel, toLevel: toLevel)\n}",
						Start: ast.Position{
							Column: 16,
							Line:   95,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   98,
							},
							File:   "monitor.flux",
							Source: "{\n    return if fromLevel == \"any\" and toLevel == \"any\" then tables |> stateChangesOnly()\n           else tables |> _stateChanges(fromLevel: fromLevel, toLevel: toLevel)\n}",
							Start: ast.Position{
								Column: 63,
								Line:   95,
							},
						},
					},
					Body: []ast.Statement{&ast.ReturnStatement{
						Argument: &ast.ConditionalExpression{
							Alternate: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   97,
											},
											File:   "monitor.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 17,
												Line:   97,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 80,
											Line:   97,
										},
										File:   "monitor.flux",
										Source: "tables |> _stateChanges(fromLevel: fromLevel, toLevel: toLevel)",
										Start: ast.Position{
											Column: 17,
											Line:   97,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 79,
													Line:   97,
												},
												File:   "monitor.flux",
												Source: "fromLevel: fromLevel, toLevel: toLevel",
												Start: ast.Position{
													Column: 41,
													Line:   97,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 61,
														Line:   97,
													},
													File:   "monitor.flux",
													Source: "fromLevel: fromLevel",
													Start: ast.Position{
														Column: 41,
														Line:   97,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 50,
															Line:   97,
														},
														File:   "monitor.flux",
														Source: "fromLevel",
														Start: ast.Position{
															Column: 41,
															Line:   97,
														},
													},
												},
												Name: "fromLevel",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 61,
															Line:   97,
														},
														File:   "monitor.flux",
														Source: "fromLevel",
														Start: ast.Position{
															Column: 52,
															Line:   97,
														},
													},
												},
												Name: "fromLevel",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 79,
														Line:   97,
													},
													File:   "monitor.flux",
													Source: "toLevel: toLevel",
													Start: ast.Position{
														Column: 63,
														Line:   97,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 70,
															Line:   97,
														},
														File:   "monitor.flux",
														Source: "toLevel",
														Start: ast.Position{
															Column: 63,
															Line:   97,
														},
													},
												},
												Name: "toLevel",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 79,
															Line:   97,
														},
														File:   "monitor.flux",
														Source: "toLevel",
														Start: ast.Position{
															Column: 72,
															Line:   97,
														},
													},
												},
												Name: "toLevel",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 80,
												Line:   97,
											},
											File:   "monitor.flux",
											Source: "_stateChanges(fromLevel: fromLevel, toLevel: toLevel)",
											Start: ast.Position{
												Column: 27,
												Line:   97,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   97,
												},
												File:   "monitor.flux",
												Source: "_stateChanges",
												Start: ast.Position{
													Column: 27,
													Line:   97,
												},
											},
										},
										Name: "_stateChanges",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 80,
										Line:   97,
									},
									File:   "monitor.flux",
									Source: "if fromLevel == \"any\" and toLevel == \"any\" then tables |> stateChangesOnly()\n           else tables |> _stateChanges(fromLevel: fromLevel, toLevel: toLevel)",
									Start: ast.Position{
										Column: 12,
										Line:   96,
									},
								},
							},
							Consequent: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 66,
												Line:   96,
											},
											File:   "monitor.flux",
											Source: "tables",
											Start: ast.Position{
												Column: 60,
												Line:   96,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 88,
											Line:   96,
										},
										File:   "monitor.flux",
										Source: "tables |> stateChangesOnly()",
										Start: ast.Position{
											Column: 60,
											Line:   96,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: nil,
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 88,
												Line:   96,
											},
											File:   "monitor.flux",
											Source: "stateChangesOnly()",
											Start: ast.Position{
												Column: 70,
												Line:   96,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 86,
													Line:   96,
												},
												File:   "monitor.flux",
												Source: "stateChangesOnly",
												Start: ast.Position{
													Column: 70,
													Line:   96,
												},
											},
										},
										Name: "stateChangesOnly",
									},
								},
							},
							Test: &ast.LogicalExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 54,
											Line:   96,
										},
										File:   "monitor.flux",
										Source: "fromLevel == \"any\" and toLevel == \"any\"",
										Start: ast.Position{
											Column: 15,
											Line:   96,
										},
									},
								},
								Left: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   96,
											},
											File:   "monitor.flux",
											Source: "fromLevel == \"any\"",
											Start: ast.Position{
												Column: 15,
												Line:   96,
											},
										},
									},
									Left: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   96,
												},
												File:   "monitor.flux",
												Source: "fromLevel",
												Start: ast.Position{
													Column: 15,
													Line:   96,
												},
											},
										},
										Name: "fromLevel",
									},
									Operator: 17,
									Right: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   96,
												},
												File:   "monitor.flux",
												Source: "\"any\"",
												Start: ast.Position{
													Column: 28,
													Line:   96,
												},
											},
										},
										Value: "any",
									},
								},
								Operator: 1,
								Right: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 54,
												Line:   96,
											},
											File:   "monitor.flux",
											Source: "toLevel == \"any\"",
											Start: ast.Position{
												Column: 38,
												Line:   96,
											},
										},
									},
									Left: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   96,
												},
												File:   "monitor.flux",
												Source: "toLevel",
												Start: ast.Position{
													Column: 38,
													Line:   96,
												},
											},
										},
										Name: "toLevel",
									},
									Operator: 17,
									Right: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   96,
												},
												File:   "monitor.flux",
												Source: "\"any\"",
												Start: ast.Position{
													Column: 49,
													Line:   96,
												},
											},
										},
										Value: "any",
									},
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 80,
									Line:   97,
								},
								File:   "monitor.flux",
								Source: "return if fromLevel == \"any\" and toLevel == \"any\" then tables |> stateChangesOnly()\n           else tables |> _stateChanges(fromLevel: fromLevel, toLevel: toLevel)",
								Start: ast.Position{
									Column: 5,
									Line:   96,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   95,
							},
							File:   "monitor.flux",
							Source: "fromLevel=\"any\"",
							Start: ast.Position{
								Column: 17,
								Line:   95,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   95,
								},
								File:   "monitor.flux",
								Source: "fromLevel",
								Start: ast.Position{
									Column: 17,
									Line:   95,
								},
							},
						},
						Name: "fromLevel",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   95,
								},
								File:   "monitor.flux",
								Source: "\"any\"",
								Start: ast.Position{
									Column: 27,
									Line:   95,
								},
							},
						},
						Value: "any",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 47,
								Line:   95,
							},
							File:   "monitor.flux",
							Source: "toLevel=\"any\"",
							Start: ast.Position{
								Column: 34,
								Line:   95,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   95,
								},
								File:   "monitor.flux",
								Source: "toLevel",
								Start: ast.Position{
									Column: 34,
									Line:   95,
								},
							},
						},
						Name: "toLevel",
					},
					Value: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   95,
								},
								File:   "monitor.flux",
								Source: "\"any\"",
								Start: ast.Position{
									Column: 42,
									Line:   95,
								},
							},
						},
						Value: "any",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 58,
								Line:   95,
							},
							File:   "monitor.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 49,
								Line:   95,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 55,
									Line:   95,
								},
								File:   "monitor.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 49,
									Line:   95,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 58,
								Line:   95,
							},
							File:   "monitor.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 56,
								Line:   95,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   112,
					},
					File:   "monitor.flux",
					Source: "notify = (tables=<-, endpoint, data={}) =>\n    tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n        |> map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))\n        |> endpoint()\n        |> experimental.group(mode: \"extend\", columns: [\"_sent\"])\n        |> log()",
					Start: ast.Position{
						Column: 1,
						Line:   101,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   101,
						},
						File:   "monitor.flux",
						Source: "notify",
						Start: ast.Position{
							Column: 1,
							Line:   101,
						},
					},
				},
				Name: "notify",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   112,
						},
						File:   "monitor.flux",
						Source: "(tables=<-, endpoint, data={}) =>\n    tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n        |> map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))\n        |> endpoint()\n        |> experimental.group(mode: \"extend\", columns: [\"_sent\"])\n        |> log()",
						Start: ast.Position{
							Column: 10,
							Line:   101,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   102,
													},
													File:   "monitor.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 5,
														Line:   102,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 37,
													Line:   103,
												},
												File:   "monitor.flux",
												Source: "tables\n        |> experimental.set(o: data)",
												Start: ast.Position{
													Column: 5,
													Line:   102,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   103,
														},
														File:   "monitor.flux",
														Source: "o: data",
														Start: ast.Position{
															Column: 29,
															Line:   103,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 36,
																Line:   103,
															},
															File:   "monitor.flux",
															Source: "o: data",
															Start: ast.Position{
																Column: 29,
																Line:   103,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   103,
																},
																File:   "monitor.flux",
																Source: "o",
																Start: ast.Position{
																	Column: 29,
																	Line:   103,
																},
															},
														},
														Name: "o",
													},
													Value: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 36,
																	Line:   103,
																},
																File:   "monitor.flux",
																Source: "data",
																Start: ast.Position{
																	Column: 32,
																	Line:   103,
																},
															},
														},
														Name: "data",
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 37,
														Line:   103,
													},
													File:   "monitor.flux",
													Source: "experimental.set(o: data)",
													Start: ast.Position{
														Column: 12,
														Line:   103,
													},
												},
											},
											Callee: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   103,
														},
														File:   "monitor.flux",
														Source: "experimental.set",
														Start: ast.Position{
															Column: 12,
															Line:   103,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   103,
															},
															File:   "monitor.flux",
															Source: "experimental",
															Start: ast.Position{
																Column: 12,
																Line:   103,
															},
														},
													},
													Name: "experimental",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   103,
															},
															File:   "monitor.flux",
															Source: "set",
															Start: ast.Position{
																Column: 25,
																Line:   103,
															},
														},
													},
													Name: "set",
												},
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 89,
												Line:   104,
											},
											File:   "monitor.flux",
											Source: "tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))",
											Start: ast.Position{
												Column: 5,
												Line:   102,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 88,
														Line:   104,
													},
													File:   "monitor.flux",
													Source: "mode: \"extend\", columns: experimental.objectKeys(o: data)",
													Start: ast.Position{
														Column: 31,
														Line:   104,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   104,
														},
														File:   "monitor.flux",
														Source: "mode: \"extend\"",
														Start: ast.Position{
															Column: 31,
															Line:   104,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   104,
															},
															File:   "monitor.flux",
															Source: "mode",
															Start: ast.Position{
																Column: 31,
																Line:   104,
															},
														},
													},
													Name: "mode",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   104,
															},
															File:   "monitor.flux",
															Source: "\"extend\"",
															Start: ast.Position{
																Column: 37,
																Line:   104,
															},
														},
													},
													Value: "extend",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 88,
															Line:   104,
														},
														File:   "monitor.flux",
														Source: "columns: experimental.objectKeys(o: data)",
														Start: ast.Position{
															Column: 47,
															Line:   104,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 54,
																Line:   104,
															},
															File:   "monitor.flux",
															Source: "columns",
															Start: ast.Position{
																Column: 47,
																Line:   104,
															},
														},
													},
													Name: "columns",
												},
												Value: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 87,
																	Line:   104,
																},
																File:   "monitor.flux",
																Source: "o: data",
																Start: ast.Position{
																	Column: 80,
																	Line:   104,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 87,
																		Line:   104,
																	},
																	File:   "monitor.flux",
																	Source: "o: data",
																	Start: ast.Position{
																		Column: 80,
																		Line:   104,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 81,
																			Line:   104,
																		},
																		File:   "monitor.flux",
																		Source: "o",
																		Start: ast.Position{
																			Column: 80,
																			Line:   104,
																		},
																	},
																},
																Name: "o",
															},
															Value: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 87,
																			Line:   104,
																		},
																		File:   "monitor.flux",
																		Source: "data",
																		Start: ast.Position{
																			Column: 83,
																			Line:   104,
																		},
																	},
																},
																Name: "data",
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 88,
																Line:   104,
															},
															File:   "monitor.flux",
															Source: "experimental.objectKeys(o: data)",
															Start: ast.Position{
																Column: 56,
																Line:   104,
															},
														},
													},
													Callee: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 79,
																	Line:   104,
																},
																File:   "monitor.flux",
																Source: "experimental.objectKeys",
																Start: ast.Position{
																	Column: 56,
																	Line:   104,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 68,
																		Line:   104,
																	},
																	File:   "monitor.flux",
																	Source: "experimental",
																	Start: ast.Position{
																		Column: 56,
																		Line:   104,
																	},
																},
															},
															Name: "experimental",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 79,
																		Line:   104,
																	},
																	File:   "monitor.flux",
																	Source: "objectKeys",
																	Start: ast.Position{
																		Column: 69,
																		Line:   104,
																	},
																},
															},
															Name: "objectKeys",
														},
													},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 89,
													Line:   104,
												},
												File:   "monitor.flux",
												Source: "experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))",
												Start: ast.Position{
													Column: 12,
													Line:   104,
												},
											},
										},
										Callee: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   104,
													},
													File:   "monitor.flux",
													Source: "experimental.group",
													Start: ast.Position{
														Column: 12,
														Line:   104,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   104,
														},
														File:   "monitor.flux",
														Source: "experimental",
														Start: ast.Position{
															Column: 12,
															Line:   104,
														},
													},
												},
												Name: "experimental",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   104,
														},
														File:   "monitor.flux",
														Source: "group",
														Start: ast.Position{
															Column: 25,
															Line:   104,
														},
													},
												},
												Name: "group",
											},
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   109,
										},
										File:   "monitor.flux",
										Source: "tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n        |> map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))",
										Start: ast.Position{
											Column: 5,
											Line:   102,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   109,
												},
												File:   "monitor.flux",
												Source: "fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        })",
												Start: ast.Position{
													Column: 16,
													Line:   105,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   109,
													},
													File:   "monitor.flux",
													Source: "fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        })",
													Start: ast.Position{
														Column: 16,
														Line:   105,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   105,
														},
														File:   "monitor.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 16,
															Line:   105,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   109,
														},
														File:   "monitor.flux",
														Source: "(r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        })",
														Start: ast.Position{
															Column: 20,
															Line:   105,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 11,
																Line:   109,
															},
															File:   "monitor.flux",
															Source: "({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        })",
															Start: ast.Position{
																Column: 27,
																Line:   105,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 10,
																	Line:   109,
																},
																File:   "monitor.flux",
																Source: "{r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }",
																Start: ast.Position{
																	Column: 28,
																	Line:   105,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   106,
																	},
																	File:   "monitor.flux",
																	Source: "_measurement: \"notifications\"",
																	Start: ast.Position{
																		Column: 13,
																		Line:   106,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   106,
																		},
																		File:   "monitor.flux",
																		Source: "_measurement",
																		Start: ast.Position{
																			Column: 13,
																			Line:   106,
																		},
																	},
																},
																Name: "_measurement",
															},
															Value: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 42,
																			Line:   106,
																		},
																		File:   "monitor.flux",
																		Source: "\"notifications\"",
																		Start: ast.Position{
																			Column: 27,
																			Line:   106,
																		},
																	},
																},
																Value: "notifications",
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 47,
																		Line:   107,
																	},
																	File:   "monitor.flux",
																	Source: "_status_timestamp: int(v: r._time)",
																	Start: ast.Position{
																		Column: 13,
																		Line:   107,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 30,
																			Line:   107,
																		},
																		File:   "monitor.flux",
																		Source: "_status_timestamp",
																		Start: ast.Position{
																			Column: 13,
																			Line:   107,
																		},
																	},
																},
																Name: "_status_timestamp",
															},
															Value: &ast.CallExpression{
																Arguments: []ast.Expression{&ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 46,
																				Line:   107,
																			},
																			File:   "monitor.flux",
																			Source: "v: r._time",
																			Start: ast.Position{
																				Column: 36,
																				Line:   107,
																			},
																		},
																	},
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 46,
																					Line:   107,
																				},
																				File:   "monitor.flux",
																				Source: "v: r._time",
																				Start: ast.Position{
																					Column: 36,
																					Line:   107,
																				},
																			},
																		},
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 37,
																						Line:   107,
																					},
																					File:   "monitor.flux",
																					Source: "v",
																					Start: ast.Position{
																						Column: 36,
																						Line:   107,
																					},
																				},
																			},
																			Name: "v",
																		},
																		Value: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 46,
																						Line:   107,
																					},
																					File:   "monitor.flux",
																					Source: "r._time",
																					Start: ast.Position{
																						Column: 39,
																						Line:   107,
																					},
																				},
																			},
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 40,
																							Line:   107,
																						},
																						File:   "monitor.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 39,
																							Line:   107,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 46,
																							Line:   107,
																						},
																						File:   "monitor.flux",
																						Source: "_time",
																						Start: ast.Position{
																							Column: 41,
																							Line:   107,
																						},
																					},
																				},
																				Name: "_time",
																			},
																		},
																	}},
																	With: nil,
																}},
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 47,
																			Line:   107,
																		},
																		File:   "monitor.flux",
																		Source: "int(v: r._time)",
																		Start: ast.Position{
																			Column: 32,
																			Line:   107,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 35,
																				Line:   107,
																			},
																			File:   "monitor.flux",
																			Source: "int",
																			Start: ast.Position{
																				Column: 32,
																				Line:   107,
																			},
																		},
																	},
																	Name: "int",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 25,
																		Line:   108,
																	},
																	File:   "monitor.flux",
																	Source: "_time: now()",
																	Start: ast.Position{
																		Column: 13,
																		Line:   108,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   108,
																		},
																		File:   "monitor.flux",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 13,
																			Line:   108,
																		},
																	},
																},
																Name: "_time",
															},
															Value: &ast.CallExpression{
																Arguments: nil,
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   108,
																		},
																		File:   "monitor.flux",
																		Source: "now()",
																		Start: ast.Position{
																			Column: 20,
																			Line:   108,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 23,
																				Line:   108,
																			},
																			File:   "monitor.flux",
																			Source: "now",
																			Start: ast.Position{
																				Column: 20,
																				Line:   108,
																			},
																		},
																	},
																	Name: "now",
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 30,
																		Line:   105,
																	},
																	File:   "monitor.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 29,
																		Line:   105,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 22,
																Line:   105,
															},
															File:   "monitor.flux",
															Source: "r",
															Start: ast.Position{
																Column: 21,
																Line:   105,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   105,
																},
																File:   "monitor.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 21,
																	Line:   105,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   109,
											},
											File:   "monitor.flux",
											Source: "map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))",
											Start: ast.Position{
												Column: 12,
												Line:   105,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   105,
												},
												File:   "monitor.flux",
												Source: "map",
												Start: ast.Position{
													Column: 12,
													Line:   105,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   110,
									},
									File:   "monitor.flux",
									Source: "tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n        |> map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))\n        |> endpoint()",
									Start: ast.Position{
										Column: 5,
										Line:   102,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   110,
										},
										File:   "monitor.flux",
										Source: "endpoint()",
										Start: ast.Position{
											Column: 12,
											Line:   110,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   110,
											},
											File:   "monitor.flux",
											Source: "endpoint",
											Start: ast.Position{
												Column: 12,
												Line:   110,
											},
										},
									},
									Name: "endpoint",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   111,
								},
								File:   "monitor.flux",
								Source: "tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n        |> map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))\n        |> endpoint()\n        |> experimental.group(mode: \"extend\", columns: [\"_sent\"])",
								Start: ast.Position{
									Column: 5,
									Line:   102,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 65,
											Line:   111,
										},
										File:   "monitor.flux",
										Source: "mode: \"extend\", columns: [\"_sent\"]",
										Start: ast.Position{
											Column: 31,
											Line:   111,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   111,
											},
											File:   "monitor.flux",
											Source: "mode: \"extend\"",
											Start: ast.Position{
												Column: 31,
												Line:   111,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   111,
												},
												File:   "monitor.flux",
												Source: "mode",
												Start: ast.Position{
													Column: 31,
													Line:   111,
												},
											},
										},
										Name: "mode",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   111,
												},
												File:   "monitor.flux",
												Source: "\"extend\"",
												Start: ast.Position{
													Column: 37,
													Line:   111,
												},
											},
										},
										Value: "extend",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   111,
											},
											File:   "monitor.flux",
											Source: "columns: [\"_sent\"]",
											Start: ast.Position{
												Column: 47,
												Line:   111,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   111,
												},
												File:   "monitor.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 47,
													Line:   111,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 65,
													Line:   111,
												},
												File:   "monitor.flux",
												Source: "[\"_sent\"]",
												Start: ast.Position{
													Column: 56,
													Line:   111,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 64,
														Line:   111,
													},
													File:   "monitor.flux",
													Source: "\"_sent\"",
													Start: ast.Position{
														Column: 57,
														Line:   111,
													},
												},
											},
											Value: "_sent",
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   111,
									},
									File:   "monitor.flux",
									Source: "experimental.group(mode: \"extend\", columns: [\"_sent\"])",
									Start: ast.Position{
										Column: 12,
										Line:   111,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   111,
										},
										File:   "monitor.flux",
										Source: "experimental.group",
										Start: ast.Position{
											Column: 12,
											Line:   111,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   111,
											},
											File:   "monitor.flux",
											Source: "experimental",
											Start: ast.Position{
												Column: 12,
												Line:   111,
											},
										},
									},
									Name: "experimental",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   111,
											},
											File:   "monitor.flux",
											Source: "group",
											Start: ast.Position{
												Column: 25,
												Line:   111,
											},
										},
									},
									Name: "group",
								},
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 17,
								Line:   112,
							},
							File:   "monitor.flux",
							Source: "tables\n        |> experimental.set(o: data)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data))\n        |> map(fn: (r) => ({r with\n            _measurement: \"notifications\",\n            _status_timestamp: int(v: r._time),\n            _time: now(),\n        }))\n        |> endpoint()\n        |> experimental.group(mode: \"extend\", columns: [\"_sent\"])\n        |> log()",
							Start: ast.Position{
								Column: 5,
								Line:   102,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   112,
								},
								File:   "monitor.flux",
								Source: "log()",
								Start: ast.Position{
									Column: 12,
									Line:   112,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   112,
									},
									File:   "monitor.flux",
									Source: "log",
									Start: ast.Position{
										Column: 12,
										Line:   112,
									},
								},
							},
							Name: "log",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   101,
							},
							File:   "monitor.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 11,
								Line:   101,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 17,
									Line:   101,
								},
								File:   "monitor.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 11,
									Line:   101,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 20,
								Line:   101,
							},
							File:   "monitor.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 18,
								Line:   101,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   101,
							},
							File:   "monitor.flux",
							Source: "endpoint",
							Start: ast.Position{
								Column: 22,
								Line:   101,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   101,
								},
								File:   "monitor.flux",
								Source: "endpoint",
								Start: ast.Position{
									Column: 22,
									Line:   101,
								},
							},
						},
						Name: "endpoint",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 39,
								Line:   101,
							},
							File:   "monitor.flux",
							Source: "data={}",
							Start: ast.Position{
								Column: 32,
								Line:   101,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   101,
								},
								File:   "monitor.flux",
								Source: "data",
								Start: ast.Position{
									Column: 32,
									Line:   101,
								},
							},
						},
						Name: "data",
					},
					Value: &ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   101,
								},
								File:   "monitor.flux",
								Source: "{}",
								Start: ast.Position{
									Column: 37,
									Line:   101,
								},
							},
						},
						Properties: nil,
						With:       nil,
					},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   120,
					},
					File:   "monitor.flux",
					Source: "logs = (start, stop=now(), fn) =>\n    influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"notifications\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
					Start: ast.Position{
						Column: 1,
						Line:   115,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   115,
						},
						File:   "monitor.flux",
						Source: "logs",
						Start: ast.Position{
							Column: 1,
							Line:   115,
						},
					},
				},
				Name: "logs",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   120,
						},
						File:   "monitor.flux",
						Source: "(start, stop=now(), fn) =>\n    influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"notifications\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
						Start: ast.Position{
							Column: 8,
							Line:   115,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 33,
													Line:   116,
												},
												File:   "monitor.flux",
												Source: "bucket: bucket",
												Start: ast.Position{
													Column: 19,
													Line:   116,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 33,
														Line:   116,
													},
													File:   "monitor.flux",
													Source: "bucket: bucket",
													Start: ast.Position{
														Column: 19,
														Line:   116,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   116,
														},
														File:   "monitor.flux",
														Source: "bucket",
														Start: ast.Position{
															Column: 19,
															Line:   116,
														},
													},
												},
												Name: "bucket",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 33,
															Line:   116,
														},
														File:   "monitor.flux",
														Source: "bucket",
														Start: ast.Position{
															Column: 27,
															Line:   116,
														},
													},
												},
												Name: "bucket",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   116,
											},
											File:   "monitor.flux",
											Source: "influxdb.from(bucket: bucket)",
											Start: ast.Position{
												Column: 5,
												Line:   116,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   116,
												},
												File:   "monitor.flux",
												Source: "influxdb.from",
												Start: ast.Position{
													Column: 5,
													Line:   116,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 13,
														Line:   116,
													},
													File:   "monitor.flux",
													Source: "influxdb",
													Start: ast.Position{
														Column: 5,
														Line:   116,
													},
												},
											},
											Name: "influxdb",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   116,
													},
													File:   "monitor.flux",
													Source: "from",
													Start: ast.Position{
														Column: 14,
														Line:   116,
													},
												},
											},
											Name: "from",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   117,
										},
										File:   "monitor.flux",
										Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)",
										Start: ast.Position{
											Column: 5,
											Line:   116,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   117,
												},
												File:   "monitor.flux",
												Source: "start: start, stop: stop",
												Start: ast.Position{
													Column: 18,
													Line:   117,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   117,
													},
													File:   "monitor.flux",
													Source: "start: start",
													Start: ast.Position{
														Column: 18,
														Line:   117,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 23,
															Line:   117,
														},
														File:   "monitor.flux",
														Source: "start",
														Start: ast.Position{
															Column: 18,
															Line:   117,
														},
													},
												},
												Name: "start",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   117,
														},
														File:   "monitor.flux",
														Source: "start",
														Start: ast.Position{
															Column: 25,
															Line:   117,
														},
													},
												},
												Name: "start",
											},
										}, &ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   117,
													},
													File:   "monitor.flux",
													Source: "stop: stop",
													Start: ast.Position{
														Column: 32,
														Line:   117,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   117,
														},
														File:   "monitor.flux",
														Source: "stop",
														Start: ast.Position{
															Column: 32,
															Line:   117,
														},
													},
												},
												Name: "stop",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 42,
															Line:   117,
														},
														File:   "monitor.flux",
														Source: "stop",
														Start: ast.Position{
															Column: 38,
															Line:   117,
														},
													},
												},
												Name: "stop",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   117,
											},
											File:   "monitor.flux",
											Source: "range(start: start, stop: stop)",
											Start: ast.Position{
												Column: 12,
												Line:   117,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   117,
												},
												File:   "monitor.flux",
												Source: "range",
												Start: ast.Position{
													Column: 12,
													Line:   117,
												},
											},
										},
										Name: "range",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   118,
									},
									File:   "monitor.flux",
									Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"notifications\")",
									Start: ast.Position{
										Column: 5,
										Line:   116,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 63,
												Line:   118,
											},
											File:   "monitor.flux",
											Source: "fn: (r) => r._measurement == \"notifications\"",
											Start: ast.Position{
												Column: 19,
												Line:   118,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 63,
													Line:   118,
												},
												File:   "monitor.flux",
												Source: "fn: (r) => r._measurement == \"notifications\"",
												Start: ast.Position{
													Column: 19,
													Line:   118,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   118,
													},
													File:   "monitor.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 19,
														Line:   118,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 63,
														Line:   118,
													},
													File:   "monitor.flux",
													Source: "(r) => r._measurement == \"notifications\"",
													Start: ast.Position{
														Column: 23,
														Line:   118,
													},
												},
											},
											Body: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 63,
															Line:   118,
														},
														File:   "monitor.flux",
														Source: "r._measurement == \"notifications\"",
														Start: ast.Position{
															Column: 30,
															Line:   118,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   118,
															},
															File:   "monitor.flux",
															Source: "r._measurement",
															Start: ast.Position{
																Column: 30,
																Line:   118,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 31,
																	Line:   118,
																},
																File:   "monitor.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 30,
																	Line:   118,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 44,
																	Line:   118,
																},
																File:   "monitor.flux",
																Source: "_measurement",
																Start: ast.Position{
																	Column: 32,
																	Line:   118,
																},
															},
														},
														Name: "_measurement",
													},
												},
												Operator: 17,
												Right: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 63,
																Line:   118,
															},
															File:   "monitor.flux",
															Source: "\"notifications\"",
															Start: ast.Position{
																Column: 48,
																Line:   118,
															},
														},
													},
													Value: "notifications",
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 25,
															Line:   118,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 24,
															Line:   118,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 25,
																Line:   118,
															},
															File:   "monitor.flux",
															Source: "r",
															Start: ast.Position{
																Column: 24,
																Line:   118,
															},
														},
													},
													Name: "r",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 64,
											Line:   118,
										},
										File:   "monitor.flux",
										Source: "filter(fn: (r) => r._measurement == \"notifications\")",
										Start: ast.Position{
											Column: 12,
											Line:   118,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   118,
											},
											File:   "monitor.flux",
											Source: "filter",
											Start: ast.Position{
												Column: 12,
												Line:   118,
											},
										},
									},
									Name: "filter",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   119,
								},
								File:   "monitor.flux",
								Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"notifications\")\n        |> filter(fn: fn)",
								Start: ast.Position{
									Column: 5,
									Line:   116,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   119,
										},
										File:   "monitor.flux",
										Source: "fn: fn",
										Start: ast.Position{
											Column: 19,
											Line:   119,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   119,
											},
											File:   "monitor.flux",
											Source: "fn: fn",
											Start: ast.Position{
												Column: 19,
												Line:   119,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   119,
												},
												File:   "monitor.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 19,
													Line:   119,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   119,
												},
												File:   "monitor.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 23,
													Line:   119,
												},
											},
										},
										Name: "fn",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   119,
									},
									File:   "monitor.flux",
									Source: "filter(fn: fn)",
									Start: ast.Position{
										Column: 12,
										Line:   119,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   119,
										},
										File:   "monitor.flux",
										Source: "filter",
										Start: ast.Position{
											Column: 12,
											Line:   119,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   120,
							},
							File:   "monitor.flux",
							Source: "influxdb.from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: (r) => r._measurement == \"notifications\")\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
							Start: ast.Position{
								Column: 5,
								Line:   116,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   120,
								},
								File:   "monitor.flux",
								Source: "v1.fieldsAsCols()",
								Start: ast.Position{
									Column: 12,
									Line:   120,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   120,
									},
									File:   "monitor.flux",
									Source: "v1.fieldsAsCols",
									Start: ast.Position{
										Column: 12,
										Line:   120,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   120,
										},
										File:   "monitor.flux",
										Source: "v1",
										Start: ast.Position{
											Column: 12,
											Line:   120,
										},
									},
								},
								Name: "v1",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   120,
										},
										File:   "monitor.flux",
										Source: "fieldsAsCols",
										Start: ast.Position{
											Column: 15,
											Line:   120,
										},
									},
								},
								Name: "fieldsAsCols",
							},
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   115,
							},
							File:   "monitor.flux",
							Source: "start",
							Start: ast.Position{
								Column: 9,
								Line:   115,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   115,
								},
								File:   "monitor.flux",
								Source: "start",
								Start: ast.Position{
									Column: 9,
									Line:   115,
								},
							},
						},
						Name: "start",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   115,
							},
							File:   "monitor.flux",
							Source: "stop=now()",
							Start: ast.Position{
								Column: 16,
								Line:   115,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   115,
								},
								File:   "monitor.flux",
								Source: "stop",
								Start: ast.Position{
									Column: 16,
									Line:   115,
								},
							},
						},
						Name: "stop",
					},
					Value: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   115,
								},
								File:   "monitor.flux",
								Source: "now()",
								Start: ast.Position{
									Column: 21,
									Line:   115,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   115,
									},
									File:   "monitor.flux",
									Source: "now",
									Start: ast.Position{
										Column: 21,
										Line:   115,
									},
								},
							},
							Name: "now",
						},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   115,
							},
							File:   "monitor.flux",
							Source: "fn",
							Start: ast.Position{
								Column: 28,
								Line:   115,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   115,
								},
								File:   "monitor.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 28,
									Line:   115,
								},
							},
						},
						Name: "fn",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 54,
						Line:   127,
					},
					File:   "monitor.flux",
					Source: "deadman = (t, tables=<-) => tables\n    |> max(column: \"_time\")\n    |> map(fn: (r) => ( {r with dead: r._time < t} ))",
					Start: ast.Position{
						Column: 1,
						Line:   125,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   125,
						},
						File:   "monitor.flux",
						Source: "deadman",
						Start: ast.Position{
							Column: 1,
							Line:   125,
						},
					},
				},
				Name: "deadman",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 54,
							Line:   127,
						},
						File:   "monitor.flux",
						Source: "(t, tables=<-) => tables\n    |> max(column: \"_time\")\n    |> map(fn: (r) => ( {r with dead: r._time < t} ))",
						Start: ast.Position{
							Column: 11,
							Line:   125,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   125,
									},
									File:   "monitor.flux",
									Source: "tables",
									Start: ast.Position{
										Column: 29,
										Line:   125,
									},
								},
							},
							Name: "tables",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   126,
								},
								File:   "monitor.flux",
								Source: "tables\n    |> max(column: \"_time\")",
								Start: ast.Position{
									Column: 29,
									Line:   125,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   126,
										},
										File:   "monitor.flux",
										Source: "column: \"_time\"",
										Start: ast.Position{
											Column: 12,
											Line:   126,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   126,
											},
											File:   "monitor.flux",
											Source: "column: \"_time\"",
											Start: ast.Position{
												Column: 12,
												Line:   126,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   126,
												},
												File:   "monitor.flux",
												Source: "column",
												Start: ast.Position{
													Column: 12,
													Line:   126,
												},
											},
										},
										Name: "column",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   126,
												},
												File:   "monitor.flux",
												Source: "\"_time\"",
												Start: ast.Position{
													Column: 20,
													Line:   126,
												},
											},
										},
										Value: "_time",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   126,
									},
									File:   "monitor.flux",
									Source: "max(column: \"_time\")",
									Start: ast.Position{
										Column: 8,
										Line:   126,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   126,
										},
										File:   "monitor.flux",
										Source: "max",
										Start: ast.Position{
											Column: 8,
											Line:   126,
										},
									},
								},
								Name: "max",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 54,
								Line:   127,
							},
							File:   "monitor.flux",
							Source: "tables\n    |> max(column: \"_time\")\n    |> map(fn: (r) => ( {r with dead: r._time < t} ))",
							Start: ast.Position{
								Column: 29,
								Line:   125,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   127,
									},
									File:   "monitor.flux",
									Source: "fn: (r) => ( {r with dead: r._time < t} )",
									Start: ast.Position{
										Column: 12,
										Line:   127,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   127,
										},
										File:   "monitor.flux",
										Source: "fn: (r) => ( {r with dead: r._time < t} )",
										Start: ast.Position{
											Column: 12,
											Line:   127,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   127,
											},
											File:   "monitor.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 12,
												Line:   127,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.FunctionExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 53,
												Line:   127,
											},
											File:   "monitor.flux",
											Source: "(r) => ( {r with dead: r._time < t} )",
											Start: ast.Position{
												Column: 16,
												Line:   127,
											},
										},
									},
									Body: &ast.ParenExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 53,
													Line:   127,
												},
												File:   "monitor.flux",
												Source: "( {r with dead: r._time < t} )",
												Start: ast.Position{
													Column: 23,
													Line:   127,
												},
											},
										},
										Expression: &ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 51,
														Line:   127,
													},
													File:   "monitor.flux",
													Source: "{r with dead: r._time < t}",
													Start: ast.Position{
														Column: 25,
														Line:   127,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 50,
															Line:   127,
														},
														File:   "monitor.flux",
														Source: "dead: r._time < t",
														Start: ast.Position{
															Column: 33,
															Line:   127,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   127,
															},
															File:   "monitor.flux",
															Source: "dead",
															Start: ast.Position{
																Column: 33,
																Line:   127,
															},
														},
													},
													Name: "dead",
												},
												Value: &ast.BinaryExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 50,
																Line:   127,
															},
															File:   "monitor.flux",
															Source: "r._time < t",
															Start: ast.Position{
																Column: 39,
																Line:   127,
															},
														},
													},
													Left: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 46,
																	Line:   127,
																},
																File:   "monitor.flux",
																Source: "r._time",
																Start: ast.Position{
																	Column: 39,
																	Line:   127,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 40,
																		Line:   127,
																	},
																	File:   "monitor.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 39,
																		Line:   127,
																	},
																},
															},
															Name: "r",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   127,
																	},
																	File:   "monitor.flux",
																	Source: "_time",
																	Start: ast.Position{
																		Column: 41,
																		Line:   127,
																	},
																},
															},
															Name: "_time",
														},
													},
													Operator: 8,
													Right: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 50,
																	Line:   127,
																},
																File:   "monitor.flux",
																Source: "t",
																Start: ast.Position{
																	Column: 49,
																	Line:   127,
																},
															},
														},
														Name: "t",
													},
												},
											}},
											With: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 27,
															Line:   127,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 26,
															Line:   127,
														},
													},
												},
												Name: "r",
											},
										},
									},
									Params: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   127,
												},
												File:   "monitor.flux",
												Source: "r",
												Start: ast.Position{
													Column: 17,
													Line:   127,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   127,
													},
													File:   "monitor.flux",
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   127,
													},
												},
											},
											Name: "r",
										},
										Value: nil,
									}},
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   127,
								},
								File:   "monitor.flux",
								Source: "map(fn: (r) => ( {r with dead: r._time < t} ))",
								Start: ast.Position{
									Column: 8,
									Line:   127,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   127,
									},
									File:   "monitor.flux",
									Source: "map",
									Start: ast.Position{
										Column: 8,
										Line:   127,
									},
								},
							},
							Name: "map",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   125,
							},
							File:   "monitor.flux",
							Source: "t",
							Start: ast.Position{
								Column: 12,
								Line:   125,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   125,
								},
								File:   "monitor.flux",
								Source: "t",
								Start: ast.Position{
									Column: 12,
									Line:   125,
								},
							},
						},
						Name: "t",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   125,
							},
							File:   "monitor.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 15,
								Line:   125,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   125,
								},
								File:   "monitor.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 15,
									Line:   125,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 24,
								Line:   125,
							},
							File:   "monitor.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 22,
								Line:   125,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   162,
					},
					File:   "monitor.flux",
					Source: "check = (\n    tables=<-,\n    data,\n    messageFn,\n    crit=(r) => false,\n    warn=(r) => false,\n    info=(r) => false,\n    ok=(r) => true\n) =>\n    tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n        |> map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))\n        |> map(fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }))\n        |> experimental.group(mode: \"extend\", columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"])\n        |> write()",
					Start: ast.Position{
						Column: 1,
						Line:   131,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   131,
						},
						File:   "monitor.flux",
						Source: "check",
						Start: ast.Position{
							Column: 1,
							Line:   131,
						},
					},
				},
				Name: "check",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   162,
						},
						File:   "monitor.flux",
						Source: "(\n    tables=<-,\n    data,\n    messageFn,\n    crit=(r) => false,\n    warn=(r) => false,\n    info=(r) => false,\n    ok=(r) => true\n) =>\n    tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n        |> map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))\n        |> map(fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }))\n        |> experimental.group(mode: \"extend\", columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"])\n        |> write()",
						Start: ast.Position{
							Column: 9,
							Line:   131,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   140,
													},
													File:   "monitor.flux",
													Source: "tables",
													Start: ast.Position{
														Column: 5,
														Line:   140,
													},
												},
											},
											Name: "tables",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   141,
												},
												File:   "monitor.flux",
												Source: "tables\n        |> experimental.set(o: data.tags)",
												Start: ast.Position{
													Column: 5,
													Line:   140,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: []ast.Expression{&ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   141,
														},
														File:   "monitor.flux",
														Source: "o: data.tags",
														Start: ast.Position{
															Column: 29,
															Line:   141,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 41,
																Line:   141,
															},
															File:   "monitor.flux",
															Source: "o: data.tags",
															Start: ast.Position{
																Column: 29,
																Line:   141,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   141,
																},
																File:   "monitor.flux",
																Source: "o",
																Start: ast.Position{
																	Column: 29,
																	Line:   141,
																},
															},
														},
														Name: "o",
													},
													Value: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 41,
																	Line:   141,
																},
																File:   "monitor.flux",
																Source: "data.tags",
																Start: ast.Position{
																	Column: 32,
																	Line:   141,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 36,
																		Line:   141,
																	},
																	File:   "monitor.flux",
																	Source: "data",
																	Start: ast.Position{
																		Column: 32,
																		Line:   141,
																	},
																},
															},
															Name: "data",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 41,
																		Line:   141,
																	},
																	File:   "monitor.flux",
																	Source: "tags",
																	Start: ast.Position{
																		Column: 37,
																		Line:   141,
																	},
																},
															},
															Name: "tags",
														},
													},
												}},
												With: nil,
											}},
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   141,
													},
													File:   "monitor.flux",
													Source: "experimental.set(o: data.tags)",
													Start: ast.Position{
														Column: 12,
														Line:   141,
													},
												},
											},
											Callee: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   141,
														},
														File:   "monitor.flux",
														Source: "experimental.set",
														Start: ast.Position{
															Column: 12,
															Line:   141,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 24,
																Line:   141,
															},
															File:   "monitor.flux",
															Source: "experimental",
															Start: ast.Position{
																Column: 12,
																Line:   141,
															},
														},
													},
													Name: "experimental",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 28,
																Line:   141,
															},
															File:   "monitor.flux",
															Source: "set",
															Start: ast.Position{
																Column: 25,
																Line:   141,
															},
														},
													},
													Name: "set",
												},
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 94,
												Line:   142,
											},
											File:   "monitor.flux",
											Source: "tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))",
											Start: ast.Position{
												Column: 5,
												Line:   140,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 93,
														Line:   142,
													},
													File:   "monitor.flux",
													Source: "mode: \"extend\", columns: experimental.objectKeys(o: data.tags)",
													Start: ast.Position{
														Column: 31,
														Line:   142,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   142,
														},
														File:   "monitor.flux",
														Source: "mode: \"extend\"",
														Start: ast.Position{
															Column: 31,
															Line:   142,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 35,
																Line:   142,
															},
															File:   "monitor.flux",
															Source: "mode",
															Start: ast.Position{
																Column: 31,
																Line:   142,
															},
														},
													},
													Name: "mode",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   142,
															},
															File:   "monitor.flux",
															Source: "\"extend\"",
															Start: ast.Position{
																Column: 37,
																Line:   142,
															},
														},
													},
													Value: "extend",
												},
											}, &ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 93,
															Line:   142,
														},
														File:   "monitor.flux",
														Source: "columns: experimental.objectKeys(o: data.tags)",
														Start: ast.Position{
															Column: 47,
															Line:   142,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 54,
																Line:   142,
															},
															File:   "monitor.flux",
															Source: "columns",
															Start: ast.Position{
																Column: 47,
																Line:   142,
															},
														},
													},
													Name: "columns",
												},
												Value: &ast.CallExpression{
													Arguments: []ast.Expression{&ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 92,
																	Line:   142,
																},
																File:   "monitor.flux",
																Source: "o: data.tags",
																Start: ast.Position{
																	Column: 80,
																	Line:   142,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 92,
																		Line:   142,
																	},
																	File:   "monitor.flux",
																	Source: "o: data.tags",
																	Start: ast.Position{
																		Column: 80,
																		Line:   142,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 81,
																			Line:   142,
																		},
																		File:   "monitor.flux",
																		Source: "o",
																		Start: ast.Position{
																			Column: 80,
																			Line:   142,
																		},
																	},
																},
																Name: "o",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 92,
																			Line:   142,
																		},
																		File:   "monitor.flux",
																		Source: "data.tags",
																		Start: ast.Position{
																			Column: 83,
																			Line:   142,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 87,
																				Line:   142,
																			},
																			File:   "monitor.flux",
																			Source: "data",
																			Start: ast.Position{
																				Column: 83,
																				Line:   142,
																			},
																		},
																	},
																	Name: "data",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 92,
																				Line:   142,
																			},
																			File:   "monitor.flux",
																			Source: "tags",
																			Start: ast.Position{
																				Column: 88,
																				Line:   142,
																			},
																		},
																	},
																	Name: "tags",
																},
															},
														}},
														With: nil,
													}},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 93,
																Line:   142,
															},
															File:   "monitor.flux",
															Source: "experimental.objectKeys(o: data.tags)",
															Start: ast.Position{
																Column: 56,
																Line:   142,
															},
														},
													},
													Callee: &ast.MemberExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 79,
																	Line:   142,
																},
																File:   "monitor.flux",
																Source: "experimental.objectKeys",
																Start: ast.Position{
																	Column: 56,
																	Line:   142,
																},
															},
														},
														Object: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 68,
																		Line:   142,
																	},
																	File:   "monitor.flux",
																	Source: "experimental",
																	Start: ast.Position{
																		Column: 56,
																		Line:   142,
																	},
																},
															},
															Name: "experimental",
														},
														Property: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 79,
																		Line:   142,
																	},
																	File:   "monitor.flux",
																	Source: "objectKeys",
																	Start: ast.Position{
																		Column: 69,
																		Line:   142,
																	},
																},
															},
															Name: "objectKeys",
														},
													},
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 94,
													Line:   142,
												},
												File:   "monitor.flux",
												Source: "experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))",
												Start: ast.Position{
													Column: 12,
													Line:   142,
												},
											},
										},
										Callee: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   142,
													},
													File:   "monitor.flux",
													Source: "experimental.group",
													Start: ast.Position{
														Column: 12,
														Line:   142,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   142,
														},
														File:   "monitor.flux",
														Source: "experimental",
														Start: ast.Position{
															Column: 12,
															Line:   142,
														},
													},
												},
												Name: "experimental",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   142,
														},
														File:   "monitor.flux",
														Source: "group",
														Start: ast.Position{
															Column: 25,
															Line:   142,
														},
													},
												},
												Name: "group",
											},
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   157,
										},
										File:   "monitor.flux",
										Source: "tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n        |> map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))",
										Start: ast.Position{
											Column: 5,
											Line:   140,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   157,
												},
												File:   "monitor.flux",
												Source: "fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        })",
												Start: ast.Position{
													Column: 16,
													Line:   143,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   157,
													},
													File:   "monitor.flux",
													Source: "fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        })",
													Start: ast.Position{
														Column: 16,
														Line:   143,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   143,
														},
														File:   "monitor.flux",
														Source: "fn",
														Start: ast.Position{
															Column: 16,
															Line:   143,
														},
													},
												},
												Name: "fn",
											},
											Value: &ast.FunctionExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   157,
														},
														File:   "monitor.flux",
														Source: "(r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        })",
														Start: ast.Position{
															Column: 20,
															Line:   143,
														},
													},
												},
												Body: &ast.ParenExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 11,
																Line:   157,
															},
															File:   "monitor.flux",
															Source: "({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        })",
															Start: ast.Position{
																Column: 27,
																Line:   143,
															},
														},
													},
													Expression: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 10,
																	Line:   157,
																},
																File:   "monitor.flux",
																Source: "{r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }",
																Start: ast.Position{
																	Column: 28,
																	Line:   143,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 37,
																		Line:   144,
																	},
																	File:   "monitor.flux",
																	Source: "_measurement: \"statuses\"",
																	Start: ast.Position{
																		Column: 13,
																		Line:   144,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   144,
																		},
																		File:   "monitor.flux",
																		Source: "_measurement",
																		Start: ast.Position{
																			Column: 13,
																			Line:   144,
																		},
																	},
																},
																Name: "_measurement",
															},
															Value: &ast.StringLiteral{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 37,
																			Line:   144,
																		},
																		File:   "monitor.flux",
																		Source: "\"statuses\"",
																		Start: ast.Position{
																			Column: 27,
																			Line:   144,
																		},
																	},
																},
																Value: "statuses",
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 48,
																		Line:   145,
																	},
																	File:   "monitor.flux",
																	Source: "_source_measurement: r._measurement",
																	Start: ast.Position{
																		Column: 13,
																		Line:   145,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 32,
																			Line:   145,
																		},
																		File:   "monitor.flux",
																		Source: "_source_measurement",
																		Start: ast.Position{
																			Column: 13,
																			Line:   145,
																		},
																	},
																},
																Name: "_source_measurement",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 48,
																			Line:   145,
																		},
																		File:   "monitor.flux",
																		Source: "r._measurement",
																		Start: ast.Position{
																			Column: 34,
																			Line:   145,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 35,
																				Line:   145,
																			},
																			File:   "monitor.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 34,
																				Line:   145,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 48,
																				Line:   145,
																			},
																			File:   "monitor.flux",
																			Source: "_measurement",
																			Start: ast.Position{
																				Column: 36,
																				Line:   145,
																			},
																		},
																	},
																	Name: "_measurement",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 30,
																		Line:   146,
																	},
																	File:   "monitor.flux",
																	Source: "_type: data._type",
																	Start: ast.Position{
																		Column: 13,
																		Line:   146,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   146,
																		},
																		File:   "monitor.flux",
																		Source: "_type",
																		Start: ast.Position{
																			Column: 13,
																			Line:   146,
																		},
																	},
																},
																Name: "_type",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 30,
																			Line:   146,
																		},
																		File:   "monitor.flux",
																		Source: "data._type",
																		Start: ast.Position{
																			Column: 20,
																			Line:   146,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 24,
																				Line:   146,
																			},
																			File:   "monitor.flux",
																			Source: "data",
																			Start: ast.Position{
																				Column: 20,
																				Line:   146,
																			},
																		},
																	},
																	Name: "data",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   146,
																			},
																			File:   "monitor.flux",
																			Source: "_type",
																			Start: ast.Position{
																				Column: 25,
																				Line:   146,
																			},
																		},
																	},
																	Name: "_type",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 39,
																		Line:   147,
																	},
																	File:   "monitor.flux",
																	Source: "_check_id:  data._check_id",
																	Start: ast.Position{
																		Column: 13,
																		Line:   147,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 22,
																			Line:   147,
																		},
																		File:   "monitor.flux",
																		Source: "_check_id",
																		Start: ast.Position{
																			Column: 13,
																			Line:   147,
																		},
																	},
																},
																Name: "_check_id",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 39,
																			Line:   147,
																		},
																		File:   "monitor.flux",
																		Source: "data._check_id",
																		Start: ast.Position{
																			Column: 25,
																			Line:   147,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 29,
																				Line:   147,
																			},
																			File:   "monitor.flux",
																			Source: "data",
																			Start: ast.Position{
																				Column: 25,
																				Line:   147,
																			},
																		},
																	},
																	Name: "data",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 39,
																				Line:   147,
																			},
																			File:   "monitor.flux",
																			Source: "_check_id",
																			Start: ast.Position{
																				Column: 30,
																				Line:   147,
																			},
																		},
																	},
																	Name: "_check_id",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   148,
																	},
																	File:   "monitor.flux",
																	Source: "_check_name: data._check_name",
																	Start: ast.Position{
																		Column: 13,
																		Line:   148,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 24,
																			Line:   148,
																		},
																		File:   "monitor.flux",
																		Source: "_check_name",
																		Start: ast.Position{
																			Column: 13,
																			Line:   148,
																		},
																	},
																},
																Name: "_check_name",
															},
															Value: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 42,
																			Line:   148,
																		},
																		File:   "monitor.flux",
																		Source: "data._check_name",
																		Start: ast.Position{
																			Column: 26,
																			Line:   148,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   148,
																			},
																			File:   "monitor.flux",
																			Source: "data",
																			Start: ast.Position{
																				Column: 26,
																				Line:   148,
																			},
																		},
																	},
																	Name: "data",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 42,
																				Line:   148,
																			},
																			File:   "monitor.flux",
																			Source: "_check_name",
																			Start: ast.Position{
																				Column: 31,
																				Line:   148,
																			},
																		},
																	},
																	Name: "_check_name",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 34,
																		Line:   154,
																	},
																	File:   "monitor.flux",
																	Source: "_level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown",
																	Start: ast.Position{
																		Column: 13,
																		Line:   149,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 19,
																			Line:   149,
																		},
																		File:   "monitor.flux",
																		Source: "_level",
																		Start: ast.Position{
																			Column: 13,
																			Line:   149,
																		},
																	},
																},
																Name: "_level",
															},
															Value: &ast.ConditionalExpression{
																Alternate: &ast.ConditionalExpression{
																	Alternate: &ast.ConditionalExpression{
																		Alternate: &ast.ConditionalExpression{
																			Alternate: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 34,
																							Line:   154,
																						},
																						File:   "monitor.flux",
																						Source: "levelUnknown",
																						Start: ast.Position{
																							Column: 22,
																							Line:   154,
																						},
																					},
																				},
																				Name: "levelUnknown",
																			},
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 34,
																						Line:   154,
																					},
																					File:   "monitor.flux",
																					Source: "if ok(r: r) then levelOK\n                else levelUnknown",
																					Start: ast.Position{
																						Column: 22,
																						Line:   153,
																					},
																				},
																			},
																			Consequent: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 46,
																							Line:   153,
																						},
																						File:   "monitor.flux",
																						Source: "levelOK",
																						Start: ast.Position{
																							Column: 39,
																							Line:   153,
																						},
																					},
																				},
																				Name: "levelOK",
																			},
																			Test: &ast.CallExpression{
																				Arguments: []ast.Expression{&ast.ObjectExpression{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 32,
																								Line:   153,
																							},
																							File:   "monitor.flux",
																							Source: "r: r",
																							Start: ast.Position{
																								Column: 28,
																								Line:   153,
																							},
																						},
																					},
																					Properties: []*ast.Property{&ast.Property{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 32,
																									Line:   153,
																								},
																								File:   "monitor.flux",
																								Source: "r: r",
																								Start: ast.Position{
																									Column: 28,
																									Line:   153,
																								},
																							},
																						},
																						Key: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 29,
																										Line:   153,
																									},
																									File:   "monitor.flux",
																									Source: "r",
																									Start: ast.Position{
																										Column: 28,
																										Line:   153,
																									},
																								},
																							},
																							Name: "r",
																						},
																						Value: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 32,
																										Line:   153,
																									},
																									File:   "monitor.flux",
																									Source: "r",
																									Start: ast.Position{
																										Column: 31,
																										Line:   153,
																									},
																								},
																							},
																							Name: "r",
																						},
																					}},
																					With: nil,
																				}},
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 33,
																							Line:   153,
																						},
																						File:   "monitor.flux",
																						Source: "ok(r: r)",
																						Start: ast.Position{
																							Column: 25,
																							Line:   153,
																						},
																					},
																				},
																				Callee: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 27,
																								Line:   153,
																							},
																							File:   "monitor.flux",
																							Source: "ok",
																							Start: ast.Position{
																								Column: 25,
																								Line:   153,
																							},
																						},
																					},
																					Name: "ok",
																				},
																			},
																		},
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 34,
																					Line:   154,
																				},
																				File:   "monitor.flux",
																				Source: "if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown",
																				Start: ast.Position{
																					Column: 22,
																					Line:   152,
																				},
																			},
																		},
																		Consequent: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 50,
																						Line:   152,
																					},
																					File:   "monitor.flux",
																					Source: "levelInfo",
																					Start: ast.Position{
																						Column: 41,
																						Line:   152,
																					},
																				},
																			},
																			Name: "levelInfo",
																		},
																		Test: &ast.CallExpression{
																			Arguments: []ast.Expression{&ast.ObjectExpression{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 34,
																							Line:   152,
																						},
																						File:   "monitor.flux",
																						Source: "r: r",
																						Start: ast.Position{
																							Column: 30,
																							Line:   152,
																						},
																					},
																				},
																				Properties: []*ast.Property{&ast.Property{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 34,
																								Line:   152,
																							},
																							File:   "monitor.flux",
																							Source: "r: r",
																							Start: ast.Position{
																								Column: 30,
																								Line:   152,
																							},
																						},
																					},
																					Key: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 31,
																									Line:   152,
																								},
																								File:   "monitor.flux",
																								Source: "r",
																								Start: ast.Position{
																									Column: 30,
																									Line:   152,
																								},
																							},
																						},
																						Name: "r",
																					},
																					Value: &ast.Identifier{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 34,
																									Line:   152,
																								},
																								File:   "monitor.flux",
																								Source: "r",
																								Start: ast.Position{
																									Column: 33,
																									Line:   152,
																								},
																							},
																						},
																						Name: "r",
																					},
																				}},
																				With: nil,
																			}},
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 35,
																						Line:   152,
																					},
																					File:   "monitor.flux",
																					Source: "info(r: r)",
																					Start: ast.Position{
																						Column: 25,
																						Line:   152,
																					},
																				},
																			},
																			Callee: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 29,
																							Line:   152,
																						},
																						File:   "monitor.flux",
																						Source: "info",
																						Start: ast.Position{
																							Column: 25,
																							Line:   152,
																						},
																					},
																				},
																				Name: "info",
																			},
																		},
																	},
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 34,
																				Line:   154,
																			},
																			File:   "monitor.flux",
																			Source: "if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown",
																			Start: ast.Position{
																				Column: 22,
																				Line:   151,
																			},
																		},
																	},
																	Consequent: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 50,
																					Line:   151,
																				},
																				File:   "monitor.flux",
																				Source: "levelWarn",
																				Start: ast.Position{
																					Column: 41,
																					Line:   151,
																				},
																			},
																		},
																		Name: "levelWarn",
																	},
																	Test: &ast.CallExpression{
																		Arguments: []ast.Expression{&ast.ObjectExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 34,
																						Line:   151,
																					},
																					File:   "monitor.flux",
																					Source: "r: r",
																					Start: ast.Position{
																						Column: 30,
																						Line:   151,
																					},
																				},
																			},
																			Properties: []*ast.Property{&ast.Property{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 34,
																							Line:   151,
																						},
																						File:   "monitor.flux",
																						Source: "r: r",
																						Start: ast.Position{
																							Column: 30,
																							Line:   151,
																						},
																					},
																				},
																				Key: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 31,
																								Line:   151,
																							},
																							File:   "monitor.flux",
																							Source: "r",
																							Start: ast.Position{
																								Column: 30,
																								Line:   151,
																							},
																						},
																					},
																					Name: "r",
																				},
																				Value: &ast.Identifier{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 34,
																								Line:   151,
																							},
																							File:   "monitor.flux",
																							Source: "r",
																							Start: ast.Position{
																								Column: 33,
																								Line:   151,
																							},
																						},
																					},
																					Name: "r",
																				},
																			}},
																			With: nil,
																		}},
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 35,
																					Line:   151,
																				},
																				File:   "monitor.flux",
																				Source: "warn(r: r)",
																				Start: ast.Position{
																					Column: 25,
																					Line:   151,
																				},
																			},
																		},
																		Callee: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 29,
																						Line:   151,
																					},
																					File:   "monitor.flux",
																					Source: "warn",
																					Start: ast.Position{
																						Column: 25,
																						Line:   151,
																					},
																				},
																			},
																			Name: "warn",
																		},
																	},
																},
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 34,
																			Line:   154,
																		},
																		File:   "monitor.flux",
																		Source: "if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown",
																		Start: ast.Position{
																			Column: 17,
																			Line:   150,
																		},
																	},
																},
																Consequent: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 45,
																				Line:   150,
																			},
																			File:   "monitor.flux",
																			Source: "levelCrit",
																			Start: ast.Position{
																				Column: 36,
																				Line:   150,
																			},
																		},
																	},
																	Name: "levelCrit",
																},
																Test: &ast.CallExpression{
																	Arguments: []ast.Expression{&ast.ObjectExpression{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 29,
																					Line:   150,
																				},
																				File:   "monitor.flux",
																				Source: "r: r",
																				Start: ast.Position{
																					Column: 25,
																					Line:   150,
																				},
																			},
																		},
																		Properties: []*ast.Property{&ast.Property{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 29,
																						Line:   150,
																					},
																					File:   "monitor.flux",
																					Source: "r: r",
																					Start: ast.Position{
																						Column: 25,
																						Line:   150,
																					},
																				},
																			},
																			Key: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 26,
																							Line:   150,
																						},
																						File:   "monitor.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 25,
																							Line:   150,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Value: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 29,
																							Line:   150,
																						},
																						File:   "monitor.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 28,
																							Line:   150,
																						},
																					},
																				},
																				Name: "r",
																			},
																		}},
																		With: nil,
																	}},
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   150,
																			},
																			File:   "monitor.flux",
																			Source: "crit(r: r)",
																			Start: ast.Position{
																				Column: 20,
																				Line:   150,
																			},
																		},
																	},
																	Callee: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 24,
																					Line:   150,
																				},
																				File:   "monitor.flux",
																				Source: "crit",
																				Start: ast.Position{
																					Column: 20,
																					Line:   150,
																				},
																			},
																		},
																		Name: "crit",
																	},
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 46,
																		Line:   155,
																	},
																	File:   "monitor.flux",
																	Source: "_source_timestamp: int(v:r._time)",
																	Start: ast.Position{
																		Column: 13,
																		Line:   155,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 30,
																			Line:   155,
																		},
																		File:   "monitor.flux",
																		Source: "_source_timestamp",
																		Start: ast.Position{
																			Column: 13,
																			Line:   155,
																		},
																	},
																},
																Name: "_source_timestamp",
															},
															Value: &ast.CallExpression{
																Arguments: []ast.Expression{&ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 45,
																				Line:   155,
																			},
																			File:   "monitor.flux",
																			Source: "v:r._time",
																			Start: ast.Position{
																				Column: 36,
																				Line:   155,
																			},
																		},
																	},
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 45,
																					Line:   155,
																				},
																				File:   "monitor.flux",
																				Source: "v:r._time",
																				Start: ast.Position{
																					Column: 36,
																					Line:   155,
																				},
																			},
																		},
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 37,
																						Line:   155,
																					},
																					File:   "monitor.flux",
																					Source: "v",
																					Start: ast.Position{
																						Column: 36,
																						Line:   155,
																					},
																				},
																			},
																			Name: "v",
																		},
																		Value: &ast.MemberExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 45,
																						Line:   155,
																					},
																					File:   "monitor.flux",
																					Source: "r._time",
																					Start: ast.Position{
																						Column: 38,
																						Line:   155,
																					},
																				},
																			},
																			Object: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 39,
																							Line:   155,
																						},
																						File:   "monitor.flux",
																						Source: "r",
																						Start: ast.Position{
																							Column: 38,
																							Line:   155,
																						},
																					},
																				},
																				Name: "r",
																			},
																			Property: &ast.Identifier{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 45,
																							Line:   155,
																						},
																						File:   "monitor.flux",
																						Source: "_time",
																						Start: ast.Position{
																							Column: 40,
																							Line:   155,
																						},
																					},
																				},
																				Name: "_time",
																			},
																		},
																	}},
																	With: nil,
																}},
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 46,
																			Line:   155,
																		},
																		File:   "monitor.flux",
																		Source: "int(v:r._time)",
																		Start: ast.Position{
																			Column: 32,
																			Line:   155,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 35,
																				Line:   155,
																			},
																			File:   "monitor.flux",
																			Source: "int",
																			Start: ast.Position{
																				Column: 32,
																				Line:   155,
																			},
																		},
																	},
																	Name: "int",
																},
															},
														}, &ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 25,
																		Line:   156,
																	},
																	File:   "monitor.flux",
																	Source: "_time: now()",
																	Start: ast.Position{
																		Column: 13,
																		Line:   156,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 18,
																			Line:   156,
																		},
																		File:   "monitor.flux",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 13,
																			Line:   156,
																		},
																	},
																},
																Name: "_time",
															},
															Value: &ast.CallExpression{
																Arguments: nil,
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 25,
																			Line:   156,
																		},
																		File:   "monitor.flux",
																		Source: "now()",
																		Start: ast.Position{
																			Column: 20,
																			Line:   156,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 23,
																				Line:   156,
																			},
																			File:   "monitor.flux",
																			Source: "now",
																			Start: ast.Position{
																				Column: 20,
																				Line:   156,
																			},
																		},
																	},
																	Name: "now",
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 30,
																		Line:   143,
																	},
																	File:   "monitor.flux",
																	Source: "r",
																	Start: ast.Position{
																		Column: 29,
																		Line:   143,
																	},
																},
															},
															Name: "r",
														},
													},
												},
												Params: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 22,
																Line:   143,
															},
															File:   "monitor.flux",
															Source: "r",
															Start: ast.Position{
																Column: 21,
																Line:   143,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 22,
																	Line:   143,
																},
																File:   "monitor.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 21,
																	Line:   143,
																},
															},
														},
														Name: "r",
													},
													Value: nil,
												}},
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   157,
											},
											File:   "monitor.flux",
											Source: "map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))",
											Start: ast.Position{
												Column: 12,
												Line:   143,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   143,
												},
												File:   "monitor.flux",
												Source: "map",
												Start: ast.Position{
													Column: 12,
													Line:   143,
												},
											},
										},
										Name: "map",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   160,
									},
									File:   "monitor.flux",
									Source: "tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n        |> map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))\n        |> map(fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }))",
									Start: ast.Position{
										Column: 5,
										Line:   140,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   160,
											},
											File:   "monitor.flux",
											Source: "fn: (r) => ({r with\n            _message: messageFn(r: r),\n        })",
											Start: ast.Position{
												Column: 16,
												Line:   158,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 11,
													Line:   160,
												},
												File:   "monitor.flux",
												Source: "fn: (r) => ({r with\n            _message: messageFn(r: r),\n        })",
												Start: ast.Position{
													Column: 16,
													Line:   158,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   158,
													},
													File:   "monitor.flux",
													Source: "fn",
													Start: ast.Position{
														Column: 16,
														Line:   158,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 11,
														Line:   160,
													},
													File:   "monitor.flux",
													Source: "(r) => ({r with\n            _message: messageFn(r: r),\n        })",
													Start: ast.Position{
														Column: 20,
														Line:   158,
													},
												},
											},
											Body: &ast.ParenExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 11,
															Line:   160,
														},
														File:   "monitor.flux",
														Source: "({r with\n            _message: messageFn(r: r),\n        })",
														Start: ast.Position{
															Column: 27,
															Line:   158,
														},
													},
												},
												Expression: &ast.ObjectExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 10,
																Line:   160,
															},
															File:   "monitor.flux",
															Source: "{r with\n            _message: messageFn(r: r),\n        }",
															Start: ast.Position{
																Column: 28,
																Line:   158,
															},
														},
													},
													Properties: []*ast.Property{&ast.Property{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 38,
																	Line:   159,
																},
																File:   "monitor.flux",
																Source: "_message: messageFn(r: r)",
																Start: ast.Position{
																	Column: 13,
																	Line:   159,
																},
															},
														},
														Key: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 21,
																		Line:   159,
																	},
																	File:   "monitor.flux",
																	Source: "_message",
																	Start: ast.Position{
																		Column: 13,
																		Line:   159,
																	},
																},
															},
															Name: "_message",
														},
														Value: &ast.CallExpression{
															Arguments: []ast.Expression{&ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 37,
																			Line:   159,
																		},
																		File:   "monitor.flux",
																		Source: "r: r",
																		Start: ast.Position{
																			Column: 33,
																			Line:   159,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 37,
																				Line:   159,
																			},
																			File:   "monitor.flux",
																			Source: "r: r",
																			Start: ast.Position{
																				Column: 33,
																				Line:   159,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 34,
																					Line:   159,
																				},
																				File:   "monitor.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 33,
																					Line:   159,
																				},
																			},
																		},
																		Name: "r",
																	},
																	Value: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 37,
																					Line:   159,
																				},
																				File:   "monitor.flux",
																				Source: "r",
																				Start: ast.Position{
																					Column: 36,
																					Line:   159,
																				},
																			},
																		},
																		Name: "r",
																	},
																}},
																With: nil,
															}},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 38,
																		Line:   159,
																	},
																	File:   "monitor.flux",
																	Source: "messageFn(r: r)",
																	Start: ast.Position{
																		Column: 23,
																		Line:   159,
																	},
																},
															},
															Callee: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 32,
																			Line:   159,
																		},
																		File:   "monitor.flux",
																		Source: "messageFn",
																		Start: ast.Position{
																			Column: 23,
																			Line:   159,
																		},
																	},
																},
																Name: "messageFn",
															},
														},
													}},
													With: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   158,
																},
																File:   "monitor.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 29,
																	Line:   158,
																},
															},
														},
														Name: "r",
													},
												},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   158,
														},
														File:   "monitor.flux",
														Source: "r",
														Start: ast.Position{
															Column: 21,
															Line:   158,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 22,
																Line:   158,
															},
															File:   "monitor.flux",
															Source: "r",
															Start: ast.Position{
																Column: 21,
																Line:   158,
															},
														},
													},
													Name: "r",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   160,
										},
										File:   "monitor.flux",
										Source: "map(fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }))",
										Start: ast.Position{
											Column: 12,
											Line:   158,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   158,
											},
											File:   "monitor.flux",
											Source: "map",
											Start: ast.Position{
												Column: 12,
												Line:   158,
											},
										},
									},
									Name: "map",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 127,
									Line:   161,
								},
								File:   "monitor.flux",
								Source: "tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n        |> map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))\n        |> map(fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }))\n        |> experimental.group(mode: \"extend\", columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"])",
								Start: ast.Position{
									Column: 5,
									Line:   140,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 126,
											Line:   161,
										},
										File:   "monitor.flux",
										Source: "mode: \"extend\", columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"]",
										Start: ast.Position{
											Column: 31,
											Line:   161,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   161,
											},
											File:   "monitor.flux",
											Source: "mode: \"extend\"",
											Start: ast.Position{
												Column: 31,
												Line:   161,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 35,
													Line:   161,
												},
												File:   "monitor.flux",
												Source: "mode",
												Start: ast.Position{
													Column: 31,
													Line:   161,
												},
											},
										},
										Name: "mode",
									},
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 45,
													Line:   161,
												},
												File:   "monitor.flux",
												Source: "\"extend\"",
												Start: ast.Position{
													Column: 37,
													Line:   161,
												},
											},
										},
										Value: "extend",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 126,
												Line:   161,
											},
											File:   "monitor.flux",
											Source: "columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"]",
											Start: ast.Position{
												Column: 47,
												Line:   161,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 54,
													Line:   161,
												},
												File:   "monitor.flux",
												Source: "columns",
												Start: ast.Position{
													Column: 47,
													Line:   161,
												},
											},
										},
										Name: "columns",
									},
									Value: &ast.ArrayExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 126,
													Line:   161,
												},
												File:   "monitor.flux",
												Source: "[\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"]",
												Start: ast.Position{
													Column: 56,
													Line:   161,
												},
											},
										},
										Elements: []ast.Expression{&ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 78,
														Line:   161,
													},
													File:   "monitor.flux",
													Source: "\"_source_measurement\"",
													Start: ast.Position{
														Column: 57,
														Line:   161,
													},
												},
											},
											Value: "_source_measurement",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 87,
														Line:   161,
													},
													File:   "monitor.flux",
													Source: "\"_type\"",
													Start: ast.Position{
														Column: 80,
														Line:   161,
													},
												},
											},
											Value: "_type",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 100,
														Line:   161,
													},
													File:   "monitor.flux",
													Source: "\"_check_id\"",
													Start: ast.Position{
														Column: 89,
														Line:   161,
													},
												},
											},
											Value: "_check_id",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 115,
														Line:   161,
													},
													File:   "monitor.flux",
													Source: "\"_check_name\"",
													Start: ast.Position{
														Column: 102,
														Line:   161,
													},
												},
											},
											Value: "_check_name",
										}, &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 125,
														Line:   161,
													},
													File:   "monitor.flux",
													Source: "\"_level\"",
													Start: ast.Position{
														Column: 117,
														Line:   161,
													},
												},
											},
											Value: "_level",
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 127,
										Line:   161,
									},
									File:   "monitor.flux",
									Source: "experimental.group(mode: \"extend\", columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"])",
									Start: ast.Position{
										Column: 12,
										Line:   161,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   161,
										},
										File:   "monitor.flux",
										Source: "experimental.group",
										Start: ast.Position{
											Column: 12,
											Line:   161,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   161,
											},
											File:   "monitor.flux",
											Source: "experimental",
											Start: ast.Position{
												Column: 12,
												Line:   161,
											},
										},
									},
									Name: "experimental",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   161,
											},
											File:   "monitor.flux",
											Source: "group",
											Start: ast.Position{
												Column: 25,
												Line:   161,
											},
										},
									},
									Name: "group",
								},
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   162,
							},
							File:   "monitor.flux",
							Source: "tables\n        |> experimental.set(o: data.tags)\n        |> experimental.group(mode: \"extend\", columns: experimental.objectKeys(o: data.tags))\n        |> map(fn: (r) => ({r with\n            _measurement: \"statuses\",\n            _source_measurement: r._measurement,\n            _type: data._type,\n            _check_id:  data._check_id,\n            _check_name: data._check_name,\n            _level:\n                if crit(r: r) then levelCrit\n                else if warn(r: r) then levelWarn\n                else if info(r: r) then levelInfo\n                else if ok(r: r) then levelOK\n                else levelUnknown,\n            _source_timestamp: int(v:r._time),\n            _time: now(),\n        }))\n        |> map(fn: (r) => ({r with\n            _message: messageFn(r: r),\n        }))\n        |> experimental.group(mode: \"extend\", columns: [\"_source_measurement\", \"_type\", \"_check_id\", \"_check_name\", \"_level\"])\n        |> write()",
							Start: ast.Position{
								Column: 5,
								Line:   140,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   162,
								},
								File:   "monitor.flux",
								Source: "write()",
								Start: ast.Position{
									Column: 12,
									Line:   162,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 17,
										Line:   162,
									},
									File:   "monitor.flux",
									Source: "write",
									Start: ast.Position{
										Column: 12,
										Line:   162,
									},
								},
							},
							Name: "write",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   132,
							},
							File:   "monitor.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 5,
								Line:   132,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   132,
								},
								File:   "monitor.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 5,
									Line:   132,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   132,
							},
							File:   "monitor.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 12,
								Line:   132,
							},
						},
					}},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 9,
								Line:   133,
							},
							File:   "monitor.flux",
							Source: "data",
							Start: ast.Position{
								Column: 5,
								Line:   133,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   133,
								},
								File:   "monitor.flux",
								Source: "data",
								Start: ast.Position{
									Column: 5,
									Line:   133,
								},
							},
						},
						Name: "data",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   134,
							},
							File:   "monitor.flux",
							Source: "messageFn",
							Start: ast.Position{
								Column: 5,
								Line:   134,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   134,
								},
								File:   "monitor.flux",
								Source: "messageFn",
								Start: ast.Position{
									Column: 5,
									Line:   134,
								},
							},
						},
						Name: "messageFn",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   135,
							},
							File:   "monitor.flux",
							Source: "crit=(r) => false",
							Start: ast.Position{
								Column: 5,
								Line:   135,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   135,
								},
								File:   "monitor.flux",
								Source: "crit",
								Start: ast.Position{
									Column: 5,
									Line:   135,
								},
							},
						},
						Name: "crit",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   135,
								},
								File:   "monitor.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 10,
									Line:   135,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   135,
									},
									File:   "monitor.flux",
									Source: "false",
									Start: ast.Position{
										Column: 17,
										Line:   135,
									},
								},
							},
							Name: "false",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   135,
									},
									File:   "monitor.flux",
									Source: "r",
									Start: ast.Position{
										Column: 11,
										Line:   135,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   135,
										},
										File:   "monitor.flux",
										Source: "r",
										Start: ast.Position{
											Column: 11,
											Line:   135,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   136,
							},
							File:   "monitor.flux",
							Source: "warn=(r) => false",
							Start: ast.Position{
								Column: 5,
								Line:   136,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   136,
								},
								File:   "monitor.flux",
								Source: "warn",
								Start: ast.Position{
									Column: 5,
									Line:   136,
								},
							},
						},
						Name: "warn",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   136,
								},
								File:   "monitor.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 10,
									Line:   136,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   136,
									},
									File:   "monitor.flux",
									Source: "false",
									Start: ast.Position{
										Column: 17,
										Line:   136,
									},
								},
							},
							Name: "false",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   136,
									},
									File:   "monitor.flux",
									Source: "r",
									Start: ast.Position{
										Column: 11,
										Line:   136,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   136,
										},
										File:   "monitor.flux",
										Source: "r",
										Start: ast.Position{
											Column: 11,
											Line:   136,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 22,
								Line:   137,
							},
							File:   "monitor.flux",
							Source: "info=(r) => false",
							Start: ast.Position{
								Column: 5,
								Line:   137,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   137,
								},
								File:   "monitor.flux",
								Source: "info",
								Start: ast.Position{
									Column: 5,
									Line:   137,
								},
							},
						},
						Name: "info",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   137,
								},
								File:   "monitor.flux",
								Source: "(r) => false",
								Start: ast.Position{
									Column: 10,
									Line:   137,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   137,
									},
									File:   "monitor.flux",
									Source: "false",
									Start: ast.Position{
										Column: 17,
										Line:   137,
									},
								},
							},
							Name: "false",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   137,
									},
									File:   "monitor.flux",
									Source: "r",
									Start: ast.Position{
										Column: 11,
										Line:   137,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   137,
										},
										File:   "monitor.flux",
										Source: "r",
										Start: ast.Position{
											Column: 11,
											Line:   137,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   138,
							},
							File:   "monitor.flux",
							Source: "ok=(r) => true",
							Start: ast.Position{
								Column: 5,
								Line:   138,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 7,
									Line:   138,
								},
								File:   "monitor.flux",
								Source: "ok",
								Start: ast.Position{
									Column: 5,
									Line:   138,
								},
							},
						},
						Name: "ok",
					},
					Value: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   138,
								},
								File:   "monitor.flux",
								Source: "(r) => true",
								Start: ast.Position{
									Column: 8,
									Line:   138,
								},
							},
						},
						Body: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   138,
									},
									File:   "monitor.flux",
									Source: "true",
									Start: ast.Position{
										Column: 15,
										Line:   138,
									},
								},
							},
							Name: "true",
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 10,
										Line:   138,
									},
									File:   "monitor.flux",
									Source: "r",
									Start: ast.Position{
										Column: 9,
										Line:   138,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 10,
											Line:   138,
										},
										File:   "monitor.flux",
										Source: "r",
										Start: ast.Position{
											Column: 9,
											Line:   138,
										},
									},
								},
								Name: "r",
							},
							Value: nil,
						}},
					},
				}},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 22,
						Line:   3,
					},
					File:   "monitor.flux",
					Source: "import \"experimental\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 22,
							Line:   3,
						},
						File:   "monitor.flux",
						Source: "\"experimental\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "experimental",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 32,
						Line:   4,
					},
					File:   "monitor.flux",
					Source: "import \"influxdata/influxdb/v1\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 32,
							Line:   4,
						},
						File:   "monitor.flux",
						Source: "\"influxdata/influxdb/v1\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "influxdata/influxdb/v1",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   5,
					},
					File:   "monitor.flux",
					Source: "import \"influxdata/influxdb\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   5,
						},
						File:   "monitor.flux",
						Source: "\"influxdata/influxdb\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "influxdata/influxdb",
			},
		}},
		Metadata: "parser-type=go",
		Name:     "monitor.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   1,
					},
					File:   "monitor.flux",
					Source: "package monitor",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   1,
						},
						File:   "monitor.flux",
						Source: "monitor",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "monitor",
			},
		},
	}},
	Package: "monitor",
	Path:    "influxdata/influxdb/monitor",
}
