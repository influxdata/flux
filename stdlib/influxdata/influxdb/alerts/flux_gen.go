// DO NOT EDIT: This file is autogenerated via the builtin command.

package alerts

import (
	flux "github.com/influxdata/flux"
	ast "github.com/influxdata/flux/ast"
)

func init() {
	flux.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 29,
					Line:   25,
				},
				File:   "alerts.flux",
				Source: "package alerts\n\nimport \"influxdata/influxdb/v1\"\n\nbucket = \"_monitoring\"\n\n// Write persists the check statuses\nwrite = (tables=<-) => tables |> to(bucket: bucket)\n\n// From retrieves the check statuses that have been stored.\nstatuses = (start, stop=now(), fn) =>\n    from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()\n\n// Log records notification events\nlog = (tables=<-) => tables |> to(bucket: bucket)\n\n// Logs retrieves notification events that have been logged.\nlogs = (start, stop=now(), fn) =>\n    from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 23,
						Line:   5,
					},
					File:   "alerts.flux",
					Source: "bucket = \"_monitoring\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   5,
						},
						File:   "alerts.flux",
						Source: "bucket",
						Start: ast.Position{
							Column: 1,
							Line:   5,
						},
					},
				},
				Name: "bucket",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 23,
							Line:   5,
						},
						File:   "alerts.flux",
						Source: "\"_monitoring\"",
						Start: ast.Position{
							Column: 10,
							Line:   5,
						},
					},
				},
				Value: "_monitoring",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 52,
						Line:   8,
					},
					File:   "alerts.flux",
					Source: "write = (tables=<-) => tables |> to(bucket: bucket)",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   8,
						},
						File:   "alerts.flux",
						Source: "write",
						Start: ast.Position{
							Column: 1,
							Line:   8,
						},
					},
				},
				Name: "write",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 52,
							Line:   8,
						},
						File:   "alerts.flux",
						Source: "(tables=<-) => tables |> to(bucket: bucket)",
						Start: ast.Position{
							Column: 9,
							Line:   8,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   8,
								},
								File:   "alerts.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 24,
									Line:   8,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 52,
								Line:   8,
							},
							File:   "alerts.flux",
							Source: "tables |> to(bucket: bucket)",
							Start: ast.Position{
								Column: 24,
								Line:   8,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 51,
										Line:   8,
									},
									File:   "alerts.flux",
									Source: "bucket: bucket",
									Start: ast.Position{
										Column: 37,
										Line:   8,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 51,
											Line:   8,
										},
										File:   "alerts.flux",
										Source: "bucket: bucket",
										Start: ast.Position{
											Column: 37,
											Line:   8,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   8,
											},
											File:   "alerts.flux",
											Source: "bucket",
											Start: ast.Position{
												Column: 37,
												Line:   8,
											},
										},
									},
									Name: "bucket",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   8,
											},
											File:   "alerts.flux",
											Source: "bucket",
											Start: ast.Position{
												Column: 45,
												Line:   8,
											},
										},
									},
									Name: "bucket",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 52,
									Line:   8,
								},
								File:   "alerts.flux",
								Source: "to(bucket: bucket)",
								Start: ast.Position{
									Column: 34,
									Line:   8,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   8,
									},
									File:   "alerts.flux",
									Source: "to",
									Start: ast.Position{
										Column: 34,
										Line:   8,
									},
								},
							},
							Name: "to",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   8,
							},
							File:   "alerts.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 10,
								Line:   8,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   8,
								},
								File:   "alerts.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 10,
									Line:   8,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   8,
							},
							File:   "alerts.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 17,
								Line:   8,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   15,
					},
					File:   "alerts.flux",
					Source: "statuses = (start, stop=now(), fn) =>\n    from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
					Start: ast.Position{
						Column: 1,
						Line:   11,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   11,
						},
						File:   "alerts.flux",
						Source: "statuses",
						Start: ast.Position{
							Column: 1,
							Line:   11,
						},
					},
				},
				Name: "statuses",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   15,
						},
						File:   "alerts.flux",
						Source: "(start, stop=now(), fn) =>\n    from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
						Start: ast.Position{
							Column: 12,
							Line:   11,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   12,
											},
											File:   "alerts.flux",
											Source: "bucket: bucket",
											Start: ast.Position{
												Column: 10,
												Line:   12,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   12,
												},
												File:   "alerts.flux",
												Source: "bucket: bucket",
												Start: ast.Position{
													Column: 10,
													Line:   12,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   12,
													},
													File:   "alerts.flux",
													Source: "bucket",
													Start: ast.Position{
														Column: 10,
														Line:   12,
													},
												},
											},
											Name: "bucket",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   12,
													},
													File:   "alerts.flux",
													Source: "bucket",
													Start: ast.Position{
														Column: 18,
														Line:   12,
													},
												},
											},
											Name: "bucket",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   12,
										},
										File:   "alerts.flux",
										Source: "from(bucket: bucket)",
										Start: ast.Position{
											Column: 5,
											Line:   12,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 9,
												Line:   12,
											},
											File:   "alerts.flux",
											Source: "from",
											Start: ast.Position{
												Column: 5,
												Line:   12,
											},
										},
									},
									Name: "from",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   13,
									},
									File:   "alerts.flux",
									Source: "from(bucket: bucket)\n        |> range(start: start, stop: stop)",
									Start: ast.Position{
										Column: 5,
										Line:   12,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   13,
											},
											File:   "alerts.flux",
											Source: "start: start, stop: stop",
											Start: ast.Position{
												Column: 18,
												Line:   13,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   13,
												},
												File:   "alerts.flux",
												Source: "start: start",
												Start: ast.Position{
													Column: 18,
													Line:   13,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   13,
													},
													File:   "alerts.flux",
													Source: "start",
													Start: ast.Position{
														Column: 18,
														Line:   13,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   13,
													},
													File:   "alerts.flux",
													Source: "start",
													Start: ast.Position{
														Column: 25,
														Line:   13,
													},
												},
											},
											Name: "start",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   13,
												},
												File:   "alerts.flux",
												Source: "stop: stop",
												Start: ast.Position{
													Column: 32,
													Line:   13,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   13,
													},
													File:   "alerts.flux",
													Source: "stop",
													Start: ast.Position{
														Column: 32,
														Line:   13,
													},
												},
											},
											Name: "stop",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   13,
													},
													File:   "alerts.flux",
													Source: "stop",
													Start: ast.Position{
														Column: 38,
														Line:   13,
													},
												},
											},
											Name: "stop",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   13,
										},
										File:   "alerts.flux",
										Source: "range(start: start, stop: stop)",
										Start: ast.Position{
											Column: 12,
											Line:   13,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   13,
											},
											File:   "alerts.flux",
											Source: "range",
											Start: ast.Position{
												Column: 12,
												Line:   13,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   14,
								},
								File:   "alerts.flux",
								Source: "from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: fn)",
								Start: ast.Position{
									Column: 5,
									Line:   12,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   14,
										},
										File:   "alerts.flux",
										Source: "fn: fn",
										Start: ast.Position{
											Column: 19,
											Line:   14,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   14,
											},
											File:   "alerts.flux",
											Source: "fn: fn",
											Start: ast.Position{
												Column: 19,
												Line:   14,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   14,
												},
												File:   "alerts.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 19,
													Line:   14,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   14,
												},
												File:   "alerts.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 23,
													Line:   14,
												},
											},
										},
										Name: "fn",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   14,
									},
									File:   "alerts.flux",
									Source: "filter(fn: fn)",
									Start: ast.Position{
										Column: 12,
										Line:   14,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   14,
										},
										File:   "alerts.flux",
										Source: "filter",
										Start: ast.Position{
											Column: 12,
											Line:   14,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   15,
							},
							File:   "alerts.flux",
							Source: "from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
							Start: ast.Position{
								Column: 5,
								Line:   12,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   15,
								},
								File:   "alerts.flux",
								Source: "v1.fieldsAsCols()",
								Start: ast.Position{
									Column: 12,
									Line:   15,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   15,
									},
									File:   "alerts.flux",
									Source: "v1.fieldsAsCols",
									Start: ast.Position{
										Column: 12,
										Line:   15,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   15,
										},
										File:   "alerts.flux",
										Source: "v1",
										Start: ast.Position{
											Column: 12,
											Line:   15,
										},
									},
								},
								Name: "v1",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   15,
										},
										File:   "alerts.flux",
										Source: "fieldsAsCols",
										Start: ast.Position{
											Column: 15,
											Line:   15,
										},
									},
								},
								Name: "fieldsAsCols",
							},
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   11,
							},
							File:   "alerts.flux",
							Source: "start",
							Start: ast.Position{
								Column: 13,
								Line:   11,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   11,
								},
								File:   "alerts.flux",
								Source: "start",
								Start: ast.Position{
									Column: 13,
									Line:   11,
								},
							},
						},
						Name: "start",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   11,
							},
							File:   "alerts.flux",
							Source: "stop=now()",
							Start: ast.Position{
								Column: 20,
								Line:   11,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   11,
								},
								File:   "alerts.flux",
								Source: "stop",
								Start: ast.Position{
									Column: 20,
									Line:   11,
								},
							},
						},
						Name: "stop",
					},
					Value: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   11,
								},
								File:   "alerts.flux",
								Source: "now()",
								Start: ast.Position{
									Column: 25,
									Line:   11,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   11,
									},
									File:   "alerts.flux",
									Source: "now",
									Start: ast.Position{
										Column: 25,
										Line:   11,
									},
								},
							},
							Name: "now",
						},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 34,
								Line:   11,
							},
							File:   "alerts.flux",
							Source: "fn",
							Start: ast.Position{
								Column: 32,
								Line:   11,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 34,
									Line:   11,
								},
								File:   "alerts.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 32,
									Line:   11,
								},
							},
						},
						Name: "fn",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 50,
						Line:   18,
					},
					File:   "alerts.flux",
					Source: "log = (tables=<-) => tables |> to(bucket: bucket)",
					Start: ast.Position{
						Column: 1,
						Line:   18,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   18,
						},
						File:   "alerts.flux",
						Source: "log",
						Start: ast.Position{
							Column: 1,
							Line:   18,
						},
					},
				},
				Name: "log",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 50,
							Line:   18,
						},
						File:   "alerts.flux",
						Source: "(tables=<-) => tables |> to(bucket: bucket)",
						Start: ast.Position{
							Column: 7,
							Line:   18,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   18,
								},
								File:   "alerts.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 22,
									Line:   18,
								},
							},
						},
						Name: "tables",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 50,
								Line:   18,
							},
							File:   "alerts.flux",
							Source: "tables |> to(bucket: bucket)",
							Start: ast.Position{
								Column: 22,
								Line:   18,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   18,
									},
									File:   "alerts.flux",
									Source: "bucket: bucket",
									Start: ast.Position{
										Column: 35,
										Line:   18,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   18,
										},
										File:   "alerts.flux",
										Source: "bucket: bucket",
										Start: ast.Position{
											Column: 35,
											Line:   18,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   18,
											},
											File:   "alerts.flux",
											Source: "bucket",
											Start: ast.Position{
												Column: 35,
												Line:   18,
											},
										},
									},
									Name: "bucket",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 49,
												Line:   18,
											},
											File:   "alerts.flux",
											Source: "bucket",
											Start: ast.Position{
												Column: 43,
												Line:   18,
											},
										},
									},
									Name: "bucket",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   18,
								},
								File:   "alerts.flux",
								Source: "to(bucket: bucket)",
								Start: ast.Position{
									Column: 32,
									Line:   18,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 34,
										Line:   18,
									},
									File:   "alerts.flux",
									Source: "to",
									Start: ast.Position{
										Column: 32,
										Line:   18,
									},
								},
							},
							Name: "to",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 17,
								Line:   18,
							},
							File:   "alerts.flux",
							Source: "tables=<-",
							Start: ast.Position{
								Column: 8,
								Line:   18,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   18,
								},
								File:   "alerts.flux",
								Source: "tables",
								Start: ast.Position{
									Column: 8,
									Line:   18,
								},
							},
						},
						Name: "tables",
					},
					Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 17,
								Line:   18,
							},
							File:   "alerts.flux",
							Source: "<-",
							Start: ast.Position{
								Column: 15,
								Line:   18,
							},
						},
					}},
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 29,
						Line:   25,
					},
					File:   "alerts.flux",
					Source: "logs = (start, stop=now(), fn) =>\n    from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
					Start: ast.Position{
						Column: 1,
						Line:   21,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   21,
						},
						File:   "alerts.flux",
						Source: "logs",
						Start: ast.Position{
							Column: 1,
							Line:   21,
						},
					},
				},
				Name: "logs",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 29,
							Line:   25,
						},
						File:   "alerts.flux",
						Source: "(start, stop=now(), fn) =>\n    from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
						Start: ast.Position{
							Column: 8,
							Line:   21,
						},
					},
				},
				Body: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.PipeExpression{
							Argument: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   22,
											},
											File:   "alerts.flux",
											Source: "bucket: bucket",
											Start: ast.Position{
												Column: 10,
												Line:   22,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   22,
												},
												File:   "alerts.flux",
												Source: "bucket: bucket",
												Start: ast.Position{
													Column: 10,
													Line:   22,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   22,
													},
													File:   "alerts.flux",
													Source: "bucket",
													Start: ast.Position{
														Column: 10,
														Line:   22,
													},
												},
											},
											Name: "bucket",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   22,
													},
													File:   "alerts.flux",
													Source: "bucket",
													Start: ast.Position{
														Column: 18,
														Line:   22,
													},
												},
											},
											Name: "bucket",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   22,
										},
										File:   "alerts.flux",
										Source: "from(bucket: bucket)",
										Start: ast.Position{
											Column: 5,
											Line:   22,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 9,
												Line:   22,
											},
											File:   "alerts.flux",
											Source: "from",
											Start: ast.Position{
												Column: 5,
												Line:   22,
											},
										},
									},
									Name: "from",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 43,
										Line:   23,
									},
									File:   "alerts.flux",
									Source: "from(bucket: bucket)\n        |> range(start: start, stop: stop)",
									Start: ast.Position{
										Column: 5,
										Line:   22,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   23,
											},
											File:   "alerts.flux",
											Source: "start: start, stop: stop",
											Start: ast.Position{
												Column: 18,
												Line:   23,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   23,
												},
												File:   "alerts.flux",
												Source: "start: start",
												Start: ast.Position{
													Column: 18,
													Line:   23,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   23,
													},
													File:   "alerts.flux",
													Source: "start",
													Start: ast.Position{
														Column: 18,
														Line:   23,
													},
												},
											},
											Name: "start",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   23,
													},
													File:   "alerts.flux",
													Source: "start",
													Start: ast.Position{
														Column: 25,
														Line:   23,
													},
												},
											},
											Name: "start",
										},
									}, &ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   23,
												},
												File:   "alerts.flux",
												Source: "stop: stop",
												Start: ast.Position{
													Column: 32,
													Line:   23,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   23,
													},
													File:   "alerts.flux",
													Source: "stop",
													Start: ast.Position{
														Column: 32,
														Line:   23,
													},
												},
											},
											Name: "stop",
										},
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 42,
														Line:   23,
													},
													File:   "alerts.flux",
													Source: "stop",
													Start: ast.Position{
														Column: 38,
														Line:   23,
													},
												},
											},
											Name: "stop",
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   23,
										},
										File:   "alerts.flux",
										Source: "range(start: start, stop: stop)",
										Start: ast.Position{
											Column: 12,
											Line:   23,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   23,
											},
											File:   "alerts.flux",
											Source: "range",
											Start: ast.Position{
												Column: 12,
												Line:   23,
											},
										},
									},
									Name: "range",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   24,
								},
								File:   "alerts.flux",
								Source: "from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: fn)",
								Start: ast.Position{
									Column: 5,
									Line:   22,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   24,
										},
										File:   "alerts.flux",
										Source: "fn: fn",
										Start: ast.Position{
											Column: 19,
											Line:   24,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   24,
											},
											File:   "alerts.flux",
											Source: "fn: fn",
											Start: ast.Position{
												Column: 19,
												Line:   24,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   24,
												},
												File:   "alerts.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 19,
													Line:   24,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   24,
												},
												File:   "alerts.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 23,
													Line:   24,
												},
											},
										},
										Name: "fn",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   24,
									},
									File:   "alerts.flux",
									Source: "filter(fn: fn)",
									Start: ast.Position{
										Column: 12,
										Line:   24,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   24,
										},
										File:   "alerts.flux",
										Source: "filter",
										Start: ast.Position{
											Column: 12,
											Line:   24,
										},
									},
								},
								Name: "filter",
							},
						},
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   25,
							},
							File:   "alerts.flux",
							Source: "from(bucket: bucket)\n        |> range(start: start, stop: stop)\n        |> filter(fn: fn)\n        |> v1.fieldsAsCols()",
							Start: ast.Position{
								Column: 5,
								Line:   22,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   25,
								},
								File:   "alerts.flux",
								Source: "v1.fieldsAsCols()",
								Start: ast.Position{
									Column: 12,
									Line:   25,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   25,
									},
									File:   "alerts.flux",
									Source: "v1.fieldsAsCols",
									Start: ast.Position{
										Column: 12,
										Line:   25,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   25,
										},
										File:   "alerts.flux",
										Source: "v1",
										Start: ast.Position{
											Column: 12,
											Line:   25,
										},
									},
								},
								Name: "v1",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   25,
										},
										File:   "alerts.flux",
										Source: "fieldsAsCols",
										Start: ast.Position{
											Column: 15,
											Line:   25,
										},
									},
								},
								Name: "fieldsAsCols",
							},
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   21,
							},
							File:   "alerts.flux",
							Source: "start",
							Start: ast.Position{
								Column: 9,
								Line:   21,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   21,
								},
								File:   "alerts.flux",
								Source: "start",
								Start: ast.Position{
									Column: 9,
									Line:   21,
								},
							},
						},
						Name: "start",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   21,
							},
							File:   "alerts.flux",
							Source: "stop=now()",
							Start: ast.Position{
								Column: 16,
								Line:   21,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   21,
								},
								File:   "alerts.flux",
								Source: "stop",
								Start: ast.Position{
									Column: 16,
									Line:   21,
								},
							},
						},
						Name: "stop",
					},
					Value: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   21,
								},
								File:   "alerts.flux",
								Source: "now()",
								Start: ast.Position{
									Column: 21,
									Line:   21,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   21,
									},
									File:   "alerts.flux",
									Source: "now",
									Start: ast.Position{
										Column: 21,
										Line:   21,
									},
								},
							},
							Name: "now",
						},
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   21,
							},
							File:   "alerts.flux",
							Source: "fn",
							Start: ast.Position{
								Column: 28,
								Line:   21,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   21,
								},
								File:   "alerts.flux",
								Source: "fn",
								Start: ast.Position{
									Column: 28,
									Line:   21,
								},
							},
						},
						Name: "fn",
					},
					Value: nil,
				}},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 32,
						Line:   3,
					},
					File:   "alerts.flux",
					Source: "import \"influxdata/influxdb/v1\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 32,
							Line:   3,
						},
						File:   "alerts.flux",
						Source: "\"influxdata/influxdb/v1\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "influxdata/influxdb/v1",
			},
		}},
		Name: "alerts.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   1,
					},
					File:   "alerts.flux",
					Source: "package alerts",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   1,
						},
						File:   "alerts.flux",
						Source: "alerts",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "alerts",
			},
		},
	}},
	Package: "alerts",
	Path:    "influxdata/influxdb/alerts",
}
