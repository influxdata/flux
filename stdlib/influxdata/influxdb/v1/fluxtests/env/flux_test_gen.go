// DO NOT EDIT: This file is autogenerated via the builtin command.

package v1_env_test

import ast "github.com/influxdata/flux/ast"

var FluxTestPackages = []*ast.Package{&ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   13,
				},
				File:   "getString_test.flux",
				Source: "package v1_env_test\n\nimport \"testing\"\nimport \"env\"\n\ngetStringWithNoOsValueGot = env.getString(name: \"ThisEnvironmentVariableWillNeverExist\")\ngetStringWithNoOsValueWant = \"\"\n\ntesting.assertEquals(\n  name: \"getStringWithNoOsValue\",\n  got: getStringWithNoOsValueGot,\n  want: getStringWithNoOsValueWant\n)",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 89,
						Line:   6,
					},
					File:   "getString_test.flux",
					Source: "getStringWithNoOsValueGot = env.getString(name: \"ThisEnvironmentVariableWillNeverExist\")",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 26,
							Line:   6,
						},
						File:   "getString_test.flux",
						Source: "getStringWithNoOsValueGot",
						Start: ast.Position{
							Column: 1,
							Line:   6,
						},
					},
				},
				Name: "getStringWithNoOsValueGot",
			},
			Init: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 88,
								Line:   6,
							},
							File:   "getString_test.flux",
							Source: "name: \"ThisEnvironmentVariableWillNeverExist\"",
							Start: ast.Position{
								Column: 43,
								Line:   6,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 88,
									Line:   6,
								},
								File:   "getString_test.flux",
								Source: "name: \"ThisEnvironmentVariableWillNeverExist\"",
								Start: ast.Position{
									Column: 43,
									Line:   6,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   6,
									},
									File:   "getString_test.flux",
									Source: "name",
									Start: ast.Position{
										Column: 43,
										Line:   6,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 88,
										Line:   6,
									},
									File:   "getString_test.flux",
									Source: "\"ThisEnvironmentVariableWillNeverExist\"",
									Start: ast.Position{
										Column: 49,
										Line:   6,
									},
								},
							},
							Value: "ThisEnvironmentVariableWillNeverExist",
						},
					}},
					With: nil,
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 89,
							Line:   6,
						},
						File:   "getString_test.flux",
						Source: "env.getString(name: \"ThisEnvironmentVariableWillNeverExist\")",
						Start: ast.Position{
							Column: 29,
							Line:   6,
						},
					},
				},
				Callee: &ast.MemberExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 42,
								Line:   6,
							},
							File:   "getString_test.flux",
							Source: "env.getString",
							Start: ast.Position{
								Column: 29,
								Line:   6,
							},
						},
					},
					Object: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   6,
								},
								File:   "getString_test.flux",
								Source: "env",
								Start: ast.Position{
									Column: 29,
									Line:   6,
								},
							},
						},
						Name: "env",
					},
					Property: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 42,
									Line:   6,
								},
								File:   "getString_test.flux",
								Source: "getString",
								Start: ast.Position{
									Column: 33,
									Line:   6,
								},
							},
						},
						Name: "getString",
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 32,
						Line:   7,
					},
					File:   "getString_test.flux",
					Source: "getStringWithNoOsValueWant = \"\"",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 27,
							Line:   7,
						},
						File:   "getString_test.flux",
						Source: "getStringWithNoOsValueWant",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "getStringWithNoOsValueWant",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 32,
							Line:   7,
						},
						File:   "getString_test.flux",
						Source: "\"\"",
						Start: ast.Position{
							Column: 30,
							Line:   7,
						},
					},
				},
				Value: "",
			},
		}, &ast.ExpressionStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   13,
					},
					File:   "getString_test.flux",
					Source: "testing.assertEquals(\n  name: \"getStringWithNoOsValue\",\n  got: getStringWithNoOsValueGot,\n  want: getStringWithNoOsValueWant\n)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			Expression: &ast.CallExpression{
				Arguments: []ast.Expression{&ast.ObjectExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   12,
							},
							File:   "getString_test.flux",
							Source: "name: \"getStringWithNoOsValue\",\n  got: getStringWithNoOsValueGot,\n  want: getStringWithNoOsValueWant",
							Start: ast.Position{
								Column: 3,
								Line:   10,
							},
						},
					},
					Properties: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   10,
								},
								File:   "getString_test.flux",
								Source: "name: \"getStringWithNoOsValue\"",
								Start: ast.Position{
									Column: 3,
									Line:   10,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 7,
										Line:   10,
									},
									File:   "getString_test.flux",
									Source: "name",
									Start: ast.Position{
										Column: 3,
										Line:   10,
									},
								},
							},
							Name: "name",
						},
						Value: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   10,
									},
									File:   "getString_test.flux",
									Source: "\"getStringWithNoOsValue\"",
									Start: ast.Position{
										Column: 9,
										Line:   10,
									},
								},
							},
							Value: "getStringWithNoOsValue",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   11,
								},
								File:   "getString_test.flux",
								Source: "got: getStringWithNoOsValueGot",
								Start: ast.Position{
									Column: 3,
									Line:   11,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   11,
									},
									File:   "getString_test.flux",
									Source: "got",
									Start: ast.Position{
										Column: 3,
										Line:   11,
									},
								},
							},
							Name: "got",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   11,
									},
									File:   "getString_test.flux",
									Source: "getStringWithNoOsValueGot",
									Start: ast.Position{
										Column: 8,
										Line:   11,
									},
								},
							},
							Name: "getStringWithNoOsValueGot",
						},
					}, &ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   12,
								},
								File:   "getString_test.flux",
								Source: "want: getStringWithNoOsValueWant",
								Start: ast.Position{
									Column: 3,
									Line:   12,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 7,
										Line:   12,
									},
									File:   "getString_test.flux",
									Source: "want",
									Start: ast.Position{
										Column: 3,
										Line:   12,
									},
								},
							},
							Name: "want",
						},
						Value: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   12,
									},
									File:   "getString_test.flux",
									Source: "getStringWithNoOsValueWant",
									Start: ast.Position{
										Column: 9,
										Line:   12,
									},
								},
							},
							Name: "getStringWithNoOsValueWant",
						},
					}},
					With: nil,
				}},
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   13,
						},
						File:   "getString_test.flux",
						Source: "testing.assertEquals(\n  name: \"getStringWithNoOsValue\",\n  got: getStringWithNoOsValueGot,\n  want: getStringWithNoOsValueWant\n)",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Callee: &ast.MemberExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 21,
								Line:   9,
							},
							File:   "getString_test.flux",
							Source: "testing.assertEquals",
							Start: ast.Position{
								Column: 1,
								Line:   9,
							},
						},
					},
					Object: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   9,
								},
								File:   "getString_test.flux",
								Source: "testing",
								Start: ast.Position{
									Column: 1,
									Line:   9,
								},
							},
						},
						Name: "testing",
					},
					Property: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   9,
								},
								File:   "getString_test.flux",
								Source: "assertEquals",
								Start: ast.Position{
									Column: 9,
									Line:   9,
								},
							},
						},
						Name: "assertEquals",
					},
				},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   3,
					},
					File:   "getString_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   3,
						},
						File:   "getString_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "testing",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   4,
					},
					File:   "getString_test.flux",
					Source: "import \"env\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   4,
						},
						File:   "getString_test.flux",
						Source: "\"env\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "env",
			},
		}},
		Name: "getString_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   1,
					},
					File:   "getString_test.flux",
					Source: "package v1_env_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   1,
						},
						File:   "getString_test.flux",
						Source: "v1_env_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "main",
			},
		},
	}},
	Package: "main",
	Path:    "",
}}
