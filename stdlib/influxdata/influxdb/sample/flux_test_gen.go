// DO NOT EDIT: This file is autogenerated via the builtin command.

package sample

import ast "github.com/influxdata/flux/ast"

var FluxTestPackages = []*ast.Package{&ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 98,
					Line:   20,
				},
				File:   "data_test.flux",
				Source: "package sample_test\n\n\nimport \"influxdata/influxdb/sample\"\nimport \"testing\"\n\ntestData = sample.data(set: \"airSensor\")\n  |> group()\n  |> count()\n  |> map(fn: (r) => ({ _value: r._value > 0 }))\n\noutData = \"\n#group,false,false,false\n#datatype,string,long,boolean\n#default,_result,,\n,result,table,_value\n,,0,true\n\"\n\ntest _data = () => ({input: testing.load(tables: testData), want: testing.loadMem(csv: outData)})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 48,
						Line:   10,
					},
					File:   "data_test.flux",
					Source: "testData = sample.data(set: \"airSensor\")\n  |> group()\n  |> count()\n  |> map(fn: (r) => ({ _value: r._value > 0 }))",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   7,
						},
						File:   "data_test.flux",
						Source: "testData",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "testData",
			},
			Init: &ast.PipeExpression{
				Argument: &ast.PipeExpression{
					Argument: &ast.PipeExpression{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 40,
											Line:   7,
										},
										File:   "data_test.flux",
										Source: "set: \"airSensor\"",
										Start: ast.Position{
											Column: 24,
											Line:   7,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 40,
												Line:   7,
											},
											File:   "data_test.flux",
											Source: "set: \"airSensor\"",
											Start: ast.Position{
												Column: 24,
												Line:   7,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 27,
													Line:   7,
												},
												File:   "data_test.flux",
												Source: "set",
												Start: ast.Position{
													Column: 24,
													Line:   7,
												},
											},
										},
										Name: "set",
									},
									Separator: nil,
									Value: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 40,
													Line:   7,
												},
												File:   "data_test.flux",
												Source: "\"airSensor\"",
												Start: ast.Position{
													Column: 29,
													Line:   7,
												},
											},
										},
										Value: "airSensor",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   7,
									},
									File:   "data_test.flux",
									Source: "sample.data(set: \"airSensor\")",
									Start: ast.Position{
										Column: 12,
										Line:   7,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   7,
										},
										File:   "data_test.flux",
										Source: "sample.data",
										Start: ast.Position{
											Column: 12,
											Line:   7,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   7,
											},
											File:   "data_test.flux",
											Source: "sample",
											Start: ast.Position{
												Column: 12,
												Line:   7,
											},
										},
									},
									Name: "sample",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   7,
											},
											File:   "data_test.flux",
											Source: "data",
											Start: ast.Position{
												Column: 19,
												Line:   7,
											},
										},
									},
									Name: "data",
								},
								Rbrack: nil,
							},
							Lparen: nil,
							Rparen: nil,
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   8,
								},
								File:   "data_test.flux",
								Source: "sample.data(set: \"airSensor\")\n  |> group()",
								Start: ast.Position{
									Column: 12,
									Line:   7,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: nil,
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   8,
									},
									File:   "data_test.flux",
									Source: "group()",
									Start: ast.Position{
										Column: 6,
										Line:   8,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   8,
										},
										File:   "data_test.flux",
										Source: "group",
										Start: ast.Position{
											Column: 6,
											Line:   8,
										},
									},
								},
								Name: "group",
							},
							Lparen: nil,
							Rparen: nil,
						},
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   9,
							},
							File:   "data_test.flux",
							Source: "sample.data(set: \"airSensor\")\n  |> group()\n  |> count()",
							Start: ast.Position{
								Column: 12,
								Line:   7,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   9,
								},
								File:   "data_test.flux",
								Source: "count()",
								Start: ast.Position{
									Column: 6,
									Line:   9,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   9,
									},
									File:   "data_test.flux",
									Source: "count",
									Start: ast.Position{
										Column: 6,
										Line:   9,
									},
								},
							},
							Name: "count",
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 48,
							Line:   10,
						},
						File:   "data_test.flux",
						Source: "sample.data(set: \"airSensor\")\n  |> group()\n  |> count()\n  |> map(fn: (r) => ({ _value: r._value > 0 }))",
						Start: ast.Position{
							Column: 12,
							Line:   7,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   10,
								},
								File:   "data_test.flux",
								Source: "fn: (r) => ({ _value: r._value > 0 })",
								Start: ast.Position{
									Column: 10,
									Line:   10,
								},
							},
						},
						Lbrace: nil,
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   10,
									},
									File:   "data_test.flux",
									Source: "fn: (r) => ({ _value: r._value > 0 })",
									Start: ast.Position{
										Column: 10,
										Line:   10,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   10,
										},
										File:   "data_test.flux",
										Source: "fn",
										Start: ast.Position{
											Column: 10,
											Line:   10,
										},
									},
								},
								Name: "fn",
							},
							Separator: nil,
							Value: &ast.FunctionExpression{
								Arrow: nil,
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   10,
										},
										File:   "data_test.flux",
										Source: "(r) => ({ _value: r._value > 0 })",
										Start: ast.Position{
											Column: 14,
											Line:   10,
										},
									},
								},
								Body: &ast.ParenExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   10,
											},
											File:   "data_test.flux",
											Source: "({ _value: r._value > 0 })",
											Start: ast.Position{
												Column: 21,
												Line:   10,
											},
										},
									},
									Expression: &ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   10,
												},
												File:   "data_test.flux",
												Source: "{ _value: r._value > 0 }",
												Start: ast.Position{
													Column: 22,
													Line:   10,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   10,
													},
													File:   "data_test.flux",
													Source: "_value: r._value > 0",
													Start: ast.Position{
														Column: 24,
														Line:   10,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   10,
														},
														File:   "data_test.flux",
														Source: "_value",
														Start: ast.Position{
															Column: 24,
															Line:   10,
														},
													},
												},
												Name: "_value",
											},
											Separator: nil,
											Value: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   10,
														},
														File:   "data_test.flux",
														Source: "r._value > 0",
														Start: ast.Position{
															Column: 32,
															Line:   10,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   10,
															},
															File:   "data_test.flux",
															Source: "r._value",
															Start: ast.Position{
																Column: 32,
																Line:   10,
															},
														},
													},
													Lbrack: nil,
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   10,
																},
																File:   "data_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 32,
																	Line:   10,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   10,
																},
																File:   "data_test.flux",
																Source: "_value",
																Start: ast.Position{
																	Column: 34,
																	Line:   10,
																},
															},
														},
														Name: "_value",
													},
													Rbrack: nil,
												},
												Operator: 10,
												Right: &ast.IntegerLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   10,
															},
															File:   "data_test.flux",
															Source: "0",
															Start: ast.Position{
																Column: 43,
																Line:   10,
															},
														},
													},
													Value: int64(0),
												},
											},
										}},
										Rbrace: nil,
										With:   nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
								Lparen: nil,
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   10,
											},
											File:   "data_test.flux",
											Source: "r",
											Start: ast.Position{
												Column: 15,
												Line:   10,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   10,
												},
												File:   "data_test.flux",
												Source: "r",
												Start: ast.Position{
													Column: 15,
													Line:   10,
												},
											},
										},
										Name: "r",
									},
									Separator: nil,
									Value:     nil,
								}},
								Rparan: nil,
							},
						}},
						Rbrace: nil,
						With:   nil,
					}},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 48,
								Line:   10,
							},
							File:   "data_test.flux",
							Source: "map(fn: (r) => ({ _value: r._value > 0 }))",
							Start: ast.Position{
								Column: 6,
								Line:   10,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   10,
								},
								File:   "data_test.flux",
								Source: "map",
								Start: ast.Position{
									Column: 6,
									Line:   10,
								},
							},
						},
						Name: "map",
					},
					Lparen: nil,
					Rparen: nil,
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   18,
					},
					File:   "data_test.flux",
					Source: "outData = \"\n#group,false,false,false\n#datatype,string,long,boolean\n#default,_result,,\n,result,table,_value\n,,0,true\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   12,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   12,
						},
						File:   "data_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   12,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   18,
						},
						File:   "data_test.flux",
						Source: "\"\n#group,false,false,false\n#datatype,string,long,boolean\n#default,_result,,\n,result,table,_value\n,,0,true\n\"",
						Start: ast.Position{
							Column: 11,
							Line:   12,
						},
					},
				},
				Value: "\n#group,false,false,false\n#datatype,string,long,boolean\n#default,_result,,\n,result,table,_value\n,,0,true\n",
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 98,
							Line:   20,
						},
						File:   "data_test.flux",
						Source: "_data = () => ({input: testing.load(tables: testData), want: testing.loadMem(csv: outData)})",
						Start: ast.Position{
							Column: 6,
							Line:   20,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   20,
							},
							File:   "data_test.flux",
							Source: "_data",
							Start: ast.Position{
								Column: 6,
								Line:   20,
							},
						},
					},
					Name: "_data",
				},
				Init: &ast.FunctionExpression{
					Arrow: nil,
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 98,
								Line:   20,
							},
							File:   "data_test.flux",
							Source: "() => ({input: testing.load(tables: testData), want: testing.loadMem(csv: outData)})",
							Start: ast.Position{
								Column: 14,
								Line:   20,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 98,
									Line:   20,
								},
								File:   "data_test.flux",
								Source: "({input: testing.load(tables: testData), want: testing.loadMem(csv: outData)})",
								Start: ast.Position{
									Column: 20,
									Line:   20,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 97,
										Line:   20,
									},
									File:   "data_test.flux",
									Source: "{input: testing.load(tables: testData), want: testing.loadMem(csv: outData)}",
									Start: ast.Position{
										Column: 21,
										Line:   20,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   20,
										},
										File:   "data_test.flux",
										Source: "input: testing.load(tables: testData)",
										Start: ast.Position{
											Column: 22,
											Line:   20,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   20,
											},
											File:   "data_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 22,
												Line:   20,
											},
										},
									},
									Name: "input",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 58,
													Line:   20,
												},
												File:   "data_test.flux",
												Source: "tables: testData",
												Start: ast.Position{
													Column: 42,
													Line:   20,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 58,
														Line:   20,
													},
													File:   "data_test.flux",
													Source: "tables: testData",
													Start: ast.Position{
														Column: 42,
														Line:   20,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   20,
														},
														File:   "data_test.flux",
														Source: "tables",
														Start: ast.Position{
															Column: 42,
															Line:   20,
														},
													},
												},
												Name: "tables",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   20,
														},
														File:   "data_test.flux",
														Source: "testData",
														Start: ast.Position{
															Column: 50,
															Line:   20,
														},
													},
												},
												Name: "testData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   20,
											},
											File:   "data_test.flux",
											Source: "testing.load(tables: testData)",
											Start: ast.Position{
												Column: 29,
												Line:   20,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   20,
												},
												File:   "data_test.flux",
												Source: "testing.load",
												Start: ast.Position{
													Column: 29,
													Line:   20,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   20,
													},
													File:   "data_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 29,
														Line:   20,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   20,
													},
													File:   "data_test.flux",
													Source: "load",
													Start: ast.Position{
														Column: 37,
														Line:   20,
													},
												},
											},
											Name: "load",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 96,
											Line:   20,
										},
										File:   "data_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 61,
											Line:   20,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   20,
											},
											File:   "data_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 61,
												Line:   20,
											},
										},
									},
									Name: "want",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 95,
													Line:   20,
												},
												File:   "data_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 83,
													Line:   20,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 95,
														Line:   20,
													},
													File:   "data_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 83,
														Line:   20,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 86,
															Line:   20,
														},
														File:   "data_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 83,
															Line:   20,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 95,
															Line:   20,
														},
														File:   "data_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 88,
															Line:   20,
														},
													},
												},
												Name: "outData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 96,
												Line:   20,
											},
											File:   "data_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 67,
												Line:   20,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 82,
													Line:   20,
												},
												File:   "data_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 67,
													Line:   20,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 74,
														Line:   20,
													},
													File:   "data_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 67,
														Line:   20,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 82,
														Line:   20,
													},
													File:   "data_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 75,
														Line:   20,
													},
												},
											},
											Name: "loadMem",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}},
							Rbrace: nil,
							With:   nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
					Lparen: nil,
					Params: []*ast.Property{},
					Rparan: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 98,
						Line:   20,
					},
					File:   "data_test.flux",
					Source: "test _data = () => ({input: testing.load(tables: testData), want: testing.loadMem(csv: outData)})",
					Start: ast.Position{
						Column: 1,
						Line:   20,
					},
				},
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 36,
						Line:   4,
					},
					File:   "data_test.flux",
					Source: "import \"influxdata/influxdb/sample\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 36,
							Line:   4,
						},
						File:   "data_test.flux",
						Source: "\"influxdata/influxdb/sample\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "influxdata/influxdb/sample",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   5,
					},
					File:   "data_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   5,
						},
						File:   "data_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "testing",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "data_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   1,
					},
					File:   "data_test.flux",
					Source: "package sample_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   1,
						},
						File:   "data_test.flux",
						Source: "sample_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "sample_test",
			},
		},
	}, &ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 98,
					Line:   19,
				},
				File:   "list_test.flux",
				Source: "package sample_test\n\n\nimport \"influxdata/influxdb/sample\"\nimport \"testing\"\n\ntestData = sample.list()\n  |> count()\n  |> map(fn: (r) => ({ _value: r._value > 0 }))\n\noutData = \"\n#group,false,false,false\n#datatype,string,long,boolean\n#default,_result,,\n,result,table,_value\n,,0,true\n\"\n\ntest _list = () => ({input: testing.load(tables: testData), want: testing.loadMem(csv: outData)})",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 48,
						Line:   9,
					},
					File:   "list_test.flux",
					Source: "testData = sample.list()\n  |> count()\n  |> map(fn: (r) => ({ _value: r._value > 0 }))",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   7,
						},
						File:   "list_test.flux",
						Source: "testData",
						Start: ast.Position{
							Column: 1,
							Line:   7,
						},
					},
				},
				Name: "testData",
			},
			Init: &ast.PipeExpression{
				Argument: &ast.PipeExpression{
					Argument: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   7,
								},
								File:   "list_test.flux",
								Source: "sample.list()",
								Start: ast.Position{
									Column: 12,
									Line:   7,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   7,
									},
									File:   "list_test.flux",
									Source: "sample.list",
									Start: ast.Position{
										Column: 12,
										Line:   7,
									},
								},
							},
							Lbrack: nil,
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 18,
											Line:   7,
										},
										File:   "list_test.flux",
										Source: "sample",
										Start: ast.Position{
											Column: 12,
											Line:   7,
										},
									},
								},
								Name: "sample",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   7,
										},
										File:   "list_test.flux",
										Source: "list",
										Start: ast.Position{
											Column: 19,
											Line:   7,
										},
									},
								},
								Name: "list",
							},
							Rbrack: nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   8,
							},
							File:   "list_test.flux",
							Source: "sample.list()\n  |> count()",
							Start: ast.Position{
								Column: 12,
								Line:   7,
							},
						},
					},
					Call: &ast.CallExpression{
						Arguments: nil,
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   8,
								},
								File:   "list_test.flux",
								Source: "count()",
								Start: ast.Position{
									Column: 6,
									Line:   8,
								},
							},
						},
						Callee: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   8,
									},
									File:   "list_test.flux",
									Source: "count",
									Start: ast.Position{
										Column: 6,
										Line:   8,
									},
								},
							},
							Name: "count",
						},
						Lparen: nil,
						Rparen: nil,
					},
				},
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 48,
							Line:   9,
						},
						File:   "list_test.flux",
						Source: "sample.list()\n  |> count()\n  |> map(fn: (r) => ({ _value: r._value > 0 }))",
						Start: ast.Position{
							Column: 12,
							Line:   7,
						},
					},
				},
				Call: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   9,
								},
								File:   "list_test.flux",
								Source: "fn: (r) => ({ _value: r._value > 0 })",
								Start: ast.Position{
									Column: 10,
									Line:   9,
								},
							},
						},
						Lbrace: nil,
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   9,
									},
									File:   "list_test.flux",
									Source: "fn: (r) => ({ _value: r._value > 0 })",
									Start: ast.Position{
										Column: 10,
										Line:   9,
									},
								},
							},
							Comma: nil,
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 12,
											Line:   9,
										},
										File:   "list_test.flux",
										Source: "fn",
										Start: ast.Position{
											Column: 10,
											Line:   9,
										},
									},
								},
								Name: "fn",
							},
							Separator: nil,
							Value: &ast.FunctionExpression{
								Arrow: nil,
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   9,
										},
										File:   "list_test.flux",
										Source: "(r) => ({ _value: r._value > 0 })",
										Start: ast.Position{
											Column: 14,
											Line:   9,
										},
									},
								},
								Body: &ast.ParenExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   9,
											},
											File:   "list_test.flux",
											Source: "({ _value: r._value > 0 })",
											Start: ast.Position{
												Column: 21,
												Line:   9,
											},
										},
									},
									Expression: &ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   9,
												},
												File:   "list_test.flux",
												Source: "{ _value: r._value > 0 }",
												Start: ast.Position{
													Column: 22,
													Line:   9,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 44,
														Line:   9,
													},
													File:   "list_test.flux",
													Source: "_value: r._value > 0",
													Start: ast.Position{
														Column: 24,
														Line:   9,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   9,
														},
														File:   "list_test.flux",
														Source: "_value",
														Start: ast.Position{
															Column: 24,
															Line:   9,
														},
													},
												},
												Name: "_value",
											},
											Separator: nil,
											Value: &ast.BinaryExpression{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 44,
															Line:   9,
														},
														File:   "list_test.flux",
														Source: "r._value > 0",
														Start: ast.Position{
															Column: 32,
															Line:   9,
														},
													},
												},
												Left: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   9,
															},
															File:   "list_test.flux",
															Source: "r._value",
															Start: ast.Position{
																Column: 32,
																Line:   9,
															},
														},
													},
													Lbrack: nil,
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 33,
																	Line:   9,
																},
																File:   "list_test.flux",
																Source: "r",
																Start: ast.Position{
																	Column: 32,
																	Line:   9,
																},
															},
														},
														Name: "r",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Comments: nil,
															Errors:   nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 40,
																	Line:   9,
																},
																File:   "list_test.flux",
																Source: "_value",
																Start: ast.Position{
																	Column: 34,
																	Line:   9,
																},
															},
														},
														Name: "_value",
													},
													Rbrack: nil,
												},
												Operator: 10,
												Right: &ast.IntegerLiteral{
													BaseNode: ast.BaseNode{
														Comments: nil,
														Errors:   nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 44,
																Line:   9,
															},
															File:   "list_test.flux",
															Source: "0",
															Start: ast.Position{
																Column: 43,
																Line:   9,
															},
														},
													},
													Value: int64(0),
												},
											},
										}},
										Rbrace: nil,
										With:   nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
								Lparen: nil,
								Params: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   9,
											},
											File:   "list_test.flux",
											Source: "r",
											Start: ast.Position{
												Column: 15,
												Line:   9,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 16,
													Line:   9,
												},
												File:   "list_test.flux",
												Source: "r",
												Start: ast.Position{
													Column: 15,
													Line:   9,
												},
											},
										},
										Name: "r",
									},
									Separator: nil,
									Value:     nil,
								}},
								Rparan: nil,
							},
						}},
						Rbrace: nil,
						With:   nil,
					}},
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 48,
								Line:   9,
							},
							File:   "list_test.flux",
							Source: "map(fn: (r) => ({ _value: r._value > 0 }))",
							Start: ast.Position{
								Column: 6,
								Line:   9,
							},
						},
					},
					Callee: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 9,
									Line:   9,
								},
								File:   "list_test.flux",
								Source: "map",
								Start: ast.Position{
									Column: 6,
									Line:   9,
								},
							},
						},
						Name: "map",
					},
					Lparen: nil,
					Rparen: nil,
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   17,
					},
					File:   "list_test.flux",
					Source: "outData = \"\n#group,false,false,false\n#datatype,string,long,boolean\n#default,_result,,\n,result,table,_value\n,,0,true\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   11,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   11,
						},
						File:   "list_test.flux",
						Source: "outData",
						Start: ast.Position{
							Column: 1,
							Line:   11,
						},
					},
				},
				Name: "outData",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   17,
						},
						File:   "list_test.flux",
						Source: "\"\n#group,false,false,false\n#datatype,string,long,boolean\n#default,_result,,\n,result,table,_value\n,,0,true\n\"",
						Start: ast.Position{
							Column: 11,
							Line:   11,
						},
					},
				},
				Value: "\n#group,false,false,false\n#datatype,string,long,boolean\n#default,_result,,\n,result,table,_value\n,,0,true\n",
			},
		}, &ast.TestStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 98,
							Line:   19,
						},
						File:   "list_test.flux",
						Source: "_list = () => ({input: testing.load(tables: testData), want: testing.loadMem(csv: outData)})",
						Start: ast.Position{
							Column: 6,
							Line:   19,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   19,
							},
							File:   "list_test.flux",
							Source: "_list",
							Start: ast.Position{
								Column: 6,
								Line:   19,
							},
						},
					},
					Name: "_list",
				},
				Init: &ast.FunctionExpression{
					Arrow: nil,
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 98,
								Line:   19,
							},
							File:   "list_test.flux",
							Source: "() => ({input: testing.load(tables: testData), want: testing.loadMem(csv: outData)})",
							Start: ast.Position{
								Column: 14,
								Line:   19,
							},
						},
					},
					Body: &ast.ParenExpression{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 98,
									Line:   19,
								},
								File:   "list_test.flux",
								Source: "({input: testing.load(tables: testData), want: testing.loadMem(csv: outData)})",
								Start: ast.Position{
									Column: 20,
									Line:   19,
								},
							},
						},
						Expression: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 97,
										Line:   19,
									},
									File:   "list_test.flux",
									Source: "{input: testing.load(tables: testData), want: testing.loadMem(csv: outData)}",
									Start: ast.Position{
										Column: 21,
										Line:   19,
									},
								},
							},
							Lbrace: nil,
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 59,
											Line:   19,
										},
										File:   "list_test.flux",
										Source: "input: testing.load(tables: testData)",
										Start: ast.Position{
											Column: 22,
											Line:   19,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   19,
											},
											File:   "list_test.flux",
											Source: "input",
											Start: ast.Position{
												Column: 22,
												Line:   19,
											},
										},
									},
									Name: "input",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 58,
													Line:   19,
												},
												File:   "list_test.flux",
												Source: "tables: testData",
												Start: ast.Position{
													Column: 42,
													Line:   19,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 58,
														Line:   19,
													},
													File:   "list_test.flux",
													Source: "tables: testData",
													Start: ast.Position{
														Column: 42,
														Line:   19,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 48,
															Line:   19,
														},
														File:   "list_test.flux",
														Source: "tables",
														Start: ast.Position{
															Column: 42,
															Line:   19,
														},
													},
												},
												Name: "tables",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 58,
															Line:   19,
														},
														File:   "list_test.flux",
														Source: "testData",
														Start: ast.Position{
															Column: 50,
															Line:   19,
														},
													},
												},
												Name: "testData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 59,
												Line:   19,
											},
											File:   "list_test.flux",
											Source: "testing.load(tables: testData)",
											Start: ast.Position{
												Column: 29,
												Line:   19,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   19,
												},
												File:   "list_test.flux",
												Source: "testing.load",
												Start: ast.Position{
													Column: 29,
													Line:   19,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   19,
													},
													File:   "list_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 29,
														Line:   19,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   19,
													},
													File:   "list_test.flux",
													Source: "load",
													Start: ast.Position{
														Column: 37,
														Line:   19,
													},
												},
											},
											Name: "load",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 96,
											Line:   19,
										},
										File:   "list_test.flux",
										Source: "want: testing.loadMem(csv: outData)",
										Start: ast.Position{
											Column: 61,
											Line:   19,
										},
									},
								},
								Comma: nil,
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 65,
												Line:   19,
											},
											File:   "list_test.flux",
											Source: "want",
											Start: ast.Position{
												Column: 61,
												Line:   19,
											},
										},
									},
									Name: "want",
								},
								Separator: nil,
								Value: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 95,
													Line:   19,
												},
												File:   "list_test.flux",
												Source: "csv: outData",
												Start: ast.Position{
													Column: 83,
													Line:   19,
												},
											},
										},
										Lbrace: nil,
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 95,
														Line:   19,
													},
													File:   "list_test.flux",
													Source: "csv: outData",
													Start: ast.Position{
														Column: 83,
														Line:   19,
													},
												},
											},
											Comma: nil,
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 86,
															Line:   19,
														},
														File:   "list_test.flux",
														Source: "csv",
														Start: ast.Position{
															Column: 83,
															Line:   19,
														},
													},
												},
												Name: "csv",
											},
											Separator: nil,
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Comments: nil,
													Errors:   nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 95,
															Line:   19,
														},
														File:   "list_test.flux",
														Source: "outData",
														Start: ast.Position{
															Column: 88,
															Line:   19,
														},
													},
												},
												Name: "outData",
											},
										}},
										Rbrace: nil,
										With:   nil,
									}},
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 96,
												Line:   19,
											},
											File:   "list_test.flux",
											Source: "testing.loadMem(csv: outData)",
											Start: ast.Position{
												Column: 67,
												Line:   19,
											},
										},
									},
									Callee: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 82,
													Line:   19,
												},
												File:   "list_test.flux",
												Source: "testing.loadMem",
												Start: ast.Position{
													Column: 67,
													Line:   19,
												},
											},
										},
										Lbrack: nil,
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 74,
														Line:   19,
													},
													File:   "list_test.flux",
													Source: "testing",
													Start: ast.Position{
														Column: 67,
														Line:   19,
													},
												},
											},
											Name: "testing",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 82,
														Line:   19,
													},
													File:   "list_test.flux",
													Source: "loadMem",
													Start: ast.Position{
														Column: 75,
														Line:   19,
													},
												},
											},
											Name: "loadMem",
										},
										Rbrack: nil,
									},
									Lparen: nil,
									Rparen: nil,
								},
							}},
							Rbrace: nil,
							With:   nil,
						},
						Lparen: nil,
						Rparen: nil,
					},
					Lparen: nil,
					Params: []*ast.Property{},
					Rparan: nil,
				},
			},
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 98,
						Line:   19,
					},
					File:   "list_test.flux",
					Source: "test _list = () => ({input: testing.load(tables: testData), want: testing.loadMem(csv: outData)})",
					Start: ast.Position{
						Column: 1,
						Line:   19,
					},
				},
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 36,
						Line:   4,
					},
					File:   "list_test.flux",
					Source: "import \"influxdata/influxdb/sample\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 36,
							Line:   4,
						},
						File:   "list_test.flux",
						Source: "\"influxdata/influxdb/sample\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "influxdata/influxdb/sample",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   5,
					},
					File:   "list_test.flux",
					Source: "import \"testing\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   5,
						},
						File:   "list_test.flux",
						Source: "\"testing\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "testing",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "list_test.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   1,
					},
					File:   "list_test.flux",
					Source: "package sample_test",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   1,
						},
						File:   "list_test.flux",
						Source: "sample_test",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "sample_test",
			},
		},
	}},
	Package: "sample_test",
	Path:    "influxdata/influxdb/sample",
}}
