// DO NOT EDIT: This file is autogenerated via the builtin command.

package date

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 14,
					Line:   101,
				},
				File:   "date.flux",
				Source: "package date\n\n\n// Second returns the seconds of a specified time. Results range from [0-59].\nbuiltin second : (t: T) => int where T: Timeable\n\n// Minute returns the minutes of a specified time. Results range from [0-59].\nbuiltin minute : (t: T) => int where T: Timeable\n\n// Hour returns the hours of a specified time. Results range from [0-23].\nbuiltin hour : (t: T) => int where T: Timeable\n\n// WeekDay returns the day of the week for a specified time. Results range from [0-6].\nbuiltin weekDay : (t: T) => int where T: Timeable\n\n// MonthDay returns the day of the month for a specified time. Results range from [1-31].\nbuiltin monthDay : (t: T) => int where T: Timeable\n\n// YearDay returns the day of the year for a specified time. Results range from [1-366].\nbuiltin yearDay : (t: T) => int where T: Timeable\n\n// Month returns the month for a specified time. Results range from [1-12].\nbuiltin month : (t: T) => int where T: Timeable\n\n// Year returns the year for a specified time.\nbuiltin year : (t: T) => int where T: Timeable\n\n// Week returns the ISO week of the year for a specified time. Results range from [1-53].\nbuiltin week : (t: T) => int where T: Timeable\n\n// Quarter returns the quarter for a specified time. Results range from [1-4].\nbuiltin quarter : (t: T) => int where T: Timeable\n\n// Millisecond returns the milliseconds for a specified time. Results range from [0-999].\nbuiltin millisecond : (t: T) => int where T: Timeable\n\n// Microsecond returns the microseconds for a specified time. Results range from [0-999999].\nbuiltin microsecond : (t: T) => int where T: Timeable\n\n// Nanosecond returns the nanoseconds for a specified time. Results range from [0-999999999].\nbuiltin nanosecond : (t: T) => int where T: Timeable\n\n// Truncate returns a time truncated to the specified duration unit.\nbuiltin truncate : (t: T, unit: duration) => time where T: Timeable\n\n// Sunday is a constant that represents Sunday as a day of the week\nSunday = 0\n\n// Monday is a constant that represents Monday as a day of the week.\nMonday = 1\n\n// Tuesday is a constant that represents Tuesday as a day of the week.\nTuesday = 2\n\n// Wednesday is a constant that represents Wednesday as a day of the week.\nWednesday = 3\n\n// Thursday is a constant that represents Thursday as a day of the week.\nThursday = 4\n\n// Friday is a constant that represents Friday as a day of the week.\nFriday = 5\n\n// Saturday is a constant that represents Saturday as a day of the week.\nSaturday = 6\n\n// January is a constant that represents the month of January.\nJanuary = 1\n\n// February is a constant that represents the month of February.\nFebruary = 2\n\n// March is a constant that represents the month of March.\nMarch = 3\n\n// April is a constant that represents the month of April.\nApril = 4\n\n// May is a constant that represents the month of May.\nMay = 5\n\n// June is a constant that represents the month of June.\nJune = 6\n\n// July is a constant that represents the month of July.\nJuly = 7\n\n// August is a constant that represents the month of August.\nAugust = 8\n\n// September is a constant that represents the month of September.\nSeptember = 9\n\n// October is a constant that represents the month of October.\nOctober = 10\n\n// November is a constant that represents the month of November.\nNovember = 11\n\n// December is a constant that represents the month of December.\nDecember = 12",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Second returns the seconds of a specified time. Results range from [0-59].\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   5,
					},
					File:   "date.flux",
					Source: "builtin second",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   5,
						},
						File:   "date.flux",
						Source: "second",
						Start: ast.Position{
							Column: 9,
							Line:   5,
						},
					},
				},
				Name: "second",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 49,
							Line:   5,
						},
						File:   "date.flux",
						Source: "(t: T) => int where T: Timeable",
						Start: ast.Position{
							Column: 18,
							Line:   5,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   5,
							},
							File:   "date.flux",
							Source: "T: Timeable",
							Start: ast.Position{
								Column: 38,
								Line:   5,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   5,
								},
								File:   "date.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 41,
									Line:   5,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   5,
								},
								File:   "date.flux",
								Source: "T",
								Start: ast.Position{
									Column: 38,
									Line:   5,
								},
							},
						},
						Name: "T",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   5,
							},
							File:   "date.flux",
							Source: "(t: T) => int",
							Start: ast.Position{
								Column: 18,
								Line:   5,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   5,
								},
								File:   "date.flux",
								Source: "t: T",
								Start: ast.Position{
									Column: 19,
									Line:   5,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   5,
									},
									File:   "date.flux",
									Source: "t",
									Start: ast.Position{
										Column: 19,
										Line:   5,
									},
								},
							},
							Name: "t",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   5,
									},
									File:   "date.flux",
									Source: "T",
									Start: ast.Position{
										Column: 22,
										Line:   5,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   5,
										},
										File:   "date.flux",
										Source: "T",
										Start: ast.Position{
											Column: 22,
											Line:   5,
										},
									},
								},
								Name: "T",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   5,
								},
								File:   "date.flux",
								Source: "int",
								Start: ast.Position{
									Column: 28,
									Line:   5,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   5,
									},
									File:   "date.flux",
									Source: "int",
									Start: ast.Position{
										Column: 28,
										Line:   5,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Minute returns the minutes of a specified time. Results range from [0-59].\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   8,
					},
					File:   "date.flux",
					Source: "builtin minute",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   8,
						},
						File:   "date.flux",
						Source: "minute",
						Start: ast.Position{
							Column: 9,
							Line:   8,
						},
					},
				},
				Name: "minute",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 49,
							Line:   8,
						},
						File:   "date.flux",
						Source: "(t: T) => int where T: Timeable",
						Start: ast.Position{
							Column: 18,
							Line:   8,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 49,
								Line:   8,
							},
							File:   "date.flux",
							Source: "T: Timeable",
							Start: ast.Position{
								Column: 38,
								Line:   8,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   8,
								},
								File:   "date.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 41,
									Line:   8,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   8,
								},
								File:   "date.flux",
								Source: "T",
								Start: ast.Position{
									Column: 38,
									Line:   8,
								},
							},
						},
						Name: "T",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 31,
								Line:   8,
							},
							File:   "date.flux",
							Source: "(t: T) => int",
							Start: ast.Position{
								Column: 18,
								Line:   8,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 23,
									Line:   8,
								},
								File:   "date.flux",
								Source: "t: T",
								Start: ast.Position{
									Column: 19,
									Line:   8,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 20,
										Line:   8,
									},
									File:   "date.flux",
									Source: "t",
									Start: ast.Position{
										Column: 19,
										Line:   8,
									},
								},
							},
							Name: "t",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 23,
										Line:   8,
									},
									File:   "date.flux",
									Source: "T",
									Start: ast.Position{
										Column: 22,
										Line:   8,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   8,
										},
										File:   "date.flux",
										Source: "T",
										Start: ast.Position{
											Column: 22,
											Line:   8,
										},
									},
								},
								Name: "T",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   8,
								},
								File:   "date.flux",
								Source: "int",
								Start: ast.Position{
									Column: 28,
									Line:   8,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   8,
									},
									File:   "date.flux",
									Source: "int",
									Start: ast.Position{
										Column: 28,
										Line:   8,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Hour returns the hours of a specified time. Results range from [0-23].\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   11,
					},
					File:   "date.flux",
					Source: "builtin hour",
					Start: ast.Position{
						Column: 1,
						Line:   11,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   11,
						},
						File:   "date.flux",
						Source: "hour",
						Start: ast.Position{
							Column: 9,
							Line:   11,
						},
					},
				},
				Name: "hour",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 47,
							Line:   11,
						},
						File:   "date.flux",
						Source: "(t: T) => int where T: Timeable",
						Start: ast.Position{
							Column: 16,
							Line:   11,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 47,
								Line:   11,
							},
							File:   "date.flux",
							Source: "T: Timeable",
							Start: ast.Position{
								Column: 36,
								Line:   11,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   11,
								},
								File:   "date.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 39,
									Line:   11,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   11,
								},
								File:   "date.flux",
								Source: "T",
								Start: ast.Position{
									Column: 36,
									Line:   11,
								},
							},
						},
						Name: "T",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   11,
							},
							File:   "date.flux",
							Source: "(t: T) => int",
							Start: ast.Position{
								Column: 16,
								Line:   11,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   11,
								},
								File:   "date.flux",
								Source: "t: T",
								Start: ast.Position{
									Column: 17,
									Line:   11,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   11,
									},
									File:   "date.flux",
									Source: "t",
									Start: ast.Position{
										Column: 17,
										Line:   11,
									},
								},
							},
							Name: "t",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   11,
									},
									File:   "date.flux",
									Source: "T",
									Start: ast.Position{
										Column: 20,
										Line:   11,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   11,
										},
										File:   "date.flux",
										Source: "T",
										Start: ast.Position{
											Column: 20,
											Line:   11,
										},
									},
								},
								Name: "T",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   11,
								},
								File:   "date.flux",
								Source: "int",
								Start: ast.Position{
									Column: 26,
									Line:   11,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   11,
									},
									File:   "date.flux",
									Source: "int",
									Start: ast.Position{
										Column: 26,
										Line:   11,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// WeekDay returns the day of the week for a specified time. Results range from [0-6].\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   14,
					},
					File:   "date.flux",
					Source: "builtin weekDay",
					Start: ast.Position{
						Column: 1,
						Line:   14,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   14,
						},
						File:   "date.flux",
						Source: "weekDay",
						Start: ast.Position{
							Column: 9,
							Line:   14,
						},
					},
				},
				Name: "weekDay",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 50,
							Line:   14,
						},
						File:   "date.flux",
						Source: "(t: T) => int where T: Timeable",
						Start: ast.Position{
							Column: 19,
							Line:   14,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 50,
								Line:   14,
							},
							File:   "date.flux",
							Source: "T: Timeable",
							Start: ast.Position{
								Column: 39,
								Line:   14,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   14,
								},
								File:   "date.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 42,
									Line:   14,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   14,
								},
								File:   "date.flux",
								Source: "T",
								Start: ast.Position{
									Column: 39,
									Line:   14,
								},
							},
						},
						Name: "T",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   14,
							},
							File:   "date.flux",
							Source: "(t: T) => int",
							Start: ast.Position{
								Column: 19,
								Line:   14,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   14,
								},
								File:   "date.flux",
								Source: "t: T",
								Start: ast.Position{
									Column: 20,
									Line:   14,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   14,
									},
									File:   "date.flux",
									Source: "t",
									Start: ast.Position{
										Column: 20,
										Line:   14,
									},
								},
							},
							Name: "t",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   14,
									},
									File:   "date.flux",
									Source: "T",
									Start: ast.Position{
										Column: 23,
										Line:   14,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   14,
										},
										File:   "date.flux",
										Source: "T",
										Start: ast.Position{
											Column: 23,
											Line:   14,
										},
									},
								},
								Name: "T",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   14,
								},
								File:   "date.flux",
								Source: "int",
								Start: ast.Position{
									Column: 29,
									Line:   14,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   14,
									},
									File:   "date.flux",
									Source: "int",
									Start: ast.Position{
										Column: 29,
										Line:   14,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// MonthDay returns the day of the month for a specified time. Results range from [1-31].\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   17,
					},
					File:   "date.flux",
					Source: "builtin monthDay",
					Start: ast.Position{
						Column: 1,
						Line:   17,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   17,
						},
						File:   "date.flux",
						Source: "monthDay",
						Start: ast.Position{
							Column: 9,
							Line:   17,
						},
					},
				},
				Name: "monthDay",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 51,
							Line:   17,
						},
						File:   "date.flux",
						Source: "(t: T) => int where T: Timeable",
						Start: ast.Position{
							Column: 20,
							Line:   17,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 51,
								Line:   17,
							},
							File:   "date.flux",
							Source: "T: Timeable",
							Start: ast.Position{
								Column: 40,
								Line:   17,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 51,
									Line:   17,
								},
								File:   "date.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 43,
									Line:   17,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   17,
								},
								File:   "date.flux",
								Source: "T",
								Start: ast.Position{
									Column: 40,
									Line:   17,
								},
							},
						},
						Name: "T",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   17,
							},
							File:   "date.flux",
							Source: "(t: T) => int",
							Start: ast.Position{
								Column: 20,
								Line:   17,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   17,
								},
								File:   "date.flux",
								Source: "t: T",
								Start: ast.Position{
									Column: 21,
									Line:   17,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   17,
									},
									File:   "date.flux",
									Source: "t",
									Start: ast.Position{
										Column: 21,
										Line:   17,
									},
								},
							},
							Name: "t",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   17,
									},
									File:   "date.flux",
									Source: "T",
									Start: ast.Position{
										Column: 24,
										Line:   17,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   17,
										},
										File:   "date.flux",
										Source: "T",
										Start: ast.Position{
											Column: 24,
											Line:   17,
										},
									},
								},
								Name: "T",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   17,
								},
								File:   "date.flux",
								Source: "int",
								Start: ast.Position{
									Column: 30,
									Line:   17,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   17,
									},
									File:   "date.flux",
									Source: "int",
									Start: ast.Position{
										Column: 30,
										Line:   17,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// YearDay returns the day of the year for a specified time. Results range from [1-366].\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   20,
					},
					File:   "date.flux",
					Source: "builtin yearDay",
					Start: ast.Position{
						Column: 1,
						Line:   20,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   20,
						},
						File:   "date.flux",
						Source: "yearDay",
						Start: ast.Position{
							Column: 9,
							Line:   20,
						},
					},
				},
				Name: "yearDay",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 50,
							Line:   20,
						},
						File:   "date.flux",
						Source: "(t: T) => int where T: Timeable",
						Start: ast.Position{
							Column: 19,
							Line:   20,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 50,
								Line:   20,
							},
							File:   "date.flux",
							Source: "T: Timeable",
							Start: ast.Position{
								Column: 39,
								Line:   20,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   20,
								},
								File:   "date.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 42,
									Line:   20,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   20,
								},
								File:   "date.flux",
								Source: "T",
								Start: ast.Position{
									Column: 39,
									Line:   20,
								},
							},
						},
						Name: "T",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   20,
							},
							File:   "date.flux",
							Source: "(t: T) => int",
							Start: ast.Position{
								Column: 19,
								Line:   20,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   20,
								},
								File:   "date.flux",
								Source: "t: T",
								Start: ast.Position{
									Column: 20,
									Line:   20,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   20,
									},
									File:   "date.flux",
									Source: "t",
									Start: ast.Position{
										Column: 20,
										Line:   20,
									},
								},
							},
							Name: "t",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   20,
									},
									File:   "date.flux",
									Source: "T",
									Start: ast.Position{
										Column: 23,
										Line:   20,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   20,
										},
										File:   "date.flux",
										Source: "T",
										Start: ast.Position{
											Column: 23,
											Line:   20,
										},
									},
								},
								Name: "T",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   20,
								},
								File:   "date.flux",
								Source: "int",
								Start: ast.Position{
									Column: 29,
									Line:   20,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   20,
									},
									File:   "date.flux",
									Source: "int",
									Start: ast.Position{
										Column: 29,
										Line:   20,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Month returns the month for a specified time. Results range from [1-12].\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   23,
					},
					File:   "date.flux",
					Source: "builtin month",
					Start: ast.Position{
						Column: 1,
						Line:   23,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   23,
						},
						File:   "date.flux",
						Source: "month",
						Start: ast.Position{
							Column: 9,
							Line:   23,
						},
					},
				},
				Name: "month",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 48,
							Line:   23,
						},
						File:   "date.flux",
						Source: "(t: T) => int where T: Timeable",
						Start: ast.Position{
							Column: 17,
							Line:   23,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 48,
								Line:   23,
							},
							File:   "date.flux",
							Source: "T: Timeable",
							Start: ast.Position{
								Column: 37,
								Line:   23,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 48,
									Line:   23,
								},
								File:   "date.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 40,
									Line:   23,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 38,
									Line:   23,
								},
								File:   "date.flux",
								Source: "T",
								Start: ast.Position{
									Column: 37,
									Line:   23,
								},
							},
						},
						Name: "T",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 30,
								Line:   23,
							},
							File:   "date.flux",
							Source: "(t: T) => int",
							Start: ast.Position{
								Column: 17,
								Line:   23,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   23,
								},
								File:   "date.flux",
								Source: "t: T",
								Start: ast.Position{
									Column: 18,
									Line:   23,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   23,
									},
									File:   "date.flux",
									Source: "t",
									Start: ast.Position{
										Column: 18,
										Line:   23,
									},
								},
							},
							Name: "t",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   23,
									},
									File:   "date.flux",
									Source: "T",
									Start: ast.Position{
										Column: 21,
										Line:   23,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   23,
										},
										File:   "date.flux",
										Source: "T",
										Start: ast.Position{
											Column: 21,
											Line:   23,
										},
									},
								},
								Name: "T",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   23,
								},
								File:   "date.flux",
								Source: "int",
								Start: ast.Position{
									Column: 27,
									Line:   23,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   23,
									},
									File:   "date.flux",
									Source: "int",
									Start: ast.Position{
										Column: 27,
										Line:   23,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Year returns the year for a specified time.\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   26,
					},
					File:   "date.flux",
					Source: "builtin year",
					Start: ast.Position{
						Column: 1,
						Line:   26,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   26,
						},
						File:   "date.flux",
						Source: "year",
						Start: ast.Position{
							Column: 9,
							Line:   26,
						},
					},
				},
				Name: "year",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 47,
							Line:   26,
						},
						File:   "date.flux",
						Source: "(t: T) => int where T: Timeable",
						Start: ast.Position{
							Column: 16,
							Line:   26,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 47,
								Line:   26,
							},
							File:   "date.flux",
							Source: "T: Timeable",
							Start: ast.Position{
								Column: 36,
								Line:   26,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   26,
								},
								File:   "date.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 39,
									Line:   26,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   26,
								},
								File:   "date.flux",
								Source: "T",
								Start: ast.Position{
									Column: 36,
									Line:   26,
								},
							},
						},
						Name: "T",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   26,
							},
							File:   "date.flux",
							Source: "(t: T) => int",
							Start: ast.Position{
								Column: 16,
								Line:   26,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   26,
								},
								File:   "date.flux",
								Source: "t: T",
								Start: ast.Position{
									Column: 17,
									Line:   26,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   26,
									},
									File:   "date.flux",
									Source: "t",
									Start: ast.Position{
										Column: 17,
										Line:   26,
									},
								},
							},
							Name: "t",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   26,
									},
									File:   "date.flux",
									Source: "T",
									Start: ast.Position{
										Column: 20,
										Line:   26,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   26,
										},
										File:   "date.flux",
										Source: "T",
										Start: ast.Position{
											Column: 20,
											Line:   26,
										},
									},
								},
								Name: "T",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   26,
								},
								File:   "date.flux",
								Source: "int",
								Start: ast.Position{
									Column: 26,
									Line:   26,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   26,
									},
									File:   "date.flux",
									Source: "int",
									Start: ast.Position{
										Column: 26,
										Line:   26,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Week returns the ISO week of the year for a specified time. Results range from [1-53].\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   29,
					},
					File:   "date.flux",
					Source: "builtin week",
					Start: ast.Position{
						Column: 1,
						Line:   29,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   29,
						},
						File:   "date.flux",
						Source: "week",
						Start: ast.Position{
							Column: 9,
							Line:   29,
						},
					},
				},
				Name: "week",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 47,
							Line:   29,
						},
						File:   "date.flux",
						Source: "(t: T) => int where T: Timeable",
						Start: ast.Position{
							Column: 16,
							Line:   29,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 47,
								Line:   29,
							},
							File:   "date.flux",
							Source: "T: Timeable",
							Start: ast.Position{
								Column: 36,
								Line:   29,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   29,
								},
								File:   "date.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 39,
									Line:   29,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   29,
								},
								File:   "date.flux",
								Source: "T",
								Start: ast.Position{
									Column: 36,
									Line:   29,
								},
							},
						},
						Name: "T",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 29,
								Line:   29,
							},
							File:   "date.flux",
							Source: "(t: T) => int",
							Start: ast.Position{
								Column: 16,
								Line:   29,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   29,
								},
								File:   "date.flux",
								Source: "t: T",
								Start: ast.Position{
									Column: 17,
									Line:   29,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 18,
										Line:   29,
									},
									File:   "date.flux",
									Source: "t",
									Start: ast.Position{
										Column: 17,
										Line:   29,
									},
								},
							},
							Name: "t",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   29,
									},
									File:   "date.flux",
									Source: "T",
									Start: ast.Position{
										Column: 20,
										Line:   29,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   29,
										},
										File:   "date.flux",
										Source: "T",
										Start: ast.Position{
											Column: 20,
											Line:   29,
										},
									},
								},
								Name: "T",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   29,
								},
								File:   "date.flux",
								Source: "int",
								Start: ast.Position{
									Column: 26,
									Line:   29,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 29,
										Line:   29,
									},
									File:   "date.flux",
									Source: "int",
									Start: ast.Position{
										Column: 26,
										Line:   29,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Quarter returns the quarter for a specified time. Results range from [1-4].\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   32,
					},
					File:   "date.flux",
					Source: "builtin quarter",
					Start: ast.Position{
						Column: 1,
						Line:   32,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   32,
						},
						File:   "date.flux",
						Source: "quarter",
						Start: ast.Position{
							Column: 9,
							Line:   32,
						},
					},
				},
				Name: "quarter",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 50,
							Line:   32,
						},
						File:   "date.flux",
						Source: "(t: T) => int where T: Timeable",
						Start: ast.Position{
							Column: 19,
							Line:   32,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 50,
								Line:   32,
							},
							File:   "date.flux",
							Source: "T: Timeable",
							Start: ast.Position{
								Column: 39,
								Line:   32,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   32,
								},
								File:   "date.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 42,
									Line:   32,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   32,
								},
								File:   "date.flux",
								Source: "T",
								Start: ast.Position{
									Column: 39,
									Line:   32,
								},
							},
						},
						Name: "T",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 32,
								Line:   32,
							},
							File:   "date.flux",
							Source: "(t: T) => int",
							Start: ast.Position{
								Column: 19,
								Line:   32,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 24,
									Line:   32,
								},
								File:   "date.flux",
								Source: "t: T",
								Start: ast.Position{
									Column: 20,
									Line:   32,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   32,
									},
									File:   "date.flux",
									Source: "t",
									Start: ast.Position{
										Column: 20,
										Line:   32,
									},
								},
							},
							Name: "t",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   32,
									},
									File:   "date.flux",
									Source: "T",
									Start: ast.Position{
										Column: 23,
										Line:   32,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   32,
										},
										File:   "date.flux",
										Source: "T",
										Start: ast.Position{
											Column: 23,
											Line:   32,
										},
									},
								},
								Name: "T",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   32,
								},
								File:   "date.flux",
								Source: "int",
								Start: ast.Position{
									Column: 29,
									Line:   32,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   32,
									},
									File:   "date.flux",
									Source: "int",
									Start: ast.Position{
										Column: 29,
										Line:   32,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Millisecond returns the milliseconds for a specified time. Results range from [0-999].\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   35,
					},
					File:   "date.flux",
					Source: "builtin millisecond",
					Start: ast.Position{
						Column: 1,
						Line:   35,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   35,
						},
						File:   "date.flux",
						Source: "millisecond",
						Start: ast.Position{
							Column: 9,
							Line:   35,
						},
					},
				},
				Name: "millisecond",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 54,
							Line:   35,
						},
						File:   "date.flux",
						Source: "(t: T) => int where T: Timeable",
						Start: ast.Position{
							Column: 23,
							Line:   35,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 54,
								Line:   35,
							},
							File:   "date.flux",
							Source: "T: Timeable",
							Start: ast.Position{
								Column: 43,
								Line:   35,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   35,
								},
								File:   "date.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 46,
									Line:   35,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   35,
								},
								File:   "date.flux",
								Source: "T",
								Start: ast.Position{
									Column: 43,
									Line:   35,
								},
							},
						},
						Name: "T",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   35,
							},
							File:   "date.flux",
							Source: "(t: T) => int",
							Start: ast.Position{
								Column: 23,
								Line:   35,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   35,
								},
								File:   "date.flux",
								Source: "t: T",
								Start: ast.Position{
									Column: 24,
									Line:   35,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   35,
									},
									File:   "date.flux",
									Source: "t",
									Start: ast.Position{
										Column: 24,
										Line:   35,
									},
								},
							},
							Name: "t",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   35,
									},
									File:   "date.flux",
									Source: "T",
									Start: ast.Position{
										Column: 27,
										Line:   35,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   35,
										},
										File:   "date.flux",
										Source: "T",
										Start: ast.Position{
											Column: 27,
											Line:   35,
										},
									},
								},
								Name: "T",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   35,
								},
								File:   "date.flux",
								Source: "int",
								Start: ast.Position{
									Column: 33,
									Line:   35,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   35,
									},
									File:   "date.flux",
									Source: "int",
									Start: ast.Position{
										Column: 33,
										Line:   35,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Microsecond returns the microseconds for a specified time. Results range from [0-999999].\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   38,
					},
					File:   "date.flux",
					Source: "builtin microsecond",
					Start: ast.Position{
						Column: 1,
						Line:   38,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   38,
						},
						File:   "date.flux",
						Source: "microsecond",
						Start: ast.Position{
							Column: 9,
							Line:   38,
						},
					},
				},
				Name: "microsecond",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 54,
							Line:   38,
						},
						File:   "date.flux",
						Source: "(t: T) => int where T: Timeable",
						Start: ast.Position{
							Column: 23,
							Line:   38,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 54,
								Line:   38,
							},
							File:   "date.flux",
							Source: "T: Timeable",
							Start: ast.Position{
								Column: 43,
								Line:   38,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 54,
									Line:   38,
								},
								File:   "date.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 46,
									Line:   38,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 44,
									Line:   38,
								},
								File:   "date.flux",
								Source: "T",
								Start: ast.Position{
									Column: 43,
									Line:   38,
								},
							},
						},
						Name: "T",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   38,
							},
							File:   "date.flux",
							Source: "(t: T) => int",
							Start: ast.Position{
								Column: 23,
								Line:   38,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   38,
								},
								File:   "date.flux",
								Source: "t: T",
								Start: ast.Position{
									Column: 24,
									Line:   38,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   38,
									},
									File:   "date.flux",
									Source: "t",
									Start: ast.Position{
										Column: 24,
										Line:   38,
									},
								},
							},
							Name: "t",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   38,
									},
									File:   "date.flux",
									Source: "T",
									Start: ast.Position{
										Column: 27,
										Line:   38,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   38,
										},
										File:   "date.flux",
										Source: "T",
										Start: ast.Position{
											Column: 27,
											Line:   38,
										},
									},
								},
								Name: "T",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 36,
									Line:   38,
								},
								File:   "date.flux",
								Source: "int",
								Start: ast.Position{
									Column: 33,
									Line:   38,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 36,
										Line:   38,
									},
									File:   "date.flux",
									Source: "int",
									Start: ast.Position{
										Column: 33,
										Line:   38,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Nanosecond returns the nanoseconds for a specified time. Results range from [0-999999999].\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 19,
						Line:   41,
					},
					File:   "date.flux",
					Source: "builtin nanosecond",
					Start: ast.Position{
						Column: 1,
						Line:   41,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 19,
							Line:   41,
						},
						File:   "date.flux",
						Source: "nanosecond",
						Start: ast.Position{
							Column: 9,
							Line:   41,
						},
					},
				},
				Name: "nanosecond",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 53,
							Line:   41,
						},
						File:   "date.flux",
						Source: "(t: T) => int where T: Timeable",
						Start: ast.Position{
							Column: 22,
							Line:   41,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 53,
								Line:   41,
							},
							File:   "date.flux",
							Source: "T: Timeable",
							Start: ast.Position{
								Column: 42,
								Line:   41,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   41,
								},
								File:   "date.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 45,
									Line:   41,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   41,
								},
								File:   "date.flux",
								Source: "T",
								Start: ast.Position{
									Column: 42,
									Line:   41,
								},
							},
						},
						Name: "T",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   41,
							},
							File:   "date.flux",
							Source: "(t: T) => int",
							Start: ast.Position{
								Column: 22,
								Line:   41,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   41,
								},
								File:   "date.flux",
								Source: "t: T",
								Start: ast.Position{
									Column: 23,
									Line:   41,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 24,
										Line:   41,
									},
									File:   "date.flux",
									Source: "t",
									Start: ast.Position{
										Column: 23,
										Line:   41,
									},
								},
							},
							Name: "t",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 27,
										Line:   41,
									},
									File:   "date.flux",
									Source: "T",
									Start: ast.Position{
										Column: 26,
										Line:   41,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   41,
										},
										File:   "date.flux",
										Source: "T",
										Start: ast.Position{
											Column: 26,
											Line:   41,
										},
									},
								},
								Name: "T",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   41,
								},
								File:   "date.flux",
								Source: "int",
								Start: ast.Position{
									Column: 32,
									Line:   41,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   41,
									},
									File:   "date.flux",
									Source: "int",
									Start: ast.Position{
										Column: 32,
										Line:   41,
									},
								},
							},
							Name: "int",
						},
					},
				},
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Truncate returns a time truncated to the specified duration unit.\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   44,
					},
					File:   "date.flux",
					Source: "builtin truncate",
					Start: ast.Position{
						Column: 1,
						Line:   44,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   44,
						},
						File:   "date.flux",
						Source: "truncate",
						Start: ast.Position{
							Column: 9,
							Line:   44,
						},
					},
				},
				Name: "truncate",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 68,
							Line:   44,
						},
						File:   "date.flux",
						Source: "(t: T, unit: duration) => time where T: Timeable",
						Start: ast.Position{
							Column: 20,
							Line:   44,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{&ast.TypeConstraint{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 68,
								Line:   44,
							},
							File:   "date.flux",
							Source: "T: Timeable",
							Start: ast.Position{
								Column: 57,
								Line:   44,
							},
						},
					},
					Kinds: []*ast.Identifier{&ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 68,
									Line:   44,
								},
								File:   "date.flux",
								Source: "Timeable",
								Start: ast.Position{
									Column: 60,
									Line:   44,
								},
							},
						},
						Name: "Timeable",
					}},
					Tvar: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 58,
									Line:   44,
								},
								File:   "date.flux",
								Source: "T",
								Start: ast.Position{
									Column: 57,
									Line:   44,
								},
							},
						},
						Name: "T",
					},
				}},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 50,
								Line:   44,
							},
							File:   "date.flux",
							Source: "(t: T, unit: duration) => time",
							Start: ast.Position{
								Column: 20,
								Line:   44,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   44,
								},
								File:   "date.flux",
								Source: "t: T",
								Start: ast.Position{
									Column: 21,
									Line:   44,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   44,
									},
									File:   "date.flux",
									Source: "t",
									Start: ast.Position{
										Column: 21,
										Line:   44,
									},
								},
							},
							Name: "t",
						},
						Ty: &ast.TvarType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   44,
									},
									File:   "date.flux",
									Source: "T",
									Start: ast.Position{
										Column: 24,
										Line:   44,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   44,
										},
										File:   "date.flux",
										Source: "T",
										Start: ast.Position{
											Column: 24,
											Line:   44,
										},
									},
								},
								Name: "T",
							},
						},
					}, &ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 41,
									Line:   44,
								},
								File:   "date.flux",
								Source: "unit: duration",
								Start: ast.Position{
									Column: 27,
									Line:   44,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   44,
									},
									File:   "date.flux",
									Source: "unit",
									Start: ast.Position{
										Column: 27,
										Line:   44,
									},
								},
							},
							Name: "unit",
						},
						Ty: &ast.NamedType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 41,
										Line:   44,
									},
									File:   "date.flux",
									Source: "duration",
									Start: ast.Position{
										Column: 33,
										Line:   44,
									},
								},
							},
							ID: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   44,
										},
										File:   "date.flux",
										Source: "duration",
										Start: ast.Position{
											Column: 33,
											Line:   44,
										},
									},
								},
								Name: "duration",
							},
						},
					}},
					Return: &ast.NamedType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 50,
									Line:   44,
								},
								File:   "date.flux",
								Source: "time",
								Start: ast.Position{
									Column: 46,
									Line:   44,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 50,
										Line:   44,
									},
									File:   "date.flux",
									Source: "time",
									Start: ast.Position{
										Column: 46,
										Line:   44,
									},
								},
							},
							Name: "time",
						},
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 11,
						Line:   47,
					},
					File:   "date.flux",
					Source: "Sunday = 0",
					Start: ast.Position{
						Column: 1,
						Line:   47,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// Sunday is a constant that represents Sunday as a day of the week\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   47,
						},
						File:   "date.flux",
						Source: "Sunday",
						Start: ast.Position{
							Column: 1,
							Line:   47,
						},
					},
				},
				Name: "Sunday",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   47,
						},
						File:   "date.flux",
						Source: "0",
						Start: ast.Position{
							Column: 10,
							Line:   47,
						},
					},
				},
				Value: int64(0),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 11,
						Line:   50,
					},
					File:   "date.flux",
					Source: "Monday = 1",
					Start: ast.Position{
						Column: 1,
						Line:   50,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// Monday is a constant that represents Monday as a day of the week.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   50,
						},
						File:   "date.flux",
						Source: "Monday",
						Start: ast.Position{
							Column: 1,
							Line:   50,
						},
					},
				},
				Name: "Monday",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   50,
						},
						File:   "date.flux",
						Source: "1",
						Start: ast.Position{
							Column: 10,
							Line:   50,
						},
					},
				},
				Value: int64(1),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   53,
					},
					File:   "date.flux",
					Source: "Tuesday = 2",
					Start: ast.Position{
						Column: 1,
						Line:   53,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// Tuesday is a constant that represents Tuesday as a day of the week.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   53,
						},
						File:   "date.flux",
						Source: "Tuesday",
						Start: ast.Position{
							Column: 1,
							Line:   53,
						},
					},
				},
				Name: "Tuesday",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   53,
						},
						File:   "date.flux",
						Source: "2",
						Start: ast.Position{
							Column: 11,
							Line:   53,
						},
					},
				},
				Value: int64(2),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   56,
					},
					File:   "date.flux",
					Source: "Wednesday = 3",
					Start: ast.Position{
						Column: 1,
						Line:   56,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// Wednesday is a constant that represents Wednesday as a day of the week.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   56,
						},
						File:   "date.flux",
						Source: "Wednesday",
						Start: ast.Position{
							Column: 1,
							Line:   56,
						},
					},
				},
				Name: "Wednesday",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   56,
						},
						File:   "date.flux",
						Source: "3",
						Start: ast.Position{
							Column: 13,
							Line:   56,
						},
					},
				},
				Value: int64(3),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   59,
					},
					File:   "date.flux",
					Source: "Thursday = 4",
					Start: ast.Position{
						Column: 1,
						Line:   59,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// Thursday is a constant that represents Thursday as a day of the week.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   59,
						},
						File:   "date.flux",
						Source: "Thursday",
						Start: ast.Position{
							Column: 1,
							Line:   59,
						},
					},
				},
				Name: "Thursday",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   59,
						},
						File:   "date.flux",
						Source: "4",
						Start: ast.Position{
							Column: 12,
							Line:   59,
						},
					},
				},
				Value: int64(4),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 11,
						Line:   62,
					},
					File:   "date.flux",
					Source: "Friday = 5",
					Start: ast.Position{
						Column: 1,
						Line:   62,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// Friday is a constant that represents Friday as a day of the week.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   62,
						},
						File:   "date.flux",
						Source: "Friday",
						Start: ast.Position{
							Column: 1,
							Line:   62,
						},
					},
				},
				Name: "Friday",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   62,
						},
						File:   "date.flux",
						Source: "5",
						Start: ast.Position{
							Column: 10,
							Line:   62,
						},
					},
				},
				Value: int64(5),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   65,
					},
					File:   "date.flux",
					Source: "Saturday = 6",
					Start: ast.Position{
						Column: 1,
						Line:   65,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// Saturday is a constant that represents Saturday as a day of the week.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   65,
						},
						File:   "date.flux",
						Source: "Saturday",
						Start: ast.Position{
							Column: 1,
							Line:   65,
						},
					},
				},
				Name: "Saturday",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   65,
						},
						File:   "date.flux",
						Source: "6",
						Start: ast.Position{
							Column: 12,
							Line:   65,
						},
					},
				},
				Value: int64(6),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 12,
						Line:   68,
					},
					File:   "date.flux",
					Source: "January = 1",
					Start: ast.Position{
						Column: 1,
						Line:   68,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// January is a constant that represents the month of January.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   68,
						},
						File:   "date.flux",
						Source: "January",
						Start: ast.Position{
							Column: 1,
							Line:   68,
						},
					},
				},
				Name: "January",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   68,
						},
						File:   "date.flux",
						Source: "1",
						Start: ast.Position{
							Column: 11,
							Line:   68,
						},
					},
				},
				Value: int64(1),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   71,
					},
					File:   "date.flux",
					Source: "February = 2",
					Start: ast.Position{
						Column: 1,
						Line:   71,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// February is a constant that represents the month of February.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   71,
						},
						File:   "date.flux",
						Source: "February",
						Start: ast.Position{
							Column: 1,
							Line:   71,
						},
					},
				},
				Name: "February",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   71,
						},
						File:   "date.flux",
						Source: "2",
						Start: ast.Position{
							Column: 12,
							Line:   71,
						},
					},
				},
				Value: int64(2),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 10,
						Line:   74,
					},
					File:   "date.flux",
					Source: "March = 3",
					Start: ast.Position{
						Column: 1,
						Line:   74,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// March is a constant that represents the month of March.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   74,
						},
						File:   "date.flux",
						Source: "March",
						Start: ast.Position{
							Column: 1,
							Line:   74,
						},
					},
				},
				Name: "March",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   74,
						},
						File:   "date.flux",
						Source: "3",
						Start: ast.Position{
							Column: 9,
							Line:   74,
						},
					},
				},
				Value: int64(3),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 10,
						Line:   77,
					},
					File:   "date.flux",
					Source: "April = 4",
					Start: ast.Position{
						Column: 1,
						Line:   77,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// April is a constant that represents the month of April.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   77,
						},
						File:   "date.flux",
						Source: "April",
						Start: ast.Position{
							Column: 1,
							Line:   77,
						},
					},
				},
				Name: "April",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   77,
						},
						File:   "date.flux",
						Source: "4",
						Start: ast.Position{
							Column: 9,
							Line:   77,
						},
					},
				},
				Value: int64(4),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 8,
						Line:   80,
					},
					File:   "date.flux",
					Source: "May = 5",
					Start: ast.Position{
						Column: 1,
						Line:   80,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// May is a constant that represents the month of May.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   80,
						},
						File:   "date.flux",
						Source: "May",
						Start: ast.Position{
							Column: 1,
							Line:   80,
						},
					},
				},
				Name: "May",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   80,
						},
						File:   "date.flux",
						Source: "5",
						Start: ast.Position{
							Column: 7,
							Line:   80,
						},
					},
				},
				Value: int64(5),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 9,
						Line:   83,
					},
					File:   "date.flux",
					Source: "June = 6",
					Start: ast.Position{
						Column: 1,
						Line:   83,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// June is a constant that represents the month of June.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   83,
						},
						File:   "date.flux",
						Source: "June",
						Start: ast.Position{
							Column: 1,
							Line:   83,
						},
					},
				},
				Name: "June",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   83,
						},
						File:   "date.flux",
						Source: "6",
						Start: ast.Position{
							Column: 8,
							Line:   83,
						},
					},
				},
				Value: int64(6),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 9,
						Line:   86,
					},
					File:   "date.flux",
					Source: "July = 7",
					Start: ast.Position{
						Column: 1,
						Line:   86,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// July is a constant that represents the month of July.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   86,
						},
						File:   "date.flux",
						Source: "July",
						Start: ast.Position{
							Column: 1,
							Line:   86,
						},
					},
				},
				Name: "July",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   86,
						},
						File:   "date.flux",
						Source: "7",
						Start: ast.Position{
							Column: 8,
							Line:   86,
						},
					},
				},
				Value: int64(7),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 11,
						Line:   89,
					},
					File:   "date.flux",
					Source: "August = 8",
					Start: ast.Position{
						Column: 1,
						Line:   89,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// August is a constant that represents the month of August.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   89,
						},
						File:   "date.flux",
						Source: "August",
						Start: ast.Position{
							Column: 1,
							Line:   89,
						},
					},
				},
				Name: "August",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 11,
							Line:   89,
						},
						File:   "date.flux",
						Source: "8",
						Start: ast.Position{
							Column: 10,
							Line:   89,
						},
					},
				},
				Value: int64(8),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   92,
					},
					File:   "date.flux",
					Source: "September = 9",
					Start: ast.Position{
						Column: 1,
						Line:   92,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// September is a constant that represents the month of September.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   92,
						},
						File:   "date.flux",
						Source: "September",
						Start: ast.Position{
							Column: 1,
							Line:   92,
						},
					},
				},
				Name: "September",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   92,
						},
						File:   "date.flux",
						Source: "9",
						Start: ast.Position{
							Column: 13,
							Line:   92,
						},
					},
				},
				Value: int64(9),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   95,
					},
					File:   "date.flux",
					Source: "October = 10",
					Start: ast.Position{
						Column: 1,
						Line:   95,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// October is a constant that represents the month of October.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   95,
						},
						File:   "date.flux",
						Source: "October",
						Start: ast.Position{
							Column: 1,
							Line:   95,
						},
					},
				},
				Name: "October",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   95,
						},
						File:   "date.flux",
						Source: "10",
						Start: ast.Position{
							Column: 11,
							Line:   95,
						},
					},
				},
				Value: int64(10),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   98,
					},
					File:   "date.flux",
					Source: "November = 11",
					Start: ast.Position{
						Column: 1,
						Line:   98,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// November is a constant that represents the month of November.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   98,
						},
						File:   "date.flux",
						Source: "November",
						Start: ast.Position{
							Column: 1,
							Line:   98,
						},
					},
				},
				Name: "November",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   98,
						},
						File:   "date.flux",
						Source: "11",
						Start: ast.Position{
							Column: 12,
							Line:   98,
						},
					},
				},
				Value: int64(11),
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   101,
					},
					File:   "date.flux",
					Source: "December = 12",
					Start: ast.Position{
						Column: 1,
						Line:   101,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// December is a constant that represents the month of December.\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   101,
						},
						File:   "date.flux",
						Source: "December",
						Start: ast.Position{
							Column: 1,
							Line:   101,
						},
					},
				},
				Name: "December",
			},
			Init: &ast.IntegerLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   101,
						},
						File:   "date.flux",
						Source: "12",
						Start: ast.Position{
							Column: 12,
							Line:   101,
						},
					},
				},
				Value: int64(12),
			},
		}},
		Eof:      nil,
		Imports:  nil,
		Metadata: "parser-type=rust",
		Name:     "date.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   1,
					},
					File:   "date.flux",
					Source: "package date",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   1,
						},
						File:   "date.flux",
						Source: "date",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "date",
			},
		},
	}},
	Package: "date",
	Path:    "date",
}
