// DO NOT EDIT: This file is autogenerated via the builtin command.

package sample

import (
	ast "github.com/influxdata/flux/ast"
	parser "github.com/influxdata/flux/internal/parser"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   407,
				},
				File:   "sample.flux",
				Source: "package sample\n\n\nimport \"csv\"\n\noption start = 2021-01-01T00:00:00Z\noption stop = 2021-01-01T00:01:00Z\n\n_numeric = \"\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,double\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,-2.18\n,,0,2021-01-01T00:00:10Z,t1,10.92\n,,0,2021-01-01T00:00:20Z,t1,7.35\n,,0,2021-01-01T00:00:30Z,t1,17.53\n,,0,2021-01-01T00:00:40Z,t1,15.23\n,,0,2021-01-01T00:00:50Z,t1,4.43\n,,1,2021-01-01T00:00:00Z,t2,19.85\n,,1,2021-01-01T00:00:10Z,t2,4.97\n,,1,2021-01-01T00:00:20Z,t2,-3.75\n,,1,2021-01-01T00:00:30Z,t2,19.77\n,,1,2021-01-01T00:00:40Z,t2,13.86\n,,1,2021-01-01T00:00:50Z,t2,1.86\n\"\n\n_numericNull = \"\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,double\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,-2.18\n,,0,2021-01-01T00:00:10Z,t1,\n,,0,2021-01-01T00:00:20Z,t1,7.35\n,,0,2021-01-01T00:00:30Z,t1,\n,,0,2021-01-01T00:00:40Z,t1,\n,,0,2021-01-01T00:00:50Z,t1,4.43\n,,1,2021-01-01T00:00:00Z,t2,\n,,1,2021-01-01T00:00:10Z,t2,4.97\n,,1,2021-01-01T00:00:20Z,t2,-3.75\n,,1,2021-01-01T00:00:30Z,t2,19.77\n,,1,2021-01-01T00:00:40Z,t2,\n,,1,2021-01-01T00:00:50Z,t2,1.86\n\"\n\n_string = \"\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,string\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,smpl_g9qczs\n,,0,2021-01-01T00:00:10Z,t1,smpl_0mgv9n\n,,0,2021-01-01T00:00:20Z,t1,smpl_phw664\n,,0,2021-01-01T00:00:30Z,t1,smpl_guvzy4\n,,0,2021-01-01T00:00:40Z,t1,smpl_5v3cce\n,,0,2021-01-01T00:00:50Z,t1,smpl_s9fmgy\n,,1,2021-01-01T00:00:00Z,t2,smpl_b5eida\n,,1,2021-01-01T00:00:10Z,t2,smpl_eu4oxp\n,,1,2021-01-01T00:00:20Z,t2,smpl_5g7tz4\n,,1,2021-01-01T00:00:30Z,t2,smpl_sox1ut\n,,1,2021-01-01T00:00:40Z,t2,smpl_wfm757\n,,1,2021-01-01T00:00:50Z,t2,smpl_dtn2bv\n\"\n\n_stringNull = \"\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,string\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,smpl_g9qczs\n,,0,2021-01-01T00:00:10Z,t1,\n,,0,2021-01-01T00:00:20Z,t1,smpl_phw664\n,,0,2021-01-01T00:00:30Z,t1,\n,,0,2021-01-01T00:00:40Z,t1,\n,,0,2021-01-01T00:00:50Z,t1,smpl_s9fmgy\n,,1,2021-01-01T00:00:00Z,t2,\n,,1,2021-01-01T00:00:10Z,t2,smpl_eu4oxp\n,,1,2021-01-01T00:00:20Z,t2,smpl_5g7tz4\n,,1,2021-01-01T00:00:30Z,t2,smpl_sox1ut\n,,1,2021-01-01T00:00:40Z,t2,\n,,1,2021-01-01T00:00:50Z,t2,smpl_dtn2bv\n\"\n\n_bool = \"#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,boolean\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,true\n,,0,2021-01-01T00:00:10Z,t1,true\n,,0,2021-01-01T00:00:20Z,t1,false\n,,0,2021-01-01T00:00:30Z,t1,true\n,,0,2021-01-01T00:00:40Z,t1,false\n,,0,2021-01-01T00:00:50Z,t1,false\n,,1,2021-01-01T00:00:00Z,t2,false\n,,1,2021-01-01T00:00:10Z,t2,true\n,,1,2021-01-01T00:00:20Z,t2,false\n,,1,2021-01-01T00:00:30Z,t2,true\n,,1,2021-01-01T00:00:40Z,t2,true\n,,1,2021-01-01T00:00:50Z,t2,false\n\"\n\n_boolNull = \"#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,boolean\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,true\n,,0,2021-01-01T00:00:10Z,t1,\n,,0,2021-01-01T00:00:20Z,t1,false\n,,0,2021-01-01T00:00:30Z,t1,\n,,0,2021-01-01T00:00:40Z,t1,\n,,0,2021-01-01T00:00:50Z,t1,false\n,,1,2021-01-01T00:00:00Z,t2,\n,,1,2021-01-01T00:00:10Z,t2,true\n,,1,2021-01-01T00:00:20Z,t2,false\n,,1,2021-01-01T00:00:30Z,t2,true\n,,1,2021-01-01T00:00:40Z,t2,\n,,1,2021-01-01T00:00:50Z,t2,false\n\"\n\n// float returns a sample data set with float values.\n//\n// ## Parameters\n//\n// - `includeNull` indicates whether or not to include null values in the returned dataset.\n//   Default is `false`.\n//\n// ## Output basic sample data with float values\n//\n// ```\n// import \"sample\"\n//\n// sample.float()\n// ```\n// \n// ## Output data\n// \n// | tid | _time                | _value |\n// | :-: | :------------------- | -----: |\n// | t1  | 2021-01-01T00:00:00Z |  -2.18 |\n// | t1  | 2021-01-01T00:00:10Z |  10.92 |\n// | t1  | 2021-01-01T00:00:20Z |   7.35 |\n// | t1  | 2021-01-01T00:00:30Z |  17.53 |\n// | t1  | 2021-01-01T00:00:40Z |  15.23 |\n// | t1  | 2021-01-01T00:00:50Z |   4.43 |\n\n// | tid | _time                | _value |\n// | :-: | :------------------- | -----: |\n// | t2  | 2021-01-01T00:00:00Z |  19.85 |\n// | t2  | 2021-01-01T00:00:10Z |   4.97 |\n// | t2  | 2021-01-01T00:00:20Z |  -3.75 |\n// | t2  | 2021-01-01T00:00:30Z |  19.77 |\n// | t2  | 2021-01-01T00:00:40Z |  13.86 |\n// | t2  | 2021-01-01T00:00:50Z |   1.86 |\n// \nfloat = (includeNull=false) => {\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData)\n}\n\n// int returns a sample data set with integer values.\n//\n// ## Parameters\n//\n// - `includeNull` indicates whether or not to include null values in the returned dataset.\n//   Default is `false`.\n//\n// ## Output basic sample data with integer values\n//\n// ```\n// import \"sample\"\n//\n// sample.int()\n// ```\n// \n// ## Output data\n// \n// | tid | _time                | _value |\n// | :-: | :------------------- | -----: |\n// | t1  | 2021-01-01T00:00:00Z |     -2 |\n// | t1  | 2021-01-01T00:00:10Z |     10 |\n// | t1  | 2021-01-01T00:00:20Z |      7 |\n// | t1  | 2021-01-01T00:00:30Z |     17 |\n// | t1  | 2021-01-01T00:00:40Z |     15 |\n// | t1  | 2021-01-01T00:00:50Z |      4 |\n\n// | tid | _time                | _value |\n// | :-: | :------------------- | -----: |\n// | t2  | 2021-01-01T00:00:00Z |     19 |\n// | t2  | 2021-01-01T00:00:10Z |      4 |\n// | t2  | 2021-01-01T00:00:20Z |     -3 |\n// | t2  | 2021-01-01T00:00:30Z |     19 |\n// | t2  | 2021-01-01T00:00:40Z |     13 |\n// | t2  | 2021-01-01T00:00:50Z |      1 |\n//\nint = (includeNull=false) => {\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData) |> toInt()\n}\n\n// uint returns a sample data set with unsigned integer values.\n//\n// ## Parameters\n//\n// - `includeNull` indicates whether or not to include null values in the returned dataset.\n//   Default is `false`.\n//\n// ## Output basic sample data with unsigned integer values\n//\n// ```\n// import \"sample\"\n//\n// sample.uint()\n// ```\n// \n// ## Output data\n// \n// | tid | _time                |               _value |\n// | :-: | :------------------- | -------------------: |\n// | t1  | 2021-01-01T00:00:00Z | 18446744073709551614 |\n// | t1  | 2021-01-01T00:00:10Z |                   10 |\n// | t1  | 2021-01-01T00:00:20Z |                    7 |\n// | t1  | 2021-01-01T00:00:30Z |                   17 |\n// | t1  | 2021-01-01T00:00:40Z |                   15 |\n// | t1  | 2021-01-01T00:00:50Z |                    4 |\n// \n// | tid | _time                |               _value |\n// | :-: | :------------------- | -------------------: |\n// | t2  | 2021-01-01T00:00:00Z |                   19 |\n// | t2  | 2021-01-01T00:00:10Z |                    4 |\n// | t2  | 2021-01-01T00:00:20Z | 18446744073709551613 |\n// | t2  | 2021-01-01T00:00:30Z |                   19 |\n// | t2  | 2021-01-01T00:00:40Z |                   13 |\n// | t2  | 2021-01-01T00:00:50Z |                    1 |\n//\nuint = (includeNull=false) => {\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData) |> toUInt()\n}\n\n// string returns a sample data set with string values.\n//\n// ## Parameters\n//\n// - `includeNull` indicates whether or not to include null values in the returned dataset.\n//   Default is `false`.\n//\n// ## Output basic sample data with string values\n//\n// ```\n// import \"sample\"\n//\n// sample.string()\n// ```\n//\n// ## Output data\n// \n// | tid | _time                |      _value |\n// | :-- | :------------------- | ----------: |\n// | t1  | 2021-01-01T00:00:00Z | smpl_g9qczs |\n// | t1  | 2021-01-01T00:00:10Z | smpl_0mgv9n |\n// | t1  | 2021-01-01T00:00:20Z | smpl_phw664 |\n// | t1  | 2021-01-01T00:00:30Z | smpl_guvzy4 |\n// | t1  | 2021-01-01T00:00:40Z | smpl_5v3cce |\n// | t1  | 2021-01-01T00:00:50Z | smpl_s9fmgy |\n// \n// | tid | _time                |      _value |\n// | :-- | :------------------- | ----------: |\n// | t2  | 2021-01-01T00:00:00Z | smpl_b5eida |\n// | t2  | 2021-01-01T00:00:10Z | smpl_eu4oxp |\n// | t2  | 2021-01-01T00:00:20Z | smpl_5g7tz4 |\n// | t2  | 2021-01-01T00:00:30Z | smpl_sox1ut |\n// | t2  | 2021-01-01T00:00:40Z | smpl_wfm757 |\n// | t2  | 2021-01-01T00:00:50Z | smpl_dtn2bv |\n// \nstring = (includeNull=false) => {\n    _csvData = if not includeNull then _string else _stringNull\n\n    return csv.from(csv: _csvData)\n}\n\n// bool returns a sample data set with boolean values.\n//\n// ## Parameters\n//\n// - `includeNull` indicates whether or not to include null values in the returned dataset.\n//   Default is `false`.\n//\n// ## Output basic sample data with boolean values\n//\n// ```\n// import \"sample\"\n//\n// sample.bool()\n// ```\n//\n// ## Output data\n// \n// | tid | _time                | _value |\n// | :-- | :------------------- | -----: |\n// | t1  | 2021-01-01T00:00:00Z |   true |\n// | t1  | 2021-01-01T00:00:10Z |   true |\n// | t1  | 2021-01-01T00:00:20Z |  false |\n// | t1  | 2021-01-01T00:00:30Z |   true |\n// | t1  | 2021-01-01T00:00:40Z |  false |\n// | t1  | 2021-01-01T00:00:50Z |  false |\n// \n// | tid | _time                | _value |\n// | :-- | :------------------- | -----: |\n// | t2  | 2021-01-01T00:00:00Z |  false |\n// | t2  | 2021-01-01T00:00:10Z |   true |\n// | t2  | 2021-01-01T00:00:20Z |  false |\n// | t2  | 2021-01-01T00:00:30Z |   true |\n// | t2  | 2021-01-01T00:00:40Z |   true |\n// | t2  | 2021-01-01T00:00:50Z |  false |\n// \nbool = (includeNull=false) => {\n    _csvData = if not includeNull then _bool else _boolNull\n\n    return csv.from(csv: _csvData)\n}\n\n// numericString returns a sample data set with numeric string values.\n//\n// ## Parameters\n//\n// - `includeNull` indicates whether or not to include null values in the returned dataset.\n//   Default is `false`.\n//\n// ## Output basic sample data with numeric string values\n//\n// ```\n// import \"sample\"\n//\n// sample.numericString()\n// ```\n// \n// ## Output data\n// \n// | tid | _time                | _value (string) |\n// | :-: | :------------------- | --------------: |\n// | t1  | 2021-01-01T00:00:00Z |           -2.18 |\n// | t1  | 2021-01-01T00:00:10Z |           10.92 |\n// | t1  | 2021-01-01T00:00:20Z |            7.35 |\n// | t1  | 2021-01-01T00:00:30Z |           17.53 |\n// | t1  | 2021-01-01T00:00:40Z |           15.23 |\n// | t1  | 2021-01-01T00:00:50Z |            4.43 |\n// \n// | tid | _time                | _value (string) |\n// | :-: | :------------------- | --------------: |\n// | t2  | 2021-01-01T00:00:00Z |           19.85 |\n// | t2  | 2021-01-01T00:00:10Z |            4.97 |\n// | t2  | 2021-01-01T00:00:20Z |           -3.75 |\n// | t2  | 2021-01-01T00:00:30Z |           19.77 |\n// | t2  | 2021-01-01T00:00:40Z |           13.86 |\n// | t2  | 2021-01-01T00:00:50Z |            1.86 |\n//\nnumericString = (includeNull=false) => {\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData) |> toString()\n}\n\n// numericBool returns a sample data set with numeric (integer) boolean values.\n//\n// ## Parameters\n//\n// - `includeNull` indicates whether or not to include null values in the returned dataset.\n//   Default is `false`.\n//\n// ## Output basic sample data with numeric boolean values\n//\n// ```\n// import \"sample\"\n//\n// sample.numericBool()\n// ```\n//\n// ## Output data\n// \n// | tid | _time                | _value |\n// | :-- | :------------------- | -----: |\n// | t1  | 2021-01-01T00:00:00Z |      1 |\n// | t1  | 2021-01-01T00:00:10Z |      1 |\n// | t1  | 2021-01-01T00:00:20Z |      0 |\n// | t1  | 2021-01-01T00:00:30Z |      1 |\n// | t1  | 2021-01-01T00:00:40Z |      0 |\n// | t1  | 2021-01-01T00:00:50Z |      0 |\n// \n// | tid | _time                | _value |\n// | :-- | :------------------- | -----: |\n// | t2  | 2021-01-01T00:00:00Z |      0 |\n// | t2  | 2021-01-01T00:00:10Z |      1 |\n// | t2  | 2021-01-01T00:00:20Z |      0 |\n// | t2  | 2021-01-01T00:00:30Z |      1 |\n// | t2  | 2021-01-01T00:00:40Z |      1 |\n// | t2  | 2021-01-01T00:00:50Z |      0 |\n// \nnumericBool = (includeNull=false) => {\n    _csvData = if not includeNull then _bool else _boolNull\n\n    return csv.from(csv: _csvData) |> toInt()\n}",
				Start: ast.Position{
					Column: 1,
					Line:   2,
				},
			},
		},
		Body: []ast.Statement{&ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 36,
							Line:   7,
						},
						File:   "sample.flux",
						Source: "start = 2021-01-01T00:00:00Z",
						Start: ast.Position{
							Column: 8,
							Line:   7,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   7,
							},
							File:   "sample.flux",
							Source: "start",
							Start: ast.Position{
								Column: 8,
								Line:   7,
							},
						},
					},
					Name: "start",
				},
				Init: &ast.DateTimeLiteral{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   7,
							},
							File:   "sample.flux",
							Source: "2021-01-01T00:00:00Z",
							Start: ast.Position{
								Column: 16,
								Line:   7,
							},
						},
					},
					Value: parser.MustParseTime("2021-01-01T00:00:00Z"),
				},
			},
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 36,
						Line:   7,
					},
					File:   "sample.flux",
					Source: "option start = 2021-01-01T00:00:00Z",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
		}, &ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 35,
							Line:   8,
						},
						File:   "sample.flux",
						Source: "stop = 2021-01-01T00:01:00Z",
						Start: ast.Position{
							Column: 8,
							Line:   8,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   8,
							},
							File:   "sample.flux",
							Source: "stop",
							Start: ast.Position{
								Column: 8,
								Line:   8,
							},
						},
					},
					Name: "stop",
				},
				Init: &ast.DateTimeLiteral{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   8,
							},
							File:   "sample.flux",
							Source: "2021-01-01T00:01:00Z",
							Start: ast.Position{
								Column: 15,
								Line:   8,
							},
						},
					},
					Value: parser.MustParseTime("2021-01-01T00:01:00Z"),
				},
			},
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 35,
						Line:   8,
					},
					File:   "sample.flux",
					Source: "option stop = 2021-01-01T00:01:00Z",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   27,
					},
					File:   "sample.flux",
					Source: "_numeric = \"\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,double\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,-2.18\n,,0,2021-01-01T00:00:10Z,t1,10.92\n,,0,2021-01-01T00:00:20Z,t1,7.35\n,,0,2021-01-01T00:00:30Z,t1,17.53\n,,0,2021-01-01T00:00:40Z,t1,15.23\n,,0,2021-01-01T00:00:50Z,t1,4.43\n,,1,2021-01-01T00:00:00Z,t2,19.85\n,,1,2021-01-01T00:00:10Z,t2,4.97\n,,1,2021-01-01T00:00:20Z,t2,-3.75\n,,1,2021-01-01T00:00:30Z,t2,19.77\n,,1,2021-01-01T00:00:40Z,t2,13.86\n,,1,2021-01-01T00:00:50Z,t2,1.86\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   10,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   10,
						},
						File:   "sample.flux",
						Source: "_numeric",
						Start: ast.Position{
							Column: 1,
							Line:   10,
						},
					},
				},
				Name: "_numeric",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   27,
						},
						File:   "sample.flux",
						Source: "\"\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,double\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,-2.18\n,,0,2021-01-01T00:00:10Z,t1,10.92\n,,0,2021-01-01T00:00:20Z,t1,7.35\n,,0,2021-01-01T00:00:30Z,t1,17.53\n,,0,2021-01-01T00:00:40Z,t1,15.23\n,,0,2021-01-01T00:00:50Z,t1,4.43\n,,1,2021-01-01T00:00:00Z,t2,19.85\n,,1,2021-01-01T00:00:10Z,t2,4.97\n,,1,2021-01-01T00:00:20Z,t2,-3.75\n,,1,2021-01-01T00:00:30Z,t2,19.77\n,,1,2021-01-01T00:00:40Z,t2,13.86\n,,1,2021-01-01T00:00:50Z,t2,1.86\n\"",
						Start: ast.Position{
							Column: 12,
							Line:   10,
						},
					},
				},
				Value: "\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,double\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,-2.18\n,,0,2021-01-01T00:00:10Z,t1,10.92\n,,0,2021-01-01T00:00:20Z,t1,7.35\n,,0,2021-01-01T00:00:30Z,t1,17.53\n,,0,2021-01-01T00:00:40Z,t1,15.23\n,,0,2021-01-01T00:00:50Z,t1,4.43\n,,1,2021-01-01T00:00:00Z,t2,19.85\n,,1,2021-01-01T00:00:10Z,t2,4.97\n,,1,2021-01-01T00:00:20Z,t2,-3.75\n,,1,2021-01-01T00:00:30Z,t2,19.77\n,,1,2021-01-01T00:00:40Z,t2,13.86\n,,1,2021-01-01T00:00:50Z,t2,1.86\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   46,
					},
					File:   "sample.flux",
					Source: "_numericNull = \"\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,double\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,-2.18\n,,0,2021-01-01T00:00:10Z,t1,\n,,0,2021-01-01T00:00:20Z,t1,7.35\n,,0,2021-01-01T00:00:30Z,t1,\n,,0,2021-01-01T00:00:40Z,t1,\n,,0,2021-01-01T00:00:50Z,t1,4.43\n,,1,2021-01-01T00:00:00Z,t2,\n,,1,2021-01-01T00:00:10Z,t2,4.97\n,,1,2021-01-01T00:00:20Z,t2,-3.75\n,,1,2021-01-01T00:00:30Z,t2,19.77\n,,1,2021-01-01T00:00:40Z,t2,\n,,1,2021-01-01T00:00:50Z,t2,1.86\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   29,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   29,
						},
						File:   "sample.flux",
						Source: "_numericNull",
						Start: ast.Position{
							Column: 1,
							Line:   29,
						},
					},
				},
				Name: "_numericNull",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   46,
						},
						File:   "sample.flux",
						Source: "\"\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,double\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,-2.18\n,,0,2021-01-01T00:00:10Z,t1,\n,,0,2021-01-01T00:00:20Z,t1,7.35\n,,0,2021-01-01T00:00:30Z,t1,\n,,0,2021-01-01T00:00:40Z,t1,\n,,0,2021-01-01T00:00:50Z,t1,4.43\n,,1,2021-01-01T00:00:00Z,t2,\n,,1,2021-01-01T00:00:10Z,t2,4.97\n,,1,2021-01-01T00:00:20Z,t2,-3.75\n,,1,2021-01-01T00:00:30Z,t2,19.77\n,,1,2021-01-01T00:00:40Z,t2,\n,,1,2021-01-01T00:00:50Z,t2,1.86\n\"",
						Start: ast.Position{
							Column: 16,
							Line:   29,
						},
					},
				},
				Value: "\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,double\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,-2.18\n,,0,2021-01-01T00:00:10Z,t1,\n,,0,2021-01-01T00:00:20Z,t1,7.35\n,,0,2021-01-01T00:00:30Z,t1,\n,,0,2021-01-01T00:00:40Z,t1,\n,,0,2021-01-01T00:00:50Z,t1,4.43\n,,1,2021-01-01T00:00:00Z,t2,\n,,1,2021-01-01T00:00:10Z,t2,4.97\n,,1,2021-01-01T00:00:20Z,t2,-3.75\n,,1,2021-01-01T00:00:30Z,t2,19.77\n,,1,2021-01-01T00:00:40Z,t2,\n,,1,2021-01-01T00:00:50Z,t2,1.86\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   65,
					},
					File:   "sample.flux",
					Source: "_string = \"\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,string\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,smpl_g9qczs\n,,0,2021-01-01T00:00:10Z,t1,smpl_0mgv9n\n,,0,2021-01-01T00:00:20Z,t1,smpl_phw664\n,,0,2021-01-01T00:00:30Z,t1,smpl_guvzy4\n,,0,2021-01-01T00:00:40Z,t1,smpl_5v3cce\n,,0,2021-01-01T00:00:50Z,t1,smpl_s9fmgy\n,,1,2021-01-01T00:00:00Z,t2,smpl_b5eida\n,,1,2021-01-01T00:00:10Z,t2,smpl_eu4oxp\n,,1,2021-01-01T00:00:20Z,t2,smpl_5g7tz4\n,,1,2021-01-01T00:00:30Z,t2,smpl_sox1ut\n,,1,2021-01-01T00:00:40Z,t2,smpl_wfm757\n,,1,2021-01-01T00:00:50Z,t2,smpl_dtn2bv\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   48,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   48,
						},
						File:   "sample.flux",
						Source: "_string",
						Start: ast.Position{
							Column: 1,
							Line:   48,
						},
					},
				},
				Name: "_string",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   65,
						},
						File:   "sample.flux",
						Source: "\"\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,string\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,smpl_g9qczs\n,,0,2021-01-01T00:00:10Z,t1,smpl_0mgv9n\n,,0,2021-01-01T00:00:20Z,t1,smpl_phw664\n,,0,2021-01-01T00:00:30Z,t1,smpl_guvzy4\n,,0,2021-01-01T00:00:40Z,t1,smpl_5v3cce\n,,0,2021-01-01T00:00:50Z,t1,smpl_s9fmgy\n,,1,2021-01-01T00:00:00Z,t2,smpl_b5eida\n,,1,2021-01-01T00:00:10Z,t2,smpl_eu4oxp\n,,1,2021-01-01T00:00:20Z,t2,smpl_5g7tz4\n,,1,2021-01-01T00:00:30Z,t2,smpl_sox1ut\n,,1,2021-01-01T00:00:40Z,t2,smpl_wfm757\n,,1,2021-01-01T00:00:50Z,t2,smpl_dtn2bv\n\"",
						Start: ast.Position{
							Column: 11,
							Line:   48,
						},
					},
				},
				Value: "\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,string\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,smpl_g9qczs\n,,0,2021-01-01T00:00:10Z,t1,smpl_0mgv9n\n,,0,2021-01-01T00:00:20Z,t1,smpl_phw664\n,,0,2021-01-01T00:00:30Z,t1,smpl_guvzy4\n,,0,2021-01-01T00:00:40Z,t1,smpl_5v3cce\n,,0,2021-01-01T00:00:50Z,t1,smpl_s9fmgy\n,,1,2021-01-01T00:00:00Z,t2,smpl_b5eida\n,,1,2021-01-01T00:00:10Z,t2,smpl_eu4oxp\n,,1,2021-01-01T00:00:20Z,t2,smpl_5g7tz4\n,,1,2021-01-01T00:00:30Z,t2,smpl_sox1ut\n,,1,2021-01-01T00:00:40Z,t2,smpl_wfm757\n,,1,2021-01-01T00:00:50Z,t2,smpl_dtn2bv\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   84,
					},
					File:   "sample.flux",
					Source: "_stringNull = \"\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,string\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,smpl_g9qczs\n,,0,2021-01-01T00:00:10Z,t1,\n,,0,2021-01-01T00:00:20Z,t1,smpl_phw664\n,,0,2021-01-01T00:00:30Z,t1,\n,,0,2021-01-01T00:00:40Z,t1,\n,,0,2021-01-01T00:00:50Z,t1,smpl_s9fmgy\n,,1,2021-01-01T00:00:00Z,t2,\n,,1,2021-01-01T00:00:10Z,t2,smpl_eu4oxp\n,,1,2021-01-01T00:00:20Z,t2,smpl_5g7tz4\n,,1,2021-01-01T00:00:30Z,t2,smpl_sox1ut\n,,1,2021-01-01T00:00:40Z,t2,\n,,1,2021-01-01T00:00:50Z,t2,smpl_dtn2bv\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   67,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   67,
						},
						File:   "sample.flux",
						Source: "_stringNull",
						Start: ast.Position{
							Column: 1,
							Line:   67,
						},
					},
				},
				Name: "_stringNull",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   84,
						},
						File:   "sample.flux",
						Source: "\"\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,string\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,smpl_g9qczs\n,,0,2021-01-01T00:00:10Z,t1,\n,,0,2021-01-01T00:00:20Z,t1,smpl_phw664\n,,0,2021-01-01T00:00:30Z,t1,\n,,0,2021-01-01T00:00:40Z,t1,\n,,0,2021-01-01T00:00:50Z,t1,smpl_s9fmgy\n,,1,2021-01-01T00:00:00Z,t2,\n,,1,2021-01-01T00:00:10Z,t2,smpl_eu4oxp\n,,1,2021-01-01T00:00:20Z,t2,smpl_5g7tz4\n,,1,2021-01-01T00:00:30Z,t2,smpl_sox1ut\n,,1,2021-01-01T00:00:40Z,t2,\n,,1,2021-01-01T00:00:50Z,t2,smpl_dtn2bv\n\"",
						Start: ast.Position{
							Column: 15,
							Line:   67,
						},
					},
				},
				Value: "\n#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,string\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,smpl_g9qczs\n,,0,2021-01-01T00:00:10Z,t1,\n,,0,2021-01-01T00:00:20Z,t1,smpl_phw664\n,,0,2021-01-01T00:00:30Z,t1,\n,,0,2021-01-01T00:00:40Z,t1,\n,,0,2021-01-01T00:00:50Z,t1,smpl_s9fmgy\n,,1,2021-01-01T00:00:00Z,t2,\n,,1,2021-01-01T00:00:10Z,t2,smpl_eu4oxp\n,,1,2021-01-01T00:00:20Z,t2,smpl_5g7tz4\n,,1,2021-01-01T00:00:30Z,t2,smpl_sox1ut\n,,1,2021-01-01T00:00:40Z,t2,\n,,1,2021-01-01T00:00:50Z,t2,smpl_dtn2bv\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   102,
					},
					File:   "sample.flux",
					Source: "_bool = \"#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,boolean\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,true\n,,0,2021-01-01T00:00:10Z,t1,true\n,,0,2021-01-01T00:00:20Z,t1,false\n,,0,2021-01-01T00:00:30Z,t1,true\n,,0,2021-01-01T00:00:40Z,t1,false\n,,0,2021-01-01T00:00:50Z,t1,false\n,,1,2021-01-01T00:00:00Z,t2,false\n,,1,2021-01-01T00:00:10Z,t2,true\n,,1,2021-01-01T00:00:20Z,t2,false\n,,1,2021-01-01T00:00:30Z,t2,true\n,,1,2021-01-01T00:00:40Z,t2,true\n,,1,2021-01-01T00:00:50Z,t2,false\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   86,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   86,
						},
						File:   "sample.flux",
						Source: "_bool",
						Start: ast.Position{
							Column: 1,
							Line:   86,
						},
					},
				},
				Name: "_bool",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   102,
						},
						File:   "sample.flux",
						Source: "\"#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,boolean\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,true\n,,0,2021-01-01T00:00:10Z,t1,true\n,,0,2021-01-01T00:00:20Z,t1,false\n,,0,2021-01-01T00:00:30Z,t1,true\n,,0,2021-01-01T00:00:40Z,t1,false\n,,0,2021-01-01T00:00:50Z,t1,false\n,,1,2021-01-01T00:00:00Z,t2,false\n,,1,2021-01-01T00:00:10Z,t2,true\n,,1,2021-01-01T00:00:20Z,t2,false\n,,1,2021-01-01T00:00:30Z,t2,true\n,,1,2021-01-01T00:00:40Z,t2,true\n,,1,2021-01-01T00:00:50Z,t2,false\n\"",
						Start: ast.Position{
							Column: 9,
							Line:   86,
						},
					},
				},
				Value: "#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,boolean\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,true\n,,0,2021-01-01T00:00:10Z,t1,true\n,,0,2021-01-01T00:00:20Z,t1,false\n,,0,2021-01-01T00:00:30Z,t1,true\n,,0,2021-01-01T00:00:40Z,t1,false\n,,0,2021-01-01T00:00:50Z,t1,false\n,,1,2021-01-01T00:00:00Z,t2,false\n,,1,2021-01-01T00:00:10Z,t2,true\n,,1,2021-01-01T00:00:20Z,t2,false\n,,1,2021-01-01T00:00:30Z,t2,true\n,,1,2021-01-01T00:00:40Z,t2,true\n,,1,2021-01-01T00:00:50Z,t2,false\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   120,
					},
					File:   "sample.flux",
					Source: "_boolNull = \"#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,boolean\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,true\n,,0,2021-01-01T00:00:10Z,t1,\n,,0,2021-01-01T00:00:20Z,t1,false\n,,0,2021-01-01T00:00:30Z,t1,\n,,0,2021-01-01T00:00:40Z,t1,\n,,0,2021-01-01T00:00:50Z,t1,false\n,,1,2021-01-01T00:00:00Z,t2,\n,,1,2021-01-01T00:00:10Z,t2,true\n,,1,2021-01-01T00:00:20Z,t2,false\n,,1,2021-01-01T00:00:30Z,t2,true\n,,1,2021-01-01T00:00:40Z,t2,\n,,1,2021-01-01T00:00:50Z,t2,false\n\"",
					Start: ast.Position{
						Column: 1,
						Line:   104,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   104,
						},
						File:   "sample.flux",
						Source: "_boolNull",
						Start: ast.Position{
							Column: 1,
							Line:   104,
						},
					},
				},
				Name: "_boolNull",
			},
			Init: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   120,
						},
						File:   "sample.flux",
						Source: "\"#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,boolean\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,true\n,,0,2021-01-01T00:00:10Z,t1,\n,,0,2021-01-01T00:00:20Z,t1,false\n,,0,2021-01-01T00:00:30Z,t1,\n,,0,2021-01-01T00:00:40Z,t1,\n,,0,2021-01-01T00:00:50Z,t1,false\n,,1,2021-01-01T00:00:00Z,t2,\n,,1,2021-01-01T00:00:10Z,t2,true\n,,1,2021-01-01T00:00:20Z,t2,false\n,,1,2021-01-01T00:00:30Z,t2,true\n,,1,2021-01-01T00:00:40Z,t2,\n,,1,2021-01-01T00:00:50Z,t2,false\n\"",
						Start: ast.Position{
							Column: 13,
							Line:   104,
						},
					},
				},
				Value: "#group,false,false,false,true,false\n#datatype,string,long,dateTime:RFC3339,string,boolean\n#default,_result,,,,\n,result,table,_time,tid,_value\n,,0,2021-01-01T00:00:00Z,t1,true\n,,0,2021-01-01T00:00:10Z,t1,\n,,0,2021-01-01T00:00:20Z,t1,false\n,,0,2021-01-01T00:00:30Z,t1,\n,,0,2021-01-01T00:00:40Z,t1,\n,,0,2021-01-01T00:00:50Z,t1,false\n,,1,2021-01-01T00:00:00Z,t2,\n,,1,2021-01-01T00:00:10Z,t2,true\n,,1,2021-01-01T00:00:20Z,t2,false\n,,1,2021-01-01T00:00:30Z,t2,true\n,,1,2021-01-01T00:00:40Z,t2,\n,,1,2021-01-01T00:00:50Z,t2,false\n",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   161,
					},
					File:   "sample.flux",
					Source: "float = (includeNull=false) => {\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   157,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// float returns a sample data set with float values.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `includeNull` indicates whether or not to include null values in the returned dataset.\n"}, ast.Comment{Text: "//   Default is `false`.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Output basic sample data with float values\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"sample\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// sample.float()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// ## Output data\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// | tid | _time                | _value |\n"}, ast.Comment{Text: "// | :-: | :------------------- | -----: |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:00Z |  -2.18 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:10Z |  10.92 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:20Z |   7.35 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:30Z |  17.53 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:40Z |  15.23 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:50Z |   4.43 |\n"}, ast.Comment{Text: "// | tid | _time                | _value |\n"}, ast.Comment{Text: "// | :-: | :------------------- | -----: |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:00Z |  19.85 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:10Z |   4.97 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:20Z |  -3.75 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:30Z |  19.77 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:40Z |  13.86 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:50Z |   1.86 |\n"}, ast.Comment{Text: "// \n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 6,
							Line:   157,
						},
						File:   "sample.flux",
						Source: "float",
						Start: ast.Position{
							Column: 1,
							Line:   157,
						},
					},
				},
				Name: "float",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   161,
						},
						File:   "sample.flux",
						Source: "(includeNull=false) => {\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData)\n}",
						Start: ast.Position{
							Column: 9,
							Line:   157,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   161,
							},
							File:   "sample.flux",
							Source: "{\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData)\n}",
							Start: ast.Position{
								Column: 32,
								Line:   157,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   158,
								},
								File:   "sample.flux",
								Source: "_csvData = if not includeNull then _numeric else _numericNull",
								Start: ast.Position{
									Column: 5,
									Line:   158,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   158,
									},
									File:   "sample.flux",
									Source: "_csvData",
									Start: ast.Position{
										Column: 5,
										Line:   158,
									},
								},
							},
							Name: "_csvData",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 66,
											Line:   158,
										},
										File:   "sample.flux",
										Source: "_numericNull",
										Start: ast.Position{
											Column: 54,
											Line:   158,
										},
									},
								},
								Name: "_numericNull",
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   158,
									},
									File:   "sample.flux",
									Source: "if not includeNull then _numeric else _numericNull",
									Start: ast.Position{
										Column: 16,
										Line:   158,
									},
								},
							},
							Consequent: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   158,
										},
										File:   "sample.flux",
										Source: "_numeric",
										Start: ast.Position{
											Column: 40,
											Line:   158,
										},
									},
								},
								Name: "_numeric",
							},
							Test: &ast.UnaryExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   158,
											},
											File:   "sample.flux",
											Source: "includeNull",
											Start: ast.Position{
												Column: 23,
												Line:   158,
											},
										},
									},
									Name: "includeNull",
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   158,
										},
										File:   "sample.flux",
										Source: "not includeNull",
										Start: ast.Position{
											Column: 19,
											Line:   158,
										},
									},
								},
								Operator: 13,
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   160,
										},
										File:   "sample.flux",
										Source: "csv: _csvData",
										Start: ast.Position{
											Column: 21,
											Line:   160,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   160,
											},
											File:   "sample.flux",
											Source: "csv: _csvData",
											Start: ast.Position{
												Column: 21,
												Line:   160,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   160,
												},
												File:   "sample.flux",
												Source: "csv",
												Start: ast.Position{
													Column: 21,
													Line:   160,
												},
											},
										},
										Name: "csv",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   160,
												},
												File:   "sample.flux",
												Source: "_csvData",
												Start: ast.Position{
													Column: 26,
													Line:   160,
												},
											},
										},
										Name: "_csvData",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   160,
									},
									File:   "sample.flux",
									Source: "csv.from(csv: _csvData)",
									Start: ast.Position{
										Column: 12,
										Line:   160,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   160,
										},
										File:   "sample.flux",
										Source: "csv.from",
										Start: ast.Position{
											Column: 12,
											Line:   160,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   160,
											},
											File:   "sample.flux",
											Source: "csv",
											Start: ast.Position{
												Column: 12,
												Line:   160,
											},
										},
									},
									Name: "csv",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   160,
											},
											File:   "sample.flux",
											Source: "from",
											Start: ast.Position{
												Column: 16,
												Line:   160,
											},
										},
									},
									Name: "from",
								},
								Rbrack: nil,
							},
							Lparen: nil,
							Rparen: nil,
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   160,
								},
								File:   "sample.flux",
								Source: "return csv.from(csv: _csvData)",
								Start: ast.Position{
									Column: 5,
									Line:   160,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   157,
							},
							File:   "sample.flux",
							Source: "includeNull=false",
							Start: ast.Position{
								Column: 10,
								Line:   157,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   157,
								},
								File:   "sample.flux",
								Source: "includeNull",
								Start: ast.Position{
									Column: 10,
									Line:   157,
								},
							},
						},
						Name: "includeNull",
					},
					Separator: nil,
					Value: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   157,
								},
								File:   "sample.flux",
								Source: "false",
								Start: ast.Position{
									Column: 22,
									Line:   157,
								},
							},
						},
						Name: "false",
					},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   202,
					},
					File:   "sample.flux",
					Source: "int = (includeNull=false) => {\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData) |> toInt()\n}",
					Start: ast.Position{
						Column: 1,
						Line:   198,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// int returns a sample data set with integer values.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `includeNull` indicates whether or not to include null values in the returned dataset.\n"}, ast.Comment{Text: "//   Default is `false`.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Output basic sample data with integer values\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"sample\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// sample.int()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// ## Output data\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// | tid | _time                | _value |\n"}, ast.Comment{Text: "// | :-: | :------------------- | -----: |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:00Z |     -2 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:10Z |     10 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:20Z |      7 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:30Z |     17 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:40Z |     15 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:50Z |      4 |\n"}, ast.Comment{Text: "// | tid | _time                | _value |\n"}, ast.Comment{Text: "// | :-: | :------------------- | -----: |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:00Z |     19 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:10Z |      4 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:20Z |     -3 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:30Z |     19 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:40Z |     13 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:50Z |      1 |\n"}, ast.Comment{Text: "//\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   198,
						},
						File:   "sample.flux",
						Source: "int",
						Start: ast.Position{
							Column: 1,
							Line:   198,
						},
					},
				},
				Name: "int",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   202,
						},
						File:   "sample.flux",
						Source: "(includeNull=false) => {\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData) |> toInt()\n}",
						Start: ast.Position{
							Column: 7,
							Line:   198,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   202,
							},
							File:   "sample.flux",
							Source: "{\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData) |> toInt()\n}",
							Start: ast.Position{
								Column: 30,
								Line:   198,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   199,
								},
								File:   "sample.flux",
								Source: "_csvData = if not includeNull then _numeric else _numericNull",
								Start: ast.Position{
									Column: 5,
									Line:   199,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   199,
									},
									File:   "sample.flux",
									Source: "_csvData",
									Start: ast.Position{
										Column: 5,
										Line:   199,
									},
								},
							},
							Name: "_csvData",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 66,
											Line:   199,
										},
										File:   "sample.flux",
										Source: "_numericNull",
										Start: ast.Position{
											Column: 54,
											Line:   199,
										},
									},
								},
								Name: "_numericNull",
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   199,
									},
									File:   "sample.flux",
									Source: "if not includeNull then _numeric else _numericNull",
									Start: ast.Position{
										Column: 16,
										Line:   199,
									},
								},
							},
							Consequent: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   199,
										},
										File:   "sample.flux",
										Source: "_numeric",
										Start: ast.Position{
											Column: 40,
											Line:   199,
										},
									},
								},
								Name: "_numeric",
							},
							Test: &ast.UnaryExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   199,
											},
											File:   "sample.flux",
											Source: "includeNull",
											Start: ast.Position{
												Column: 23,
												Line:   199,
											},
										},
									},
									Name: "includeNull",
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   199,
										},
										File:   "sample.flux",
										Source: "not includeNull",
										Start: ast.Position{
											Column: 19,
											Line:   199,
										},
									},
								},
								Operator: 13,
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   201,
											},
											File:   "sample.flux",
											Source: "csv: _csvData",
											Start: ast.Position{
												Column: 21,
												Line:   201,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   201,
												},
												File:   "sample.flux",
												Source: "csv: _csvData",
												Start: ast.Position{
													Column: 21,
													Line:   201,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   201,
													},
													File:   "sample.flux",
													Source: "csv",
													Start: ast.Position{
														Column: 21,
														Line:   201,
													},
												},
											},
											Name: "csv",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   201,
													},
													File:   "sample.flux",
													Source: "_csvData",
													Start: ast.Position{
														Column: 26,
														Line:   201,
													},
												},
											},
											Name: "_csvData",
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   201,
										},
										File:   "sample.flux",
										Source: "csv.from(csv: _csvData)",
										Start: ast.Position{
											Column: 12,
											Line:   201,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   201,
											},
											File:   "sample.flux",
											Source: "csv.from",
											Start: ast.Position{
												Column: 12,
												Line:   201,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   201,
												},
												File:   "sample.flux",
												Source: "csv",
												Start: ast.Position{
													Column: 12,
													Line:   201,
												},
											},
										},
										Name: "csv",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   201,
												},
												File:   "sample.flux",
												Source: "from",
												Start: ast.Position{
													Column: 16,
													Line:   201,
												},
											},
										},
										Name: "from",
									},
									Rbrack: nil,
								},
								Lparen: nil,
								Rparen: nil,
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   201,
									},
									File:   "sample.flux",
									Source: "csv.from(csv: _csvData) |> toInt()",
									Start: ast.Position{
										Column: 12,
										Line:   201,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   201,
										},
										File:   "sample.flux",
										Source: "toInt()",
										Start: ast.Position{
											Column: 39,
											Line:   201,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   201,
											},
											File:   "sample.flux",
											Source: "toInt",
											Start: ast.Position{
												Column: 39,
												Line:   201,
											},
										},
									},
									Name: "toInt",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   201,
								},
								File:   "sample.flux",
								Source: "return csv.from(csv: _csvData) |> toInt()",
								Start: ast.Position{
									Column: 5,
									Line:   201,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   198,
							},
							File:   "sample.flux",
							Source: "includeNull=false",
							Start: ast.Position{
								Column: 8,
								Line:   198,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   198,
								},
								File:   "sample.flux",
								Source: "includeNull",
								Start: ast.Position{
									Column: 8,
									Line:   198,
								},
							},
						},
						Name: "includeNull",
					},
					Separator: nil,
					Value: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   198,
								},
								File:   "sample.flux",
								Source: "false",
								Start: ast.Position{
									Column: 20,
									Line:   198,
								},
							},
						},
						Name: "false",
					},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   243,
					},
					File:   "sample.flux",
					Source: "uint = (includeNull=false) => {\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData) |> toUInt()\n}",
					Start: ast.Position{
						Column: 1,
						Line:   239,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// uint returns a sample data set with unsigned integer values.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `includeNull` indicates whether or not to include null values in the returned dataset.\n"}, ast.Comment{Text: "//   Default is `false`.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Output basic sample data with unsigned integer values\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"sample\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// sample.uint()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// ## Output data\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// | tid | _time                |               _value |\n"}, ast.Comment{Text: "// | :-: | :------------------- | -------------------: |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:00Z | 18446744073709551614 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:10Z |                   10 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:20Z |                    7 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:30Z |                   17 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:40Z |                   15 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:50Z |                    4 |\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// | tid | _time                |               _value |\n"}, ast.Comment{Text: "// | :-: | :------------------- | -------------------: |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:00Z |                   19 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:10Z |                    4 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:20Z | 18446744073709551613 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:30Z |                   19 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:40Z |                   13 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:50Z |                    1 |\n"}, ast.Comment{Text: "//\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   239,
						},
						File:   "sample.flux",
						Source: "uint",
						Start: ast.Position{
							Column: 1,
							Line:   239,
						},
					},
				},
				Name: "uint",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   243,
						},
						File:   "sample.flux",
						Source: "(includeNull=false) => {\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData) |> toUInt()\n}",
						Start: ast.Position{
							Column: 8,
							Line:   239,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   243,
							},
							File:   "sample.flux",
							Source: "{\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData) |> toUInt()\n}",
							Start: ast.Position{
								Column: 31,
								Line:   239,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   240,
								},
								File:   "sample.flux",
								Source: "_csvData = if not includeNull then _numeric else _numericNull",
								Start: ast.Position{
									Column: 5,
									Line:   240,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   240,
									},
									File:   "sample.flux",
									Source: "_csvData",
									Start: ast.Position{
										Column: 5,
										Line:   240,
									},
								},
							},
							Name: "_csvData",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 66,
											Line:   240,
										},
										File:   "sample.flux",
										Source: "_numericNull",
										Start: ast.Position{
											Column: 54,
											Line:   240,
										},
									},
								},
								Name: "_numericNull",
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   240,
									},
									File:   "sample.flux",
									Source: "if not includeNull then _numeric else _numericNull",
									Start: ast.Position{
										Column: 16,
										Line:   240,
									},
								},
							},
							Consequent: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   240,
										},
										File:   "sample.flux",
										Source: "_numeric",
										Start: ast.Position{
											Column: 40,
											Line:   240,
										},
									},
								},
								Name: "_numeric",
							},
							Test: &ast.UnaryExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   240,
											},
											File:   "sample.flux",
											Source: "includeNull",
											Start: ast.Position{
												Column: 23,
												Line:   240,
											},
										},
									},
									Name: "includeNull",
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   240,
										},
										File:   "sample.flux",
										Source: "not includeNull",
										Start: ast.Position{
											Column: 19,
											Line:   240,
										},
									},
								},
								Operator: 13,
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   242,
											},
											File:   "sample.flux",
											Source: "csv: _csvData",
											Start: ast.Position{
												Column: 21,
												Line:   242,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   242,
												},
												File:   "sample.flux",
												Source: "csv: _csvData",
												Start: ast.Position{
													Column: 21,
													Line:   242,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   242,
													},
													File:   "sample.flux",
													Source: "csv",
													Start: ast.Position{
														Column: 21,
														Line:   242,
													},
												},
											},
											Name: "csv",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   242,
													},
													File:   "sample.flux",
													Source: "_csvData",
													Start: ast.Position{
														Column: 26,
														Line:   242,
													},
												},
											},
											Name: "_csvData",
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   242,
										},
										File:   "sample.flux",
										Source: "csv.from(csv: _csvData)",
										Start: ast.Position{
											Column: 12,
											Line:   242,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   242,
											},
											File:   "sample.flux",
											Source: "csv.from",
											Start: ast.Position{
												Column: 12,
												Line:   242,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   242,
												},
												File:   "sample.flux",
												Source: "csv",
												Start: ast.Position{
													Column: 12,
													Line:   242,
												},
											},
										},
										Name: "csv",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   242,
												},
												File:   "sample.flux",
												Source: "from",
												Start: ast.Position{
													Column: 16,
													Line:   242,
												},
											},
										},
										Name: "from",
									},
									Rbrack: nil,
								},
								Lparen: nil,
								Rparen: nil,
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   242,
									},
									File:   "sample.flux",
									Source: "csv.from(csv: _csvData) |> toUInt()",
									Start: ast.Position{
										Column: 12,
										Line:   242,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   242,
										},
										File:   "sample.flux",
										Source: "toUInt()",
										Start: ast.Position{
											Column: 39,
											Line:   242,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 45,
												Line:   242,
											},
											File:   "sample.flux",
											Source: "toUInt",
											Start: ast.Position{
												Column: 39,
												Line:   242,
											},
										},
									},
									Name: "toUInt",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   242,
								},
								File:   "sample.flux",
								Source: "return csv.from(csv: _csvData) |> toUInt()",
								Start: ast.Position{
									Column: 5,
									Line:   242,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   239,
							},
							File:   "sample.flux",
							Source: "includeNull=false",
							Start: ast.Position{
								Column: 9,
								Line:   239,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   239,
								},
								File:   "sample.flux",
								Source: "includeNull",
								Start: ast.Position{
									Column: 9,
									Line:   239,
								},
							},
						},
						Name: "includeNull",
					},
					Separator: nil,
					Value: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   239,
								},
								File:   "sample.flux",
								Source: "false",
								Start: ast.Position{
									Column: 21,
									Line:   239,
								},
							},
						},
						Name: "false",
					},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   284,
					},
					File:   "sample.flux",
					Source: "string = (includeNull=false) => {\n    _csvData = if not includeNull then _string else _stringNull\n\n    return csv.from(csv: _csvData)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   280,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// string returns a sample data set with string values.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `includeNull` indicates whether or not to include null values in the returned dataset.\n"}, ast.Comment{Text: "//   Default is `false`.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Output basic sample data with string values\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"sample\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// sample.string()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Output data\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// | tid | _time                |      _value |\n"}, ast.Comment{Text: "// | :-- | :------------------- | ----------: |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:00Z | smpl_g9qczs |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:10Z | smpl_0mgv9n |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:20Z | smpl_phw664 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:30Z | smpl_guvzy4 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:40Z | smpl_5v3cce |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:50Z | smpl_s9fmgy |\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// | tid | _time                |      _value |\n"}, ast.Comment{Text: "// | :-- | :------------------- | ----------: |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:00Z | smpl_b5eida |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:10Z | smpl_eu4oxp |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:20Z | smpl_5g7tz4 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:30Z | smpl_sox1ut |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:40Z | smpl_wfm757 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:50Z | smpl_dtn2bv |\n"}, ast.Comment{Text: "// \n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 7,
							Line:   280,
						},
						File:   "sample.flux",
						Source: "string",
						Start: ast.Position{
							Column: 1,
							Line:   280,
						},
					},
				},
				Name: "string",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   284,
						},
						File:   "sample.flux",
						Source: "(includeNull=false) => {\n    _csvData = if not includeNull then _string else _stringNull\n\n    return csv.from(csv: _csvData)\n}",
						Start: ast.Position{
							Column: 10,
							Line:   280,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   284,
							},
							File:   "sample.flux",
							Source: "{\n    _csvData = if not includeNull then _string else _stringNull\n\n    return csv.from(csv: _csvData)\n}",
							Start: ast.Position{
								Column: 33,
								Line:   280,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   281,
								},
								File:   "sample.flux",
								Source: "_csvData = if not includeNull then _string else _stringNull",
								Start: ast.Position{
									Column: 5,
									Line:   281,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   281,
									},
									File:   "sample.flux",
									Source: "_csvData",
									Start: ast.Position{
										Column: 5,
										Line:   281,
									},
								},
							},
							Name: "_csvData",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 64,
											Line:   281,
										},
										File:   "sample.flux",
										Source: "_stringNull",
										Start: ast.Position{
											Column: 53,
											Line:   281,
										},
									},
								},
								Name: "_stringNull",
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   281,
									},
									File:   "sample.flux",
									Source: "if not includeNull then _string else _stringNull",
									Start: ast.Position{
										Column: 16,
										Line:   281,
									},
								},
							},
							Consequent: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   281,
										},
										File:   "sample.flux",
										Source: "_string",
										Start: ast.Position{
											Column: 40,
											Line:   281,
										},
									},
								},
								Name: "_string",
							},
							Test: &ast.UnaryExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   281,
											},
											File:   "sample.flux",
											Source: "includeNull",
											Start: ast.Position{
												Column: 23,
												Line:   281,
											},
										},
									},
									Name: "includeNull",
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   281,
										},
										File:   "sample.flux",
										Source: "not includeNull",
										Start: ast.Position{
											Column: 19,
											Line:   281,
										},
									},
								},
								Operator: 13,
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   283,
										},
										File:   "sample.flux",
										Source: "csv: _csvData",
										Start: ast.Position{
											Column: 21,
											Line:   283,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   283,
											},
											File:   "sample.flux",
											Source: "csv: _csvData",
											Start: ast.Position{
												Column: 21,
												Line:   283,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   283,
												},
												File:   "sample.flux",
												Source: "csv",
												Start: ast.Position{
													Column: 21,
													Line:   283,
												},
											},
										},
										Name: "csv",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   283,
												},
												File:   "sample.flux",
												Source: "_csvData",
												Start: ast.Position{
													Column: 26,
													Line:   283,
												},
											},
										},
										Name: "_csvData",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   283,
									},
									File:   "sample.flux",
									Source: "csv.from(csv: _csvData)",
									Start: ast.Position{
										Column: 12,
										Line:   283,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   283,
										},
										File:   "sample.flux",
										Source: "csv.from",
										Start: ast.Position{
											Column: 12,
											Line:   283,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   283,
											},
											File:   "sample.flux",
											Source: "csv",
											Start: ast.Position{
												Column: 12,
												Line:   283,
											},
										},
									},
									Name: "csv",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   283,
											},
											File:   "sample.flux",
											Source: "from",
											Start: ast.Position{
												Column: 16,
												Line:   283,
											},
										},
									},
									Name: "from",
								},
								Rbrack: nil,
							},
							Lparen: nil,
							Rparen: nil,
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   283,
								},
								File:   "sample.flux",
								Source: "return csv.from(csv: _csvData)",
								Start: ast.Position{
									Column: 5,
									Line:   283,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 28,
								Line:   280,
							},
							File:   "sample.flux",
							Source: "includeNull=false",
							Start: ast.Position{
								Column: 11,
								Line:   280,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   280,
								},
								File:   "sample.flux",
								Source: "includeNull",
								Start: ast.Position{
									Column: 11,
									Line:   280,
								},
							},
						},
						Name: "includeNull",
					},
					Separator: nil,
					Value: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   280,
								},
								File:   "sample.flux",
								Source: "false",
								Start: ast.Position{
									Column: 23,
									Line:   280,
								},
							},
						},
						Name: "false",
					},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   325,
					},
					File:   "sample.flux",
					Source: "bool = (includeNull=false) => {\n    _csvData = if not includeNull then _bool else _boolNull\n\n    return csv.from(csv: _csvData)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   321,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// bool returns a sample data set with boolean values.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `includeNull` indicates whether or not to include null values in the returned dataset.\n"}, ast.Comment{Text: "//   Default is `false`.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Output basic sample data with boolean values\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"sample\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// sample.bool()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Output data\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// | tid | _time                | _value |\n"}, ast.Comment{Text: "// | :-- | :------------------- | -----: |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:00Z |   true |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:10Z |   true |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:20Z |  false |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:30Z |   true |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:40Z |  false |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:50Z |  false |\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// | tid | _time                | _value |\n"}, ast.Comment{Text: "// | :-- | :------------------- | -----: |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:00Z |  false |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:10Z |   true |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:20Z |  false |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:30Z |   true |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:40Z |   true |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:50Z |  false |\n"}, ast.Comment{Text: "// \n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 5,
							Line:   321,
						},
						File:   "sample.flux",
						Source: "bool",
						Start: ast.Position{
							Column: 1,
							Line:   321,
						},
					},
				},
				Name: "bool",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   325,
						},
						File:   "sample.flux",
						Source: "(includeNull=false) => {\n    _csvData = if not includeNull then _bool else _boolNull\n\n    return csv.from(csv: _csvData)\n}",
						Start: ast.Position{
							Column: 8,
							Line:   321,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   325,
							},
							File:   "sample.flux",
							Source: "{\n    _csvData = if not includeNull then _bool else _boolNull\n\n    return csv.from(csv: _csvData)\n}",
							Start: ast.Position{
								Column: 31,
								Line:   321,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 60,
									Line:   322,
								},
								File:   "sample.flux",
								Source: "_csvData = if not includeNull then _bool else _boolNull",
								Start: ast.Position{
									Column: 5,
									Line:   322,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   322,
									},
									File:   "sample.flux",
									Source: "_csvData",
									Start: ast.Position{
										Column: 5,
										Line:   322,
									},
								},
							},
							Name: "_csvData",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 60,
											Line:   322,
										},
										File:   "sample.flux",
										Source: "_boolNull",
										Start: ast.Position{
											Column: 51,
											Line:   322,
										},
									},
								},
								Name: "_boolNull",
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   322,
									},
									File:   "sample.flux",
									Source: "if not includeNull then _bool else _boolNull",
									Start: ast.Position{
										Column: 16,
										Line:   322,
									},
								},
							},
							Consequent: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   322,
										},
										File:   "sample.flux",
										Source: "_bool",
										Start: ast.Position{
											Column: 40,
											Line:   322,
										},
									},
								},
								Name: "_bool",
							},
							Test: &ast.UnaryExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   322,
											},
											File:   "sample.flux",
											Source: "includeNull",
											Start: ast.Position{
												Column: 23,
												Line:   322,
											},
										},
									},
									Name: "includeNull",
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   322,
										},
										File:   "sample.flux",
										Source: "not includeNull",
										Start: ast.Position{
											Column: 19,
											Line:   322,
										},
									},
								},
								Operator: 13,
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   324,
										},
										File:   "sample.flux",
										Source: "csv: _csvData",
										Start: ast.Position{
											Column: 21,
											Line:   324,
										},
									},
								},
								Lbrace: nil,
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   324,
											},
											File:   "sample.flux",
											Source: "csv: _csvData",
											Start: ast.Position{
												Column: 21,
												Line:   324,
											},
										},
									},
									Comma: nil,
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   324,
												},
												File:   "sample.flux",
												Source: "csv",
												Start: ast.Position{
													Column: 21,
													Line:   324,
												},
											},
										},
										Name: "csv",
									},
									Separator: nil,
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   324,
												},
												File:   "sample.flux",
												Source: "_csvData",
												Start: ast.Position{
													Column: 26,
													Line:   324,
												},
											},
										},
										Name: "_csvData",
									},
								}},
								Rbrace: nil,
								With:   nil,
							}},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   324,
									},
									File:   "sample.flux",
									Source: "csv.from(csv: _csvData)",
									Start: ast.Position{
										Column: 12,
										Line:   324,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   324,
										},
										File:   "sample.flux",
										Source: "csv.from",
										Start: ast.Position{
											Column: 12,
											Line:   324,
										},
									},
								},
								Lbrack: nil,
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   324,
											},
											File:   "sample.flux",
											Source: "csv",
											Start: ast.Position{
												Column: 12,
												Line:   324,
											},
										},
									},
									Name: "csv",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   324,
											},
											File:   "sample.flux",
											Source: "from",
											Start: ast.Position{
												Column: 16,
												Line:   324,
											},
										},
									},
									Name: "from",
								},
								Rbrack: nil,
							},
							Lparen: nil,
							Rparen: nil,
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   324,
								},
								File:   "sample.flux",
								Source: "return csv.from(csv: _csvData)",
								Start: ast.Position{
									Column: 5,
									Line:   324,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 26,
								Line:   321,
							},
							File:   "sample.flux",
							Source: "includeNull=false",
							Start: ast.Position{
								Column: 9,
								Line:   321,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 20,
									Line:   321,
								},
								File:   "sample.flux",
								Source: "includeNull",
								Start: ast.Position{
									Column: 9,
									Line:   321,
								},
							},
						},
						Name: "includeNull",
					},
					Separator: nil,
					Value: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   321,
								},
								File:   "sample.flux",
								Source: "false",
								Start: ast.Position{
									Column: 21,
									Line:   321,
								},
							},
						},
						Name: "false",
					},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   366,
					},
					File:   "sample.flux",
					Source: "numericString = (includeNull=false) => {\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData) |> toString()\n}",
					Start: ast.Position{
						Column: 1,
						Line:   362,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// numericString returns a sample data set with numeric string values.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `includeNull` indicates whether or not to include null values in the returned dataset.\n"}, ast.Comment{Text: "//   Default is `false`.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Output basic sample data with numeric string values\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"sample\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// sample.numericString()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// ## Output data\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// | tid | _time                | _value (string) |\n"}, ast.Comment{Text: "// | :-: | :------------------- | --------------: |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:00Z |           -2.18 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:10Z |           10.92 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:20Z |            7.35 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:30Z |           17.53 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:40Z |           15.23 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:50Z |            4.43 |\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// | tid | _time                | _value (string) |\n"}, ast.Comment{Text: "// | :-: | :------------------- | --------------: |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:00Z |           19.85 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:10Z |            4.97 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:20Z |           -3.75 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:30Z |           19.77 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:40Z |           13.86 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:50Z |            1.86 |\n"}, ast.Comment{Text: "//\n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   362,
						},
						File:   "sample.flux",
						Source: "numericString",
						Start: ast.Position{
							Column: 1,
							Line:   362,
						},
					},
				},
				Name: "numericString",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   366,
						},
						File:   "sample.flux",
						Source: "(includeNull=false) => {\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData) |> toString()\n}",
						Start: ast.Position{
							Column: 17,
							Line:   362,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   366,
							},
							File:   "sample.flux",
							Source: "{\n    _csvData = if not includeNull then _numeric else _numericNull\n\n    return csv.from(csv: _csvData) |> toString()\n}",
							Start: ast.Position{
								Column: 40,
								Line:   362,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 66,
									Line:   363,
								},
								File:   "sample.flux",
								Source: "_csvData = if not includeNull then _numeric else _numericNull",
								Start: ast.Position{
									Column: 5,
									Line:   363,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   363,
									},
									File:   "sample.flux",
									Source: "_csvData",
									Start: ast.Position{
										Column: 5,
										Line:   363,
									},
								},
							},
							Name: "_csvData",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 66,
											Line:   363,
										},
										File:   "sample.flux",
										Source: "_numericNull",
										Start: ast.Position{
											Column: 54,
											Line:   363,
										},
									},
								},
								Name: "_numericNull",
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 66,
										Line:   363,
									},
									File:   "sample.flux",
									Source: "if not includeNull then _numeric else _numericNull",
									Start: ast.Position{
										Column: 16,
										Line:   363,
									},
								},
							},
							Consequent: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 48,
											Line:   363,
										},
										File:   "sample.flux",
										Source: "_numeric",
										Start: ast.Position{
											Column: 40,
											Line:   363,
										},
									},
								},
								Name: "_numeric",
							},
							Test: &ast.UnaryExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   363,
											},
											File:   "sample.flux",
											Source: "includeNull",
											Start: ast.Position{
												Column: 23,
												Line:   363,
											},
										},
									},
									Name: "includeNull",
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   363,
										},
										File:   "sample.flux",
										Source: "not includeNull",
										Start: ast.Position{
											Column: 19,
											Line:   363,
										},
									},
								},
								Operator: 13,
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   365,
											},
											File:   "sample.flux",
											Source: "csv: _csvData",
											Start: ast.Position{
												Column: 21,
												Line:   365,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   365,
												},
												File:   "sample.flux",
												Source: "csv: _csvData",
												Start: ast.Position{
													Column: 21,
													Line:   365,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   365,
													},
													File:   "sample.flux",
													Source: "csv",
													Start: ast.Position{
														Column: 21,
														Line:   365,
													},
												},
											},
											Name: "csv",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   365,
													},
													File:   "sample.flux",
													Source: "_csvData",
													Start: ast.Position{
														Column: 26,
														Line:   365,
													},
												},
											},
											Name: "_csvData",
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   365,
										},
										File:   "sample.flux",
										Source: "csv.from(csv: _csvData)",
										Start: ast.Position{
											Column: 12,
											Line:   365,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   365,
											},
											File:   "sample.flux",
											Source: "csv.from",
											Start: ast.Position{
												Column: 12,
												Line:   365,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   365,
												},
												File:   "sample.flux",
												Source: "csv",
												Start: ast.Position{
													Column: 12,
													Line:   365,
												},
											},
										},
										Name: "csv",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   365,
												},
												File:   "sample.flux",
												Source: "from",
												Start: ast.Position{
													Column: 16,
													Line:   365,
												},
											},
										},
										Name: "from",
									},
									Rbrack: nil,
								},
								Lparen: nil,
								Rparen: nil,
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 49,
										Line:   365,
									},
									File:   "sample.flux",
									Source: "csv.from(csv: _csvData) |> toString()",
									Start: ast.Position{
										Column: 12,
										Line:   365,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 49,
											Line:   365,
										},
										File:   "sample.flux",
										Source: "toString()",
										Start: ast.Position{
											Column: 39,
											Line:   365,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   365,
											},
											File:   "sample.flux",
											Source: "toString",
											Start: ast.Position{
												Column: 39,
												Line:   365,
											},
										},
									},
									Name: "toString",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 49,
									Line:   365,
								},
								File:   "sample.flux",
								Source: "return csv.from(csv: _csvData) |> toString()",
								Start: ast.Position{
									Column: 5,
									Line:   365,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 35,
								Line:   362,
							},
							File:   "sample.flux",
							Source: "includeNull=false",
							Start: ast.Position{
								Column: 18,
								Line:   362,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 29,
									Line:   362,
								},
								File:   "sample.flux",
								Source: "includeNull",
								Start: ast.Position{
									Column: 18,
									Line:   362,
								},
							},
						},
						Name: "includeNull",
					},
					Separator: nil,
					Value: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   362,
								},
								File:   "sample.flux",
								Source: "false",
								Start: ast.Position{
									Column: 30,
									Line:   362,
								},
							},
						},
						Name: "false",
					},
				}},
				Rparan: nil,
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   407,
					},
					File:   "sample.flux",
					Source: "numericBool = (includeNull=false) => {\n    _csvData = if not includeNull then _bool else _boolNull\n\n    return csv.from(csv: _csvData) |> toInt()\n}",
					Start: ast.Position{
						Column: 1,
						Line:   403,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: []ast.Comment{ast.Comment{Text: "// numericBool returns a sample data set with numeric (integer) boolean values.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Parameters\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// - `includeNull` indicates whether or not to include null values in the returned dataset.\n"}, ast.Comment{Text: "//   Default is `false`.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Output basic sample data with numeric boolean values\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "// import \"sample\"\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// sample.numericBool()\n"}, ast.Comment{Text: "// ```\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// ## Output data\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// | tid | _time                | _value |\n"}, ast.Comment{Text: "// | :-- | :------------------- | -----: |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:00Z |      1 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:10Z |      1 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:20Z |      0 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:30Z |      1 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:40Z |      0 |\n"}, ast.Comment{Text: "// | t1  | 2021-01-01T00:00:50Z |      0 |\n"}, ast.Comment{Text: "// \n"}, ast.Comment{Text: "// | tid | _time                | _value |\n"}, ast.Comment{Text: "// | :-- | :------------------- | -----: |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:00Z |      0 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:10Z |      1 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:20Z |      0 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:30Z |      1 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:40Z |      1 |\n"}, ast.Comment{Text: "// | t2  | 2021-01-01T00:00:50Z |      0 |\n"}, ast.Comment{Text: "// \n"}},
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   403,
						},
						File:   "sample.flux",
						Source: "numericBool",
						Start: ast.Position{
							Column: 1,
							Line:   403,
						},
					},
				},
				Name: "numericBool",
			},
			Init: &ast.FunctionExpression{
				Arrow: nil,
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   407,
						},
						File:   "sample.flux",
						Source: "(includeNull=false) => {\n    _csvData = if not includeNull then _bool else _boolNull\n\n    return csv.from(csv: _csvData) |> toInt()\n}",
						Start: ast.Position{
							Column: 15,
							Line:   403,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   407,
							},
							File:   "sample.flux",
							Source: "{\n    _csvData = if not includeNull then _bool else _boolNull\n\n    return csv.from(csv: _csvData) |> toInt()\n}",
							Start: ast.Position{
								Column: 38,
								Line:   403,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 60,
									Line:   404,
								},
								File:   "sample.flux",
								Source: "_csvData = if not includeNull then _bool else _boolNull",
								Start: ast.Position{
									Column: 5,
									Line:   404,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   404,
									},
									File:   "sample.flux",
									Source: "_csvData",
									Start: ast.Position{
										Column: 5,
										Line:   404,
									},
								},
							},
							Name: "_csvData",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 60,
											Line:   404,
										},
										File:   "sample.flux",
										Source: "_boolNull",
										Start: ast.Position{
											Column: 51,
											Line:   404,
										},
									},
								},
								Name: "_boolNull",
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 60,
										Line:   404,
									},
									File:   "sample.flux",
									Source: "if not includeNull then _bool else _boolNull",
									Start: ast.Position{
										Column: 16,
										Line:   404,
									},
								},
							},
							Consequent: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 45,
											Line:   404,
										},
										File:   "sample.flux",
										Source: "_bool",
										Start: ast.Position{
											Column: 40,
											Line:   404,
										},
									},
								},
								Name: "_bool",
							},
							Test: &ast.UnaryExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   404,
											},
											File:   "sample.flux",
											Source: "includeNull",
											Start: ast.Position{
												Column: 23,
												Line:   404,
											},
										},
									},
									Name: "includeNull",
								},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   404,
										},
										File:   "sample.flux",
										Source: "not includeNull",
										Start: ast.Position{
											Column: 19,
											Line:   404,
										},
									},
								},
								Operator: 13,
							},
							Tk_else: nil,
							Tk_if:   nil,
							Tk_then: nil,
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   406,
											},
											File:   "sample.flux",
											Source: "csv: _csvData",
											Start: ast.Position{
												Column: 21,
												Line:   406,
											},
										},
									},
									Lbrace: nil,
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   406,
												},
												File:   "sample.flux",
												Source: "csv: _csvData",
												Start: ast.Position{
													Column: 21,
													Line:   406,
												},
											},
										},
										Comma: nil,
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 24,
														Line:   406,
													},
													File:   "sample.flux",
													Source: "csv",
													Start: ast.Position{
														Column: 21,
														Line:   406,
													},
												},
											},
											Name: "csv",
										},
										Separator: nil,
										Value: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Comments: nil,
												Errors:   nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 34,
														Line:   406,
													},
													File:   "sample.flux",
													Source: "_csvData",
													Start: ast.Position{
														Column: 26,
														Line:   406,
													},
												},
											},
											Name: "_csvData",
										},
									}},
									Rbrace: nil,
									With:   nil,
								}},
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   406,
										},
										File:   "sample.flux",
										Source: "csv.from(csv: _csvData)",
										Start: ast.Position{
											Column: 12,
											Line:   406,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   406,
											},
											File:   "sample.flux",
											Source: "csv.from",
											Start: ast.Position{
												Column: 12,
												Line:   406,
											},
										},
									},
									Lbrack: nil,
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 15,
													Line:   406,
												},
												File:   "sample.flux",
												Source: "csv",
												Start: ast.Position{
													Column: 12,
													Line:   406,
												},
											},
										},
										Name: "csv",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Comments: nil,
											Errors:   nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   406,
												},
												File:   "sample.flux",
												Source: "from",
												Start: ast.Position{
													Column: 16,
													Line:   406,
												},
											},
										},
										Name: "from",
									},
									Rbrack: nil,
								},
								Lparen: nil,
								Rparen: nil,
							},
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 46,
										Line:   406,
									},
									File:   "sample.flux",
									Source: "csv.from(csv: _csvData) |> toInt()",
									Start: ast.Position{
										Column: 12,
										Line:   406,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   406,
										},
										File:   "sample.flux",
										Source: "toInt()",
										Start: ast.Position{
											Column: 39,
											Line:   406,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 44,
												Line:   406,
											},
											File:   "sample.flux",
											Source: "toInt",
											Start: ast.Position{
												Column: 39,
												Line:   406,
											},
										},
									},
									Name: "toInt",
								},
								Lparen: nil,
								Rparen: nil,
							},
						},
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 46,
									Line:   406,
								},
								File:   "sample.flux",
								Source: "return csv.from(csv: _csvData) |> toInt()",
								Start: ast.Position{
									Column: 5,
									Line:   406,
								},
							},
						},
					}},
					Lbrace: nil,
					Rbrace: nil,
				},
				Lparen: nil,
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 33,
								Line:   403,
							},
							File:   "sample.flux",
							Source: "includeNull=false",
							Start: ast.Position{
								Column: 16,
								Line:   403,
							},
						},
					},
					Comma: nil,
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   403,
								},
								File:   "sample.flux",
								Source: "includeNull",
								Start: ast.Position{
									Column: 16,
									Line:   403,
								},
							},
						},
						Name: "includeNull",
					},
					Separator: nil,
					Value: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 33,
									Line:   403,
								},
								File:   "sample.flux",
								Source: "false",
								Start: ast.Position{
									Column: 28,
									Line:   403,
								},
							},
						},
						Name: "false",
					},
				}},
				Rparan: nil,
			},
		}},
		Eof: nil,
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Comments: nil,
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   5,
					},
					File:   "sample.flux",
					Source: "import \"csv\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   5,
						},
						File:   "sample.flux",
						Source: "\"csv\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "csv",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "sample.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Package sample provides functions that return basic sample datasets.\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   2,
					},
					File:   "sample.flux",
					Source: "package sample",
					Start: ast.Position{
						Column: 1,
						Line:   2,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   2,
						},
						File:   "sample.flux",
						Source: "sample",
						Start: ast.Position{
							Column: 9,
							Line:   2,
						},
					},
				},
				Name: "sample",
			},
		},
	}},
	Package: "sample",
	Path:    "sample",
}
