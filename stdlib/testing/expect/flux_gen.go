// DO NOT EDIT: This file is autogenerated via the builtin command.

package expect

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Comments: nil,
		Errors:   nil,
		Loc:      nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Comments: nil,
			Errors:   nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 16,
					Line:   15,
				},
				File:   "expect.flux",
				Source: "package expect\n\n// planner will cause the present testcase to\n// expect the given planner rules will be invoked\n// exactly as many times as the number given.\n//\n// The key is the name of the planner rule.\nbuiltin planner",
				Start: ast.Position{
					Column: 1,
					Line:   8,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// planner will cause the present testcase to\n"}, ast.Comment{Text: "// expect the given planner rules will be invoked\n"}, ast.Comment{Text: "// exactly as many times as the number given.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// The key is the name of the planner rule.\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   15,
					},
					File:   "expect.flux",
					Source: "builtin planner",
					Start: ast.Position{
						Column: 1,
						Line:   15,
					},
				},
			},
			Colon: nil,
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   15,
						},
						File:   "expect.flux",
						Source: "planner",
						Start: ast.Position{
							Column: 9,
							Line:   15,
						},
					},
				},
				Name: "planner",
			},
			Ty: ast.TypeExpression{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 47,
							Line:   15,
						},
						File:   "expect.flux",
						Source: "(rules: [string: int]) => {}",
						Start: ast.Position{
							Column: 19,
							Line:   15,
						},
					},
				},
				Constraints: []*ast.TypeConstraint{},
				Ty: &ast.FunctionType{
					BaseNode: ast.BaseNode{
						Comments: nil,
						Errors:   nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 47,
								Line:   15,
							},
							File:   "expect.flux",
							Source: "(rules: [string: int]) => {}",
							Start: ast.Position{
								Column: 19,
								Line:   15,
							},
						},
					},
					Parameters: []*ast.ParameterType{&ast.ParameterType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 40,
									Line:   15,
								},
								File:   "expect.flux",
								Source: "rules: [string: int]",
								Start: ast.Position{
									Column: 20,
									Line:   15,
								},
							},
						},
						Kind: "Required",
						Name: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   15,
									},
									File:   "expect.flux",
									Source: "rules",
									Start: ast.Position{
										Column: 20,
										Line:   15,
									},
								},
							},
							Name: "rules",
						},
						Ty: &ast.DictType{
							BaseNode: ast.BaseNode{
								Comments: nil,
								Errors:   nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 40,
										Line:   15,
									},
									File:   "expect.flux",
									Source: "[string: int]",
									Start: ast.Position{
										Column: 27,
										Line:   15,
									},
								},
							},
							KeyType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   15,
										},
										File:   "expect.flux",
										Source: "string",
										Start: ast.Position{
											Column: 28,
											Line:   15,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   15,
											},
											File:   "expect.flux",
											Source: "string",
											Start: ast.Position{
												Column: 28,
												Line:   15,
											},
										},
									},
									Name: "string",
								},
							},
							ValueType: &ast.NamedType{
								BaseNode: ast.BaseNode{
									Comments: nil,
									Errors:   nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   15,
										},
										File:   "expect.flux",
										Source: "int",
										Start: ast.Position{
											Column: 36,
											Line:   15,
										},
									},
								},
								ID: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Comments: nil,
										Errors:   nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   15,
											},
											File:   "expect.flux",
											Source: "int",
											Start: ast.Position{
												Column: 36,
												Line:   15,
											},
										},
									},
									Name: "int",
								},
							},
						},
					}},
					Return: &ast.RecordType{
						BaseNode: ast.BaseNode{
							Comments: nil,
							Errors:   nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 47,
									Line:   15,
								},
								File:   "expect.flux",
								Source: "{}",
								Start: ast.Position{
									Column: 45,
									Line:   15,
								},
							},
						},
						Properties: []*ast.PropertyType{},
						Tvar:       nil,
					},
				},
			},
		}},
		Eof:      nil,
		Imports:  nil,
		Metadata: "parser-type=rust",
		Name:     "expect.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Comments: []ast.Comment{ast.Comment{Text: "// Package expect includes functions to mark\n"}, ast.Comment{Text: "// any expectations for a testcase to be satisfied\n"}, ast.Comment{Text: "// before the testcase finishes running.\n"}, ast.Comment{Text: "//\n"}, ast.Comment{Text: "// These functions are intended to be called at the\n"}, ast.Comment{Text: "// beginning of a testcase, but it doesn't really\n"}, ast.Comment{Text: "// matter when they get invoked within the testcase.\n"}},
				Errors:   nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   8,
					},
					File:   "expect.flux",
					Source: "package expect",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Comments: nil,
					Errors:   nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   8,
						},
						File:   "expect.flux",
						Source: "expect",
						Start: ast.Position{
							Column: 9,
							Line:   8,
						},
					},
				},
				Name: "expect",
			},
		},
	}},
	Package: "expect",
	Path:    "testing/expect",
}
