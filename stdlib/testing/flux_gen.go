// DO NOT EDIT: This file is autogenerated via the builtin command.

package testing

import (
	ast "github.com/influxdata/flux/ast"
	runtime "github.com/influxdata/flux/runtime"
)

func init() {
	runtime.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   38,
				},
				File:   "testing.flux",
				Source: "package testing\n\nimport c \"csv\"\n\nbuiltin assertEquals\nbuiltin assertEmpty\nbuiltin diff\n\noption loadStorage = (csv) => c.from(csv: csv)\n    |> map(fn: (r) => ({r with\n    _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n    _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n    _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\")\n    }))\n\noption loadMem = (csv) => c.from(csv: csv)\n\ninspect = (case) => {\n    tc = case()\n    got = tc.input |> tc.fn()\n    dif = got |> diff(want: tc.want)\n    return {\n        fn:    tc.fn,\n        input: tc.input,\n        want:  tc.want |> yield(name: \"want\"),\n        got:   got |> yield(name: \"got\"),\n        diff:  dif |> yield(name: \"diff\"),\n    }\n}\n\nrun = (case) => {\n    return inspect(case: case).diff |> assertEmpty()\n}\n\nbenchmark = (case) => {\n\ttc = case()\n\treturn tc.input |> tc.fn()\n}",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   5,
					},
					File:   "testing.flux",
					Source: "builtin assertEquals",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   5,
						},
						File:   "testing.flux",
						Source: "assertEquals",
						Start: ast.Position{
							Column: 9,
							Line:   5,
						},
					},
				},
				Name: "assertEquals",
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   6,
					},
					File:   "testing.flux",
					Source: "builtin assertEmpty",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   6,
						},
						File:   "testing.flux",
						Source: "assertEmpty",
						Start: ast.Position{
							Column: 9,
							Line:   6,
						},
					},
				},
				Name: "assertEmpty",
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   7,
					},
					File:   "testing.flux",
					Source: "builtin diff",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   7,
						},
						File:   "testing.flux",
						Source: "diff",
						Start: ast.Position{
							Column: 9,
							Line:   7,
						},
					},
				},
				Name: "diff",
			},
		}, &ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   14,
						},
						File:   "testing.flux",
						Source: "loadStorage = (csv) => c.from(csv: csv)\n    |> map(fn: (r) => ({r with\n    _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n    _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n    _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\")\n    }))",
						Start: ast.Position{
							Column: 8,
							Line:   9,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   9,
							},
							File:   "testing.flux",
							Source: "loadStorage",
							Start: ast.Position{
								Column: 8,
								Line:   9,
							},
						},
					},
					Name: "loadStorage",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 8,
								Line:   14,
							},
							File:   "testing.flux",
							Source: "(csv) => c.from(csv: csv)\n    |> map(fn: (r) => ({r with\n    _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n    _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n    _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\")\n    }))",
							Start: ast.Position{
								Column: 22,
								Line:   9,
							},
						},
					},
					Body: &ast.PipeExpression{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   9,
										},
										File:   "testing.flux",
										Source: "csv: csv",
										Start: ast.Position{
											Column: 38,
											Line:   9,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   9,
											},
											File:   "testing.flux",
											Source: "csv: csv",
											Start: ast.Position{
												Column: 38,
												Line:   9,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   9,
												},
												File:   "testing.flux",
												Source: "csv",
												Start: ast.Position{
													Column: 38,
													Line:   9,
												},
											},
										},
										Name: "csv",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   9,
												},
												File:   "testing.flux",
												Source: "csv",
												Start: ast.Position{
													Column: 43,
													Line:   9,
												},
											},
										},
										Name: "csv",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 47,
										Line:   9,
									},
									File:   "testing.flux",
									Source: "c.from(csv: csv)",
									Start: ast.Position{
										Column: 31,
										Line:   9,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   9,
										},
										File:   "testing.flux",
										Source: "c.from",
										Start: ast.Position{
											Column: 31,
											Line:   9,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   9,
											},
											File:   "testing.flux",
											Source: "c",
											Start: ast.Position{
												Column: 31,
												Line:   9,
											},
										},
									},
									Name: "c",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   9,
											},
											File:   "testing.flux",
											Source: "from",
											Start: ast.Position{
												Column: 33,
												Line:   9,
											},
										},
									},
									Name: "from",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 8,
									Line:   14,
								},
								File:   "testing.flux",
								Source: "c.from(csv: csv)\n    |> map(fn: (r) => ({r with\n    _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n    _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n    _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\")\n    }))",
								Start: ast.Position{
									Column: 31,
									Line:   9,
								},
							},
						},
						Call: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 7,
											Line:   14,
										},
										File:   "testing.flux",
										Source: "fn: (r) => ({r with\n    _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n    _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n    _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\")\n    })",
										Start: ast.Position{
											Column: 12,
											Line:   10,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 7,
												Line:   14,
											},
											File:   "testing.flux",
											Source: "fn: (r) => ({r with\n    _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n    _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n    _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\")\n    })",
											Start: ast.Position{
												Column: 12,
												Line:   10,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   10,
												},
												File:   "testing.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 12,
													Line:   10,
												},
											},
										},
										Name: "fn",
									},
									Value: &ast.FunctionExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 7,
													Line:   14,
												},
												File:   "testing.flux",
												Source: "(r) => ({r with\n    _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n    _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n    _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\")\n    })",
												Start: ast.Position{
													Column: 16,
													Line:   10,
												},
											},
										},
										Body: &ast.ParenExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 7,
														Line:   14,
													},
													File:   "testing.flux",
													Source: "({r with\n    _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n    _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n    _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\")\n    })",
													Start: ast.Position{
														Column: 23,
														Line:   10,
													},
												},
											},
											Expression: &ast.ObjectExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 6,
															Line:   14,
														},
														File:   "testing.flux",
														Source: "{r with\n    _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n    _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n    _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\")\n    }",
														Start: ast.Position{
															Column: 24,
															Line:   10,
														},
													},
												},
												Properties: []*ast.Property{&ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 107,
																Line:   11,
															},
															File:   "testing.flux",
															Source: "_field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\")",
															Start: ast.Position{
																Column: 5,
																Line:   11,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 11,
																	Line:   11,
																},
																File:   "testing.flux",
																Source: "_field",
																Start: ast.Position{
																	Column: 5,
																	Line:   11,
																},
															},
														},
														Name: "_field",
													},
													Value: &ast.ConditionalExpression{
														Alternate: &ast.CallExpression{
															Arguments: []ast.Expression{&ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 106,
																			Line:   11,
																		},
																		File:   "testing.flux",
																		Source: "msg: \"test input table does not have _field column\"",
																		Start: ast.Position{
																			Column: 55,
																			Line:   11,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 106,
																				Line:   11,
																			},
																			File:   "testing.flux",
																			Source: "msg: \"test input table does not have _field column\"",
																			Start: ast.Position{
																				Column: 55,
																				Line:   11,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 58,
																					Line:   11,
																				},
																				File:   "testing.flux",
																				Source: "msg",
																				Start: ast.Position{
																					Column: 55,
																					Line:   11,
																				},
																			},
																		},
																		Name: "msg",
																	},
																	Value: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 106,
																					Line:   11,
																				},
																				File:   "testing.flux",
																				Source: "\"test input table does not have _field column\"",
																				Start: ast.Position{
																					Column: 60,
																					Line:   11,
																				},
																			},
																		},
																		Value: "test input table does not have _field column",
																	},
																}},
																With: nil,
															}},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 107,
																		Line:   11,
																	},
																	File:   "testing.flux",
																	Source: "die(msg: \"test input table does not have _field column\")",
																	Start: ast.Position{
																		Column: 51,
																		Line:   11,
																	},
																},
															},
															Callee: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 54,
																			Line:   11,
																		},
																		File:   "testing.flux",
																		Source: "die",
																		Start: ast.Position{
																			Column: 51,
																			Line:   11,
																		},
																	},
																},
																Name: "die",
															},
														},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 107,
																	Line:   11,
																},
																File:   "testing.flux",
																Source: "if exists r._field then r._field else die(msg: \"test input table does not have _field column\")",
																Start: ast.Position{
																	Column: 13,
																	Line:   11,
																},
															},
														},
														Consequent: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 45,
																		Line:   11,
																	},
																	File:   "testing.flux",
																	Source: "r._field",
																	Start: ast.Position{
																		Column: 37,
																		Line:   11,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 38,
																			Line:   11,
																		},
																		File:   "testing.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 37,
																			Line:   11,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 45,
																			Line:   11,
																		},
																		File:   "testing.flux",
																		Source: "_field",
																		Start: ast.Position{
																			Column: 39,
																			Line:   11,
																		},
																	},
																},
																Name: "_field",
															},
														},
														Test: &ast.UnaryExpression{
															Argument: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 31,
																			Line:   11,
																		},
																		File:   "testing.flux",
																		Source: "r._field",
																		Start: ast.Position{
																			Column: 23,
																			Line:   11,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 24,
																				Line:   11,
																			},
																			File:   "testing.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 23,
																				Line:   11,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 31,
																				Line:   11,
																			},
																			File:   "testing.flux",
																			Source: "_field",
																			Start: ast.Position{
																				Column: 25,
																				Line:   11,
																			},
																		},
																	},
																	Name: "_field",
																},
															},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 31,
																		Line:   11,
																	},
																	File:   "testing.flux",
																	Source: "exists r._field",
																	Start: ast.Position{
																		Column: 16,
																		Line:   11,
																	},
																},
															},
															Operator: 14,
														},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 131,
																Line:   12,
															},
															File:   "testing.flux",
															Source: "_measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\")",
															Start: ast.Position{
																Column: 5,
																Line:   12,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 17,
																	Line:   12,
																},
																File:   "testing.flux",
																Source: "_measurement",
																Start: ast.Position{
																	Column: 5,
																	Line:   12,
																},
															},
														},
														Name: "_measurement",
													},
													Value: &ast.ConditionalExpression{
														Alternate: &ast.CallExpression{
															Arguments: []ast.Expression{&ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 130,
																			Line:   12,
																		},
																		File:   "testing.flux",
																		Source: "msg: \"test input table does not have _measurement column\"",
																		Start: ast.Position{
																			Column: 73,
																			Line:   12,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 130,
																				Line:   12,
																			},
																			File:   "testing.flux",
																			Source: "msg: \"test input table does not have _measurement column\"",
																			Start: ast.Position{
																				Column: 73,
																				Line:   12,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 76,
																					Line:   12,
																				},
																				File:   "testing.flux",
																				Source: "msg",
																				Start: ast.Position{
																					Column: 73,
																					Line:   12,
																				},
																			},
																		},
																		Name: "msg",
																	},
																	Value: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 130,
																					Line:   12,
																				},
																				File:   "testing.flux",
																				Source: "\"test input table does not have _measurement column\"",
																				Start: ast.Position{
																					Column: 78,
																					Line:   12,
																				},
																			},
																		},
																		Value: "test input table does not have _measurement column",
																	},
																}},
																With: nil,
															}},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 131,
																		Line:   12,
																	},
																	File:   "testing.flux",
																	Source: "die(msg: \"test input table does not have _measurement column\")",
																	Start: ast.Position{
																		Column: 69,
																		Line:   12,
																	},
																},
															},
															Callee: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 72,
																			Line:   12,
																		},
																		File:   "testing.flux",
																		Source: "die",
																		Start: ast.Position{
																			Column: 69,
																			Line:   12,
																		},
																	},
																},
																Name: "die",
															},
														},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 131,
																	Line:   12,
																},
																File:   "testing.flux",
																Source: "if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\")",
																Start: ast.Position{
																	Column: 19,
																	Line:   12,
																},
															},
														},
														Consequent: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 63,
																		Line:   12,
																	},
																	File:   "testing.flux",
																	Source: "r._measurement",
																	Start: ast.Position{
																		Column: 49,
																		Line:   12,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 50,
																			Line:   12,
																		},
																		File:   "testing.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 49,
																			Line:   12,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 63,
																			Line:   12,
																		},
																		File:   "testing.flux",
																		Source: "_measurement",
																		Start: ast.Position{
																			Column: 51,
																			Line:   12,
																		},
																	},
																},
																Name: "_measurement",
															},
														},
														Test: &ast.UnaryExpression{
															Argument: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 43,
																			Line:   12,
																		},
																		File:   "testing.flux",
																		Source: "r._measurement",
																		Start: ast.Position{
																			Column: 29,
																			Line:   12,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   12,
																			},
																			File:   "testing.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 29,
																				Line:   12,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 43,
																				Line:   12,
																			},
																			File:   "testing.flux",
																			Source: "_measurement",
																			Start: ast.Position{
																				Column: 31,
																				Line:   12,
																			},
																		},
																	},
																	Name: "_measurement",
																},
															},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 43,
																		Line:   12,
																	},
																	File:   "testing.flux",
																	Source: "exists r._measurement",
																	Start: ast.Position{
																		Column: 22,
																		Line:   12,
																	},
																},
															},
															Operator: 14,
														},
													},
												}, &ast.Property{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 103,
																Line:   13,
															},
															File:   "testing.flux",
															Source: "_time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\")",
															Start: ast.Position{
																Column: 5,
																Line:   13,
															},
														},
													},
													Key: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 10,
																	Line:   13,
																},
																File:   "testing.flux",
																Source: "_time",
																Start: ast.Position{
																	Column: 5,
																	Line:   13,
																},
															},
														},
														Name: "_time",
													},
													Value: &ast.ConditionalExpression{
														Alternate: &ast.CallExpression{
															Arguments: []ast.Expression{&ast.ObjectExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 102,
																			Line:   13,
																		},
																		File:   "testing.flux",
																		Source: "msg: \"test input table does not have _time column\"",
																		Start: ast.Position{
																			Column: 52,
																			Line:   13,
																		},
																	},
																},
																Properties: []*ast.Property{&ast.Property{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 102,
																				Line:   13,
																			},
																			File:   "testing.flux",
																			Source: "msg: \"test input table does not have _time column\"",
																			Start: ast.Position{
																				Column: 52,
																				Line:   13,
																			},
																		},
																	},
																	Key: &ast.Identifier{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 55,
																					Line:   13,
																				},
																				File:   "testing.flux",
																				Source: "msg",
																				Start: ast.Position{
																					Column: 52,
																					Line:   13,
																				},
																			},
																		},
																		Name: "msg",
																	},
																	Value: &ast.StringLiteral{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 102,
																					Line:   13,
																				},
																				File:   "testing.flux",
																				Source: "\"test input table does not have _time column\"",
																				Start: ast.Position{
																					Column: 57,
																					Line:   13,
																				},
																			},
																		},
																		Value: "test input table does not have _time column",
																	},
																}},
																With: nil,
															}},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 103,
																		Line:   13,
																	},
																	File:   "testing.flux",
																	Source: "die(msg: \"test input table does not have _time column\")",
																	Start: ast.Position{
																		Column: 48,
																		Line:   13,
																	},
																},
															},
															Callee: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 51,
																			Line:   13,
																		},
																		File:   "testing.flux",
																		Source: "die",
																		Start: ast.Position{
																			Column: 48,
																			Line:   13,
																		},
																	},
																},
																Name: "die",
															},
														},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 103,
																	Line:   13,
																},
																File:   "testing.flux",
																Source: "if exists r._time then r._time else die(msg: \"test input table does not have _time column\")",
																Start: ast.Position{
																	Column: 12,
																	Line:   13,
																},
															},
														},
														Consequent: &ast.MemberExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 42,
																		Line:   13,
																	},
																	File:   "testing.flux",
																	Source: "r._time",
																	Start: ast.Position{
																		Column: 35,
																		Line:   13,
																	},
																},
															},
															Object: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 36,
																			Line:   13,
																		},
																		File:   "testing.flux",
																		Source: "r",
																		Start: ast.Position{
																			Column: 35,
																			Line:   13,
																		},
																	},
																},
																Name: "r",
															},
															Property: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 42,
																			Line:   13,
																		},
																		File:   "testing.flux",
																		Source: "_time",
																		Start: ast.Position{
																			Column: 37,
																			Line:   13,
																		},
																	},
																},
																Name: "_time",
															},
														},
														Test: &ast.UnaryExpression{
															Argument: &ast.MemberExpression{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 29,
																			Line:   13,
																		},
																		File:   "testing.flux",
																		Source: "r._time",
																		Start: ast.Position{
																			Column: 22,
																			Line:   13,
																		},
																	},
																},
																Object: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 23,
																				Line:   13,
																			},
																			File:   "testing.flux",
																			Source: "r",
																			Start: ast.Position{
																				Column: 22,
																				Line:   13,
																			},
																		},
																	},
																	Name: "r",
																},
																Property: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 29,
																				Line:   13,
																			},
																			File:   "testing.flux",
																			Source: "_time",
																			Start: ast.Position{
																				Column: 24,
																				Line:   13,
																			},
																		},
																	},
																	Name: "_time",
																},
															},
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 29,
																		Line:   13,
																	},
																	File:   "testing.flux",
																	Source: "exists r._time",
																	Start: ast.Position{
																		Column: 15,
																		Line:   13,
																	},
																},
															},
															Operator: 14,
														},
													},
												}},
												With: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 26,
																Line:   10,
															},
															File:   "testing.flux",
															Source: "r",
															Start: ast.Position{
																Column: 25,
																Line:   10,
															},
														},
													},
													Name: "r",
												},
											},
										},
										Params: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   10,
													},
													File:   "testing.flux",
													Source: "r",
													Start: ast.Position{
														Column: 17,
														Line:   10,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 18,
															Line:   10,
														},
														File:   "testing.flux",
														Source: "r",
														Start: ast.Position{
															Column: 17,
															Line:   10,
														},
													},
												},
												Name: "r",
											},
											Value: nil,
										}},
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   14,
									},
									File:   "testing.flux",
									Source: "map(fn: (r) => ({r with\n    _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n    _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n    _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\")\n    }))",
									Start: ast.Position{
										Column: 8,
										Line:   10,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   10,
										},
										File:   "testing.flux",
										Source: "map",
										Start: ast.Position{
											Column: 8,
											Line:   10,
										},
									},
								},
								Name: "map",
							},
						},
					},
					Params: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   9,
								},
								File:   "testing.flux",
								Source: "csv",
								Start: ast.Position{
									Column: 23,
									Line:   9,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   9,
									},
									File:   "testing.flux",
									Source: "csv",
									Start: ast.Position{
										Column: 23,
										Line:   9,
									},
								},
							},
							Name: "csv",
						},
						Value: nil,
					}},
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 8,
						Line:   14,
					},
					File:   "testing.flux",
					Source: "option loadStorage = (csv) => c.from(csv: csv)\n    |> map(fn: (r) => ({r with\n    _field: if exists r._field then r._field else die(msg: \"test input table does not have _field column\"),\n    _measurement: if exists r._measurement then r._measurement else die(msg: \"test input table does not have _measurement column\"),\n    _time: if exists r._time then r._time else die(msg: \"test input table does not have _time column\")\n    }))",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
		}, &ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 43,
							Line:   16,
						},
						File:   "testing.flux",
						Source: "loadMem = (csv) => c.from(csv: csv)",
						Start: ast.Position{
							Column: 8,
							Line:   16,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   16,
							},
							File:   "testing.flux",
							Source: "loadMem",
							Start: ast.Position{
								Column: 8,
								Line:   16,
							},
						},
					},
					Name: "loadMem",
				},
				Init: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 43,
								Line:   16,
							},
							File:   "testing.flux",
							Source: "(csv) => c.from(csv: csv)",
							Start: ast.Position{
								Column: 18,
								Line:   16,
							},
						},
					},
					Body: &ast.CallExpression{
						Arguments: []ast.Expression{&ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 42,
										Line:   16,
									},
									File:   "testing.flux",
									Source: "csv: csv",
									Start: ast.Position{
										Column: 34,
										Line:   16,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   16,
										},
										File:   "testing.flux",
										Source: "csv: csv",
										Start: ast.Position{
											Column: 34,
											Line:   16,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 37,
												Line:   16,
											},
											File:   "testing.flux",
											Source: "csv",
											Start: ast.Position{
												Column: 34,
												Line:   16,
											},
										},
									},
									Name: "csv",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   16,
											},
											File:   "testing.flux",
											Source: "csv",
											Start: ast.Position{
												Column: 39,
												Line:   16,
											},
										},
									},
									Name: "csv",
								},
							}},
							With: nil,
						}},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 43,
									Line:   16,
								},
								File:   "testing.flux",
								Source: "c.from(csv: csv)",
								Start: ast.Position{
									Column: 27,
									Line:   16,
								},
							},
						},
						Callee: &ast.MemberExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 33,
										Line:   16,
									},
									File:   "testing.flux",
									Source: "c.from",
									Start: ast.Position{
										Column: 27,
										Line:   16,
									},
								},
							},
							Object: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   16,
										},
										File:   "testing.flux",
										Source: "c",
										Start: ast.Position{
											Column: 27,
											Line:   16,
										},
									},
								},
								Name: "c",
							},
							Property: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   16,
										},
										File:   "testing.flux",
										Source: "from",
										Start: ast.Position{
											Column: 29,
											Line:   16,
										},
									},
								},
								Name: "from",
							},
						},
					},
					Params: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 22,
									Line:   16,
								},
								File:   "testing.flux",
								Source: "csv",
								Start: ast.Position{
									Column: 19,
									Line:   16,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 22,
										Line:   16,
									},
									File:   "testing.flux",
									Source: "csv",
									Start: ast.Position{
										Column: 19,
										Line:   16,
									},
								},
							},
							Name: "csv",
						},
						Value: nil,
					}},
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 43,
						Line:   16,
					},
					File:   "testing.flux",
					Source: "option loadMem = (csv) => c.from(csv: csv)",
					Start: ast.Position{
						Column: 1,
						Line:   16,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   29,
					},
					File:   "testing.flux",
					Source: "inspect = (case) => {\n    tc = case()\n    got = tc.input |> tc.fn()\n    dif = got |> diff(want: tc.want)\n    return {\n        fn:    tc.fn,\n        input: tc.input,\n        want:  tc.want |> yield(name: \"want\"),\n        got:   got |> yield(name: \"got\"),\n        diff:  dif |> yield(name: \"diff\"),\n    }\n}",
					Start: ast.Position{
						Column: 1,
						Line:   18,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   18,
						},
						File:   "testing.flux",
						Source: "inspect",
						Start: ast.Position{
							Column: 1,
							Line:   18,
						},
					},
				},
				Name: "inspect",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   29,
						},
						File:   "testing.flux",
						Source: "(case) => {\n    tc = case()\n    got = tc.input |> tc.fn()\n    dif = got |> diff(want: tc.want)\n    return {\n        fn:    tc.fn,\n        input: tc.input,\n        want:  tc.want |> yield(name: \"want\"),\n        got:   got |> yield(name: \"got\"),\n        diff:  dif |> yield(name: \"diff\"),\n    }\n}",
						Start: ast.Position{
							Column: 11,
							Line:   18,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   29,
							},
							File:   "testing.flux",
							Source: "{\n    tc = case()\n    got = tc.input |> tc.fn()\n    dif = got |> diff(want: tc.want)\n    return {\n        fn:    tc.fn,\n        input: tc.input,\n        want:  tc.want |> yield(name: \"want\"),\n        got:   got |> yield(name: \"got\"),\n        diff:  dif |> yield(name: \"diff\"),\n    }\n}",
							Start: ast.Position{
								Column: 21,
								Line:   18,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   19,
								},
								File:   "testing.flux",
								Source: "tc = case()",
								Start: ast.Position{
									Column: 5,
									Line:   19,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 7,
										Line:   19,
									},
									File:   "testing.flux",
									Source: "tc",
									Start: ast.Position{
										Column: 5,
										Line:   19,
									},
								},
							},
							Name: "tc",
						},
						Init: &ast.CallExpression{
							Arguments: nil,
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   19,
									},
									File:   "testing.flux",
									Source: "case()",
									Start: ast.Position{
										Column: 10,
										Line:   19,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   19,
										},
										File:   "testing.flux",
										Source: "case",
										Start: ast.Position{
											Column: 10,
											Line:   19,
										},
									},
								},
								Name: "case",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   20,
								},
								File:   "testing.flux",
								Source: "got = tc.input |> tc.fn()",
								Start: ast.Position{
									Column: 5,
									Line:   20,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   20,
									},
									File:   "testing.flux",
									Source: "got",
									Start: ast.Position{
										Column: 5,
										Line:   20,
									},
								},
							},
							Name: "got",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   20,
										},
										File:   "testing.flux",
										Source: "tc.input",
										Start: ast.Position{
											Column: 11,
											Line:   20,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   20,
											},
											File:   "testing.flux",
											Source: "tc",
											Start: ast.Position{
												Column: 11,
												Line:   20,
											},
										},
									},
									Name: "tc",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   20,
											},
											File:   "testing.flux",
											Source: "input",
											Start: ast.Position{
												Column: 14,
												Line:   20,
											},
										},
									},
									Name: "input",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   20,
									},
									File:   "testing.flux",
									Source: "tc.input |> tc.fn()",
									Start: ast.Position{
										Column: 11,
										Line:   20,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   20,
										},
										File:   "testing.flux",
										Source: "tc.fn()",
										Start: ast.Position{
											Column: 23,
											Line:   20,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   20,
											},
											File:   "testing.flux",
											Source: "tc.fn",
											Start: ast.Position{
												Column: 23,
												Line:   20,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   20,
												},
												File:   "testing.flux",
												Source: "tc",
												Start: ast.Position{
													Column: 23,
													Line:   20,
												},
											},
										},
										Name: "tc",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   20,
												},
												File:   "testing.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 26,
													Line:   20,
												},
											},
										},
										Name: "fn",
									},
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   21,
								},
								File:   "testing.flux",
								Source: "dif = got |> diff(want: tc.want)",
								Start: ast.Position{
									Column: 5,
									Line:   21,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   21,
									},
									File:   "testing.flux",
									Source: "dif",
									Start: ast.Position{
										Column: 5,
										Line:   21,
									},
								},
							},
							Name: "dif",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   21,
										},
										File:   "testing.flux",
										Source: "got",
										Start: ast.Position{
											Column: 11,
											Line:   21,
										},
									},
								},
								Name: "got",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   21,
									},
									File:   "testing.flux",
									Source: "got |> diff(want: tc.want)",
									Start: ast.Position{
										Column: 11,
										Line:   21,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   21,
											},
											File:   "testing.flux",
											Source: "want: tc.want",
											Start: ast.Position{
												Column: 23,
												Line:   21,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   21,
												},
												File:   "testing.flux",
												Source: "want: tc.want",
												Start: ast.Position{
													Column: 23,
													Line:   21,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   21,
													},
													File:   "testing.flux",
													Source: "want",
													Start: ast.Position{
														Column: 23,
														Line:   21,
													},
												},
											},
											Name: "want",
										},
										Value: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   21,
													},
													File:   "testing.flux",
													Source: "tc.want",
													Start: ast.Position{
														Column: 29,
														Line:   21,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   21,
														},
														File:   "testing.flux",
														Source: "tc",
														Start: ast.Position{
															Column: 29,
															Line:   21,
														},
													},
												},
												Name: "tc",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   21,
														},
														File:   "testing.flux",
														Source: "want",
														Start: ast.Position{
															Column: 32,
															Line:   21,
														},
													},
												},
												Name: "want",
											},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   21,
										},
										File:   "testing.flux",
										Source: "diff(want: tc.want)",
										Start: ast.Position{
											Column: 18,
											Line:   21,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   21,
											},
											File:   "testing.flux",
											Source: "diff",
											Start: ast.Position{
												Column: 18,
												Line:   21,
											},
										},
									},
									Name: "diff",
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   28,
									},
									File:   "testing.flux",
									Source: "{\n        fn:    tc.fn,\n        input: tc.input,\n        want:  tc.want |> yield(name: \"want\"),\n        got:   got |> yield(name: \"got\"),\n        diff:  dif |> yield(name: \"diff\"),\n    }",
									Start: ast.Position{
										Column: 12,
										Line:   22,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   23,
										},
										File:   "testing.flux",
										Source: "fn:    tc.fn",
										Start: ast.Position{
											Column: 9,
											Line:   23,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   23,
											},
											File:   "testing.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 9,
												Line:   23,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   23,
											},
											File:   "testing.flux",
											Source: "tc.fn",
											Start: ast.Position{
												Column: 16,
												Line:   23,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   23,
												},
												File:   "testing.flux",
												Source: "tc",
												Start: ast.Position{
													Column: 16,
													Line:   23,
												},
											},
										},
										Name: "tc",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   23,
												},
												File:   "testing.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 19,
													Line:   23,
												},
											},
										},
										Name: "fn",
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   24,
										},
										File:   "testing.flux",
										Source: "input: tc.input",
										Start: ast.Position{
											Column: 9,
											Line:   24,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   24,
											},
											File:   "testing.flux",
											Source: "input",
											Start: ast.Position{
												Column: 9,
												Line:   24,
											},
										},
									},
									Name: "input",
								},
								Value: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   24,
											},
											File:   "testing.flux",
											Source: "tc.input",
											Start: ast.Position{
												Column: 16,
												Line:   24,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   24,
												},
												File:   "testing.flux",
												Source: "tc",
												Start: ast.Position{
													Column: 16,
													Line:   24,
												},
											},
										},
										Name: "tc",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   24,
												},
												File:   "testing.flux",
												Source: "input",
												Start: ast.Position{
													Column: 19,
													Line:   24,
												},
											},
										},
										Name: "input",
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 46,
											Line:   25,
										},
										File:   "testing.flux",
										Source: "want:  tc.want |> yield(name: \"want\")",
										Start: ast.Position{
											Column: 9,
											Line:   25,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   25,
											},
											File:   "testing.flux",
											Source: "want",
											Start: ast.Position{
												Column: 9,
												Line:   25,
											},
										},
									},
									Name: "want",
								},
								Value: &ast.PipeExpression{
									Argument: &ast.MemberExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   25,
												},
												File:   "testing.flux",
												Source: "tc.want",
												Start: ast.Position{
													Column: 16,
													Line:   25,
												},
											},
										},
										Object: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 18,
														Line:   25,
													},
													File:   "testing.flux",
													Source: "tc",
													Start: ast.Position{
														Column: 16,
														Line:   25,
													},
												},
											},
											Name: "tc",
										},
										Property: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 23,
														Line:   25,
													},
													File:   "testing.flux",
													Source: "want",
													Start: ast.Position{
														Column: 19,
														Line:   25,
													},
												},
											},
											Name: "want",
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   25,
											},
											File:   "testing.flux",
											Source: "tc.want |> yield(name: \"want\")",
											Start: ast.Position{
												Column: 16,
												Line:   25,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 45,
														Line:   25,
													},
													File:   "testing.flux",
													Source: "name: \"want\"",
													Start: ast.Position{
														Column: 33,
														Line:   25,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 45,
															Line:   25,
														},
														File:   "testing.flux",
														Source: "name: \"want\"",
														Start: ast.Position{
															Column: 33,
															Line:   25,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 37,
																Line:   25,
															},
															File:   "testing.flux",
															Source: "name",
															Start: ast.Position{
																Column: 33,
																Line:   25,
															},
														},
													},
													Name: "name",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 45,
																Line:   25,
															},
															File:   "testing.flux",
															Source: "\"want\"",
															Start: ast.Position{
																Column: 39,
																Line:   25,
															},
														},
													},
													Value: "want",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 46,
													Line:   25,
												},
												File:   "testing.flux",
												Source: "yield(name: \"want\")",
												Start: ast.Position{
													Column: 27,
													Line:   25,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 32,
														Line:   25,
													},
													File:   "testing.flux",
													Source: "yield",
													Start: ast.Position{
														Column: 27,
														Line:   25,
													},
												},
											},
											Name: "yield",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 41,
											Line:   26,
										},
										File:   "testing.flux",
										Source: "got:   got |> yield(name: \"got\")",
										Start: ast.Position{
											Column: 9,
											Line:   26,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   26,
											},
											File:   "testing.flux",
											Source: "got",
											Start: ast.Position{
												Column: 9,
												Line:   26,
											},
										},
									},
									Name: "got",
								},
								Value: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   26,
												},
												File:   "testing.flux",
												Source: "got",
												Start: ast.Position{
													Column: 16,
													Line:   26,
												},
											},
										},
										Name: "got",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 41,
												Line:   26,
											},
											File:   "testing.flux",
											Source: "got |> yield(name: \"got\")",
											Start: ast.Position{
												Column: 16,
												Line:   26,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   26,
													},
													File:   "testing.flux",
													Source: "name: \"got\"",
													Start: ast.Position{
														Column: 29,
														Line:   26,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 40,
															Line:   26,
														},
														File:   "testing.flux",
														Source: "name: \"got\"",
														Start: ast.Position{
															Column: 29,
															Line:   26,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   26,
															},
															File:   "testing.flux",
															Source: "name",
															Start: ast.Position{
																Column: 29,
																Line:   26,
															},
														},
													},
													Name: "name",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 40,
																Line:   26,
															},
															File:   "testing.flux",
															Source: "\"got\"",
															Start: ast.Position{
																Column: 35,
																Line:   26,
															},
														},
													},
													Value: "got",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 41,
													Line:   26,
												},
												File:   "testing.flux",
												Source: "yield(name: \"got\")",
												Start: ast.Position{
													Column: 23,
													Line:   26,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   26,
													},
													File:   "testing.flux",
													Source: "yield",
													Start: ast.Position{
														Column: 23,
														Line:   26,
													},
												},
											},
											Name: "yield",
										},
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   27,
										},
										File:   "testing.flux",
										Source: "diff:  dif |> yield(name: \"diff\")",
										Start: ast.Position{
											Column: 9,
											Line:   27,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   27,
											},
											File:   "testing.flux",
											Source: "diff",
											Start: ast.Position{
												Column: 9,
												Line:   27,
											},
										},
									},
									Name: "diff",
								},
								Value: &ast.PipeExpression{
									Argument: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   27,
												},
												File:   "testing.flux",
												Source: "dif",
												Start: ast.Position{
													Column: 16,
													Line:   27,
												},
											},
										},
										Name: "dif",
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 42,
												Line:   27,
											},
											File:   "testing.flux",
											Source: "dif |> yield(name: \"diff\")",
											Start: ast.Position{
												Column: 16,
												Line:   27,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 41,
														Line:   27,
													},
													File:   "testing.flux",
													Source: "name: \"diff\"",
													Start: ast.Position{
														Column: 29,
														Line:   27,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 41,
															Line:   27,
														},
														File:   "testing.flux",
														Source: "name: \"diff\"",
														Start: ast.Position{
															Column: 29,
															Line:   27,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 33,
																Line:   27,
															},
															File:   "testing.flux",
															Source: "name",
															Start: ast.Position{
																Column: 29,
																Line:   27,
															},
														},
													},
													Name: "name",
												},
												Value: &ast.StringLiteral{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 41,
																Line:   27,
															},
															File:   "testing.flux",
															Source: "\"diff\"",
															Start: ast.Position{
																Column: 35,
																Line:   27,
															},
														},
													},
													Value: "diff",
												},
											}},
											With: nil,
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   27,
												},
												File:   "testing.flux",
												Source: "yield(name: \"diff\")",
												Start: ast.Position{
													Column: 23,
													Line:   27,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   27,
													},
													File:   "testing.flux",
													Source: "yield",
													Start: ast.Position{
														Column: 23,
														Line:   27,
													},
												},
											},
											Name: "yield",
										},
									},
								},
							}},
							With: nil,
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   28,
								},
								File:   "testing.flux",
								Source: "return {\n        fn:    tc.fn,\n        input: tc.input,\n        want:  tc.want |> yield(name: \"want\"),\n        got:   got |> yield(name: \"got\"),\n        diff:  dif |> yield(name: \"diff\"),\n    }",
								Start: ast.Position{
									Column: 5,
									Line:   22,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   18,
							},
							File:   "testing.flux",
							Source: "case",
							Start: ast.Position{
								Column: 12,
								Line:   18,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   18,
								},
								File:   "testing.flux",
								Source: "case",
								Start: ast.Position{
									Column: 12,
									Line:   18,
								},
							},
						},
						Name: "case",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   33,
					},
					File:   "testing.flux",
					Source: "run = (case) => {\n    return inspect(case: case).diff |> assertEmpty()\n}",
					Start: ast.Position{
						Column: 1,
						Line:   31,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   31,
						},
						File:   "testing.flux",
						Source: "run",
						Start: ast.Position{
							Column: 1,
							Line:   31,
						},
					},
				},
				Name: "run",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   33,
						},
						File:   "testing.flux",
						Source: "(case) => {\n    return inspect(case: case).diff |> assertEmpty()\n}",
						Start: ast.Position{
							Column: 7,
							Line:   31,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   33,
							},
							File:   "testing.flux",
							Source: "{\n    return inspect(case: case).diff |> assertEmpty()\n}",
							Start: ast.Position{
								Column: 17,
								Line:   31,
							},
						},
					},
					Body: []ast.Statement{&ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 36,
											Line:   32,
										},
										File:   "testing.flux",
										Source: "inspect(case: case).diff",
										Start: ast.Position{
											Column: 12,
											Line:   32,
										},
									},
								},
								Object: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   32,
												},
												File:   "testing.flux",
												Source: "case: case",
												Start: ast.Position{
													Column: 20,
													Line:   32,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   32,
													},
													File:   "testing.flux",
													Source: "case: case",
													Start: ast.Position{
														Column: 20,
														Line:   32,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 24,
															Line:   32,
														},
														File:   "testing.flux",
														Source: "case",
														Start: ast.Position{
															Column: 20,
															Line:   32,
														},
													},
												},
												Name: "case",
											},
											Value: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   32,
														},
														File:   "testing.flux",
														Source: "case",
														Start: ast.Position{
															Column: 26,
															Line:   32,
														},
													},
												},
												Name: "case",
											},
										}},
										With: nil,
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   32,
											},
											File:   "testing.flux",
											Source: "inspect(case: case)",
											Start: ast.Position{
												Column: 12,
												Line:   32,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   32,
												},
												File:   "testing.flux",
												Source: "inspect",
												Start: ast.Position{
													Column: 12,
													Line:   32,
												},
											},
										},
										Name: "inspect",
									},
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   32,
											},
											File:   "testing.flux",
											Source: "diff",
											Start: ast.Position{
												Column: 32,
												Line:   32,
											},
										},
									},
									Name: "diff",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 53,
										Line:   32,
									},
									File:   "testing.flux",
									Source: "inspect(case: case).diff |> assertEmpty()",
									Start: ast.Position{
										Column: 12,
										Line:   32,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 53,
											Line:   32,
										},
										File:   "testing.flux",
										Source: "assertEmpty()",
										Start: ast.Position{
											Column: 40,
											Line:   32,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 51,
												Line:   32,
											},
											File:   "testing.flux",
											Source: "assertEmpty",
											Start: ast.Position{
												Column: 40,
												Line:   32,
											},
										},
									},
									Name: "assertEmpty",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 53,
									Line:   32,
								},
								File:   "testing.flux",
								Source: "return inspect(case: case).diff |> assertEmpty()",
								Start: ast.Position{
									Column: 5,
									Line:   32,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   31,
							},
							File:   "testing.flux",
							Source: "case",
							Start: ast.Position{
								Column: 8,
								Line:   31,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   31,
								},
								File:   "testing.flux",
								Source: "case",
								Start: ast.Position{
									Column: 8,
									Line:   31,
								},
							},
						},
						Name: "case",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   38,
					},
					File:   "testing.flux",
					Source: "benchmark = (case) => {\n\ttc = case()\n\treturn tc.input |> tc.fn()\n}",
					Start: ast.Position{
						Column: 1,
						Line:   35,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   35,
						},
						File:   "testing.flux",
						Source: "benchmark",
						Start: ast.Position{
							Column: 1,
							Line:   35,
						},
					},
				},
				Name: "benchmark",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   38,
						},
						File:   "testing.flux",
						Source: "(case) => {\n\ttc = case()\n\treturn tc.input |> tc.fn()\n}",
						Start: ast.Position{
							Column: 13,
							Line:   35,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   38,
							},
							File:   "testing.flux",
							Source: "{\n\ttc = case()\n\treturn tc.input |> tc.fn()\n}",
							Start: ast.Position{
								Column: 23,
								Line:   35,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   36,
								},
								File:   "testing.flux",
								Source: "tc = case()",
								Start: ast.Position{
									Column: 2,
									Line:   36,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 4,
										Line:   36,
									},
									File:   "testing.flux",
									Source: "tc",
									Start: ast.Position{
										Column: 2,
										Line:   36,
									},
								},
							},
							Name: "tc",
						},
						Init: &ast.CallExpression{
							Arguments: nil,
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 13,
										Line:   36,
									},
									File:   "testing.flux",
									Source: "case()",
									Start: ast.Position{
										Column: 7,
										Line:   36,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 11,
											Line:   36,
										},
										File:   "testing.flux",
										Source: "case",
										Start: ast.Position{
											Column: 7,
											Line:   36,
										},
									},
								},
								Name: "case",
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 17,
											Line:   37,
										},
										File:   "testing.flux",
										Source: "tc.input",
										Start: ast.Position{
											Column: 9,
											Line:   37,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   37,
											},
											File:   "testing.flux",
											Source: "tc",
											Start: ast.Position{
												Column: 9,
												Line:   37,
											},
										},
									},
									Name: "tc",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   37,
											},
											File:   "testing.flux",
											Source: "input",
											Start: ast.Position{
												Column: 12,
												Line:   37,
											},
										},
									},
									Name: "input",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 28,
										Line:   37,
									},
									File:   "testing.flux",
									Source: "tc.input |> tc.fn()",
									Start: ast.Position{
										Column: 9,
										Line:   37,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   37,
										},
										File:   "testing.flux",
										Source: "tc.fn()",
										Start: ast.Position{
											Column: 21,
											Line:   37,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   37,
											},
											File:   "testing.flux",
											Source: "tc.fn",
											Start: ast.Position{
												Column: 21,
												Line:   37,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   37,
												},
												File:   "testing.flux",
												Source: "tc",
												Start: ast.Position{
													Column: 21,
													Line:   37,
												},
											},
										},
										Name: "tc",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 26,
													Line:   37,
												},
												File:   "testing.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 24,
													Line:   37,
												},
											},
										},
										Name: "fn",
									},
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 28,
									Line:   37,
								},
								File:   "testing.flux",
								Source: "return tc.input |> tc.fn()",
								Start: ast.Position{
									Column: 2,
									Line:   37,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   35,
							},
							File:   "testing.flux",
							Source: "case",
							Start: ast.Position{
								Column: 14,
								Line:   35,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 18,
									Line:   35,
								},
								File:   "testing.flux",
								Source: "case",
								Start: ast.Position{
									Column: 14,
									Line:   35,
								},
							},
						},
						Name: "case",
					},
					Value: nil,
				}},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   3,
						},
						File:   "testing.flux",
						Source: "c",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Name: "c",
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   3,
					},
					File:   "testing.flux",
					Source: "import c \"csv\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   3,
						},
						File:   "testing.flux",
						Source: "\"csv\"",
						Start: ast.Position{
							Column: 10,
							Line:   3,
						},
					},
				},
				Value: "csv",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "testing.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   1,
					},
					File:   "testing.flux",
					Source: "package testing",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   1,
						},
						File:   "testing.flux",
						Source: "testing",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "testing",
			},
		},
	}},
	Package: "testing",
	Path:    "testing",
}
