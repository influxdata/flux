// DO NOT EDIT: This file is autogenerated via the builtin command.

package testing

import (
	flux "github.com/influxdata/flux"
	ast "github.com/influxdata/flux/ast"
)

func init() {
	flux.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 2,
					Line:   34,
				},
				File:   "testing.flux",
				Source: "package testing\n\nimport c \"csv\"\n\nbuiltin assertEquals\nbuiltin assertEmpty\nbuiltin diff\n\nloadStorage = (csv) => c.from(csv: csv)\nloadMem = (csv) => c.from(csv: csv)\n\nrun = (case) => {\n    tc = case()\n    return tc.input\n        |> tc.fn()\n        |> diff(want: tc.want)\n        |> yield(name: \"diff\")\n        |> assertEmpty()\n}\n\ninspect = (case) => {\n    tc = case()\n    got = tc.input |> tc.fn()\n    dif = got |> diff(want: tc.want)\n    pass = dif |> assertEmpty()\n    return {\n        fn:    tc.fn,\n        input: tc.input\n        want:  tc.want,\n        got:   got,\n        diff:  dif,\n        pass:  pass,\n    }\n}",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 21,
						Line:   5,
					},
					File:   "testing.flux",
					Source: "builtin assertEquals",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 21,
							Line:   5,
						},
						File:   "testing.flux",
						Source: "assertEquals",
						Start: ast.Position{
							Column: 9,
							Line:   5,
						},
					},
				},
				Name: "assertEquals",
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 20,
						Line:   6,
					},
					File:   "testing.flux",
					Source: "builtin assertEmpty",
					Start: ast.Position{
						Column: 1,
						Line:   6,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 20,
							Line:   6,
						},
						File:   "testing.flux",
						Source: "assertEmpty",
						Start: ast.Position{
							Column: 9,
							Line:   6,
						},
					},
				},
				Name: "assertEmpty",
			},
		}, &ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 13,
						Line:   7,
					},
					File:   "testing.flux",
					Source: "builtin diff",
					Start: ast.Position{
						Column: 1,
						Line:   7,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 13,
							Line:   7,
						},
						File:   "testing.flux",
						Source: "diff",
						Start: ast.Position{
							Column: 9,
							Line:   7,
						},
					},
				},
				Name: "diff",
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 40,
						Line:   9,
					},
					File:   "testing.flux",
					Source: "loadStorage = (csv) => c.from(csv: csv)",
					Start: ast.Position{
						Column: 1,
						Line:   9,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 12,
							Line:   9,
						},
						File:   "testing.flux",
						Source: "loadStorage",
						Start: ast.Position{
							Column: 1,
							Line:   9,
						},
					},
				},
				Name: "loadStorage",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 40,
							Line:   9,
						},
						File:   "testing.flux",
						Source: "(csv) => c.from(csv: csv)",
						Start: ast.Position{
							Column: 15,
							Line:   9,
						},
					},
				},
				Body: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 39,
									Line:   9,
								},
								File:   "testing.flux",
								Source: "csv: csv",
								Start: ast.Position{
									Column: 31,
									Line:   9,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 39,
										Line:   9,
									},
									File:   "testing.flux",
									Source: "csv: csv",
									Start: ast.Position{
										Column: 31,
										Line:   9,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   9,
										},
										File:   "testing.flux",
										Source: "csv",
										Start: ast.Position{
											Column: 31,
											Line:   9,
										},
									},
								},
								Name: "csv",
							},
							Value: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 39,
											Line:   9,
										},
										File:   "testing.flux",
										Source: "csv",
										Start: ast.Position{
											Column: 36,
											Line:   9,
										},
									},
								},
								Name: "csv",
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 40,
								Line:   9,
							},
							File:   "testing.flux",
							Source: "c.from(csv: csv)",
							Start: ast.Position{
								Column: 24,
								Line:   9,
							},
						},
					},
					Callee: &ast.MemberExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   9,
								},
								File:   "testing.flux",
								Source: "c.from",
								Start: ast.Position{
									Column: 24,
									Line:   9,
								},
							},
						},
						Object: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   9,
									},
									File:   "testing.flux",
									Source: "c",
									Start: ast.Position{
										Column: 24,
										Line:   9,
									},
								},
							},
							Name: "c",
						},
						Property: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   9,
									},
									File:   "testing.flux",
									Source: "from",
									Start: ast.Position{
										Column: 26,
										Line:   9,
									},
								},
							},
							Name: "from",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 19,
								Line:   9,
							},
							File:   "testing.flux",
							Source: "csv",
							Start: ast.Position{
								Column: 16,
								Line:   9,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 19,
									Line:   9,
								},
								File:   "testing.flux",
								Source: "csv",
								Start: ast.Position{
									Column: 16,
									Line:   9,
								},
							},
						},
						Name: "csv",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 36,
						Line:   10,
					},
					File:   "testing.flux",
					Source: "loadMem = (csv) => c.from(csv: csv)",
					Start: ast.Position{
						Column: 1,
						Line:   10,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   10,
						},
						File:   "testing.flux",
						Source: "loadMem",
						Start: ast.Position{
							Column: 1,
							Line:   10,
						},
					},
				},
				Name: "loadMem",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 36,
							Line:   10,
						},
						File:   "testing.flux",
						Source: "(csv) => c.from(csv: csv)",
						Start: ast.Position{
							Column: 11,
							Line:   10,
						},
					},
				},
				Body: &ast.CallExpression{
					Arguments: []ast.Expression{&ast.ObjectExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   10,
								},
								File:   "testing.flux",
								Source: "csv: csv",
								Start: ast.Position{
									Column: 27,
									Line:   10,
								},
							},
						},
						Properties: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   10,
									},
									File:   "testing.flux",
									Source: "csv: csv",
									Start: ast.Position{
										Column: 27,
										Line:   10,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   10,
										},
										File:   "testing.flux",
										Source: "csv",
										Start: ast.Position{
											Column: 27,
											Line:   10,
										},
									},
								},
								Name: "csv",
							},
							Value: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 35,
											Line:   10,
										},
										File:   "testing.flux",
										Source: "csv",
										Start: ast.Position{
											Column: 32,
											Line:   10,
										},
									},
								},
								Name: "csv",
							},
						}},
					}},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 36,
								Line:   10,
							},
							File:   "testing.flux",
							Source: "c.from(csv: csv)",
							Start: ast.Position{
								Column: 20,
								Line:   10,
							},
						},
					},
					Callee: &ast.MemberExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   10,
								},
								File:   "testing.flux",
								Source: "c.from",
								Start: ast.Position{
									Column: 20,
									Line:   10,
								},
							},
						},
						Object: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   10,
									},
									File:   "testing.flux",
									Source: "c",
									Start: ast.Position{
										Column: 20,
										Line:   10,
									},
								},
							},
							Name: "c",
						},
						Property: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 26,
										Line:   10,
									},
									File:   "testing.flux",
									Source: "from",
									Start: ast.Position{
										Column: 22,
										Line:   10,
									},
								},
							},
							Name: "from",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   10,
							},
							File:   "testing.flux",
							Source: "csv",
							Start: ast.Position{
								Column: 12,
								Line:   10,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   10,
								},
								File:   "testing.flux",
								Source: "csv",
								Start: ast.Position{
									Column: 12,
									Line:   10,
								},
							},
						},
						Name: "csv",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   19,
					},
					File:   "testing.flux",
					Source: "run = (case) => {\n    tc = case()\n    return tc.input\n        |> tc.fn()\n        |> diff(want: tc.want)\n        |> yield(name: \"diff\")\n        |> assertEmpty()\n}",
					Start: ast.Position{
						Column: 1,
						Line:   12,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 4,
							Line:   12,
						},
						File:   "testing.flux",
						Source: "run",
						Start: ast.Position{
							Column: 1,
							Line:   12,
						},
					},
				},
				Name: "run",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   19,
						},
						File:   "testing.flux",
						Source: "(case) => {\n    tc = case()\n    return tc.input\n        |> tc.fn()\n        |> diff(want: tc.want)\n        |> yield(name: \"diff\")\n        |> assertEmpty()\n}",
						Start: ast.Position{
							Column: 7,
							Line:   12,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   19,
							},
							File:   "testing.flux",
							Source: "{\n    tc = case()\n    return tc.input\n        |> tc.fn()\n        |> diff(want: tc.want)\n        |> yield(name: \"diff\")\n        |> assertEmpty()\n}",
							Start: ast.Position{
								Column: 17,
								Line:   12,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   13,
								},
								File:   "testing.flux",
								Source: "tc = case()",
								Start: ast.Position{
									Column: 5,
									Line:   13,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 7,
										Line:   13,
									},
									File:   "testing.flux",
									Source: "tc",
									Start: ast.Position{
										Column: 5,
										Line:   13,
									},
								},
							},
							Name: "tc",
						},
						Init: &ast.CallExpression{
							Arguments: nil,
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   13,
									},
									File:   "testing.flux",
									Source: "case()",
									Start: ast.Position{
										Column: 10,
										Line:   13,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   13,
										},
										File:   "testing.flux",
										Source: "case",
										Start: ast.Position{
											Column: 10,
											Line:   13,
										},
									},
								},
								Name: "case",
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.PipeExpression{
									Argument: &ast.PipeExpression{
										Argument: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 20,
														Line:   14,
													},
													File:   "testing.flux",
													Source: "tc.input",
													Start: ast.Position{
														Column: 12,
														Line:   14,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 14,
															Line:   14,
														},
														File:   "testing.flux",
														Source: "tc",
														Start: ast.Position{
															Column: 12,
															Line:   14,
														},
													},
												},
												Name: "tc",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 20,
															Line:   14,
														},
														File:   "testing.flux",
														Source: "input",
														Start: ast.Position{
															Column: 15,
															Line:   14,
														},
													},
												},
												Name: "input",
											},
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 19,
													Line:   15,
												},
												File:   "testing.flux",
												Source: "tc.input\n        |> tc.fn()",
												Start: ast.Position{
													Column: 12,
													Line:   14,
												},
											},
										},
										Call: &ast.CallExpression{
											Arguments: nil,
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 19,
														Line:   15,
													},
													File:   "testing.flux",
													Source: "tc.fn()",
													Start: ast.Position{
														Column: 12,
														Line:   15,
													},
												},
											},
											Callee: &ast.MemberExpression{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 17,
															Line:   15,
														},
														File:   "testing.flux",
														Source: "tc.fn",
														Start: ast.Position{
															Column: 12,
															Line:   15,
														},
													},
												},
												Object: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 14,
																Line:   15,
															},
															File:   "testing.flux",
															Source: "tc",
															Start: ast.Position{
																Column: 12,
																Line:   15,
															},
														},
													},
													Name: "tc",
												},
												Property: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 17,
																Line:   15,
															},
															File:   "testing.flux",
															Source: "fn",
															Start: ast.Position{
																Column: 15,
																Line:   15,
															},
														},
													},
													Name: "fn",
												},
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   16,
											},
											File:   "testing.flux",
											Source: "tc.input\n        |> tc.fn()\n        |> diff(want: tc.want)",
											Start: ast.Position{
												Column: 12,
												Line:   14,
											},
										},
									},
									Call: &ast.CallExpression{
										Arguments: []ast.Expression{&ast.ObjectExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   16,
													},
													File:   "testing.flux",
													Source: "want: tc.want",
													Start: ast.Position{
														Column: 17,
														Line:   16,
													},
												},
											},
											Properties: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   16,
														},
														File:   "testing.flux",
														Source: "want: tc.want",
														Start: ast.Position{
															Column: 17,
															Line:   16,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 21,
																Line:   16,
															},
															File:   "testing.flux",
															Source: "want",
															Start: ast.Position{
																Column: 17,
																Line:   16,
															},
														},
													},
													Name: "want",
												},
												Value: &ast.MemberExpression{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 30,
																Line:   16,
															},
															File:   "testing.flux",
															Source: "tc.want",
															Start: ast.Position{
																Column: 23,
																Line:   16,
															},
														},
													},
													Object: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 25,
																	Line:   16,
																},
																File:   "testing.flux",
																Source: "tc",
																Start: ast.Position{
																	Column: 23,
																	Line:   16,
																},
															},
														},
														Name: "tc",
													},
													Property: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 30,
																	Line:   16,
																},
																File:   "testing.flux",
																Source: "want",
																Start: ast.Position{
																	Column: 26,
																	Line:   16,
																},
															},
														},
														Name: "want",
													},
												},
											}},
										}},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 31,
													Line:   16,
												},
												File:   "testing.flux",
												Source: "diff(want: tc.want)",
												Start: ast.Position{
													Column: 12,
													Line:   16,
												},
											},
										},
										Callee: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 16,
														Line:   16,
													},
													File:   "testing.flux",
													Source: "diff",
													Start: ast.Position{
														Column: 12,
														Line:   16,
													},
												},
											},
											Name: "diff",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   17,
										},
										File:   "testing.flux",
										Source: "tc.input\n        |> tc.fn()\n        |> diff(want: tc.want)\n        |> yield(name: \"diff\")",
										Start: ast.Position{
											Column: 12,
											Line:   14,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: []ast.Expression{&ast.ObjectExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   17,
												},
												File:   "testing.flux",
												Source: "name: \"diff\"",
												Start: ast.Position{
													Column: 18,
													Line:   17,
												},
											},
										},
										Properties: []*ast.Property{&ast.Property{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   17,
													},
													File:   "testing.flux",
													Source: "name: \"diff\"",
													Start: ast.Position{
														Column: 18,
														Line:   17,
													},
												},
											},
											Key: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 22,
															Line:   17,
														},
														File:   "testing.flux",
														Source: "name",
														Start: ast.Position{
															Column: 18,
															Line:   17,
														},
													},
												},
												Name: "name",
											},
											Value: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 30,
															Line:   17,
														},
														File:   "testing.flux",
														Source: "\"diff\"",
														Start: ast.Position{
															Column: 24,
															Line:   17,
														},
													},
												},
												Value: "diff",
											},
										}},
									}},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   17,
											},
											File:   "testing.flux",
											Source: "yield(name: \"diff\")",
											Start: ast.Position{
												Column: 12,
												Line:   17,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 17,
													Line:   17,
												},
												File:   "testing.flux",
												Source: "yield",
												Start: ast.Position{
													Column: 12,
													Line:   17,
												},
											},
										},
										Name: "yield",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 25,
										Line:   18,
									},
									File:   "testing.flux",
									Source: "tc.input\n        |> tc.fn()\n        |> diff(want: tc.want)\n        |> yield(name: \"diff\")\n        |> assertEmpty()",
									Start: ast.Position{
										Column: 12,
										Line:   14,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   18,
										},
										File:   "testing.flux",
										Source: "assertEmpty()",
										Start: ast.Position{
											Column: 12,
											Line:   18,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   18,
											},
											File:   "testing.flux",
											Source: "assertEmpty",
											Start: ast.Position{
												Column: 12,
												Line:   18,
											},
										},
									},
									Name: "assertEmpty",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   18,
								},
								File:   "testing.flux",
								Source: "return tc.input\n        |> tc.fn()\n        |> diff(want: tc.want)\n        |> yield(name: \"diff\")\n        |> assertEmpty()",
								Start: ast.Position{
									Column: 5,
									Line:   14,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   12,
							},
							File:   "testing.flux",
							Source: "case",
							Start: ast.Position{
								Column: 8,
								Line:   12,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   12,
								},
								File:   "testing.flux",
								Source: "case",
								Start: ast.Position{
									Column: 8,
									Line:   12,
								},
							},
						},
						Name: "case",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   34,
					},
					File:   "testing.flux",
					Source: "inspect = (case) => {\n    tc = case()\n    got = tc.input |> tc.fn()\n    dif = got |> diff(want: tc.want)\n    pass = dif |> assertEmpty()\n    return {\n        fn:    tc.fn,\n        input: tc.input\n        want:  tc.want,\n        got:   got,\n        diff:  dif,\n        pass:  pass,\n    }\n}",
					Start: ast.Position{
						Column: 1,
						Line:   21,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 8,
							Line:   21,
						},
						File:   "testing.flux",
						Source: "inspect",
						Start: ast.Position{
							Column: 1,
							Line:   21,
						},
					},
				},
				Name: "inspect",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   34,
						},
						File:   "testing.flux",
						Source: "(case) => {\n    tc = case()\n    got = tc.input |> tc.fn()\n    dif = got |> diff(want: tc.want)\n    pass = dif |> assertEmpty()\n    return {\n        fn:    tc.fn,\n        input: tc.input\n        want:  tc.want,\n        got:   got,\n        diff:  dif,\n        pass:  pass,\n    }\n}",
						Start: ast.Position{
							Column: 11,
							Line:   21,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   34,
							},
							File:   "testing.flux",
							Source: "{\n    tc = case()\n    got = tc.input |> tc.fn()\n    dif = got |> diff(want: tc.want)\n    pass = dif |> assertEmpty()\n    return {\n        fn:    tc.fn,\n        input: tc.input\n        want:  tc.want,\n        got:   got,\n        diff:  dif,\n        pass:  pass,\n    }\n}",
							Start: ast.Position{
								Column: 21,
								Line:   21,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   22,
								},
								File:   "testing.flux",
								Source: "tc = case()",
								Start: ast.Position{
									Column: 5,
									Line:   22,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 7,
										Line:   22,
									},
									File:   "testing.flux",
									Source: "tc",
									Start: ast.Position{
										Column: 5,
										Line:   22,
									},
								},
							},
							Name: "tc",
						},
						Init: &ast.CallExpression{
							Arguments: nil,
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 16,
										Line:   22,
									},
									File:   "testing.flux",
									Source: "case()",
									Start: ast.Position{
										Column: 10,
										Line:   22,
									},
								},
							},
							Callee: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   22,
										},
										File:   "testing.flux",
										Source: "case",
										Start: ast.Position{
											Column: 10,
											Line:   22,
										},
									},
								},
								Name: "case",
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 30,
									Line:   23,
								},
								File:   "testing.flux",
								Source: "got = tc.input |> tc.fn()",
								Start: ast.Position{
									Column: 5,
									Line:   23,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   23,
									},
									File:   "testing.flux",
									Source: "got",
									Start: ast.Position{
										Column: 5,
										Line:   23,
									},
								},
							},
							Name: "got",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   23,
										},
										File:   "testing.flux",
										Source: "tc.input",
										Start: ast.Position{
											Column: 11,
											Line:   23,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   23,
											},
											File:   "testing.flux",
											Source: "tc",
											Start: ast.Position{
												Column: 11,
												Line:   23,
											},
										},
									},
									Name: "tc",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   23,
											},
											File:   "testing.flux",
											Source: "input",
											Start: ast.Position{
												Column: 14,
												Line:   23,
											},
										},
									},
									Name: "input",
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 30,
										Line:   23,
									},
									File:   "testing.flux",
									Source: "tc.input |> tc.fn()",
									Start: ast.Position{
										Column: 11,
										Line:   23,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   23,
										},
										File:   "testing.flux",
										Source: "tc.fn()",
										Start: ast.Position{
											Column: 23,
											Line:   23,
										},
									},
								},
								Callee: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   23,
											},
											File:   "testing.flux",
											Source: "tc.fn",
											Start: ast.Position{
												Column: 23,
												Line:   23,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 25,
													Line:   23,
												},
												File:   "testing.flux",
												Source: "tc",
												Start: ast.Position{
													Column: 23,
													Line:   23,
												},
											},
										},
										Name: "tc",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   23,
												},
												File:   "testing.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 26,
													Line:   23,
												},
											},
										},
										Name: "fn",
									},
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   24,
								},
								File:   "testing.flux",
								Source: "dif = got |> diff(want: tc.want)",
								Start: ast.Position{
									Column: 5,
									Line:   24,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   24,
									},
									File:   "testing.flux",
									Source: "dif",
									Start: ast.Position{
										Column: 5,
										Line:   24,
									},
								},
							},
							Name: "dif",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 14,
											Line:   24,
										},
										File:   "testing.flux",
										Source: "got",
										Start: ast.Position{
											Column: 11,
											Line:   24,
										},
									},
								},
								Name: "got",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 37,
										Line:   24,
									},
									File:   "testing.flux",
									Source: "got |> diff(want: tc.want)",
									Start: ast.Position{
										Column: 11,
										Line:   24,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 36,
												Line:   24,
											},
											File:   "testing.flux",
											Source: "want: tc.want",
											Start: ast.Position{
												Column: 23,
												Line:   24,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 36,
													Line:   24,
												},
												File:   "testing.flux",
												Source: "want: tc.want",
												Start: ast.Position{
													Column: 23,
													Line:   24,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 27,
														Line:   24,
													},
													File:   "testing.flux",
													Source: "want",
													Start: ast.Position{
														Column: 23,
														Line:   24,
													},
												},
											},
											Name: "want",
										},
										Value: &ast.MemberExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 36,
														Line:   24,
													},
													File:   "testing.flux",
													Source: "tc.want",
													Start: ast.Position{
														Column: 29,
														Line:   24,
													},
												},
											},
											Object: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 31,
															Line:   24,
														},
														File:   "testing.flux",
														Source: "tc",
														Start: ast.Position{
															Column: 29,
															Line:   24,
														},
													},
												},
												Name: "tc",
											},
											Property: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 36,
															Line:   24,
														},
														File:   "testing.flux",
														Source: "want",
														Start: ast.Position{
															Column: 32,
															Line:   24,
														},
													},
												},
												Name: "want",
											},
										},
									}},
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 37,
											Line:   24,
										},
										File:   "testing.flux",
										Source: "diff(want: tc.want)",
										Start: ast.Position{
											Column: 18,
											Line:   24,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   24,
											},
											File:   "testing.flux",
											Source: "diff",
											Start: ast.Position{
												Column: 18,
												Line:   24,
											},
										},
									},
									Name: "diff",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 32,
									Line:   25,
								},
								File:   "testing.flux",
								Source: "pass = dif |> assertEmpty()",
								Start: ast.Position{
									Column: 5,
									Line:   25,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   25,
									},
									File:   "testing.flux",
									Source: "pass",
									Start: ast.Position{
										Column: 5,
										Line:   25,
									},
								},
							},
							Name: "pass",
						},
						Init: &ast.PipeExpression{
							Argument: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   25,
										},
										File:   "testing.flux",
										Source: "dif",
										Start: ast.Position{
											Column: 12,
											Line:   25,
										},
									},
								},
								Name: "dif",
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 32,
										Line:   25,
									},
									File:   "testing.flux",
									Source: "dif |> assertEmpty()",
									Start: ast.Position{
										Column: 12,
										Line:   25,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: nil,
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   25,
										},
										File:   "testing.flux",
										Source: "assertEmpty()",
										Start: ast.Position{
											Column: 19,
											Line:   25,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   25,
											},
											File:   "testing.flux",
											Source: "assertEmpty",
											Start: ast.Position{
												Column: 19,
												Line:   25,
											},
										},
									},
									Name: "assertEmpty",
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   33,
									},
									File:   "testing.flux",
									Source: "{\n        fn:    tc.fn,\n        input: tc.input\n        want:  tc.want,\n        got:   got,\n        diff:  dif,\n        pass:  pass,\n    }",
									Start: ast.Position{
										Column: 12,
										Line:   26,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   27,
										},
										File:   "testing.flux",
										Source: "fn:    tc.fn",
										Start: ast.Position{
											Column: 9,
											Line:   27,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 11,
												Line:   27,
											},
											File:   "testing.flux",
											Source: "fn",
											Start: ast.Position{
												Column: 9,
												Line:   27,
											},
										},
									},
									Name: "fn",
								},
								Value: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   27,
											},
											File:   "testing.flux",
											Source: "tc.fn",
											Start: ast.Position{
												Column: 16,
												Line:   27,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   27,
												},
												File:   "testing.flux",
												Source: "tc",
												Start: ast.Position{
													Column: 16,
													Line:   27,
												},
											},
										},
										Name: "tc",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   27,
												},
												File:   "testing.flux",
												Source: "fn",
												Start: ast.Position{
													Column: 19,
													Line:   27,
												},
											},
										},
										Name: "fn",
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 24,
											Line:   28,
										},
										File:   "testing.flux",
										Source: "input: tc.input",
										Start: ast.Position{
											Column: 9,
											Line:   28,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   28,
											},
											File:   "testing.flux",
											Source: "input",
											Start: ast.Position{
												Column: 9,
												Line:   28,
											},
										},
									},
									Name: "input",
								},
								Value: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 24,
												Line:   28,
											},
											File:   "testing.flux",
											Source: "tc.input",
											Start: ast.Position{
												Column: 16,
												Line:   28,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   28,
												},
												File:   "testing.flux",
												Source: "tc",
												Start: ast.Position{
													Column: 16,
													Line:   28,
												},
											},
										},
										Name: "tc",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   28,
												},
												File:   "testing.flux",
												Source: "input",
												Start: ast.Position{
													Column: 19,
													Line:   28,
												},
											},
										},
										Name: "input",
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   29,
										},
										File:   "testing.flux",
										Source: "want:  tc.want",
										Start: ast.Position{
											Column: 9,
											Line:   29,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   29,
											},
											File:   "testing.flux",
											Source: "want",
											Start: ast.Position{
												Column: 9,
												Line:   29,
											},
										},
									},
									Name: "want",
								},
								Value: &ast.MemberExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   29,
											},
											File:   "testing.flux",
											Source: "tc.want",
											Start: ast.Position{
												Column: 16,
												Line:   29,
											},
										},
									},
									Object: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 18,
													Line:   29,
												},
												File:   "testing.flux",
												Source: "tc",
												Start: ast.Position{
													Column: 16,
													Line:   29,
												},
											},
										},
										Name: "tc",
									},
									Property: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 23,
													Line:   29,
												},
												File:   "testing.flux",
												Source: "want",
												Start: ast.Position{
													Column: 19,
													Line:   29,
												},
											},
										},
										Name: "want",
									},
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   30,
										},
										File:   "testing.flux",
										Source: "got:   got",
										Start: ast.Position{
											Column: 9,
											Line:   30,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 12,
												Line:   30,
											},
											File:   "testing.flux",
											Source: "got",
											Start: ast.Position{
												Column: 9,
												Line:   30,
											},
										},
									},
									Name: "got",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   30,
											},
											File:   "testing.flux",
											Source: "got",
											Start: ast.Position{
												Column: 16,
												Line:   30,
											},
										},
									},
									Name: "got",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 19,
											Line:   31,
										},
										File:   "testing.flux",
										Source: "diff:  dif",
										Start: ast.Position{
											Column: 9,
											Line:   31,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   31,
											},
											File:   "testing.flux",
											Source: "diff",
											Start: ast.Position{
												Column: 9,
												Line:   31,
											},
										},
									},
									Name: "diff",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   31,
											},
											File:   "testing.flux",
											Source: "dif",
											Start: ast.Position{
												Column: 16,
												Line:   31,
											},
										},
									},
									Name: "dif",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 20,
											Line:   32,
										},
										File:   "testing.flux",
										Source: "pass:  pass",
										Start: ast.Position{
											Column: 9,
											Line:   32,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 13,
												Line:   32,
											},
											File:   "testing.flux",
											Source: "pass",
											Start: ast.Position{
												Column: 9,
												Line:   32,
											},
										},
									},
									Name: "pass",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   32,
											},
											File:   "testing.flux",
											Source: "pass",
											Start: ast.Position{
												Column: 16,
												Line:   32,
											},
										},
									},
									Name: "pass",
								},
							}},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   33,
								},
								File:   "testing.flux",
								Source: "return {\n        fn:    tc.fn,\n        input: tc.input\n        want:  tc.want,\n        got:   got,\n        diff:  dif,\n        pass:  pass,\n    }",
								Start: ast.Position{
									Column: 5,
									Line:   26,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   21,
							},
							File:   "testing.flux",
							Source: "case",
							Start: ast.Position{
								Column: 12,
								Line:   21,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   21,
								},
								File:   "testing.flux",
								Source: "case",
								Start: ast.Position{
									Column: 12,
									Line:   21,
								},
							},
						},
						Name: "case",
					},
					Value: nil,
				}},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   3,
						},
						File:   "testing.flux",
						Source: "c",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Name: "c",
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   3,
					},
					File:   "testing.flux",
					Source: "import c \"csv\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   3,
						},
						File:   "testing.flux",
						Source: "\"csv\"",
						Start: ast.Position{
							Column: 10,
							Line:   3,
						},
					},
				},
				Value: "csv",
			},
		}},
		Name: "testing.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 16,
						Line:   1,
					},
					File:   "testing.flux",
					Source: "package testing",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   1,
						},
						File:   "testing.flux",
						Source: "testing",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "testing",
			},
		},
	}},
	Package: "testing",
	Path:    "testing",
}
