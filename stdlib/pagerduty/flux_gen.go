// DO NOT EDIT: This file is autogenerated via the builtin command.

package pagerduty

import (
	flux "github.com/influxdata/flux"
	ast "github.com/influxdata/flux/ast"
)

func init() {
	flux.RegisterPackage(pkgAST)
}

var pkgAST = &ast.Package{
	BaseNode: ast.BaseNode{
		Errors: nil,
		Loc:    nil,
	},
	Files: []*ast.File{&ast.File{
		BaseNode: ast.BaseNode{
			Errors: nil,
			Loc: &ast.SourceLocation{
				End: ast.Position{
					Column: 15,
					Line:   105,
				},
				File:   "",
				Source: "package pagerduty\n\nimport \"http\"\nimport \"json\"\nimport \"strings\"\n\n// `dedupKey` - adds a newline concatinated value of the sorted group key that is then sha256-hashed and hex-encoded to a column with the key `_pagerdutyDedupKey`.\nbuiltin dedupKey\n\noption defaultURL = \"https://events.pagerduty.com/v2/enqueue\"\n\n\n// severity levels on status objects can be one of the following: ok,info,warn,crit,unknown\n// but pagerduty only accepts critical, error, warning or info.\n// severityFromLevel turns a level from the status object into a pagerduty severity\nseverityFromLevel = (level) => {\n    lvl = strings.toLower(v:level)\n    sev = if lvl == \"warn\" then \"warning\" \n        else if lvl == \"crit\" then \"critical\" \n        else if lvl == \"info\" then \"info\" \n        else if lvl == \"ok\" then \"info\" \n        else \"error\"\n    return sev\n}\n\n// `actionFromLevel` converts a monitoring level to an action; \"ok\" becomes \"resolve\" everything else converts to \"trigger\".\nactionFromLevel = (level)=> if strings.toLower(v:level) == \"ok\" then \"resolve\" else \"trigger\"\n\n// `sendEvent` sends an event to PagerDuty, the description of some of these parameters taken from the pagerduty documentation at https://v2.developer.pagerduty.com/docs/send-an-event-events-api-v2\n// `pagerdutyURL` - sring - URL of the pagerduty endpoint.  Defaults to: `option defaultURL = \"https://events.pagerduty.com/v2/enqueue\"`\n// `routingKey` - string - routingKey.\n// `client` - string - name of the client sending the alert.\n// `clientURL` - string - url of the client sending the alert.\n// `dedupkey` - string - a per alert ID. It acts as deduplication key, that allows you to ack or change the severity of previous messages. Supports a maximum of 255 characters.\n// `class` - string - The class/type of the event, for example ping failure or cpu load.\n// `group` - string - Logical grouping of components of a service, for example app-stack.\n// `severity` - string - The perceived severity of the status the event is describing with respect to the affected system. This can be critical, error, warning or info.\n// `eventAction` - string - The type of event to send to PagerDuty (ex. trigger, resolve, acknowledge)\n// `source` - string - The unique location of the affected system, preferably a hostname or FQDN.\n// `summary` - string - A brief text summary of the event, used to generate the summaries/titles of any associated alerts. The maximum permitted length of this property is 1024 characters.\n// `timestamp` - string - The time at which the emitting tool detected or generated the event, in RFC 3339 nano format.\nsendEvent = (pagerdutyURL=defaultURL,\n    routingKey,\n    client,\n    clientURL,\n    dedupKey,\n    class,\n    group,\n    severity,\n    eventAction,\n    source,\n    summary,\n    timestamp) => {\n\n    payload = {\n            summary: summary,\n            timestamp: timestamp,\n            source: source,\n            severity: severity,\n            group: group,\n            class: class,\n    }\n    data = {\n        payload: payload,\n        routing_key: routingKey,\n        dedup_key: dedupKey,\n        event_action: eventAction,\n        client: client,\n        client_url: clientURL,\n    }\n\n    headers = {\n        \"Accept\": \"application/vnd.pagerduty+json;version=2\",\n        \"Content-Type\": \"application/json\",\n    }\n    enc = json.encode(v: data)\n    return http.post(headers: headers, url: pagerdutyURL, data: enc)\n}\n\n// `endpoint` creates the endpoint for the PagerDuty external service.\n// `url` - string - URL of the Pagerduty endpoint. Defaults to: \"https://events.pagerduty.com/v2/enqueue\".\n// The returned factory function accepts a `mapFn` parameter.\n// The `mapFn` parameter must be a function that returns an object with `routingKey`, `client`, `client_url`, `class`, `group`, `severity`, `eventAction`, `source`, `summary`, and `timestamp` as defined in the sendEvent function.\n// Note that while sendEvent accepts a dedup key, endpoint gets the dedupkey from the groupkey of the input table instead of it being handled by the `mapFn`.\nendpoint = (url=defaultURL) =>\n    (mapFn) =>\n        (tables=<-) => tables\n            |> dedupKey()\n            |> map(fn: (r) => {\n                obj = mapFn(r: r)\n                \n                return {r with _sent: string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))}\n            })",
				Start: ast.Position{
					Column: 1,
					Line:   1,
				},
			},
		},
		Body: []ast.Statement{&ast.BuiltinStatement{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   8,
					},
					File:   "",
					Source: "builtin dedupKey",
					Start: ast.Position{
						Column: 1,
						Line:   8,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   8,
						},
						File:   "",
						Source: "dedupKey",
						Start: ast.Position{
							Column: 9,
							Line:   8,
						},
					},
				},
				Name: "dedupKey",
			},
		}, &ast.OptionStatement{
			Assignment: &ast.VariableAssignment{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 62,
							Line:   10,
						},
						File:   "",
						Source: "defaultURL = \"https://events.pagerduty.com/v2/enqueue\"",
						Start: ast.Position{
							Column: 8,
							Line:   10,
						},
					},
				},
				ID: &ast.Identifier{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 18,
								Line:   10,
							},
							File:   "",
							Source: "defaultURL",
							Start: ast.Position{
								Column: 8,
								Line:   10,
							},
						},
					},
					Name: "defaultURL",
				},
				Init: &ast.StringLiteral{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 62,
								Line:   10,
							},
							File:   "",
							Source: "\"https://events.pagerduty.com/v2/enqueue\"",
							Start: ast.Position{
								Column: 21,
								Line:   10,
							},
						},
					},
					Value: "https://events.pagerduty.com/v2/enqueue",
				},
			},
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 62,
						Line:   10,
					},
					File:   "",
					Source: "option defaultURL = \"https://events.pagerduty.com/v2/enqueue\"",
					Start: ast.Position{
						Column: 1,
						Line:   10,
					},
				},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   24,
					},
					File:   "",
					Source: "severityFromLevel = (level) => {\n    lvl = strings.toLower(v:level)\n    sev = if lvl == \"warn\" then \"warning\" \n        else if lvl == \"crit\" then \"critical\" \n        else if lvl == \"info\" then \"info\" \n        else if lvl == \"ok\" then \"info\" \n        else \"error\"\n    return sev\n}",
					Start: ast.Position{
						Column: 1,
						Line:   16,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   16,
						},
						File:   "",
						Source: "severityFromLevel",
						Start: ast.Position{
							Column: 1,
							Line:   16,
						},
					},
				},
				Name: "severityFromLevel",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   24,
						},
						File:   "",
						Source: "(level) => {\n    lvl = strings.toLower(v:level)\n    sev = if lvl == \"warn\" then \"warning\" \n        else if lvl == \"crit\" then \"critical\" \n        else if lvl == \"info\" then \"info\" \n        else if lvl == \"ok\" then \"info\" \n        else \"error\"\n    return sev\n}",
						Start: ast.Position{
							Column: 21,
							Line:   16,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   24,
							},
							File:   "",
							Source: "{\n    lvl = strings.toLower(v:level)\n    sev = if lvl == \"warn\" then \"warning\" \n        else if lvl == \"crit\" then \"critical\" \n        else if lvl == \"info\" then \"info\" \n        else if lvl == \"ok\" then \"info\" \n        else \"error\"\n    return sev\n}",
							Start: ast.Position{
								Column: 32,
								Line:   16,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 35,
									Line:   17,
								},
								File:   "",
								Source: "lvl = strings.toLower(v:level)",
								Start: ast.Position{
									Column: 5,
									Line:   17,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   17,
									},
									File:   "",
									Source: "lvl",
									Start: ast.Position{
										Column: 5,
										Line:   17,
									},
								},
							},
							Name: "lvl",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   17,
										},
										File:   "",
										Source: "v:level",
										Start: ast.Position{
											Column: 27,
											Line:   17,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   17,
											},
											File:   "",
											Source: "v:level",
											Start: ast.Position{
												Column: 27,
												Line:   17,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 28,
													Line:   17,
												},
												File:   "",
												Source: "v",
												Start: ast.Position{
													Column: 27,
													Line:   17,
												},
											},
										},
										Name: "v",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 34,
													Line:   17,
												},
												File:   "",
												Source: "level",
												Start: ast.Position{
													Column: 29,
													Line:   17,
												},
											},
										},
										Name: "level",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 35,
										Line:   17,
									},
									File:   "",
									Source: "strings.toLower(v:level)",
									Start: ast.Position{
										Column: 11,
										Line:   17,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   17,
										},
										File:   "",
										Source: "strings.toLower",
										Start: ast.Position{
											Column: 11,
											Line:   17,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   17,
											},
											File:   "",
											Source: "strings",
											Start: ast.Position{
												Column: 11,
												Line:   17,
											},
										},
									},
									Name: "strings",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   17,
											},
											File:   "",
											Source: "toLower",
											Start: ast.Position{
												Column: 19,
												Line:   17,
											},
										},
									},
									Name: "toLower",
								},
							},
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 21,
									Line:   22,
								},
								File:   "",
								Source: "sev = if lvl == \"warn\" then \"warning\" \n        else if lvl == \"crit\" then \"critical\" \n        else if lvl == \"info\" then \"info\" \n        else if lvl == \"ok\" then \"info\" \n        else \"error\"",
								Start: ast.Position{
									Column: 5,
									Line:   18,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   18,
									},
									File:   "",
									Source: "sev",
									Start: ast.Position{
										Column: 5,
										Line:   18,
									},
								},
							},
							Name: "sev",
						},
						Init: &ast.ConditionalExpression{
							Alternate: &ast.ConditionalExpression{
								Alternate: &ast.ConditionalExpression{
									Alternate: &ast.ConditionalExpression{
										Alternate: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 21,
														Line:   22,
													},
													File:   "",
													Source: "\"error\"",
													Start: ast.Position{
														Column: 14,
														Line:   22,
													},
												},
											},
											Value: "error",
										},
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 21,
													Line:   22,
												},
												File:   "",
												Source: "if lvl == \"ok\" then \"info\" \n        else \"error\"",
												Start: ast.Position{
													Column: 14,
													Line:   21,
												},
											},
										},
										Consequent: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 40,
														Line:   21,
													},
													File:   "",
													Source: "\"info\"",
													Start: ast.Position{
														Column: 34,
														Line:   21,
													},
												},
											},
											Value: "info",
										},
										Test: &ast.BinaryExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 28,
														Line:   21,
													},
													File:   "",
													Source: "lvl == \"ok\"",
													Start: ast.Position{
														Column: 17,
														Line:   21,
													},
												},
											},
											Left: &ast.Identifier{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 20,
															Line:   21,
														},
														File:   "",
														Source: "lvl",
														Start: ast.Position{
															Column: 17,
															Line:   21,
														},
													},
												},
												Name: "lvl",
											},
											Operator: 17,
											Right: &ast.StringLiteral{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 28,
															Line:   21,
														},
														File:   "",
														Source: "\"ok\"",
														Start: ast.Position{
															Column: 24,
															Line:   21,
														},
													},
												},
												Value: "ok",
											},
										},
									},
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   22,
											},
											File:   "",
											Source: "if lvl == \"info\" then \"info\" \n        else if lvl == \"ok\" then \"info\" \n        else \"error\"",
											Start: ast.Position{
												Column: 14,
												Line:   20,
											},
										},
									},
									Consequent: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 42,
													Line:   20,
												},
												File:   "",
												Source: "\"info\"",
												Start: ast.Position{
													Column: 36,
													Line:   20,
												},
											},
										},
										Value: "info",
									},
									Test: &ast.BinaryExpression{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   20,
												},
												File:   "",
												Source: "lvl == \"info\"",
												Start: ast.Position{
													Column: 17,
													Line:   20,
												},
											},
										},
										Left: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 20,
														Line:   20,
													},
													File:   "",
													Source: "lvl",
													Start: ast.Position{
														Column: 17,
														Line:   20,
													},
												},
											},
											Name: "lvl",
										},
										Operator: 17,
										Right: &ast.StringLiteral{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 30,
														Line:   20,
													},
													File:   "",
													Source: "\"info\"",
													Start: ast.Position{
														Column: 24,
														Line:   20,
													},
												},
											},
											Value: "info",
										},
									},
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   22,
										},
										File:   "",
										Source: "if lvl == \"crit\" then \"critical\" \n        else if lvl == \"info\" then \"info\" \n        else if lvl == \"ok\" then \"info\" \n        else \"error\"",
										Start: ast.Position{
											Column: 14,
											Line:   19,
										},
									},
								},
								Consequent: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 46,
												Line:   19,
											},
											File:   "",
											Source: "\"critical\"",
											Start: ast.Position{
												Column: 36,
												Line:   19,
											},
										},
									},
									Value: "critical",
								},
								Test: &ast.BinaryExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   19,
											},
											File:   "",
											Source: "lvl == \"crit\"",
											Start: ast.Position{
												Column: 17,
												Line:   19,
											},
										},
									},
									Left: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 20,
													Line:   19,
												},
												File:   "",
												Source: "lvl",
												Start: ast.Position{
													Column: 17,
													Line:   19,
												},
											},
										},
										Name: "lvl",
									},
									Operator: 17,
									Right: &ast.StringLiteral{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   19,
												},
												File:   "",
												Source: "\"crit\"",
												Start: ast.Position{
													Column: 24,
													Line:   19,
												},
											},
										},
										Value: "crit",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 21,
										Line:   22,
									},
									File:   "",
									Source: "if lvl == \"warn\" then \"warning\" \n        else if lvl == \"crit\" then \"critical\" \n        else if lvl == \"info\" then \"info\" \n        else if lvl == \"ok\" then \"info\" \n        else \"error\"",
									Start: ast.Position{
										Column: 11,
										Line:   18,
									},
								},
							},
							Consequent: &ast.StringLiteral{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 42,
											Line:   18,
										},
										File:   "",
										Source: "\"warning\"",
										Start: ast.Position{
											Column: 33,
											Line:   18,
										},
									},
								},
								Value: "warning",
							},
							Test: &ast.BinaryExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   18,
										},
										File:   "",
										Source: "lvl == \"warn\"",
										Start: ast.Position{
											Column: 14,
											Line:   18,
										},
									},
								},
								Left: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   18,
											},
											File:   "",
											Source: "lvl",
											Start: ast.Position{
												Column: 14,
												Line:   18,
											},
										},
									},
									Name: "lvl",
								},
								Operator: 17,
								Right: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   18,
											},
											File:   "",
											Source: "\"warn\"",
											Start: ast.Position{
												Column: 21,
												Line:   18,
											},
										},
									},
									Value: "warn",
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   23,
									},
									File:   "",
									Source: "sev",
									Start: ast.Position{
										Column: 12,
										Line:   23,
									},
								},
							},
							Name: "sev",
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   23,
								},
								File:   "",
								Source: "return sev",
								Start: ast.Position{
									Column: 5,
									Line:   23,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   16,
							},
							File:   "",
							Source: "level",
							Start: ast.Position{
								Column: 22,
								Line:   16,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   16,
								},
								File:   "",
								Source: "level",
								Start: ast.Position{
									Column: 22,
									Line:   16,
								},
							},
						},
						Name: "level",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 94,
						Line:   27,
					},
					File:   "",
					Source: "actionFromLevel = (level)=> if strings.toLower(v:level) == \"ok\" then \"resolve\" else \"trigger\"",
					Start: ast.Position{
						Column: 1,
						Line:   27,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 16,
							Line:   27,
						},
						File:   "",
						Source: "actionFromLevel",
						Start: ast.Position{
							Column: 1,
							Line:   27,
						},
					},
				},
				Name: "actionFromLevel",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 94,
							Line:   27,
						},
						File:   "",
						Source: "(level)=> if strings.toLower(v:level) == \"ok\" then \"resolve\" else \"trigger\"",
						Start: ast.Position{
							Column: 19,
							Line:   27,
						},
					},
				},
				Body: &ast.ConditionalExpression{
					Alternate: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 94,
									Line:   27,
								},
								File:   "",
								Source: "\"trigger\"",
								Start: ast.Position{
									Column: 85,
									Line:   27,
								},
							},
						},
						Value: "trigger",
					},
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 94,
								Line:   27,
							},
							File:   "",
							Source: "if strings.toLower(v:level) == \"ok\" then \"resolve\" else \"trigger\"",
							Start: ast.Position{
								Column: 29,
								Line:   27,
							},
						},
					},
					Consequent: &ast.StringLiteral{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 79,
									Line:   27,
								},
								File:   "",
								Source: "\"resolve\"",
								Start: ast.Position{
									Column: 70,
									Line:   27,
								},
							},
						},
						Value: "resolve",
					},
					Test: &ast.BinaryExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 64,
									Line:   27,
								},
								File:   "",
								Source: "strings.toLower(v:level) == \"ok\"",
								Start: ast.Position{
									Column: 32,
									Line:   27,
								},
							},
						},
						Left: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 55,
											Line:   27,
										},
										File:   "",
										Source: "v:level",
										Start: ast.Position{
											Column: 48,
											Line:   27,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 55,
												Line:   27,
											},
											File:   "",
											Source: "v:level",
											Start: ast.Position{
												Column: 48,
												Line:   27,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 49,
													Line:   27,
												},
												File:   "",
												Source: "v",
												Start: ast.Position{
													Column: 48,
													Line:   27,
												},
											},
										},
										Name: "v",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 55,
													Line:   27,
												},
												File:   "",
												Source: "level",
												Start: ast.Position{
													Column: 50,
													Line:   27,
												},
											},
										},
										Name: "level",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 56,
										Line:   27,
									},
									File:   "",
									Source: "strings.toLower(v:level)",
									Start: ast.Position{
										Column: 32,
										Line:   27,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 47,
											Line:   27,
										},
										File:   "",
										Source: "strings.toLower",
										Start: ast.Position{
											Column: 32,
											Line:   27,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 39,
												Line:   27,
											},
											File:   "",
											Source: "strings",
											Start: ast.Position{
												Column: 32,
												Line:   27,
											},
										},
									},
									Name: "strings",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 47,
												Line:   27,
											},
											File:   "",
											Source: "toLower",
											Start: ast.Position{
												Column: 40,
												Line:   27,
											},
										},
									},
									Name: "toLower",
								},
							},
						},
						Operator: 17,
						Right: &ast.StringLiteral{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 64,
										Line:   27,
									},
									File:   "",
									Source: "\"ok\"",
									Start: ast.Position{
										Column: 60,
										Line:   27,
									},
								},
							},
							Value: "ok",
						},
					},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 25,
								Line:   27,
							},
							File:   "",
							Source: "level",
							Start: ast.Position{
								Column: 20,
								Line:   27,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 25,
									Line:   27,
								},
								File:   "",
								Source: "level",
								Start: ast.Position{
									Column: 20,
									Line:   27,
								},
							},
						},
						Name: "level",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 2,
						Line:   78,
					},
					File:   "",
					Source: "sendEvent = (pagerdutyURL=defaultURL,\n    routingKey,\n    client,\n    clientURL,\n    dedupKey,\n    class,\n    group,\n    severity,\n    eventAction,\n    source,\n    summary,\n    timestamp) => {\n\n    payload = {\n            summary: summary,\n            timestamp: timestamp,\n            source: source,\n            severity: severity,\n            group: group,\n            class: class,\n    }\n    data = {\n        payload: payload,\n        routing_key: routingKey,\n        dedup_key: dedupKey,\n        event_action: eventAction,\n        client: client,\n        client_url: clientURL,\n    }\n\n    headers = {\n        \"Accept\": \"application/vnd.pagerduty+json;version=2\",\n        \"Content-Type\": \"application/json\",\n    }\n    enc = json.encode(v: data)\n    return http.post(headers: headers, url: pagerdutyURL, data: enc)\n}",
					Start: ast.Position{
						Column: 1,
						Line:   42,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 10,
							Line:   42,
						},
						File:   "",
						Source: "sendEvent",
						Start: ast.Position{
							Column: 1,
							Line:   42,
						},
					},
				},
				Name: "sendEvent",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 2,
							Line:   78,
						},
						File:   "",
						Source: "(pagerdutyURL=defaultURL,\n    routingKey,\n    client,\n    clientURL,\n    dedupKey,\n    class,\n    group,\n    severity,\n    eventAction,\n    source,\n    summary,\n    timestamp) => {\n\n    payload = {\n            summary: summary,\n            timestamp: timestamp,\n            source: source,\n            severity: severity,\n            group: group,\n            class: class,\n    }\n    data = {\n        payload: payload,\n        routing_key: routingKey,\n        dedup_key: dedupKey,\n        event_action: eventAction,\n        client: client,\n        client_url: clientURL,\n    }\n\n    headers = {\n        \"Accept\": \"application/vnd.pagerduty+json;version=2\",\n        \"Content-Type\": \"application/json\",\n    }\n    enc = json.encode(v: data)\n    return http.post(headers: headers, url: pagerdutyURL, data: enc)\n}",
						Start: ast.Position{
							Column: 13,
							Line:   42,
						},
					},
				},
				Body: &ast.Block{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 2,
								Line:   78,
							},
							File:   "",
							Source: "{\n\n    payload = {\n            summary: summary,\n            timestamp: timestamp,\n            source: source,\n            severity: severity,\n            group: group,\n            class: class,\n    }\n    data = {\n        payload: payload,\n        routing_key: routingKey,\n        dedup_key: dedupKey,\n        event_action: eventAction,\n        client: client,\n        client_url: clientURL,\n    }\n\n    headers = {\n        \"Accept\": \"application/vnd.pagerduty+json;version=2\",\n        \"Content-Type\": \"application/json\",\n    }\n    enc = json.encode(v: data)\n    return http.post(headers: headers, url: pagerdutyURL, data: enc)\n}",
							Start: ast.Position{
								Column: 19,
								Line:   53,
							},
						},
					},
					Body: []ast.Statement{&ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   62,
								},
								File:   "",
								Source: "payload = {\n            summary: summary,\n            timestamp: timestamp,\n            source: source,\n            severity: severity,\n            group: group,\n            class: class,\n    }",
								Start: ast.Position{
									Column: 5,
									Line:   55,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   55,
									},
									File:   "",
									Source: "payload",
									Start: ast.Position{
										Column: 5,
										Line:   55,
									},
								},
							},
							Name: "payload",
						},
						Init: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   62,
									},
									File:   "",
									Source: "{\n            summary: summary,\n            timestamp: timestamp,\n            source: source,\n            severity: severity,\n            group: group,\n            class: class,\n    }",
									Start: ast.Position{
										Column: 15,
										Line:   55,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 29,
											Line:   56,
										},
										File:   "",
										Source: "summary: summary",
										Start: ast.Position{
											Column: 13,
											Line:   56,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   56,
											},
											File:   "",
											Source: "summary",
											Start: ast.Position{
												Column: 13,
												Line:   56,
											},
										},
									},
									Name: "summary",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 29,
												Line:   56,
											},
											File:   "",
											Source: "summary",
											Start: ast.Position{
												Column: 22,
												Line:   56,
											},
										},
									},
									Name: "summary",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 33,
											Line:   57,
										},
										File:   "",
										Source: "timestamp: timestamp",
										Start: ast.Position{
											Column: 13,
											Line:   57,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   57,
											},
											File:   "",
											Source: "timestamp",
											Start: ast.Position{
												Column: 13,
												Line:   57,
											},
										},
									},
									Name: "timestamp",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 33,
												Line:   57,
											},
											File:   "",
											Source: "timestamp",
											Start: ast.Position{
												Column: 24,
												Line:   57,
											},
										},
									},
									Name: "timestamp",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 27,
											Line:   58,
										},
										File:   "",
										Source: "source: source",
										Start: ast.Position{
											Column: 13,
											Line:   58,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   58,
											},
											File:   "",
											Source: "source",
											Start: ast.Position{
												Column: 13,
												Line:   58,
											},
										},
									},
									Name: "source",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 27,
												Line:   58,
											},
											File:   "",
											Source: "source",
											Start: ast.Position{
												Column: 21,
												Line:   58,
											},
										},
									},
									Name: "source",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 31,
											Line:   59,
										},
										File:   "",
										Source: "severity: severity",
										Start: ast.Position{
											Column: 13,
											Line:   59,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   59,
											},
											File:   "",
											Source: "severity",
											Start: ast.Position{
												Column: 13,
												Line:   59,
											},
										},
									},
									Name: "severity",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 31,
												Line:   59,
											},
											File:   "",
											Source: "severity",
											Start: ast.Position{
												Column: 23,
												Line:   59,
											},
										},
									},
									Name: "severity",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   60,
										},
										File:   "",
										Source: "group: group",
										Start: ast.Position{
											Column: 13,
											Line:   60,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   60,
											},
											File:   "",
											Source: "group",
											Start: ast.Position{
												Column: 13,
												Line:   60,
											},
										},
									},
									Name: "group",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   60,
											},
											File:   "",
											Source: "group",
											Start: ast.Position{
												Column: 20,
												Line:   60,
											},
										},
									},
									Name: "group",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   61,
										},
										File:   "",
										Source: "class: class",
										Start: ast.Position{
											Column: 13,
											Line:   61,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   61,
											},
											File:   "",
											Source: "class",
											Start: ast.Position{
												Column: 13,
												Line:   61,
											},
										},
									},
									Name: "class",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   61,
											},
											File:   "",
											Source: "class",
											Start: ast.Position{
												Column: 20,
												Line:   61,
											},
										},
									},
									Name: "class",
								},
							}},
							With: nil,
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   70,
								},
								File:   "",
								Source: "data = {\n        payload: payload,\n        routing_key: routingKey,\n        dedup_key: dedupKey,\n        event_action: eventAction,\n        client: client,\n        client_url: clientURL,\n    }",
								Start: ast.Position{
									Column: 5,
									Line:   63,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 9,
										Line:   63,
									},
									File:   "",
									Source: "data",
									Start: ast.Position{
										Column: 5,
										Line:   63,
									},
								},
							},
							Name: "data",
						},
						Init: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   70,
									},
									File:   "",
									Source: "{\n        payload: payload,\n        routing_key: routingKey,\n        dedup_key: dedupKey,\n        event_action: eventAction,\n        client: client,\n        client_url: clientURL,\n    }",
									Start: ast.Position{
										Column: 12,
										Line:   63,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 25,
											Line:   64,
										},
										File:   "",
										Source: "payload: payload",
										Start: ast.Position{
											Column: 9,
											Line:   64,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   64,
											},
											File:   "",
											Source: "payload",
											Start: ast.Position{
												Column: 9,
												Line:   64,
											},
										},
									},
									Name: "payload",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 25,
												Line:   64,
											},
											File:   "",
											Source: "payload",
											Start: ast.Position{
												Column: 18,
												Line:   64,
											},
										},
									},
									Name: "payload",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 32,
											Line:   65,
										},
										File:   "",
										Source: "routing_key: routingKey",
										Start: ast.Position{
											Column: 9,
											Line:   65,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 20,
												Line:   65,
											},
											File:   "",
											Source: "routing_key",
											Start: ast.Position{
												Column: 9,
												Line:   65,
											},
										},
									},
									Name: "routing_key",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 32,
												Line:   65,
											},
											File:   "",
											Source: "routingKey",
											Start: ast.Position{
												Column: 22,
												Line:   65,
											},
										},
									},
									Name: "routingKey",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 28,
											Line:   66,
										},
										File:   "",
										Source: "dedup_key: dedupKey",
										Start: ast.Position{
											Column: 9,
											Line:   66,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 18,
												Line:   66,
											},
											File:   "",
											Source: "dedup_key",
											Start: ast.Position{
												Column: 9,
												Line:   66,
											},
										},
									},
									Name: "dedup_key",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 28,
												Line:   66,
											},
											File:   "",
											Source: "dedupKey",
											Start: ast.Position{
												Column: 20,
												Line:   66,
											},
										},
									},
									Name: "dedupKey",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 34,
											Line:   67,
										},
										File:   "",
										Source: "event_action: eventAction",
										Start: ast.Position{
											Column: 9,
											Line:   67,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   67,
											},
											File:   "",
											Source: "event_action",
											Start: ast.Position{
												Column: 9,
												Line:   67,
											},
										},
									},
									Name: "event_action",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 34,
												Line:   67,
											},
											File:   "",
											Source: "eventAction",
											Start: ast.Position{
												Column: 23,
												Line:   67,
											},
										},
									},
									Name: "eventAction",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 23,
											Line:   68,
										},
										File:   "",
										Source: "client: client",
										Start: ast.Position{
											Column: 9,
											Line:   68,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   68,
											},
											File:   "",
											Source: "client",
											Start: ast.Position{
												Column: 9,
												Line:   68,
											},
										},
									},
									Name: "client",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   68,
											},
											File:   "",
											Source: "client",
											Start: ast.Position{
												Column: 17,
												Line:   68,
											},
										},
									},
									Name: "client",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   69,
										},
										File:   "",
										Source: "client_url: clientURL",
										Start: ast.Position{
											Column: 9,
											Line:   69,
										},
									},
								},
								Key: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   69,
											},
											File:   "",
											Source: "client_url",
											Start: ast.Position{
												Column: 9,
												Line:   69,
											},
										},
									},
									Name: "client_url",
								},
								Value: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   69,
											},
											File:   "",
											Source: "clientURL",
											Start: ast.Position{
												Column: 21,
												Line:   69,
											},
										},
									},
									Name: "clientURL",
								},
							}},
							With: nil,
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 6,
									Line:   75,
								},
								File:   "",
								Source: "headers = {\n        \"Accept\": \"application/vnd.pagerduty+json;version=2\",\n        \"Content-Type\": \"application/json\",\n    }",
								Start: ast.Position{
									Column: 5,
									Line:   72,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 12,
										Line:   72,
									},
									File:   "",
									Source: "headers",
									Start: ast.Position{
										Column: 5,
										Line:   72,
									},
								},
							},
							Name: "headers",
						},
						Init: &ast.ObjectExpression{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 6,
										Line:   75,
									},
									File:   "",
									Source: "{\n        \"Accept\": \"application/vnd.pagerduty+json;version=2\",\n        \"Content-Type\": \"application/json\",\n    }",
									Start: ast.Position{
										Column: 15,
										Line:   72,
									},
								},
							},
							Properties: []*ast.Property{&ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 61,
											Line:   73,
										},
										File:   "",
										Source: "\"Accept\": \"application/vnd.pagerduty+json;version=2\"",
										Start: ast.Position{
											Column: 9,
											Line:   73,
										},
									},
								},
								Key: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 17,
												Line:   73,
											},
											File:   "",
											Source: "\"Accept\"",
											Start: ast.Position{
												Column: 9,
												Line:   73,
											},
										},
									},
									Value: "Accept",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 61,
												Line:   73,
											},
											File:   "",
											Source: "\"application/vnd.pagerduty+json;version=2\"",
											Start: ast.Position{
												Column: 19,
												Line:   73,
											},
										},
									},
									Value: "application/vnd.pagerduty+json;version=2",
								},
							}, &ast.Property{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 43,
											Line:   74,
										},
										File:   "",
										Source: "\"Content-Type\": \"application/json\"",
										Start: ast.Position{
											Column: 9,
											Line:   74,
										},
									},
								},
								Key: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 23,
												Line:   74,
											},
											File:   "",
											Source: "\"Content-Type\"",
											Start: ast.Position{
												Column: 9,
												Line:   74,
											},
										},
									},
									Value: "Content-Type",
								},
								Value: &ast.StringLiteral{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 43,
												Line:   74,
											},
											File:   "",
											Source: "\"application/json\"",
											Start: ast.Position{
												Column: 25,
												Line:   74,
											},
										},
									},
									Value: "application/json",
								},
							}},
							With: nil,
						},
					}, &ast.VariableAssignment{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 31,
									Line:   76,
								},
								File:   "",
								Source: "enc = json.encode(v: data)",
								Start: ast.Position{
									Column: 5,
									Line:   76,
								},
							},
						},
						ID: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 8,
										Line:   76,
									},
									File:   "",
									Source: "enc",
									Start: ast.Position{
										Column: 5,
										Line:   76,
									},
								},
							},
							Name: "enc",
						},
						Init: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 30,
											Line:   76,
										},
										File:   "",
										Source: "v: data",
										Start: ast.Position{
											Column: 23,
											Line:   76,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   76,
											},
											File:   "",
											Source: "v: data",
											Start: ast.Position{
												Column: 23,
												Line:   76,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   76,
												},
												File:   "",
												Source: "v",
												Start: ast.Position{
													Column: 23,
													Line:   76,
												},
											},
										},
										Name: "v",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 30,
													Line:   76,
												},
												File:   "",
												Source: "data",
												Start: ast.Position{
													Column: 26,
													Line:   76,
												},
											},
										},
										Name: "data",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 31,
										Line:   76,
									},
									File:   "",
									Source: "json.encode(v: data)",
									Start: ast.Position{
										Column: 11,
										Line:   76,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 22,
											Line:   76,
										},
										File:   "",
										Source: "json.encode",
										Start: ast.Position{
											Column: 11,
											Line:   76,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 15,
												Line:   76,
											},
											File:   "",
											Source: "json",
											Start: ast.Position{
												Column: 11,
												Line:   76,
											},
										},
									},
									Name: "json",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 22,
												Line:   76,
											},
											File:   "",
											Source: "encode",
											Start: ast.Position{
												Column: 16,
												Line:   76,
											},
										},
									},
									Name: "encode",
								},
							},
						},
					}, &ast.ReturnStatement{
						Argument: &ast.CallExpression{
							Arguments: []ast.Expression{&ast.ObjectExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 68,
											Line:   77,
										},
										File:   "",
										Source: "headers: headers, url: pagerdutyURL, data: enc",
										Start: ast.Position{
											Column: 22,
											Line:   77,
										},
									},
								},
								Properties: []*ast.Property{&ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 38,
												Line:   77,
											},
											File:   "",
											Source: "headers: headers",
											Start: ast.Position{
												Column: 22,
												Line:   77,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 29,
													Line:   77,
												},
												File:   "",
												Source: "headers",
												Start: ast.Position{
													Column: 22,
													Line:   77,
												},
											},
										},
										Name: "headers",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 38,
													Line:   77,
												},
												File:   "",
												Source: "headers",
												Start: ast.Position{
													Column: 31,
													Line:   77,
												},
											},
										},
										Name: "headers",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 57,
												Line:   77,
											},
											File:   "",
											Source: "url: pagerdutyURL",
											Start: ast.Position{
												Column: 40,
												Line:   77,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 43,
													Line:   77,
												},
												File:   "",
												Source: "url",
												Start: ast.Position{
													Column: 40,
													Line:   77,
												},
											},
										},
										Name: "url",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 57,
													Line:   77,
												},
												File:   "",
												Source: "pagerdutyURL",
												Start: ast.Position{
													Column: 45,
													Line:   77,
												},
											},
										},
										Name: "pagerdutyURL",
									},
								}, &ast.Property{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 68,
												Line:   77,
											},
											File:   "",
											Source: "data: enc",
											Start: ast.Position{
												Column: 59,
												Line:   77,
											},
										},
									},
									Key: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 63,
													Line:   77,
												},
												File:   "",
												Source: "data",
												Start: ast.Position{
													Column: 59,
													Line:   77,
												},
											},
										},
										Name: "data",
									},
									Value: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 68,
													Line:   77,
												},
												File:   "",
												Source: "enc",
												Start: ast.Position{
													Column: 65,
													Line:   77,
												},
											},
										},
										Name: "enc",
									},
								}},
								With: nil,
							}},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 69,
										Line:   77,
									},
									File:   "",
									Source: "http.post(headers: headers, url: pagerdutyURL, data: enc)",
									Start: ast.Position{
										Column: 12,
										Line:   77,
									},
								},
							},
							Callee: &ast.MemberExpression{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 21,
											Line:   77,
										},
										File:   "",
										Source: "http.post",
										Start: ast.Position{
											Column: 12,
											Line:   77,
										},
									},
								},
								Object: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 16,
												Line:   77,
											},
											File:   "",
											Source: "http",
											Start: ast.Position{
												Column: 12,
												Line:   77,
											},
										},
									},
									Name: "http",
								},
								Property: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 21,
												Line:   77,
											},
											File:   "",
											Source: "post",
											Start: ast.Position{
												Column: 17,
												Line:   77,
											},
										},
									},
									Name: "post",
								},
							},
						},
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 69,
									Line:   77,
								},
								File:   "",
								Source: "return http.post(headers: headers, url: pagerdutyURL, data: enc)",
								Start: ast.Position{
									Column: 5,
									Line:   77,
								},
							},
						},
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 37,
								Line:   42,
							},
							File:   "",
							Source: "pagerdutyURL=defaultURL",
							Start: ast.Position{
								Column: 14,
								Line:   42,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 26,
									Line:   42,
								},
								File:   "",
								Source: "pagerdutyURL",
								Start: ast.Position{
									Column: 14,
									Line:   42,
								},
							},
						},
						Name: "pagerdutyURL",
					},
					Value: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 37,
									Line:   42,
								},
								File:   "",
								Source: "defaultURL",
								Start: ast.Position{
									Column: 27,
									Line:   42,
								},
							},
						},
						Name: "defaultURL",
					},
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   43,
							},
							File:   "",
							Source: "routingKey",
							Start: ast.Position{
								Column: 5,
								Line:   43,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   43,
								},
								File:   "",
								Source: "routingKey",
								Start: ast.Position{
									Column: 5,
									Line:   43,
								},
							},
						},
						Name: "routingKey",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   44,
							},
							File:   "",
							Source: "client",
							Start: ast.Position{
								Column: 5,
								Line:   44,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   44,
								},
								File:   "",
								Source: "client",
								Start: ast.Position{
									Column: 5,
									Line:   44,
								},
							},
						},
						Name: "client",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   45,
							},
							File:   "",
							Source: "clientURL",
							Start: ast.Position{
								Column: 5,
								Line:   45,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   45,
								},
								File:   "",
								Source: "clientURL",
								Start: ast.Position{
									Column: 5,
									Line:   45,
								},
							},
						},
						Name: "clientURL",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   46,
							},
							File:   "",
							Source: "dedupKey",
							Start: ast.Position{
								Column: 5,
								Line:   46,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   46,
								},
								File:   "",
								Source: "dedupKey",
								Start: ast.Position{
									Column: 5,
									Line:   46,
								},
							},
						},
						Name: "dedupKey",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   47,
							},
							File:   "",
							Source: "class",
							Start: ast.Position{
								Column: 5,
								Line:   47,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   47,
								},
								File:   "",
								Source: "class",
								Start: ast.Position{
									Column: 5,
									Line:   47,
								},
							},
						},
						Name: "class",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 10,
								Line:   48,
							},
							File:   "",
							Source: "group",
							Start: ast.Position{
								Column: 5,
								Line:   48,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 10,
									Line:   48,
								},
								File:   "",
								Source: "group",
								Start: ast.Position{
									Column: 5,
									Line:   48,
								},
							},
						},
						Name: "group",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 13,
								Line:   49,
							},
							File:   "",
							Source: "severity",
							Start: ast.Position{
								Column: 5,
								Line:   49,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 13,
									Line:   49,
								},
								File:   "",
								Source: "severity",
								Start: ast.Position{
									Column: 5,
									Line:   49,
								},
							},
						},
						Name: "severity",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 16,
								Line:   50,
							},
							File:   "",
							Source: "eventAction",
							Start: ast.Position{
								Column: 5,
								Line:   50,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   50,
								},
								File:   "",
								Source: "eventAction",
								Start: ast.Position{
									Column: 5,
									Line:   50,
								},
							},
						},
						Name: "eventAction",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 11,
								Line:   51,
							},
							File:   "",
							Source: "source",
							Start: ast.Position{
								Column: 5,
								Line:   51,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   51,
								},
								File:   "",
								Source: "source",
								Start: ast.Position{
									Column: 5,
									Line:   51,
								},
							},
						},
						Name: "source",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 12,
								Line:   52,
							},
							File:   "",
							Source: "summary",
							Start: ast.Position{
								Column: 5,
								Line:   52,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 12,
									Line:   52,
								},
								File:   "",
								Source: "summary",
								Start: ast.Position{
									Column: 5,
									Line:   52,
								},
							},
						},
						Name: "summary",
					},
					Value: nil,
				}, &ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 14,
								Line:   53,
							},
							File:   "",
							Source: "timestamp",
							Start: ast.Position{
								Column: 5,
								Line:   53,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 14,
									Line:   53,
								},
								File:   "",
								Source: "timestamp",
								Start: ast.Position{
									Column: 5,
									Line:   53,
								},
							},
						},
						Name: "timestamp",
					},
					Value: nil,
				}},
			},
		}, &ast.VariableAssignment{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 15,
						Line:   105,
					},
					File:   "",
					Source: "endpoint = (url=defaultURL) =>\n    (mapFn) =>\n        (tables=<-) => tables\n            |> dedupKey()\n            |> map(fn: (r) => {\n                obj = mapFn(r: r)\n                \n                return {r with _sent: string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))}\n            })",
					Start: ast.Position{
						Column: 1,
						Line:   85,
					},
				},
			},
			ID: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 9,
							Line:   85,
						},
						File:   "",
						Source: "endpoint",
						Start: ast.Position{
							Column: 1,
							Line:   85,
						},
					},
				},
				Name: "endpoint",
			},
			Init: &ast.FunctionExpression{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 15,
							Line:   105,
						},
						File:   "",
						Source: "(url=defaultURL) =>\n    (mapFn) =>\n        (tables=<-) => tables\n            |> dedupKey()\n            |> map(fn: (r) => {\n                obj = mapFn(r: r)\n                \n                return {r with _sent: string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))}\n            })",
						Start: ast.Position{
							Column: 12,
							Line:   85,
						},
					},
				},
				Body: &ast.FunctionExpression{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 15,
								Line:   105,
							},
							File:   "",
							Source: "(mapFn) =>\n        (tables=<-) => tables\n            |> dedupKey()\n            |> map(fn: (r) => {\n                obj = mapFn(r: r)\n                \n                return {r with _sent: string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))}\n            })",
							Start: ast.Position{
								Column: 5,
								Line:   86,
							},
						},
					},
					Body: &ast.FunctionExpression{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 15,
									Line:   105,
								},
								File:   "",
								Source: "(tables=<-) => tables\n            |> dedupKey()\n            |> map(fn: (r) => {\n                obj = mapFn(r: r)\n                \n                return {r with _sent: string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))}\n            })",
								Start: ast.Position{
									Column: 9,
									Line:   87,
								},
							},
						},
						Body: &ast.PipeExpression{
							Argument: &ast.PipeExpression{
								Argument: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 30,
												Line:   87,
											},
											File:   "",
											Source: "tables",
											Start: ast.Position{
												Column: 24,
												Line:   87,
											},
										},
									},
									Name: "tables",
								},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 26,
											Line:   88,
										},
										File:   "",
										Source: "tables\n            |> dedupKey()",
										Start: ast.Position{
											Column: 24,
											Line:   87,
										},
									},
								},
								Call: &ast.CallExpression{
									Arguments: nil,
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 26,
												Line:   88,
											},
											File:   "",
											Source: "dedupKey()",
											Start: ast.Position{
												Column: 16,
												Line:   88,
											},
										},
									},
									Callee: &ast.Identifier{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 24,
													Line:   88,
												},
												File:   "",
												Source: "dedupKey",
												Start: ast.Position{
													Column: 16,
													Line:   88,
												},
											},
										},
										Name: "dedupKey",
									},
								},
							},
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 15,
										Line:   105,
									},
									File:   "",
									Source: "tables\n            |> dedupKey()\n            |> map(fn: (r) => {\n                obj = mapFn(r: r)\n                \n                return {r with _sent: string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))}\n            })",
									Start: ast.Position{
										Column: 24,
										Line:   87,
									},
								},
							},
							Call: &ast.CallExpression{
								Arguments: []ast.Expression{&ast.ObjectExpression{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 14,
												Line:   105,
											},
											File:   "",
											Source: "fn: (r) => {\n                obj = mapFn(r: r)\n                \n                return {r with _sent: string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))}\n            }",
											Start: ast.Position{
												Column: 20,
												Line:   89,
											},
										},
									},
									Properties: []*ast.Property{&ast.Property{
										BaseNode: ast.BaseNode{
											Errors: nil,
											Loc: &ast.SourceLocation{
												End: ast.Position{
													Column: 14,
													Line:   105,
												},
												File:   "",
												Source: "fn: (r) => {\n                obj = mapFn(r: r)\n                \n                return {r with _sent: string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))}\n            }",
												Start: ast.Position{
													Column: 20,
													Line:   89,
												},
											},
										},
										Key: &ast.Identifier{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 22,
														Line:   89,
													},
													File:   "",
													Source: "fn",
													Start: ast.Position{
														Column: 20,
														Line:   89,
													},
												},
											},
											Name: "fn",
										},
										Value: &ast.FunctionExpression{
											BaseNode: ast.BaseNode{
												Errors: nil,
												Loc: &ast.SourceLocation{
													End: ast.Position{
														Column: 14,
														Line:   105,
													},
													File:   "",
													Source: "(r) => {\n                obj = mapFn(r: r)\n                \n                return {r with _sent: string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))}\n            }",
													Start: ast.Position{
														Column: 24,
														Line:   89,
													},
												},
											},
											Body: &ast.Block{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 14,
															Line:   105,
														},
														File:   "",
														Source: "{\n                obj = mapFn(r: r)\n                \n                return {r with _sent: string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))}\n            }",
														Start: ast.Position{
															Column: 31,
															Line:   89,
														},
													},
												},
												Body: []ast.Statement{&ast.VariableAssignment{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 34,
																Line:   90,
															},
															File:   "",
															Source: "obj = mapFn(r: r)",
															Start: ast.Position{
																Column: 17,
																Line:   90,
															},
														},
													},
													ID: &ast.Identifier{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 20,
																	Line:   90,
																},
																File:   "",
																Source: "obj",
																Start: ast.Position{
																	Column: 17,
																	Line:   90,
																},
															},
														},
														Name: "obj",
													},
													Init: &ast.CallExpression{
														Arguments: []ast.Expression{&ast.ObjectExpression{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 33,
																		Line:   90,
																	},
																	File:   "",
																	Source: "r: r",
																	Start: ast.Position{
																		Column: 29,
																		Line:   90,
																	},
																},
															},
															Properties: []*ast.Property{&ast.Property{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 33,
																			Line:   90,
																		},
																		File:   "",
																		Source: "r: r",
																		Start: ast.Position{
																			Column: 29,
																			Line:   90,
																		},
																	},
																},
																Key: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 30,
																				Line:   90,
																			},
																			File:   "",
																			Source: "r",
																			Start: ast.Position{
																				Column: 29,
																				Line:   90,
																			},
																		},
																	},
																	Name: "r",
																},
																Value: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 33,
																				Line:   90,
																			},
																			File:   "",
																			Source: "r",
																			Start: ast.Position{
																				Column: 32,
																				Line:   90,
																			},
																		},
																	},
																	Name: "r",
																},
															}},
															With: nil,
														}},
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 34,
																	Line:   90,
																},
																File:   "",
																Source: "mapFn(r: r)",
																Start: ast.Position{
																	Column: 23,
																	Line:   90,
																},
															},
														},
														Callee: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 28,
																		Line:   90,
																	},
																	File:   "",
																	Source: "mapFn",
																	Start: ast.Position{
																		Column: 23,
																		Line:   90,
																	},
																},
															},
															Name: "mapFn",
														},
													},
												}, &ast.ReturnStatement{
													Argument: &ast.ObjectExpression{
														BaseNode: ast.BaseNode{
															Errors: nil,
															Loc: &ast.SourceLocation{
																End: ast.Position{
																	Column: 27,
																	Line:   104,
																},
																File:   "",
																Source: "{r with _sent: string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))}",
																Start: ast.Position{
																	Column: 24,
																	Line:   92,
																},
															},
														},
														Properties: []*ast.Property{&ast.Property{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 26,
																		Line:   104,
																	},
																	File:   "",
																	Source: "_sent: string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))",
																	Start: ast.Position{
																		Column: 32,
																		Line:   92,
																	},
																},
															},
															Key: &ast.Identifier{
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 37,
																			Line:   92,
																		},
																		File:   "",
																		Source: "_sent",
																		Start: ast.Position{
																			Column: 32,
																			Line:   92,
																		},
																	},
																},
																Name: "_sent",
															},
															Value: &ast.CallExpression{
																Arguments: []ast.Expression{&ast.ObjectExpression{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 25,
																				Line:   104,
																			},
																			File:   "",
																			Source: "v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100)",
																			Start: ast.Position{
																				Column: 46,
																				Line:   92,
																			},
																		},
																	},
																	Properties: []*ast.Property{&ast.Property{
																		BaseNode: ast.BaseNode{
																			Errors: nil,
																			Loc: &ast.SourceLocation{
																				End: ast.Position{
																					Column: 25,
																					Line:   104,
																				},
																				File:   "",
																				Source: "v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100)",
																				Start: ast.Position{
																					Column: 46,
																					Line:   92,
																				},
																			},
																		},
																		Key: &ast.Identifier{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 47,
																						Line:   92,
																					},
																					File:   "",
																					Source: "v",
																					Start: ast.Position{
																						Column: 46,
																						Line:   92,
																					},
																				},
																			},
																			Name: "v",
																		},
																		Value: &ast.BinaryExpression{
																			BaseNode: ast.BaseNode{
																				Errors: nil,
																				Loc: &ast.SourceLocation{
																					End: ast.Position{
																						Column: 25,
																						Line:   104,
																					},
																					File:   "",
																					Source: "2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100)",
																					Start: ast.Position{
																						Column: 49,
																						Line:   92,
																					},
																				},
																			},
																			Left: &ast.IntegerLiteral{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 50,
																							Line:   92,
																						},
																						File:   "",
																						Source: "2",
																						Start: ast.Position{
																							Column: 49,
																							Line:   92,
																						},
																					},
																				},
																				Value: int64(2),
																			},
																			Operator: 17,
																			Right: &ast.ParenExpression{
																				BaseNode: ast.BaseNode{
																					Errors: nil,
																					Loc: &ast.SourceLocation{
																						End: ast.Position{
																							Column: 25,
																							Line:   104,
																						},
																						File:   "",
																						Source: "(sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100)",
																						Start: ast.Position{
																							Column: 54,
																							Line:   92,
																						},
																					},
																				},
																				Expression: &ast.BinaryExpression{
																					BaseNode: ast.BaseNode{
																						Errors: nil,
																						Loc: &ast.SourceLocation{
																							End: ast.Position{
																								Column: 24,
																								Line:   104,
																							},
																							File:   "",
																							Source: "sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100",
																							Start: ast.Position{
																								Column: 55,
																								Line:   92,
																							},
																						},
																					},
																					Left: &ast.CallExpression{
																						Arguments: []ast.Expression{&ast.ObjectExpression{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 45,
																										Line:   103,
																									},
																									File:   "",
																									Source: "pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp",
																									Start: ast.Position{
																										Column: 65,
																										Line:   92,
																									},
																								},
																							},
																							Properties: []*ast.Property{&ast.Property{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 82,
																											Line:   92,
																										},
																										File:   "",
																										Source: "pagerdutyURL: url",
																										Start: ast.Position{
																											Column: 65,
																											Line:   92,
																										},
																									},
																								},
																								Key: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 77,
																												Line:   92,
																											},
																											File:   "",
																											Source: "pagerdutyURL",
																											Start: ast.Position{
																												Column: 65,
																												Line:   92,
																											},
																										},
																									},
																									Name: "pagerdutyURL",
																								},
																								Value: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 82,
																												Line:   92,
																											},
																											File:   "",
																											Source: "url",
																											Start: ast.Position{
																												Column: 79,
																												Line:   92,
																											},
																										},
																									},
																									Name: "url",
																								},
																							}, &ast.Property{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 47,
																											Line:   93,
																										},
																										File:   "",
																										Source: "routingKey: obj.routingKey",
																										Start: ast.Position{
																											Column: 21,
																											Line:   93,
																										},
																									},
																								},
																								Key: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 31,
																												Line:   93,
																											},
																											File:   "",
																											Source: "routingKey",
																											Start: ast.Position{
																												Column: 21,
																												Line:   93,
																											},
																										},
																									},
																									Name: "routingKey",
																								},
																								Value: &ast.MemberExpression{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 47,
																												Line:   93,
																											},
																											File:   "",
																											Source: "obj.routingKey",
																											Start: ast.Position{
																												Column: 33,
																												Line:   93,
																											},
																										},
																									},
																									Object: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 36,
																													Line:   93,
																												},
																												File:   "",
																												Source: "obj",
																												Start: ast.Position{
																													Column: 33,
																													Line:   93,
																												},
																											},
																										},
																										Name: "obj",
																									},
																									Property: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 47,
																													Line:   93,
																												},
																												File:   "",
																												Source: "routingKey",
																												Start: ast.Position{
																													Column: 37,
																													Line:   93,
																												},
																											},
																										},
																										Name: "routingKey",
																									},
																								},
																							}, &ast.Property{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 39,
																											Line:   94,
																										},
																										File:   "",
																										Source: "client: obj.client",
																										Start: ast.Position{
																											Column: 21,
																											Line:   94,
																										},
																									},
																								},
																								Key: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 27,
																												Line:   94,
																											},
																											File:   "",
																											Source: "client",
																											Start: ast.Position{
																												Column: 21,
																												Line:   94,
																											},
																										},
																									},
																									Name: "client",
																								},
																								Value: &ast.MemberExpression{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 39,
																												Line:   94,
																											},
																											File:   "",
																											Source: "obj.client",
																											Start: ast.Position{
																												Column: 29,
																												Line:   94,
																											},
																										},
																									},
																									Object: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 32,
																													Line:   94,
																												},
																												File:   "",
																												Source: "obj",
																												Start: ast.Position{
																													Column: 29,
																													Line:   94,
																												},
																											},
																										},
																										Name: "obj",
																									},
																									Property: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 39,
																													Line:   94,
																												},
																												File:   "",
																												Source: "client",
																												Start: ast.Position{
																													Column: 33,
																													Line:   94,
																												},
																											},
																										},
																										Name: "client",
																									},
																								},
																							}, &ast.Property{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 45,
																											Line:   95,
																										},
																										File:   "",
																										Source: "clientURL: obj.clientURL",
																										Start: ast.Position{
																											Column: 21,
																											Line:   95,
																										},
																									},
																								},
																								Key: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 30,
																												Line:   95,
																											},
																											File:   "",
																											Source: "clientURL",
																											Start: ast.Position{
																												Column: 21,
																												Line:   95,
																											},
																										},
																									},
																									Name: "clientURL",
																								},
																								Value: &ast.MemberExpression{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 45,
																												Line:   95,
																											},
																											File:   "",
																											Source: "obj.clientURL",
																											Start: ast.Position{
																												Column: 32,
																												Line:   95,
																											},
																										},
																									},
																									Object: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 35,
																													Line:   95,
																												},
																												File:   "",
																												Source: "obj",
																												Start: ast.Position{
																													Column: 32,
																													Line:   95,
																												},
																											},
																										},
																										Name: "obj",
																									},
																									Property: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 45,
																													Line:   95,
																												},
																												File:   "",
																												Source: "clientURL",
																												Start: ast.Position{
																													Column: 36,
																													Line:   95,
																												},
																											},
																										},
																										Name: "clientURL",
																									},
																								},
																							}, &ast.Property{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 51,
																											Line:   96,
																										},
																										File:   "",
																										Source: "dedupKey: r._pagerdutyDedupKey",
																										Start: ast.Position{
																											Column: 21,
																											Line:   96,
																										},
																									},
																								},
																								Key: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 29,
																												Line:   96,
																											},
																											File:   "",
																											Source: "dedupKey",
																											Start: ast.Position{
																												Column: 21,
																												Line:   96,
																											},
																										},
																									},
																									Name: "dedupKey",
																								},
																								Value: &ast.MemberExpression{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 51,
																												Line:   96,
																											},
																											File:   "",
																											Source: "r._pagerdutyDedupKey",
																											Start: ast.Position{
																												Column: 31,
																												Line:   96,
																											},
																										},
																									},
																									Object: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 32,
																													Line:   96,
																												},
																												File:   "",
																												Source: "r",
																												Start: ast.Position{
																													Column: 31,
																													Line:   96,
																												},
																											},
																										},
																										Name: "r",
																									},
																									Property: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 51,
																													Line:   96,
																												},
																												File:   "",
																												Source: "_pagerdutyDedupKey",
																												Start: ast.Position{
																													Column: 33,
																													Line:   96,
																												},
																											},
																										},
																										Name: "_pagerdutyDedupKey",
																									},
																								},
																							}, &ast.Property{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 37,
																											Line:   97,
																										},
																										File:   "",
																										Source: "class: obj.class",
																										Start: ast.Position{
																											Column: 21,
																											Line:   97,
																										},
																									},
																								},
																								Key: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 26,
																												Line:   97,
																											},
																											File:   "",
																											Source: "class",
																											Start: ast.Position{
																												Column: 21,
																												Line:   97,
																											},
																										},
																									},
																									Name: "class",
																								},
																								Value: &ast.MemberExpression{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 37,
																												Line:   97,
																											},
																											File:   "",
																											Source: "obj.class",
																											Start: ast.Position{
																												Column: 28,
																												Line:   97,
																											},
																										},
																									},
																									Object: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 31,
																													Line:   97,
																												},
																												File:   "",
																												Source: "obj",
																												Start: ast.Position{
																													Column: 28,
																													Line:   97,
																												},
																											},
																										},
																										Name: "obj",
																									},
																									Property: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 37,
																													Line:   97,
																												},
																												File:   "",
																												Source: "class",
																												Start: ast.Position{
																													Column: 32,
																													Line:   97,
																												},
																											},
																										},
																										Name: "class",
																									},
																								},
																							}, &ast.Property{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 37,
																											Line:   98,
																										},
																										File:   "",
																										Source: "group: obj.group",
																										Start: ast.Position{
																											Column: 21,
																											Line:   98,
																										},
																									},
																								},
																								Key: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 26,
																												Line:   98,
																											},
																											File:   "",
																											Source: "group",
																											Start: ast.Position{
																												Column: 21,
																												Line:   98,
																											},
																										},
																									},
																									Name: "group",
																								},
																								Value: &ast.MemberExpression{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 37,
																												Line:   98,
																											},
																											File:   "",
																											Source: "obj.group",
																											Start: ast.Position{
																												Column: 28,
																												Line:   98,
																											},
																										},
																									},
																									Object: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 31,
																													Line:   98,
																												},
																												File:   "",
																												Source: "obj",
																												Start: ast.Position{
																													Column: 28,
																													Line:   98,
																												},
																											},
																										},
																										Name: "obj",
																									},
																									Property: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 37,
																													Line:   98,
																												},
																												File:   "",
																												Source: "group",
																												Start: ast.Position{
																													Column: 32,
																													Line:   98,
																												},
																											},
																										},
																										Name: "group",
																									},
																								},
																							}, &ast.Property{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 43,
																											Line:   99,
																										},
																										File:   "",
																										Source: "severity: obj.severity",
																										Start: ast.Position{
																											Column: 21,
																											Line:   99,
																										},
																									},
																								},
																								Key: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 29,
																												Line:   99,
																											},
																											File:   "",
																											Source: "severity",
																											Start: ast.Position{
																												Column: 21,
																												Line:   99,
																											},
																										},
																									},
																									Name: "severity",
																								},
																								Value: &ast.MemberExpression{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 43,
																												Line:   99,
																											},
																											File:   "",
																											Source: "obj.severity",
																											Start: ast.Position{
																												Column: 31,
																												Line:   99,
																											},
																										},
																									},
																									Object: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 34,
																													Line:   99,
																												},
																												File:   "",
																												Source: "obj",
																												Start: ast.Position{
																													Column: 31,
																													Line:   99,
																												},
																											},
																										},
																										Name: "obj",
																									},
																									Property: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 43,
																													Line:   99,
																												},
																												File:   "",
																												Source: "severity",
																												Start: ast.Position{
																													Column: 35,
																													Line:   99,
																												},
																											},
																										},
																										Name: "severity",
																									},
																								},
																							}, &ast.Property{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 49,
																											Line:   100,
																										},
																										File:   "",
																										Source: "eventAction: obj.eventAction",
																										Start: ast.Position{
																											Column: 21,
																											Line:   100,
																										},
																									},
																								},
																								Key: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 32,
																												Line:   100,
																											},
																											File:   "",
																											Source: "eventAction",
																											Start: ast.Position{
																												Column: 21,
																												Line:   100,
																											},
																										},
																									},
																									Name: "eventAction",
																								},
																								Value: &ast.MemberExpression{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 49,
																												Line:   100,
																											},
																											File:   "",
																											Source: "obj.eventAction",
																											Start: ast.Position{
																												Column: 34,
																												Line:   100,
																											},
																										},
																									},
																									Object: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 37,
																													Line:   100,
																												},
																												File:   "",
																												Source: "obj",
																												Start: ast.Position{
																													Column: 34,
																													Line:   100,
																												},
																											},
																										},
																										Name: "obj",
																									},
																									Property: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 49,
																													Line:   100,
																												},
																												File:   "",
																												Source: "eventAction",
																												Start: ast.Position{
																													Column: 38,
																													Line:   100,
																												},
																											},
																										},
																										Name: "eventAction",
																									},
																								},
																							}, &ast.Property{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 39,
																											Line:   101,
																										},
																										File:   "",
																										Source: "source: obj.source",
																										Start: ast.Position{
																											Column: 21,
																											Line:   101,
																										},
																									},
																								},
																								Key: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 27,
																												Line:   101,
																											},
																											File:   "",
																											Source: "source",
																											Start: ast.Position{
																												Column: 21,
																												Line:   101,
																											},
																										},
																									},
																									Name: "source",
																								},
																								Value: &ast.MemberExpression{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 39,
																												Line:   101,
																											},
																											File:   "",
																											Source: "obj.source",
																											Start: ast.Position{
																												Column: 29,
																												Line:   101,
																											},
																										},
																									},
																									Object: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 32,
																													Line:   101,
																												},
																												File:   "",
																												Source: "obj",
																												Start: ast.Position{
																													Column: 29,
																													Line:   101,
																												},
																											},
																										},
																										Name: "obj",
																									},
																									Property: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 39,
																													Line:   101,
																												},
																												File:   "",
																												Source: "source",
																												Start: ast.Position{
																													Column: 33,
																													Line:   101,
																												},
																											},
																										},
																										Name: "source",
																									},
																								},
																							}, &ast.Property{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 41,
																											Line:   102,
																										},
																										File:   "",
																										Source: "summary: obj.summary",
																										Start: ast.Position{
																											Column: 21,
																											Line:   102,
																										},
																									},
																								},
																								Key: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 28,
																												Line:   102,
																											},
																											File:   "",
																											Source: "summary",
																											Start: ast.Position{
																												Column: 21,
																												Line:   102,
																											},
																										},
																									},
																									Name: "summary",
																								},
																								Value: &ast.MemberExpression{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 41,
																												Line:   102,
																											},
																											File:   "",
																											Source: "obj.summary",
																											Start: ast.Position{
																												Column: 30,
																												Line:   102,
																											},
																										},
																									},
																									Object: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 33,
																													Line:   102,
																												},
																												File:   "",
																												Source: "obj",
																												Start: ast.Position{
																													Column: 30,
																													Line:   102,
																												},
																											},
																										},
																										Name: "obj",
																									},
																									Property: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 41,
																													Line:   102,
																												},
																												File:   "",
																												Source: "summary",
																												Start: ast.Position{
																													Column: 34,
																													Line:   102,
																												},
																											},
																										},
																										Name: "summary",
																									},
																								},
																							}, &ast.Property{
																								BaseNode: ast.BaseNode{
																									Errors: nil,
																									Loc: &ast.SourceLocation{
																										End: ast.Position{
																											Column: 45,
																											Line:   103,
																										},
																										File:   "",
																										Source: "timestamp: obj.timestamp",
																										Start: ast.Position{
																											Column: 21,
																											Line:   103,
																										},
																									},
																								},
																								Key: &ast.Identifier{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 30,
																												Line:   103,
																											},
																											File:   "",
																											Source: "timestamp",
																											Start: ast.Position{
																												Column: 21,
																												Line:   103,
																											},
																										},
																									},
																									Name: "timestamp",
																								},
																								Value: &ast.MemberExpression{
																									BaseNode: ast.BaseNode{
																										Errors: nil,
																										Loc: &ast.SourceLocation{
																											End: ast.Position{
																												Column: 45,
																												Line:   103,
																											},
																											File:   "",
																											Source: "obj.timestamp",
																											Start: ast.Position{
																												Column: 32,
																												Line:   103,
																											},
																										},
																									},
																									Object: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 35,
																													Line:   103,
																												},
																												File:   "",
																												Source: "obj",
																												Start: ast.Position{
																													Column: 32,
																													Line:   103,
																												},
																											},
																										},
																										Name: "obj",
																									},
																									Property: &ast.Identifier{
																										BaseNode: ast.BaseNode{
																											Errors: nil,
																											Loc: &ast.SourceLocation{
																												End: ast.Position{
																													Column: 45,
																													Line:   103,
																												},
																												File:   "",
																												Source: "timestamp",
																												Start: ast.Position{
																													Column: 36,
																													Line:   103,
																												},
																											},
																										},
																										Name: "timestamp",
																									},
																								},
																							}},
																							With: nil,
																						}},
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 18,
																									Line:   104,
																								},
																								File:   "",
																								Source: "sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                )",
																								Start: ast.Position{
																									Column: 55,
																									Line:   92,
																								},
																							},
																						},
																						Callee: &ast.Identifier{
																							BaseNode: ast.BaseNode{
																								Errors: nil,
																								Loc: &ast.SourceLocation{
																									End: ast.Position{
																										Column: 64,
																										Line:   92,
																									},
																									File:   "",
																									Source: "sendEvent",
																									Start: ast.Position{
																										Column: 55,
																										Line:   92,
																									},
																								},
																							},
																							Name: "sendEvent",
																						},
																					},
																					Operator: 2,
																					Right: &ast.IntegerLiteral{
																						BaseNode: ast.BaseNode{
																							Errors: nil,
																							Loc: &ast.SourceLocation{
																								End: ast.Position{
																									Column: 24,
																									Line:   104,
																								},
																								File:   "",
																								Source: "100",
																								Start: ast.Position{
																									Column: 21,
																									Line:   104,
																								},
																							},
																						},
																						Value: int64(100),
																					},
																				},
																			},
																		},
																	}},
																	With: nil,
																}},
																BaseNode: ast.BaseNode{
																	Errors: nil,
																	Loc: &ast.SourceLocation{
																		End: ast.Position{
																			Column: 26,
																			Line:   104,
																		},
																		File:   "",
																		Source: "string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))",
																		Start: ast.Position{
																			Column: 39,
																			Line:   92,
																		},
																	},
																},
																Callee: &ast.Identifier{
																	BaseNode: ast.BaseNode{
																		Errors: nil,
																		Loc: &ast.SourceLocation{
																			End: ast.Position{
																				Column: 45,
																				Line:   92,
																			},
																			File:   "",
																			Source: "string",
																			Start: ast.Position{
																				Column: 39,
																				Line:   92,
																			},
																		},
																	},
																	Name: "string",
																},
															},
														}},
														With: &ast.Identifier{
															BaseNode: ast.BaseNode{
																Errors: nil,
																Loc: &ast.SourceLocation{
																	End: ast.Position{
																		Column: 26,
																		Line:   92,
																	},
																	File:   "",
																	Source: "r",
																	Start: ast.Position{
																		Column: 25,
																		Line:   92,
																	},
																},
															},
															Name: "r",
														},
													},
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 27,
																Line:   104,
															},
															File:   "",
															Source: "return {r with _sent: string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))}",
															Start: ast.Position{
																Column: 17,
																Line:   92,
															},
														},
													},
												}},
											},
											Params: []*ast.Property{&ast.Property{
												BaseNode: ast.BaseNode{
													Errors: nil,
													Loc: &ast.SourceLocation{
														End: ast.Position{
															Column: 26,
															Line:   89,
														},
														File:   "",
														Source: "r",
														Start: ast.Position{
															Column: 25,
															Line:   89,
														},
													},
												},
												Key: &ast.Identifier{
													BaseNode: ast.BaseNode{
														Errors: nil,
														Loc: &ast.SourceLocation{
															End: ast.Position{
																Column: 26,
																Line:   89,
															},
															File:   "",
															Source: "r",
															Start: ast.Position{
																Column: 25,
																Line:   89,
															},
														},
													},
													Name: "r",
												},
												Value: nil,
											}},
										},
									}},
									With: nil,
								}},
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 15,
											Line:   105,
										},
										File:   "",
										Source: "map(fn: (r) => {\n                obj = mapFn(r: r)\n                \n                return {r with _sent: string(v: 2 == (sendEvent(pagerdutyURL: url,\n                    routingKey: obj.routingKey,\n                    client: obj.client,\n                    clientURL: obj.clientURL,\n                    dedupKey: r._pagerdutyDedupKey,\n                    class: obj.class,\n                    group: obj.group,\n                    severity: obj.severity,\n                    eventAction: obj.eventAction,\n                    source: obj.source,\n                    summary: obj.summary,\n                    timestamp: obj.timestamp,\n                ) / 100))}\n            })",
										Start: ast.Position{
											Column: 16,
											Line:   89,
										},
									},
								},
								Callee: &ast.Identifier{
									BaseNode: ast.BaseNode{
										Errors: nil,
										Loc: &ast.SourceLocation{
											End: ast.Position{
												Column: 19,
												Line:   89,
											},
											File:   "",
											Source: "map",
											Start: ast.Position{
												Column: 16,
												Line:   89,
											},
										},
									},
									Name: "map",
								},
							},
						},
						Params: []*ast.Property{&ast.Property{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   87,
									},
									File:   "",
									Source: "tables=<-",
									Start: ast.Position{
										Column: 10,
										Line:   87,
									},
								},
							},
							Key: &ast.Identifier{
								BaseNode: ast.BaseNode{
									Errors: nil,
									Loc: &ast.SourceLocation{
										End: ast.Position{
											Column: 16,
											Line:   87,
										},
										File:   "",
										Source: "tables",
										Start: ast.Position{
											Column: 10,
											Line:   87,
										},
									},
								},
								Name: "tables",
							},
							Value: &ast.PipeLiteral{BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 19,
										Line:   87,
									},
									File:   "",
									Source: "<-",
									Start: ast.Position{
										Column: 17,
										Line:   87,
									},
								},
							}},
						}},
					},
					Params: []*ast.Property{&ast.Property{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 11,
									Line:   86,
								},
								File:   "",
								Source: "mapFn",
								Start: ast.Position{
									Column: 6,
									Line:   86,
								},
							},
						},
						Key: &ast.Identifier{
							BaseNode: ast.BaseNode{
								Errors: nil,
								Loc: &ast.SourceLocation{
									End: ast.Position{
										Column: 11,
										Line:   86,
									},
									File:   "",
									Source: "mapFn",
									Start: ast.Position{
										Column: 6,
										Line:   86,
									},
								},
							},
							Name: "mapFn",
						},
						Value: nil,
					}},
				},
				Params: []*ast.Property{&ast.Property{
					BaseNode: ast.BaseNode{
						Errors: nil,
						Loc: &ast.SourceLocation{
							End: ast.Position{
								Column: 27,
								Line:   85,
							},
							File:   "",
							Source: "url=defaultURL",
							Start: ast.Position{
								Column: 13,
								Line:   85,
							},
						},
					},
					Key: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 16,
									Line:   85,
								},
								File:   "",
								Source: "url",
								Start: ast.Position{
									Column: 13,
									Line:   85,
								},
							},
						},
						Name: "url",
					},
					Value: &ast.Identifier{
						BaseNode: ast.BaseNode{
							Errors: nil,
							Loc: &ast.SourceLocation{
								End: ast.Position{
									Column: 27,
									Line:   85,
								},
								File:   "",
								Source: "defaultURL",
								Start: ast.Position{
									Column: 17,
									Line:   85,
								},
							},
						},
						Name: "defaultURL",
					},
				}},
			},
		}},
		Imports: []*ast.ImportDeclaration{&ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   3,
					},
					File:   "",
					Source: "import \"http\"",
					Start: ast.Position{
						Column: 1,
						Line:   3,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   3,
						},
						File:   "",
						Source: "\"http\"",
						Start: ast.Position{
							Column: 8,
							Line:   3,
						},
					},
				},
				Value: "http",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 14,
						Line:   4,
					},
					File:   "",
					Source: "import \"json\"",
					Start: ast.Position{
						Column: 1,
						Line:   4,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 14,
							Line:   4,
						},
						File:   "",
						Source: "\"json\"",
						Start: ast.Position{
							Column: 8,
							Line:   4,
						},
					},
				},
				Value: "json",
			},
		}, &ast.ImportDeclaration{
			As: nil,
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 17,
						Line:   5,
					},
					File:   "",
					Source: "import \"strings\"",
					Start: ast.Position{
						Column: 1,
						Line:   5,
					},
				},
			},
			Path: &ast.StringLiteral{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 17,
							Line:   5,
						},
						File:   "",
						Source: "\"strings\"",
						Start: ast.Position{
							Column: 8,
							Line:   5,
						},
					},
				},
				Value: "strings",
			},
		}},
		Metadata: "parser-type=rust",
		Name:     "pagerduty.flux",
		Package: &ast.PackageClause{
			BaseNode: ast.BaseNode{
				Errors: nil,
				Loc: &ast.SourceLocation{
					End: ast.Position{
						Column: 18,
						Line:   1,
					},
					File:   "",
					Source: "package pagerduty",
					Start: ast.Position{
						Column: 1,
						Line:   1,
					},
				},
			},
			Name: &ast.Identifier{
				BaseNode: ast.BaseNode{
					Errors: nil,
					Loc: &ast.SourceLocation{
						End: ast.Position{
							Column: 18,
							Line:   1,
						},
						File:   "",
						Source: "pagerduty",
						Start: ast.Position{
							Column: 9,
							Line:   1,
						},
					},
				},
				Name: "pagerduty",
			},
		},
	}},
	Package: "pagerduty",
	Path:    "pagerduty",
}
