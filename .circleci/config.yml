version: 2
jobs:
  test:
    docker:
      - image: quay.io/influxdb/flux-build:latest
    resource_class: large
    environment:
      GOCACHE: /tmp/go-cache
      GOFLAGS: -p=8
      GOPATH: /tmp/go
      GO111MODULE: 'on' # must be quoted to force string type instead of boolean type
      SCCACHE_CACHE_SIZE: 1G
    steps:
      - checkout
      # Populate GOPATH/pkg.
      - restore_cache:
          name: Restoring GOPATH/pkg/mod
          keys:
            - flux-gomod-{{checksum "go.sum"}}
      # Populate Rust cache
      - restore_cache:
          name: Restoring Rust Cache
          keys:
            - flux-rust-{{ .Branch }}-{{ .Revision }} # Matches when retrying a single run.
            - flux-rust-{{ .Branch }}-                # Matches a new commit on an existing branch.
            - flux-rust-                              # Matches a new branch.
      # Run tests
      - run: make checkgenerate
      - run: make checkfmt
      - run: make checktidy
      - run: make checkdocs
      - run: make checkrelease
      - run: make vet
      - run: GOGC=50 make staticcheck
      - run: make libflux-wasm
      - run: make test GO_TEST_FLAGS='-coverprofile=coverage.txt -covermode=atomic' GO_TAGS=assert
      - save_cache:
          name: Saving GOPATH/pkg/mod
          key: flux-gomod-{{checksum "go.sum"}}
          paths:
            - /tmp/go/pkg/mod
      - save_cache:
          name: Saving Rust Cache
          key: flux-rust-{{ .Branch }}-{{ .Revision }}
          paths:
            - "~/.cache/sccache"
          when: always
  test-race:
    docker:
      - image: quay.io/influxdb/flux-build:latest
    resource_class: large
    environment:
      GOPATH: /tmp/go
      GOFLAGS: -p=8
      GO111MODULE: 'on' # must be quoted to force string type instead of boolean type
    steps:
      - checkout
      # Building go with -race does not use the cache
      # Populate GOPATH/pkg.
      - restore_cache:
          name: Restoring GOPATH/pkg/mod
          keys:
            - flux-gomod-{{checksum "go.sum"}}
      # Run tests
      - run: make test-race GO_TAGS=assert
      # No need to save the pkg/mod cache since the other job does it
  test-bench:
    docker:
      - image: quay.io/influxdb/flux-build:latest
    environment:
      GOPATH: /tmp/go
      GOFLAGS: -p=1
      GO111MODULE: 'on' # must be quoted to force string type instead of boolean type
    steps:
      - checkout
      - restore_cache:
          name: Restoring GOPATH/pkg/mod
          keys:
            - flux-gomod-{{checksum "go.sum"}}
      # Run tests
      - run:
          command: make test-bench
          no_output_timeout: 20m
      # No need to save the pkg/mod cache since the other job does it
  test-build-reproducibility:
    docker:
      - image: quay.io/influxdb/flux-build:latest
    steps:
      - checkout
      - run: make checkreproducibility
  test-valgrind:
    docker:
      - image: quay.io/influxdb/flux-build:latest
    steps:
      - checkout
      - run: make test-valgrind
  build-windows:
    machine:
      image: windows-server-2019-vs2019:stable
    resource_class: windows.medium
    shell: bash.exe -eo pipefail
    steps:
      - run:
          name: Install system dependencies
          command: |
            choco install git
            git clone https://github.com/influxdata/rustup.install.git "${TMP}/rustup.install"
            cd "${TMP}/rustup.install"
              git checkout bump-v1.25.1
              choco pack --pre ./rustup.install.nuspec
              choco install rustup.install --source="C:\Users\circleci\AppData\Local\Temp\rustup.install"
            cd -
            choco upgrade golang --version=1.21 --allow-downgrade

            choco install \
              grep \
              llvm \
              pkgconfiglite

            # rustc depends on a version of libgcc_eh that isn't present in the latest mingw.
            choco install mingw --version=8.1.0

            echo 'export PATH="${HOME}/.cargo/bin:/c/Program Files/Go/bin:${PATH}"' >> $BASH_ENV
      - checkout
      - run:
          name: Pin rust version and install mingw rustup target
          command: |
            RUST_VERSION=$(sed -E -ne 's/channel = "(.*)"/\1/p' rust-toolchain.toml)
            if [ -z "$RUST_VERSION" ]; then
              echo "Error: couldn't parse Rust version from rust-toolchain.toml!"
              exit 1
            fi
            rustup default ${RUST_VERSION}
            rustup target add x86_64-pc-windows-gnu
            # Cargo's built-in support for fetching dependencies from GitHub requires
            # an ssh agent to be set up, which doesn't work on Circle's Windows executors.
            # See https://github.com/rust-lang/cargo/issues/1851#issuecomment-450130685
            cat <<EOF >> ~/.cargo/config
            [net]
            git-fetch-with-cli = true
            EOF
      - run:
          name: Install pkg-config wrapper
          command: |
            export GOPATH="${HOME}/go"
            echo "export GOPATH='${GOPATH}'" >> $BASH_ENV
            mkdir -p "${GOPATH}/bin"
            echo 'export PATH="${GOPATH}/bin:${PATH}"' >> $BASH_ENV
            go install github.com/influxdata/pkg-config
      - run:
          name: Generate libflux
          command: go generate ./libflux/go/libflux
      - run:
          name: Build flux
          no_output_timeout: 20m
          command: go build ./...

  release:
    docker:
      - image: quay.io/influxdb/flux-build:latest
    environment:
      GOCACHE: /tmp/go-cache
      GOFLAGS: -p=8
      GOPATH: /tmp/go
      GO111MODULE: 'on' # must be quoted to force string type instead of boolean type
    steps:
      - checkout
      - run:
          name: Generate changelog
          command: |
            ./gotool.sh github.com/influxdata/changelog generate \
                --version $CIRCLE_TAG \
                --commit-url https://github.com/influxdata/flux/commit \
                -o release-notes.txt
      - run:
          name: Install pkg-config
          command: go build -o /go/bin/pkg-config github.com/influxdata/pkg-config
      # Make the flux documentation JSON archives to add to the release
      - run: make fluxdocs
      - run:
          # Parallelism for goreleaser must be set to 1 so it doesn't
          # attempt to invoke pkg-config, which invokes cargo,
          # for multiple targets at the same time.
          name: Perform release
          command: |
            ./gotool.sh github.com/goreleaser/goreleaser release \
                --rm-dist -p 1 --release-notes release-notes.txt

  build-ci-image:
    machine:
      image: ubuntu-2204:current
      resource_class: medium
    steps:
      - checkout
      - run:
          name: Build docker image
          command: ./etc/build-ci-image.sh
      - run:
          name: Publish docker image
          command: ./etc/publish-ci-image.sh

workflows:
  version: 2
  build-and-test:
    jobs:
      - test
      - test-race
      - test-bench
      - test-build-reproducibility
      - test-valgrind
      - build-windows

  release:
    jobs:
      - release:
          filters:
            tags:
              only: /^v\d\.\d+\.\d+$/
            branches:
              ignore: /.*/

  image:
    jobs:
      - build-ci-image:
          filters:
            branches:
              only:
                - master
                - /^ci\/.*/
