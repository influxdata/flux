// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbsemantic

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Duration struct {
	_tab flatbuffers.Table
}

func GetRootAsDuration(buf []byte, offset flatbuffers.UOffsetT) *Duration {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Duration{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Duration) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Duration) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Duration) Months() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Duration) MutateMonths(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Duration) Nanoseconds() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Duration) MutateNanoseconds(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *Duration) Negative() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Duration) MutateNegative(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func DurationStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DurationAddMonths(builder *flatbuffers.Builder, months int64) {
	builder.PrependInt64Slot(0, months, 0)
}
func DurationAddNanoseconds(builder *flatbuffers.Builder, nanoseconds int64) {
	builder.PrependInt64Slot(1, nanoseconds, 0)
}
func DurationAddNegative(builder *flatbuffers.Builder, negative bool) {
	builder.PrependBoolSlot(2, negative, false)
}
func DurationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
