// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbsemantic

type Operator = int8

const (
	OperatorMultiplicationOperator   Operator = 0
	OperatorDivisionOperator         Operator = 1
	OperatorModuloOperator           Operator = 2
	OperatorPowerOperator            Operator = 3
	OperatorAdditionOperator         Operator = 4
	OperatorSubtractionOperator      Operator = 5
	OperatorLessThanEqualOperator    Operator = 6
	OperatorLessThanOperator         Operator = 7
	OperatorGreaterThanEqualOperator Operator = 8
	OperatorGreaterThanOperator      Operator = 9
	OperatorStartsWithOperator       Operator = 10
	OperatorInOperator               Operator = 11
	OperatorNotOperator              Operator = 12
	OperatorExistsOperator           Operator = 13
	OperatorNotEmptyOperator         Operator = 14
	OperatorEmptyOperator            Operator = 15
	OperatorEqualOperator            Operator = 16
	OperatorNotEqualOperator         Operator = 17
	OperatorRegexpMatchOperator      Operator = 18
	OperatorNotRegexpMatchOperator   Operator = 19
	OperatorInvalidOperator          Operator = 20
)

var EnumNamesOperator = map[Operator]string{
	OperatorMultiplicationOperator:   "MultiplicationOperator",
	OperatorDivisionOperator:         "DivisionOperator",
	OperatorModuloOperator:           "ModuloOperator",
	OperatorPowerOperator:            "PowerOperator",
	OperatorAdditionOperator:         "AdditionOperator",
	OperatorSubtractionOperator:      "SubtractionOperator",
	OperatorLessThanEqualOperator:    "LessThanEqualOperator",
	OperatorLessThanOperator:         "LessThanOperator",
	OperatorGreaterThanEqualOperator: "GreaterThanEqualOperator",
	OperatorGreaterThanOperator:      "GreaterThanOperator",
	OperatorStartsWithOperator:       "StartsWithOperator",
	OperatorInOperator:               "InOperator",
	OperatorNotOperator:              "NotOperator",
	OperatorExistsOperator:           "ExistsOperator",
	OperatorNotEmptyOperator:         "NotEmptyOperator",
	OperatorEmptyOperator:            "EmptyOperator",
	OperatorEqualOperator:            "EqualOperator",
	OperatorNotEqualOperator:         "NotEqualOperator",
	OperatorRegexpMatchOperator:      "RegexpMatchOperator",
	OperatorNotRegexpMatchOperator:   "NotRegexpMatchOperator",
	OperatorInvalidOperator:          "InvalidOperator",
}
