// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package fbsemantic

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Argument struct {
	_tab flatbuffers.Table
}

func GetRootAsArgument(buf []byte, offset flatbuffers.UOffsetT) *Argument {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Argument{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Argument) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Argument) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Argument) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Argument) TType() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Argument) MutateTType(n byte) bool {
	return rcv._tab.MutateByteSlot(6, n)
}

func (rcv *Argument) T(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *Argument) Pipe() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Argument) MutatePipe(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *Argument) Optional() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Argument) MutateOptional(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func ArgumentStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ArgumentAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func ArgumentAddTType(builder *flatbuffers.Builder, tType byte) {
	builder.PrependByteSlot(1, tType, 0)
}
func ArgumentAddT(builder *flatbuffers.Builder, t flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(t), 0)
}
func ArgumentAddPipe(builder *flatbuffers.Builder, pipe bool) {
	builder.PrependBoolSlot(3, pipe, false)
}
func ArgumentAddOptional(builder *flatbuffers.Builder, optional bool) {
	builder.PrependBoolSlot(4, optional, false)
}
func ArgumentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
